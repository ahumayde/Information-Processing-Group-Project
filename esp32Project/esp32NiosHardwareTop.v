
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module esp32NiosHardwareTop(

	//////////// CLOCK //////////
	input 		          		ADC_CLK_10,
	input 		          		MAX10_CLK1_50,
	input 		          		MAX10_CLK2_50,

	//////////// SDRAM //////////
	output		    [12:0]		DRAM_ADDR,
	output		     [1:0]		DRAM_BA,
	output		          		DRAM_CAS_N,
	output		          		DRAM_CKE,
	output		          		DRAM_CLK,
	output		          		DRAM_CS_N,
	inout 		    [15:0]		DRAM_DQ,
	output		          		DRAM_LDQM,
	output		          		DRAM_RAS_N,
	output		          		DRAM_UDQM,
	output		          		DRAM_WE_N,

	//////////// SEG7 //////////
	output		     [7:0]		HEX0,
	output		     [7:0]		HEX1,
	output		     [7:0]		HEX2,
	output		     [7:0]		HEX3,
	output		     [7:0]		HEX4,
	output		     [7:0]		HEX5,

	//////////// KEY //////////
	input 		     [1:0]		KEY,

	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// SW //////////
	input 		     [9:0]		SW,

	//////////// VGA //////////
	output		     [3:0]		VGA_B,
	output		     [3:0]		VGA_G,
	output		          		VGA_HS,
	output		     [3:0]		VGA_R,
	output		          		VGA_VS,

	//////////// Accelerometer //////////
	output		          		GSENSOR_CS_N,
	input 		     [2:1]		GSENSOR_INT,
	output		          		GSENSOR_SCLK,
	inout 		          		GSENSOR_SDI,
	inout 		          		GSENSOR_SDO,

	//////////// Arduino //////////
	inout 		    [15:0]		ARDUINO_IO,
	inout 		          		ARDUINO_RESET_N,

	//////////// GPIO, GPIO connect to GPIO Default //////////
	inout 		    [35:0]		GPIO
);



//=======================================================
//  REG/WIRE declarations
//=======================================================




//=======================================================
//  Structural coding
//=======================================================


esp32SPIHardware u0 (
	.accelerometer_spi_I2C_SDAT      (GSENSOR_SDI),      // accelerometer_spi.I2C_SDAT
	.accelerometer_spi_I2C_SCLK      (GSENSOR_SCLK),      //                  .I2C_SCLK
	.accelerometer_spi_G_SENSOR_CS_N (GSENSOR_CS_N), //                  .G_SENSOR_CS_N
	.accelerometer_spi_G_SENSOR_INT  (GSENSOR_INT),  //                  .G_SENSOR_INT
	.dram_addr                       (DRAM_ADDR),                       //              dram.addr
	.dram_ba                         (DRAM_BA),                         //                  .ba
	.dram_cas_n                      (DRAM_CAS_N),                      //                  .cas_n
	.dram_cke                        (DRAM_CKE),                        //                  .cke
	.dram_cs_n                       (DRAM_CS_N),                       //                  .cs_n
	.dram_dq                         (DRAM_DQ),                         //                  .dq
	.dram_dqm                        ({DRAM_UDQM, DRAM_LDQM}),                        //                  .dqm
	.dram_ras_n                      (DRAM_RAS_N),                      //                  .ras_n
	.dram_we_n                       (DRAM_WE_N),                       //                  .we_n
	.esp32_spi_MISO                  (ARDUINO_IO[12]),                  //         esp32_spi.MISO
	.esp32_spi_MOSI                  (ARDUINO_IO[11]),                  //                  .MOSI
	.esp32_spi_SCLK                  (ARDUINO_IO[13]),                  //                  .SCLK
	.esp32_spi_SS_n                  (ARDUINO_IO[10]),                  //                  .SS_n
	.sdram_clk_clk                   (DRAM_CLK),                   //         sdram_clk.clk
	.clk_clk                         (MAX10_CLK1_50),                         //               clk.clk
	.reset_reset_n                   (1'b1)                    //             reset.reset_n
);



endmodule
