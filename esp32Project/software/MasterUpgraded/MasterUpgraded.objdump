
MasterUpgraded.elf:     file format elf32-littlenios2
MasterUpgraded.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0400023c

Program Header:
    LOAD off    0x00001000 vaddr 0x04000000 paddr 0x04000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x04000020 paddr 0x04000020 align 2**12
         filesz 0x00013d8c memsz 0x00013d8c flags r-x
    LOAD off    0x00014dac vaddr 0x04013dac paddr 0x040159b0 align 2**12
         filesz 0x00001c04 memsz 0x00001c04 flags rw-
    LOAD off    0x000175b4 vaddr 0x040175b4 paddr 0x040175b4 align 2**12
         filesz 0x00000000 memsz 0x00000164 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  04000000  04000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000021c  04000020  04000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00013424  0400023c  0400023c  0000123c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000074c  04013660  04013660  00014660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001c04  04013dac  040159b0  00014dac  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000164  040175b4  040175b4  000175b4  2**2
                  ALLOC, SMALL_DATA
  6 .dram_controller 00000000  04017718  04017718  000169b0  2**0
                  CONTENTS
  7 .comment      0000002c  00000000  00000000  000169b0  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001110  00000000  00000000  000169e0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0004956d  00000000  00000000  00017af0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000e5d4  00000000  00000000  0006105d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00016545  00000000  00000000  0006f631  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002988  00000000  00000000  00085b78  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00004d00  00000000  00000000  00088500  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000ad51  00000000  00000000  0008d200  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  00097f54  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000015e0  00000000  00000000  00097fb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0009cb92  2**0
                  CONTENTS, READONLY
 18 .cpu          00000009  00000000  00000000  0009cb95  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0009cb9e  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0009cb9f  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000004  00000000  00000000  0009cba0  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000004  00000000  00000000  0009cba4  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000004  00000000  00000000  0009cba8  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000010  00000000  00000000  0009cbac  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000051  00000000  00000000  0009cbbc  2**0
                  CONTENTS, READONLY
 26 .jdi          000051c7  00000000  00000000  0009cc0d  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00058b7a  00000000  00000000  000a1dd4  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04000000 l    d  .entry	00000000 .entry
04000020 l    d  .exceptions	00000000 .exceptions
0400023c l    d  .text	00000000 .text
04013660 l    d  .rodata	00000000 .rodata
04013dac l    d  .rwdata	00000000 .rwdata
040175b4 l    d  .bss	00000000 .bss
04017718 l    d  .dram_controller	00000000 .dram_controller
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../MasterUpgraded_bsp//obj/HAL/src/crt0.o
04000284 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 float2_functionality.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
04000444 l     F .text	000000f0 __sbprintf
040026c4 l     F .text	00000208 cvt
040028cc l     F .text	00000148 exponent
040136e4 l     O .rodata	00000010 blanks.5176
040136f4 l     O .rodata	00000010 zeroes.5177
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
04002bb4 l     F .text	000003a4 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
04004f5c l     F .text	000000f0 std
0400504c l     F .text	0000003c stdin_init
04005088 l     F .text	0000003c stdout_init
040050c4 l     F .text	0000003c stderr_init
040175b4 l     O .bss	00000004 __sfp_recursive_mutex
040175b8 l     O .bss	00000004 __sinit_recursive_mutex
040054e4 l     F .text	00000024 __fp_lock
04005508 l     F .text	00000024 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
04013dac l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 localeconv.c
04005e78 l     F .text	00000024 __get_global_locale
04005e9c l     F .text	00000028 __get_current_locale
04005ec4 l     F .text	00000028 __get_C_locale
00000000 l    df *ABS*	00000000 locale.c
04005fa0 l     F .text	00000024 __get_global_locale
04005fc4 l     F .text	00000028 __get_current_locale
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
04006374 l     F .text	000003c4 malloc_extend_top
00000000 l    df *ABS*	00000000 mbtowc_r.c
040072a0 l     F .text	00000024 __get_global_locale
040072c4 l     F .text	00000028 __get_current_locale
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
04013934 l     O .rodata	0000000c p05.3991
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
04009a58 l     F .text	000000f0 __sbprintf
0401398c l     O .rodata	00000010 blanks.5153
0401399c l     O .rodata	00000010 zeroes.5154
00000000 l    df *ABS*	00000000 wctomb_r.c
0400ae38 l     F .text	00000024 __get_global_locale
0400ae5c l     F .text	00000028 __get_current_locale
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 assert.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fiprintf.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 vfiprintfr_1.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
0400ce90 l     F .text	00000024 __get_global_locale
0400ceb4 l     F .text	00000028 __get_current_locale
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 unorddf2.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
040107e4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
040108f0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
04010954 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_isatty.c
04010a60 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_kill.c
04010b40 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
04010ca8 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
04010d94 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
04010f68 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
040159a0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
040111e0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
04011314 l     F .text	00000034 alt_dev_reg
040148ec l     O .rwdata	00001060 jtag
0401594c l     O .rwdata	0000002c accelerometer
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0401160c l     F .text	00000210 altera_avalon_jtag_uart_irq
0401181c l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
04011e60 l     F .text	00000080 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_accelerometer_spi.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
04012600 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
04012870 l     F .text	000000b0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
04012b1c l     F .text	0000003c alt_get_errno
04012b58 l     F .text	000000b8 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
040175ec l     O .bss	00000004 __atexit_recursive_mutex
040175e8 g     O .bss	00000004 alt_instruction_exception_handler
04009184 g     F .text	000000b4 _mprec_log10
040092fc g     F .text	00000124 __any_on
0400bd58 g     F .text	00000060 _isatty_r
0401390c g     O .rodata	00000028 __mprec_tinytens
04010ea4 g     F .text	0000007c alt_main
04017618 g     O .bss	00000100 alt_irq
0400bdb8 g     F .text	00000070 _lseek_r
040159b0 g       *ABS*	00000000 __flash_rwdata_start
0400f36c g     F .text	00000080 .hidden __eqdf2
04017718 g       *ABS*	00000000 __alt_heap_start
0400d480 g     F .text	00000068 _kill_r
040003dc g     F .text	00000068 printf
0400cedc g     F .text	000000b4 _wcrtomb_r
0400d104 g     F .text	000000b4 _signal_r
04009600 g     F .text	000000a0 __sseek
040053b0 g     F .text	000000b4 __sinit
0400cce8 g     F .text	00000168 __swbuf_r
04005fec g     F .text	00000080 _setlocale_r
04005100 g     F .text	000000a4 __sfmoreglue
04010f44 g     F .text	00000024 __malloc_unlock
04000000 g       *ABS*	00000000 __alt_mem_dram_controller
0400be28 g     F .text	00000208 memmove
0400537c g     F .text	00000034 _cleanup
040078e0 g     F .text	00000124 _Balloc
0400f3ec g     F .text	000000f0 .hidden __gtdf2
04012f10 g     F .text	00000024 altera_nios2_gen2_irq_init
04000000 g     F .entry	0000001c __reset
04005eec g     F .text	00000050 __localeconv_l
040120ac g     F .text	000000d4 alt_up_accelerometer_spi_read_x_axis
04000020 g       *ABS*	00000000 __flash_exceptions_start
0400b71c g     F .text	00000068 _fstat_r
040175cc g     O .bss	00000004 errno
0400951c g     F .text	00000030 __seofread
040175d4 g     O .bss	00000004 alt_argv
0401d978 g       *ABS*	00000000 _gp
040111b0 g     F .text	00000030 usleep
04010a40 g     F .text	00000020 getpid
0401476c g     O .rwdata	00000180 alt_fd_list
040127ac g     F .text	00000090 alt_find_dev
04007594 g     F .text	00000188 memcpy
04005338 g     F .text	00000044 _cleanup_r
04010644 g     F .text	000000bc .hidden __floatsidf
04012920 g     F .text	0000007c alt_io_redirect
0400f4dc g     F .text	000000f0 .hidden __ltdf2
04013660 g       *ABS*	00000000 __DTOR_END__
0401316c g     F .text	00000098 alt_exception_cause_generated_bad_addr
04009068 g     F .text	0000011c __ratio
04009b48 g     F .text	00000050 __vfiprintf_internal
04011a18 g     F .text	00000220 altera_avalon_jtag_uart_read
04000378 g     F .text	00000064 _printf_r
0400e0d4 g     F .text	00000064 .hidden __udivsi3
04010a9c g     F .text	000000a4 isatty
0400d1b8 g     F .text	00000104 _raise_r
0400b01c g     F .text	00000084 __assert_func
0401381c g     O .rodata	000000c8 __mprec_tens
040130dc g     F .text	00000090 alt_icache_flush
040175c0 g     O .bss	00000004 __malloc_top_pad
0400d4e8 g     F .text	00000034 _getpid_r
04005f3c g     F .text	00000034 _localeconv_r
0400b784 g     F .text	000005d4 __sfvwrite_r
04007f60 g     F .text	00000084 __i2b
0400d2bc g     F .text	000000e4 __sigtramp_r
04009420 g     F .text	00000060 _sbrk_r
0400c030 g     F .text	00000070 _read_r
04015998 g     O .rwdata	00000004 alt_max_fd
0400b234 g     F .text	0000012c _fclose_r
04004f08 g     F .text	00000054 fflush
040175c4 g     O .bss	00000004 __malloc_max_sbrked_mem
0401299c g     F .text	00000180 alt_irq_register
0400e194 g     F .text	00000978 .hidden __adddf3
04008c08 g     F .text	000001fc __b2d
0400daac g     F .text	00000534 .hidden __umoddi3
04010dd0 g     F .text	000000d4 lseek
0401597c g     O .rwdata	00000004 _global_impure_ptr
0400c0a0 g     F .text	00000bf4 _realloc_r
04017718 g       *ABS*	00000000 __bss_end
04012e08 g     F .text	00000108 alt_tick
0400d51c g     F .text	00000590 .hidden __udivdi3
0400b62c g     F .text	00000088 _fputwc_r
040138e4 g     O .rodata	00000028 __mprec_bigtens
04007c30 g     F .text	000001b8 __s2b
0400d048 g     F .text	00000020 abort
04010700 g     F .text	00000090 .hidden __floatunsidf
0400874c g     F .text	00000104 __mcmp
0400552c g     F .text	00000040 __fp_lock_all
04012d64 g     F .text	000000a4 alt_alarm_stop
040175dc g     O .bss	00000004 alt_irq_active
040000fc g     F .exceptions	000000cc alt_irq_handler
04014744 g     O .rwdata	00000028 alt_dev_null
040125b4 g     F .text	0000004c alt_dcache_flush_all
04007de8 g     F .text	0000008c __hi0bits
040105c4 g     F .text	00000080 .hidden __fixdfsi
040159b0 g       *ABS*	00000000 __ram_rwdata_end
04015990 g     O .rwdata	00000008 alt_dev_list
0401121c g     F .text	000000f8 write
04013dac g       *ABS*	00000000 __ram_rodata_end
04010990 g     F .text	000000b0 fstat
04010b7c g     F .text	0000012c kill
0400f4dc g     F .text	000000f0 .hidden __ledf2
040083c0 g     F .text	00000170 __pow5mult
04009b98 g     F .text	000012a0 ___vfiprintf_internal_r
0400e138 g     F .text	0000005c .hidden __umodsi3
04017718 g       *ABS*	00000000 end
04011558 g     F .text	000000b4 altera_avalon_jtag_uart_init
040001c8 g     F .exceptions	00000074 alt_instruction_exception_entry
04013660 g       *ABS*	00000000 __CTOR_LIST__
08000000 g       *ABS*	00000000 __alt_stack_pointer
04011ee0 g     F .text	0000007c alt_avalon_timer_sc_init
04010790 g     F .text	00000054 .hidden __clzsi2
04011c38 g     F .text	00000228 altera_avalon_jtag_uart_write
04005464 g     F .text	00000020 __sfp_lock_acquire
040073d8 g     F .text	000001bc memchr
04000584 g     F .text	00002140 ___vfprintf_internal_r
040055ac g     F .text	00000558 _free_r
040139f0 g     O .rodata	00000180 _ctype_b
0400606c g     F .text	00000038 __locale_mb_cur_max
040134d4 g     F .text	0000018c __call_exitprocs
04015984 g     O .rwdata	00000004 __malloc_sbrk_base
0400023c g     F .text	0000004c _start
040175e0 g     O .bss	00000004 _alt_tick_rate
04008530 g     F .text	0000021c __lshift
040175e4 g     O .bss	00000004 _alt_nticks
0400d3d8 g     F .text	00000040 signal
04010fa4 g     F .text	000000fc read
04011384 g     F .text	00000070 alt_sys_init
04011f98 g     F .text	00000044 alt_up_accelerometer_spi_read_address_register
040133bc g     F .text	00000118 __register_exitproc
04007fe4 g     F .text	000003dc __multiply
040118bc g     F .text	00000068 altera_avalon_jtag_uart_close
04013dac g       *ABS*	00000000 __ram_rwdata_start
04013660 g       *ABS*	00000000 __ram_rodata_start
040175f0 g     O .bss	00000028 __malloc_current_mallinfo
04008e04 g     F .text	00000264 __d2b
040113f4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0401303c g     F .text	000000a0 alt_get_fd
0401245c g     F .text	00000158 alt_busy_sleep
04012180 g     F .text	000000d4 alt_up_accelerometer_spi_read_y_axis
0400afbc g     F .text	00000060 _close_r
04013288 g     F .text	00000134 memcmp
040114b4 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
04017718 g       *ABS*	00000000 __alt_stack_base
04011504 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
04002a14 g     F .text	000001a0 __swsetup_r
0400eb0c g     F .text	00000860 .hidden __divdf3
040051a4 g     F .text	00000194 __sfp
04009238 g     F .text	000000c4 __copybits
0401433c g     O .rwdata	00000408 __malloc_av_
040054c4 g     F .text	00000020 __sinit_lock_release
0400f5cc g     F .text	00000670 .hidden __muldf3
04009480 g     F .text	0000009c __sread
04012f34 g     F .text	00000108 alt_find_file
0401263c g     F .text	000000a8 alt_dev_llist_insert
04010f20 g     F .text	00000024 __malloc_lock
040110f8 g     F .text	000000b8 sbrk
04004e80 g     F .text	00000088 _fflush_r
0400b0d0 g     F .text	00000164 _calloc_r
040175b4 g       *ABS*	00000000 __bss_start
0400771c g     F .text	000001c4 memset
040002c4 g     F .text	000000b4 main
040175d8 g     O .bss	00000004 alt_envp
040175c8 g     O .bss	00000004 __malloc_max_total_mem
04011454 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0400ce50 g     F .text	00000040 __swbuf
040096a0 g     F .text	00000054 __sclose
08000000 g       *ABS*	00000000 __alt_heap_limit
0400b360 g     F .text	00000038 fclose
04002f58 g     F .text	00001c2c _dtoa_r
04006738 g     F .text	00000b68 _malloc_r
0400aed4 g     F .text	00000078 __ascii_wctomb
0401599c g     O .rwdata	00000004 alt_errno
0400b398 g     F .text	0000005c _fiprintf_r
0400d418 g     F .text	00000030 _init_signal
04005cc4 g     F .text	000000d8 _fwalk
040072ec g     F .text	00000058 _mbtowc_r
0400dfe0 g     F .text	00000080 .hidden __divsi3
04005b04 g     F .text	000001c0 _malloc_trim_r
04013660 g       *ABS*	00000000 __CTOR_END__
040096f4 g     F .text	00000140 strcmp
04013660 g       *ABS*	00000000 __flash_rodata_start
04013660 g       *ABS*	00000000 __DTOR_LIST__
0400f36c g     F .text	00000080 .hidden __nedf2
04011348 g     F .text	0000003c alt_irq_init
040110a0 g     F .text	00000058 alt_release_fd
04013c74 g     O .rodata	00000100 .hidden __clz_tab
040175bc g     O .bss	00000004 _PathLocale
04013204 g     F .text	0000003c atexit
0400af4c g     F .text	00000070 _write_r
040060a4 g     F .text	00000040 setlocale
04015978 g     O .rwdata	00000004 _impure_ptr
040175d0 g     O .bss	00000004 alt_argc
04004b84 g     F .text	000002fc __sflush_r
04012748 g     F .text	00000064 _do_dtors
04000288 g     F .text	0000003c sendReading
04000020 g       .exceptions	00000000 alt_irq_entry
04007344 g     F .text	00000094 __ascii_mbtowc
04008b44 g     F .text	000000c4 __ulp
0400556c g     F .text	00000040 __fp_unlock_all
04015988 g     O .rwdata	00000008 alt_fs_list
04000020 g       *ABS*	00000000 __ram_exceptions_start
04011f5c g     F .text	0000003c alt_up_accelerometer_spi_open_dev
04005f70 g     F .text	00000030 localeconv
0400628c g     F .text	000000e8 __swhatbuf_r
040159b0 g       *ABS*	00000000 _edata
04017718 g       *ABS*	00000000 _end
0400b454 g     F .text	000001d8 __fputwc
0400023c g       *ABS*	00000000 __ram_exceptions_end
04011924 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0400954c g     F .text	000000b4 __swrite
04015980 g     O .rwdata	00000004 __malloc_trim_threshold
04013240 g     F .text	00000048 exit
0400b3f4 g     F .text	00000060 fiprintf
0400cc94 g     F .text	00000054 _vfiprintf_r
04005d9c g     F .text	000000dc _fwalk_reent
04008850 g     F .text	000002f4 __mdiff
0400e060 g     F .text	00000074 .hidden __modsi3
04012254 g     F .text	000000d4 alt_up_accelerometer_spi_read_z_axis
08000000 g       *ABS*	00000000 __alt_data_end
04000020 g     F .exceptions	00000000 alt_exception
04005484 g     F .text	00000020 __sfp_lock_release
04013b70 g     O .rodata	00000101 _ctype_
04010570 g     F .text	00000054 .hidden __unorddf2
0401091c g     F .text	00000038 _exit
04012328 g     F .text	00000134 alt_alarm_start
04011fdc g     F .text	00000068 alt_up_accelerometer_spi_read
04012044 g     F .text	00000068 alt_up_accelerometer_spi_write
040060e4 g     F .text	000001a8 __smakebuf_r
04009834 g     F .text	000000f4 strlen
0400d068 g     F .text	0000009c _init_signal_r
04012c10 g     F .text	00000154 open
0400f3ec g     F .text	000000f0 .hidden __gedf2
0400b0a0 g     F .text	00000030 __assert
04009928 g     F .text	00000130 __sprint_r
0401283c g     F .text	00000034 alt_icache_flush_all
040159a4 g     O .rwdata	00000004 alt_priority_mask
04000534 g     F .text	00000050 __vfprintf_internal
0400ae84 g     F .text	00000050 _wctomb_r
0400fc3c g     F .text	00000934 .hidden __subdf3
04007e74 g     F .text	000000ec __lo0bits
040159a8 g     O .rwdata	00000008 alt_alarm_list
040126e4 g     F .text	00000064 _do_ctors
0400d448 g     F .text	00000038 __sigtramp
0400cf90 g     F .text	000000b8 wcrtomb
04010820 g     F .text	000000d0 close
040141d0 g     O .rwdata	0000016c __global_locale
04010d10 g     F .text	00000084 alt_load
0400b6b4 g     F .text	00000068 fputwc
0400d3a0 g     F .text	00000038 raise
040054a4 g     F .text	00000020 __sinit_lock_acquire
04007a78 g     F .text	000001b8 __multadd
04007a04 g     F .text	00000074 _Bfree



Disassembly of section .entry:

04000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 4000000:	00820014 	movui	r2,2048
#endif

0:
    initi r2
 4000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 4000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 400000c:	00bffd16 	blt	zero,r2,4000004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 4000010:	00410034 	movhi	at,1024
    ori r1, r1, %lo(_start)
 4000014:	08408f14 	ori	at,at,572
    jmp r1
 4000018:	0800683a 	jmp	at
 400001c:	00000000 	call	0 <__alt_mem_dram_controller-0x4000000>

Disassembly of section .exceptions:

04000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 4000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 4000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 4000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 400002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 4000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 4000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 4000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 400003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 4000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 4000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 4000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 400004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 4000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 4000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 4000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 400005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 4000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 4000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 4000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 400006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 4000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 4000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 4000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 400007c:	10000326 	beq	r2,zero,400008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 4000080:	20000226 	beq	r4,zero,400008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 4000084:	40000fc0 	call	40000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 4000088:	00000706 	br	40000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 400008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 4000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 4000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 4000098:	40001c80 	call	40001c8 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 400009c:	1000021e 	bne	r2,zero,40000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 40000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 40000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 40000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 40000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 40000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 40000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 40000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 40000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 40000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 40000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 40000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 40000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 40000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 40000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 40000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 40000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 40000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 40000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 40000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 40000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 40000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 40000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 40000f8:	ef80083a 	eret

040000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 40000fc:	defff904 	addi	sp,sp,-28
 4000100:	dfc00615 	stw	ra,24(sp)
 4000104:	df000515 	stw	fp,20(sp)
 4000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 400010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4000110:	0005313a 	rdctl	r2,ipending
 4000114:	e0bffc15 	stw	r2,-16(fp)

  return active;
 4000118:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 400011c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 4000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 4000124:	00800044 	movi	r2,1
 4000128:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 400012c:	e0ffff17 	ldw	r3,-4(fp)
 4000130:	e0bffe17 	ldw	r2,-8(fp)
 4000134:	1884703a 	and	r2,r3,r2
 4000138:	10001226 	beq	r2,zero,4000184 <alt_irq_handler+0x88>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 400013c:	e0bffd17 	ldw	r2,-12(fp)
 4000140:	100690fa 	slli	r3,r2,3
 4000144:	00810074 	movhi	r2,1025
 4000148:	1885883a 	add	r2,r3,r2
 400014c:	10dd8617 	ldw	r3,30232(r2)
 4000150:	e0bffd17 	ldw	r2,-12(fp)
 4000154:	100890fa 	slli	r4,r2,3
 4000158:	00810074 	movhi	r2,1025
 400015c:	2085883a 	add	r2,r4,r2
 4000160:	109d8717 	ldw	r2,30236(r2)
 4000164:	e17ffd17 	ldw	r5,-12(fp)
 4000168:	1009883a 	mov	r4,r2
 400016c:	183ee83a 	callr	r3
#endif
        break;
 4000170:	0001883a 	nop
  NIOS2_READ_IPENDING (active);
 4000174:	0005313a 	rdctl	r2,ipending
 4000178:	e0bffb15 	stw	r2,-20(fp)
  return active;
 400017c:	e0bffb17 	ldw	r2,-20(fp)
 4000180:	00000706 	br	40001a0 <alt_irq_handler+0xa4>
      }
      mask <<= 1;
 4000184:	e0bffe17 	ldw	r2,-8(fp)
 4000188:	1085883a 	add	r2,r2,r2
 400018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 4000190:	e0bffd17 	ldw	r2,-12(fp)
 4000194:	10800044 	addi	r2,r2,1
 4000198:	e0bffd15 	stw	r2,-12(fp)
      if (active & mask)
 400019c:	003fe306 	br	400012c <alt_irq_handler+0x30>

    } while (1);

    active = alt_irq_pending ();
 40001a0:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 40001a4:	e0bfff17 	ldw	r2,-4(fp)
 40001a8:	103fdd1e 	bne	r2,zero,4000120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 40001ac:	0001883a 	nop
}
 40001b0:	0001883a 	nop
 40001b4:	e037883a 	mov	sp,fp
 40001b8:	dfc00117 	ldw	ra,4(sp)
 40001bc:	df000017 	ldw	fp,0(sp)
 40001c0:	dec00204 	addi	sp,sp,8
 40001c4:	f800283a 	ret

040001c8 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 40001c8:	defffb04 	addi	sp,sp,-20
 40001cc:	dfc00415 	stw	ra,16(sp)
 40001d0:	df000315 	stw	fp,12(sp)
 40001d4:	df000304 	addi	fp,sp,12
 40001d8:	e13ffd15 	stw	r4,-12(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 40001dc:	000531fa 	rdctl	r2,exception
 40001e0:	e0bfff15 	stw	r2,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 40001e4:	e0bfff17 	ldw	r2,-4(fp)
 40001e8:	1004d0ba 	srli	r2,r2,2
 40001ec:	108007cc 	andi	r2,r2,31
 40001f0:	e0bfff15 	stw	r2,-4(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 40001f4:	0005333a 	rdctl	r2,badaddr
 40001f8:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 40001fc:	d0a71c17 	ldw	r2,-25488(gp)
 4000200:	10000726 	beq	r2,zero,4000220 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 4000204:	d0a71c17 	ldw	r2,-25488(gp)
 4000208:	e0ffff17 	ldw	r3,-4(fp)
 400020c:	e1bffe17 	ldw	r6,-8(fp)
 4000210:	e17ffd17 	ldw	r5,-12(fp)
 4000214:	1809883a 	mov	r4,r3
 4000218:	103ee83a 	callr	r2
 400021c:	00000206 	br	4000228 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 4000220:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 4000224:	0005883a 	mov	r2,zero
}
 4000228:	e037883a 	mov	sp,fp
 400022c:	dfc00117 	ldw	ra,4(sp)
 4000230:	df000017 	ldw	fp,0(sp)
 4000234:	dec00204 	addi	sp,sp,8
 4000238:	f800283a 	ret

Disassembly of section .text:

0400023c <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 400023c:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 4000240:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 4000244:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 4000248:	00bffd16 	blt	zero,r2,4000240 <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 400024c:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
 4000250:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 4000254:	06810074 	movhi	gp,1025
    ori gp, gp, %lo(_gp)
 4000258:	d6b65e14 	ori	gp,gp,55672
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 400025c:	00810074 	movhi	r2,1025
    ori r2, r2, %lo(__bss_start)
 4000260:	109d6d14 	ori	r2,r2,30132

    movhi r3, %hi(__bss_end)
 4000264:	00c10074 	movhi	r3,1025
    ori r3, r3, %lo(__bss_end)
 4000268:	18ddc614 	ori	r3,r3,30488

    beq r2, r3, 1f
 400026c:	10c00326 	beq	r2,r3,400027c <_start+0x40>

0:
    stw zero, (r2)
 4000270:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 4000274:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 4000278:	10fffd36 	bltu	r2,r3,4000270 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 400027c:	4010d100 	call	4010d10 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 4000280:	4010ea40 	call	4010ea4 <alt_main>

04000284 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 4000284:	003fff06 	br	4000284 <alt_after_alt_main>

04000288 <sendReading>:
#include <unistd.h>
#include <stdlib.h>
#include <altera_avalon_pio_regs.h>

void sendReading ( alt_32 x ) 
{
 4000288:	defffe04 	addi	sp,sp,-8
 400028c:	df000115 	stw	fp,4(sp)
 4000290:	df000104 	addi	fp,sp,4
 4000294:	e13fff15 	stw	r4,-4(fp)
  if ( IORD_ALTERA_AVALON_SPI_STATUS(ESP32_SPI_BASE) && 0b01000000 )
 4000298:	00820034 	movhi	r2,2048
 400029c:	10840237 	ldwio	r2,4104(r2)
 40002a0:	10000326 	beq	r2,zero,40002b0 <sendReading+0x28>
  {
    IOWR_ALTERA_AVALON_SPI_TXDATA(ESP32_SPI_BASE, (int) x);
 40002a4:	e0ffff17 	ldw	r3,-4(fp)
 40002a8:	00820034 	movhi	r2,2048
 40002ac:	10c40135 	stwio	r3,4100(r2)
    // printf("txreg: %d\n", IORD_ALTERA_AVALON_SPI_TXDATA(ESP32_SPI_BASE));
    // printf("data: %ld\n", (x & 0b111111111));
  }

}
 40002b0:	0001883a 	nop
 40002b4:	e037883a 	mov	sp,fp
 40002b8:	df000017 	ldw	fp,0(sp)
 40002bc:	dec00104 	addi	sp,sp,4
 40002c0:	f800283a 	ret

040002c4 <main>:

int main()
{
 40002c4:	defffb04 	addi	sp,sp,-20
 40002c8:	dfc00415 	stw	ra,16(sp)
 40002cc:	df000315 	stw	fp,12(sp)
 40002d0:	df000304 	addi	fp,sp,12
  alt_32 x_read, y_read;
  alt_up_accelerometer_spi_dev *accDev;
  accDev = alt_up_accelerometer_spi_open_dev(ACCELEROMETER_NAME);
 40002d4:	01010074 	movhi	r4,1025
 40002d8:	210d9804 	addi	r4,r4,13920
 40002dc:	4011f5c0 	call	4011f5c <alt_up_accelerometer_spi_open_dev>
 40002e0:	e0bfff15 	stw	r2,-4(fp)

  if ( accDev == NULL )
 40002e4:	e0bfff17 	ldw	r2,-4(fp)
 40002e8:	1000021e 	bne	r2,zero,40002f4 <main+0x30>
  {
    return 1;
 40002ec:	00800044 	movi	r2,1
 40002f0:	00001c06 	br	4000364 <main+0xa0>
  } 

  while ( 1 )
  {
    alt_up_accelerometer_spi_read_x_axis(accDev, &x_read);
 40002f4:	e0bffe04 	addi	r2,fp,-8
 40002f8:	100b883a 	mov	r5,r2
 40002fc:	e13fff17 	ldw	r4,-4(fp)
 4000300:	40120ac0 	call	40120ac <alt_up_accelerometer_spi_read_x_axis>
    alt_up_accelerometer_spi_read_y_axis(accDev, &y_read);
 4000304:	e0bffd04 	addi	r2,fp,-12
 4000308:	100b883a 	mov	r5,r2
 400030c:	e13fff17 	ldw	r4,-4(fp)
 4000310:	40121800 	call	4012180 <alt_up_accelerometer_spi_read_y_axis>
    printf("x: %ld, y: %ld\n", x_read, y_read);
 4000314:	e0bffe17 	ldw	r2,-8(fp)
 4000318:	e0fffd17 	ldw	r3,-12(fp)
 400031c:	180d883a 	mov	r6,r3
 4000320:	100b883a 	mov	r5,r2
 4000324:	01010074 	movhi	r4,1025
 4000328:	210d9d04 	addi	r4,r4,13940
 400032c:	40003dc0 	call	40003dc <printf>
    sendReading(((x_read & 0b1111111111) + ((y_read & 0b1111111111) << 9)));
 4000330:	e0bffe17 	ldw	r2,-8(fp)
 4000334:	10c0ffcc 	andi	r3,r2,1023
 4000338:	e0bffd17 	ldw	r2,-12(fp)
 400033c:	1008927a 	slli	r4,r2,9
 4000340:	00800234 	movhi	r2,8
 4000344:	10bf8004 	addi	r2,r2,-512
 4000348:	2084703a 	and	r2,r4,r2
 400034c:	1885883a 	add	r2,r3,r2
 4000350:	1009883a 	mov	r4,r2
 4000354:	40002880 	call	4000288 <sendReading>
    usleep(10);
 4000358:	01000284 	movi	r4,10
 400035c:	40111b00 	call	40111b0 <usleep>
    alt_up_accelerometer_spi_read_x_axis(accDev, &x_read);
 4000360:	003fe406 	br	40002f4 <main+0x30>
  }
  printf("Hello from Nios II!\n");

  return 0;
}
 4000364:	e037883a 	mov	sp,fp
 4000368:	dfc00117 	ldw	ra,4(sp)
 400036c:	df000017 	ldw	fp,0(sp)
 4000370:	dec00204 	addi	sp,sp,8
 4000374:	f800283a 	ret

04000378 <_printf_r>:
#include "fvwrite.h"    /* IntelSpecific */

int
_printf_r (struct _reent *ptr,
       const char *__restrict fmt, ...)
{
 4000378:	defff804 	addi	sp,sp,-32
 400037c:	dfc00515 	stw	ra,20(sp)
 4000380:	df000415 	stw	fp,16(sp)
 4000384:	df000404 	addi	fp,sp,16
 4000388:	e13ffd15 	stw	r4,-12(fp)
 400038c:	e17ffc15 	stw	r5,-16(fp)
 4000390:	e1800215 	stw	r6,8(fp)
 4000394:	e1c00315 	stw	r7,12(fp)
  int ret;
  va_list ap;

  _REENT_SMALL_CHECK_INIT (ptr);
  _FILE_INIT_DEV_WRITE (_stdout_r (ptr));    /* IntelSpecific */
  va_start (ap, fmt);
 4000398:	e0800204 	addi	r2,fp,8
 400039c:	e0bffe15 	stw	r2,-8(fp)
/*ret =   _vfprintf_r          (ptr, _stdout_r (ptr), fmt, ap);	*/	/*1.16.0*/	/* IntelSpecific */
/*ret = ___vfprintf_internal_r (ptr, _stdout_r (ptr), fmt, ap);	*/	/*1.16  */	/* IntelSpecific */
/*ret =   _vfprintf_r          (ptr, _stdout_r (ptr), fmt, ap);	*/	/*1.18.0*/	/* IntelSpecific */
/*ret =   _vfprintf_r          (ptr, _stdout_r (ptr), fmt, ap);	*/	/* try1 */	/* IntelSpecific */
  ret = ___vfprintf_internal_r (ptr, _stdout_r (ptr), fmt, ap);		/* try2 */	/* IntelSpecific */
 40003a0:	e0bffd17 	ldw	r2,-12(fp)
 40003a4:	10800217 	ldw	r2,8(r2)
 40003a8:	e0fffe17 	ldw	r3,-8(fp)
 40003ac:	180f883a 	mov	r7,r3
 40003b0:	e1bffc17 	ldw	r6,-16(fp)
 40003b4:	100b883a 	mov	r5,r2
 40003b8:	e13ffd17 	ldw	r4,-12(fp)
 40003bc:	40005840 	call	4000584 <___vfprintf_internal_r>
 40003c0:	e0bfff15 	stw	r2,-4(fp)
  va_end (ap);
  return ret;
 40003c4:	e0bfff17 	ldw	r2,-4(fp)
}
 40003c8:	e037883a 	mov	sp,fp
 40003cc:	dfc00117 	ldw	ra,4(sp)
 40003d0:	df000017 	ldw	fp,0(sp)
 40003d4:	dec00404 	addi	sp,sp,16
 40003d8:	f800283a 	ret

040003dc <printf>:

#ifndef _REENT_ONLY

int
printf (const char *__restrict fmt, ...)
{
 40003dc:	defff704 	addi	sp,sp,-36
 40003e0:	dfc00515 	stw	ra,20(sp)
 40003e4:	df000415 	stw	fp,16(sp)
 40003e8:	df000404 	addi	fp,sp,16
 40003ec:	e13ffc15 	stw	r4,-16(fp)
 40003f0:	e1400215 	stw	r5,8(fp)
 40003f4:	e1800315 	stw	r6,12(fp)
 40003f8:	e1c00415 	stw	r7,16(fp)
  int ret;
  va_list ap;
  struct _reent *ptr = _REENT;
 40003fc:	d0a00017 	ldw	r2,-32768(gp)
 4000400:	e0bfff15 	stw	r2,-4(fp)

  _REENT_SMALL_CHECK_INIT (ptr);
  _FILE_INIT_DEV_WRITE (_stdout_r (_REENT));    /* IntelSpecific. Mirror changes here in iprintf.c */
  va_start (ap, fmt);
 4000404:	e0800204 	addi	r2,fp,8
 4000408:	e0bffd15 	stw	r2,-12(fp)
/*ret =  _vfprintf_r        (ptr, _stdout_r    (ptr), fmt, ap);	*/ /*1.16.0*/	/* IntelSpecific */
/*ret = __vfprintf_internal (     _stdout_r (_REENT), fmt, ap);	*/ /*1.16  */	/* IntelSpecific */
/*ret =  _vfprintf_r        (ptr, _stdout_r    (ptr), fmt, ap);	*/ /*1.18.0*/	/* IntelSpecific */
/*ret =  _vfprintf_r        (ptr, _stdout_r    (ptr), fmt, ap); */ /* try1 */	/* IntelSpecific */
  ret = __vfprintf_internal (     _stdout_r (_REENT), fmt, ap);    /* try2 */	/* IntelSpecific */
 400040c:	d0a00017 	ldw	r2,-32768(gp)
 4000410:	10800217 	ldw	r2,8(r2)
 4000414:	e0fffd17 	ldw	r3,-12(fp)
 4000418:	180d883a 	mov	r6,r3
 400041c:	e17ffc17 	ldw	r5,-16(fp)
 4000420:	1009883a 	mov	r4,r2
 4000424:	40005340 	call	4000534 <__vfprintf_internal>
 4000428:	e0bffe15 	stw	r2,-8(fp)
  va_end (ap);
  return ret;
 400042c:	e0bffe17 	ldw	r2,-8(fp)
}
 4000430:	e037883a 	mov	sp,fp
 4000434:	dfc00117 	ldw	ra,4(sp)
 4000438:	df000017 	ldw	fp,0(sp)
 400043c:	dec00504 	addi	sp,sp,20
 4000440:	f800283a 	ret

04000444 <__sbprintf>:
_NOINLINE_STATIC int
__sbprintf (struct _reent *rptr,
       register FILE *fp,
       const char *fmt,
       va_list ap)
{
 4000444:	defedf04 	addi	sp,sp,-1156
 4000448:	dfc12015 	stw	ra,1152(sp)
 400044c:	df011f15 	stw	fp,1148(sp)
 4000450:	dc011e15 	stw	r16,1144(sp)
 4000454:	df011f04 	addi	fp,sp,1148
 4000458:	e13ee315 	stw	r4,-1140(fp)
 400045c:	2821883a 	mov	r16,r5
 4000460:	e1bee215 	stw	r6,-1144(fp)
 4000464:	e1fee115 	stw	r7,-1148(fp)
	int ret;
	FILE fake;
	unsigned char buf[BUFSIZ];

	/* copy the important variables */
	fake._flags = fp->_flags & ~__SNBF;
 4000468:	80c0030b 	ldhu	r3,12(r16)
 400046c:	00bfff44 	movi	r2,-3
 4000470:	1884703a 	and	r2,r3,r2
 4000474:	e0bfe70d 	sth	r2,-100(fp)
	fake._flags2 = fp->_flags2;
 4000478:	80801917 	ldw	r2,100(r16)
 400047c:	e0bffd15 	stw	r2,-12(fp)
	fake._file = fp->_file;
 4000480:	8080038b 	ldhu	r2,14(r16)
 4000484:	e0bfe78d 	sth	r2,-98(fp)
	fake._cookie = fp->_cookie;
 4000488:	80800717 	ldw	r2,28(r16)
 400048c:	e0bfeb15 	stw	r2,-84(fp)
	fake._write = fp->_write;
 4000490:	80800917 	ldw	r2,36(r16)
 4000494:	e0bfed15 	stw	r2,-76(fp)

	/* set up the buffer */
	fake._bf._base = fake._p = buf;
 4000498:	e0bee404 	addi	r2,fp,-1136
 400049c:	e0bfe415 	stw	r2,-112(fp)
 40004a0:	e0bfe417 	ldw	r2,-112(fp)
 40004a4:	e0bfe815 	stw	r2,-96(fp)
	fake._bf._size = fake._w = sizeof (buf);
 40004a8:	00810004 	movi	r2,1024
 40004ac:	e0bfe615 	stw	r2,-104(fp)
 40004b0:	e0bfe617 	ldw	r2,-104(fp)
 40004b4:	e0bfe915 	stw	r2,-92(fp)
	fake._lbfsize = 0;	/* not actually used, but Just In Case */
 40004b8:	e03fea15 	stw	zero,-88(fp)
#ifndef __SINGLE_THREAD__
	__lock_init_recursive (fake._lock);
#endif

	/* do the work, then copy any error status */
	ret = _VFPRINTF_R (rptr, &fake, fmt, ap);
 40004bc:	e0bfe404 	addi	r2,fp,-112
 40004c0:	e1fee117 	ldw	r7,-1148(fp)
 40004c4:	e1bee217 	ldw	r6,-1144(fp)
 40004c8:	100b883a 	mov	r5,r2
 40004cc:	e13ee317 	ldw	r4,-1140(fp)
 40004d0:	40005840 	call	4000584 <___vfprintf_internal_r>
 40004d4:	e0bffe15 	stw	r2,-8(fp)
	if (ret >= 0 && _fflush_r (rptr, &fake))
 40004d8:	e0bffe17 	ldw	r2,-8(fp)
 40004dc:	10000716 	blt	r2,zero,40004fc <__sbprintf+0xb8>
 40004e0:	e0bfe404 	addi	r2,fp,-112
 40004e4:	100b883a 	mov	r5,r2
 40004e8:	e13ee317 	ldw	r4,-1140(fp)
 40004ec:	4004e800 	call	4004e80 <_fflush_r>
 40004f0:	10000226 	beq	r2,zero,40004fc <__sbprintf+0xb8>
		ret = EOF;
 40004f4:	00bfffc4 	movi	r2,-1
 40004f8:	e0bffe15 	stw	r2,-8(fp)
	if (fake._flags & __SERR)
 40004fc:	e0bfe70b 	ldhu	r2,-100(fp)
 4000500:	10bfffcc 	andi	r2,r2,65535
 4000504:	1080100c 	andi	r2,r2,64
 4000508:	10000326 	beq	r2,zero,4000518 <__sbprintf+0xd4>
		fp->_flags |= __SERR;
 400050c:	8080030b 	ldhu	r2,12(r16)
 4000510:	10801014 	ori	r2,r2,64
 4000514:	8080030d 	sth	r2,12(r16)

#ifndef __SINGLE_THREAD__
	__lock_close_recursive (fake._lock);
#endif
	return (ret);
 4000518:	e0bffe17 	ldw	r2,-8(fp)
}
 400051c:	e6ffff04 	addi	sp,fp,-4
 4000520:	dfc00217 	ldw	ra,8(sp)
 4000524:	df000117 	ldw	fp,4(sp)
 4000528:	dc000017 	ldw	r16,0(sp)
 400052c:	dec00304 	addi	sp,sp,12
 4000530:	f800283a 	ret

04000534 <__vfprintf_internal>:
#ifndef STRING_ONLY
int
VFPRINTF (FILE * fp,
       const char *fmt0,
       va_list ap)
{
 4000534:	defffa04 	addi	sp,sp,-24
 4000538:	dfc00515 	stw	ra,20(sp)
 400053c:	df000415 	stw	fp,16(sp)
 4000540:	df000404 	addi	fp,sp,16
 4000544:	e13ffe15 	stw	r4,-8(fp)
 4000548:	e17ffd15 	stw	r5,-12(fp)
 400054c:	e1bffc15 	stw	r6,-16(fp)
  int result;
  result = _VFPRINTF_R (_REENT, fp, fmt0, ap);
 4000550:	d0a00017 	ldw	r2,-32768(gp)
 4000554:	e1fffc17 	ldw	r7,-16(fp)
 4000558:	e1bffd17 	ldw	r6,-12(fp)
 400055c:	e17ffe17 	ldw	r5,-8(fp)
 4000560:	1009883a 	mov	r4,r2
 4000564:	40005840 	call	4000584 <___vfprintf_internal_r>
 4000568:	e0bfff15 	stw	r2,-4(fp)
  return result;
 400056c:	e0bfff17 	ldw	r2,-4(fp)
}
 4000570:	e037883a 	mov	sp,fp
 4000574:	dfc00117 	ldw	ra,4(sp)
 4000578:	df000017 	ldw	fp,0(sp)
 400057c:	dec00204 	addi	sp,sp,8
 4000580:	f800283a 	ret

04000584 <___vfprintf_internal_r>:
int
_VFPRINTF_R (struct _reent *data,
       FILE * fp,
       const char *fmt0,
       va_list ap)
{
 4000584:	deffa804 	addi	sp,sp,-352
 4000588:	dfc05715 	stw	ra,348(sp)
 400058c:	df005615 	stw	fp,344(sp)
 4000590:	ddc05515 	stw	r23,340(sp)
 4000594:	dd805415 	stw	r22,336(sp)
 4000598:	dd405315 	stw	r21,332(sp)
 400059c:	dd005215 	stw	r20,328(sp)
 40005a0:	dcc05115 	stw	r19,324(sp)
 40005a4:	dc805015 	stw	r18,320(sp)
 40005a8:	dc404f15 	stw	r17,316(sp)
 40005ac:	dc004e15 	stw	r16,312(sp)
 40005b0:	df005604 	addi	fp,sp,344
 40005b4:	e13fbd15 	stw	r4,-268(fp)
 40005b8:	e17fbc15 	stw	r5,-272(fp)
 40005bc:	e1bfbb15 	stw	r6,-276(fp)
 40005c0:	e1ffba15 	stw	r7,-280(fp)
	char *thousands_sep = NULL;
	size_t thsnd_len = 0;
	const char *grouping = NULL;
#endif
#ifdef FLOATING_POINT
	char *decimal_point = _localeconv_r (data)->decimal_point;
 40005c4:	e13fbd17 	ldw	r4,-268(fp)
 40005c8:	4005f3c0 	call	4005f3c <_localeconv_r>
 40005cc:	10800017 	ldw	r2,0(r2)
 40005d0:	e0bfe815 	stw	r2,-96(fp)
	size_t decp_len = strlen (decimal_point);
 40005d4:	e13fe817 	ldw	r4,-96(fp)
 40005d8:	40098340 	call	4009834 <strlen>
 40005dc:	e0bfe715 	stw	r2,-100(fp)
	char softsign;		/* temporary negative sign for floats */
	union { int i; _PRINTF_FLOAT_TYPE fp; } _double_ = {0};
 40005e0:	e03fe015 	stw	zero,-128(fp)
 40005e4:	e03fe115 	stw	zero,-124(fp)
# define _fpvalue (_double_.fp)
	int expt;		/* integer value of exponent */
	int expsize = 0;	/* character count for expstr */
 40005e8:	e03ff415 	stw	zero,-48(fp)
	char expstr[MAXEXPLEN];	/* buffer for exponent string */
	int lead;		/* sig figs before decimal or group sep */
#endif /* FLOATING_POINT */
#if defined (FLOATING_POINT) || defined (_WANT_IO_C99_FORMATS)
	int ndig = 0;		/* actual number of digits returned by cvt */
 40005ec:	e03fdc15 	stw	zero,-144(fp)
	u_quad_t _uquad;	/* integer arguments %[diouxX] */
	enum { OCT, DEC, HEX } base;/* base for [diouxX] conversion */
	int dprec;		/* a copy of prec if [diouxX], 0 otherwise */
	int realsz;		/* field size expanded by dprec */
	int size;		/* size of converted field or string */
	char *xdigs = NULL;	/* digits for [xX] conversion */
 40005f0:	e03fec15 	stw	zero,-80(fp)
	char ox[2];		/* space for 0x hex-prefix */
#ifdef _MB_CAPABLE
	wchar_t wc;
	mbstate_t state;        /* mbtowc calls from library must not change state */
#endif
	char *malloc_buf = NULL;/* handy pointer for malloced buffers */
 40005f4:	e03feb15 	stw	zero,-84(fp)
	    (u_long)GET_ARG (N, ap, u_int))
#endif

#ifndef STRING_ONLY
	/* Initialize std streams if not dealing with sprintf family.  */
	CHECK_INIT (data, fp);
 40005f8:	e0bfbd17 	ldw	r2,-268(fp)
 40005fc:	e0bfe615 	stw	r2,-104(fp)
 4000600:	e0bfe617 	ldw	r2,-104(fp)
 4000604:	10000526 	beq	r2,zero,400061c <___vfprintf_internal_r+0x98>
 4000608:	e0bfe617 	ldw	r2,-104(fp)
 400060c:	10800e17 	ldw	r2,56(r2)
 4000610:	1000021e 	bne	r2,zero,400061c <___vfprintf_internal_r+0x98>
 4000614:	e13fe617 	ldw	r4,-104(fp)
 4000618:	40053b00 	call	40053b0 <__sinit>
	_newlib_flockfile_start (fp);

	ORIENT(fp, -1);
 400061c:	e0bfbc17 	ldw	r2,-272(fp)
 4000620:	1080030b 	ldhu	r2,12(r2)
 4000624:	10bfffcc 	andi	r2,r2,65535
 4000628:	1088000c 	andi	r2,r2,8192
 400062c:	10000c1e 	bne	r2,zero,4000660 <___vfprintf_internal_r+0xdc>
 4000630:	e0bfbc17 	ldw	r2,-272(fp)
 4000634:	1080030b 	ldhu	r2,12(r2)
 4000638:	10880014 	ori	r2,r2,8192
 400063c:	1007883a 	mov	r3,r2
 4000640:	e0bfbc17 	ldw	r2,-272(fp)
 4000644:	10c0030d 	sth	r3,12(r2)
 4000648:	e0bfbc17 	ldw	r2,-272(fp)
 400064c:	10c01917 	ldw	r3,100(r2)
 4000650:	00b7ffc4 	movi	r2,-8193
 4000654:	1886703a 	and	r3,r3,r2
 4000658:	e0bfbc17 	ldw	r2,-272(fp)
 400065c:	10c01915 	stw	r3,100(r2)

	/* sorry, fprintf(read_only_file, "") returns EOF, not 0 */
	if (cantwrite (data, fp)) {
 4000660:	e0bfbc17 	ldw	r2,-272(fp)
 4000664:	1080030b 	ldhu	r2,12(r2)
 4000668:	10bfffcc 	andi	r2,r2,65535
 400066c:	1080020c 	andi	r2,r2,8
 4000670:	10000326 	beq	r2,zero,4000680 <___vfprintf_internal_r+0xfc>
 4000674:	e0bfbc17 	ldw	r2,-272(fp)
 4000678:	10800417 	ldw	r2,16(r2)
 400067c:	1000061e 	bne	r2,zero,4000698 <___vfprintf_internal_r+0x114>
 4000680:	e17fbc17 	ldw	r5,-272(fp)
 4000684:	e13fbd17 	ldw	r4,-268(fp)
 4000688:	4002a140 	call	4002a14 <__swsetup_r>
 400068c:	10000226 	beq	r2,zero,4000698 <___vfprintf_internal_r+0x114>
		_newlib_flockfile_exit (fp);
		return (EOF);
 4000690:	00bfffc4 	movi	r2,-1
 4000694:	0007fe06 	br	4002690 <___vfprintf_internal_r+0x210c>
	}

#ifdef _UNBUF_STREAM_OPT
	/* optimise fprintf(stderr) (and other unbuffered Unix files) */
	if ((fp->_flags & (__SNBF|__SWR|__SRW)) == (__SNBF|__SWR) &&
 4000698:	e0bfbc17 	ldw	r2,-272(fp)
 400069c:	1080030b 	ldhu	r2,12(r2)
 40006a0:	10bfffcc 	andi	r2,r2,65535
 40006a4:	1080068c 	andi	r2,r2,26
 40006a8:	10800298 	cmpnei	r2,r2,10
 40006ac:	10000d1e 	bne	r2,zero,40006e4 <___vfprintf_internal_r+0x160>
	    fp->_file >= 0) {
 40006b0:	e0bfbc17 	ldw	r2,-272(fp)
 40006b4:	1080038b 	ldhu	r2,14(r2)
	if ((fp->_flags & (__SNBF|__SWR|__SRW)) == (__SNBF|__SWR) &&
 40006b8:	10bfffcc 	andi	r2,r2,65535
 40006bc:	10a0001c 	xori	r2,r2,32768
 40006c0:	10a00004 	addi	r2,r2,-32768
 40006c4:	10000716 	blt	r2,zero,40006e4 <___vfprintf_internal_r+0x160>
		_newlib_flockfile_exit (fp);
		return (__sbprintf (data, fp, fmt0, ap));
 40006c8:	e0bfba17 	ldw	r2,-280(fp)
 40006cc:	100f883a 	mov	r7,r2
 40006d0:	e1bfbb17 	ldw	r6,-276(fp)
 40006d4:	e17fbc17 	ldw	r5,-272(fp)
 40006d8:	e13fbd17 	ldw	r4,-268(fp)
 40006dc:	40004440 	call	4000444 <__sbprintf>
 40006e0:	0007eb06 	br	4002690 <___vfprintf_internal_r+0x210c>
		}
		fp->_bf._size = 64;
        }
#endif /* STRING_ONLY */

	fmt = (char *)fmt0;
 40006e4:	e57fbb17 	ldw	r21,-276(fp)
#ifdef _FVWRITE_IN_STREAMIO
	uio.uio_iov = iovp = iov;
 40006e8:	e43fc904 	addi	r16,fp,-220
 40006ec:	e43fd915 	stw	r16,-156(fp)
	uio.uio_resid = 0;
 40006f0:	e03fdb15 	stw	zero,-148(fp)
	uio.uio_iovcnt = 0;
 40006f4:	e03fda15 	stw	zero,-152(fp)
#endif
	ret = 0;
 40006f8:	e03ff715 	stw	zero,-36(fp)

	/*
	 * Scan the format for conversions (`%' character).
	 */
	for (;;) {
	        cp = fmt;
 40006fc:	a825883a 	mov	r18,r21
                    else if (wc == '%')
                        break;
                    fmt += n;
		}
#else
                while (*fmt != '\0' && *fmt != '%')
 4000700:	00000106 	br	4000708 <___vfprintf_internal_r+0x184>
                    fmt += 1;
 4000704:	ad400044 	addi	r21,r21,1
                while (*fmt != '\0' && *fmt != '%')
 4000708:	a8800003 	ldbu	r2,0(r21)
 400070c:	10803fcc 	andi	r2,r2,255
 4000710:	1080201c 	xori	r2,r2,128
 4000714:	10bfe004 	addi	r2,r2,-128
 4000718:	10000626 	beq	r2,zero,4000734 <___vfprintf_internal_r+0x1b0>
 400071c:	a8800003 	ldbu	r2,0(r21)
 4000720:	10803fcc 	andi	r2,r2,255
 4000724:	1080201c 	xori	r2,r2,128
 4000728:	10bfe004 	addi	r2,r2,-128
 400072c:	10800958 	cmpnei	r2,r2,37
 4000730:	103ff41e 	bne	r2,zero,4000704 <___vfprintf_internal_r+0x180>
#endif
		if ((m = fmt - cp) != 0) {
 4000734:	aca3c83a 	sub	r17,r21,r18
 4000738:	88001826 	beq	r17,zero,400079c <___vfprintf_internal_r+0x218>
			PRINT (cp, m);
 400073c:	84800015 	stw	r18,0(r16)
 4000740:	8805883a 	mov	r2,r17
 4000744:	80800115 	stw	r2,4(r16)
 4000748:	e0bfdb17 	ldw	r2,-148(fp)
 400074c:	8807883a 	mov	r3,r17
 4000750:	10c5883a 	add	r2,r2,r3
 4000754:	e0bfdb15 	stw	r2,-148(fp)
 4000758:	84000204 	addi	r16,r16,8
 400075c:	e0bfda17 	ldw	r2,-152(fp)
 4000760:	10800044 	addi	r2,r2,1
 4000764:	e0bfda15 	stw	r2,-152(fp)
 4000768:	e0bfda17 	ldw	r2,-152(fp)
 400076c:	10800210 	cmplti	r2,r2,8
 4000770:	1000071e 	bne	r2,zero,4000790 <___vfprintf_internal_r+0x20c>
 4000774:	e0bfd904 	addi	r2,fp,-156
 4000778:	100d883a 	mov	r6,r2
 400077c:	e17fbc17 	ldw	r5,-272(fp)
 4000780:	e13fbd17 	ldw	r4,-268(fp)
 4000784:	40099280 	call	4009928 <__sprint_r>
 4000788:	10076b1e 	bne	r2,zero,4002538 <___vfprintf_internal_r+0x1fb4>
 400078c:	e43fc904 	addi	r16,fp,-220
			ret += m;
 4000790:	e0bff717 	ldw	r2,-36(fp)
 4000794:	1445883a 	add	r2,r2,r17
 4000798:	e0bff715 	stw	r2,-36(fp)
		}
#ifdef _MB_CAPABLE
		if (n <= 0)
                    goto done;
#else
                if (*fmt == '\0')
 400079c:	a8800003 	ldbu	r2,0(r21)
 40007a0:	10803fcc 	andi	r2,r2,255
 40007a4:	1080201c 	xori	r2,r2,128
 40007a8:	10bfe004 	addi	r2,r2,-128
 40007ac:	10075426 	beq	r2,zero,4002500 <___vfprintf_internal_r+0x1f7c>
                    goto done;
#endif
		fmt_anchor = fmt;
 40007b0:	e57fe515 	stw	r21,-108(fp)
		fmt++;		/* skip over '%' */
 40007b4:	ad400044 	addi	r21,r21,1

		flags = 0;
 40007b8:	0023883a 	mov	r17,zero
		dprec = 0;
 40007bc:	e03fef15 	stw	zero,-68(fp)
		width = 0;
 40007c0:	e03ff615 	stw	zero,-40(fp)
		prec = -1;
 40007c4:	00bfffc4 	movi	r2,-1
 40007c8:	e0bff515 	stw	r2,-44(fp)
		sign = '\0';
 40007cc:	e03fe2c5 	stb	zero,-117(fp)
#ifdef FLOATING_POINT
		lead = 0;
 40007d0:	e03ff315 	stw	zero,-52(fp)
#ifndef _NO_POS_ARGS
		N = arg_index;
		is_pos_arg = 0;
#endif

rflag:		ch = *fmt++;
 40007d4:	a805883a 	mov	r2,r21
 40007d8:	15400044 	addi	r21,r2,1
 40007dc:	10800003 	ldbu	r2,0(r2)
 40007e0:	15003fcc 	andi	r20,r2,255
 40007e4:	a500201c 	xori	r20,r20,128
 40007e8:	a53fe004 	addi	r20,r20,-128
 40007ec:	a0bff804 	addi	r2,r20,-32
 40007f0:	10c01668 	cmpgeui	r3,r2,89
 40007f4:	18036b1e 	bne	r3,zero,40015a4 <___vfprintf_internal_r+0x1020>
 40007f8:	100690ba 	slli	r3,r2,2
 40007fc:	00810034 	movhi	r2,1024
 4000800:	1885883a 	add	r2,r3,r2
 4000804:	10820317 	ldw	r2,2060(r2)
 4000808:	1000683a 	jmp	r2
 400080c:	04000970 	cmpltui	r16,zero,37
 4000810:	040015a4 	muli	r16,zero,86
 4000814:	040015a4 	muli	r16,zero,86
 4000818:	04000990 	cmplti	r16,zero,38
 400081c:	040015a4 	muli	r16,zero,86
 4000820:	040015a4 	muli	r16,zero,86
 4000824:	040015a4 	muli	r16,zero,86
 4000828:	040015a4 	muli	r16,zero,86
 400082c:	040015a4 	muli	r16,zero,86
 4000830:	040015a4 	muli	r16,zero,86
 4000834:	04000998 	cmpnei	r16,zero,38
 4000838:	040009cc 	andi	r16,zero,39
 400083c:	040015a4 	muli	r16,zero,86
 4000840:	040009c4 	movi	r16,39
 4000844:	040009d8 	cmpnei	r16,zero,39
 4000848:	040015a4 	muli	r16,zero,86
 400084c:	04000a6c 	andhi	r16,zero,41
 4000850:	04000a74 	movhi	r16,41
 4000854:	04000a74 	movhi	r16,41
 4000858:	04000a74 	movhi	r16,41
 400085c:	04000a74 	movhi	r16,41
 4000860:	04000a74 	movhi	r16,41
 4000864:	04000a74 	movhi	r16,41
 4000868:	04000a74 	movhi	r16,41
 400086c:	04000a74 	movhi	r16,41
 4000870:	04000a74 	movhi	r16,41
 4000874:	040015a4 	muli	r16,zero,86
 4000878:	040015a4 	muli	r16,zero,86
 400087c:	040015a4 	muli	r16,zero,86
 4000880:	040015a4 	muli	r16,zero,86
 4000884:	040015a4 	muli	r16,zero,86
 4000888:	040015a4 	muli	r16,zero,86
 400088c:	040015a4 	muli	r16,zero,86
 4000890:	040015a4 	muli	r16,zero,86
 4000894:	040015a4 	muli	r16,zero,86
 4000898:	040015a4 	muli	r16,zero,86
 400089c:	04000b1c 	xori	r16,zero,44
 40008a0:	04000c1c 	xori	r16,zero,48
 40008a4:	040015a4 	muli	r16,zero,86
 40008a8:	04000c1c 	xori	r16,zero,48
 40008ac:	040015a4 	muli	r16,zero,86
 40008b0:	040015a4 	muli	r16,zero,86
 40008b4:	040015a4 	muli	r16,zero,86
 40008b8:	040015a4 	muli	r16,zero,86
 40008bc:	04000ab0 	cmpltui	r16,zero,42
 40008c0:	040015a4 	muli	r16,zero,86
 40008c4:	040015a4 	muli	r16,zero,86
 40008c8:	0400105c 	xori	r16,zero,65
 40008cc:	040015a4 	muli	r16,zero,86
 40008d0:	040015a4 	muli	r16,zero,86
 40008d4:	040015a4 	muli	r16,zero,86
 40008d8:	040015a4 	muli	r16,zero,86
 40008dc:	040015a4 	muli	r16,zero,86
 40008e0:	040011c8 	cmpgei	r16,zero,71
 40008e4:	040015a4 	muli	r16,zero,86
 40008e8:	040015a4 	muli	r16,zero,86
 40008ec:	04001274 	movhi	r16,73
 40008f0:	040015a4 	muli	r16,zero,86
 40008f4:	040015a4 	muli	r16,zero,86
 40008f8:	040015a4 	muli	r16,zero,86
 40008fc:	040015a4 	muli	r16,zero,86
 4000900:	040015a4 	muli	r16,zero,86
 4000904:	040015a4 	muli	r16,zero,86
 4000908:	040015a4 	muli	r16,zero,86
 400090c:	040015a4 	muli	r16,zero,86
 4000910:	040015a4 	muli	r16,zero,86
 4000914:	040015a4 	muli	r16,zero,86
 4000918:	04000af4 	movhi	r16,43
 400091c:	04000b20 	cmpeqi	r16,zero,44
 4000920:	04000c1c 	xori	r16,zero,48
 4000924:	04000c1c 	xori	r16,zero,48
 4000928:	04000c1c 	xori	r16,zero,48
 400092c:	04000ab8 	rdprs	r16,zero,42
 4000930:	04000b20 	cmpeqi	r16,zero,44
 4000934:	040015a4 	muli	r16,zero,86
 4000938:	040015a4 	muli	r16,zero,86
 400093c:	04000ac0 	call	4000ac <__alt_mem_dram_controller-0x3bfff54>
 4000940:	040015a4 	muli	r16,zero,86
 4000944:	04000fbc 	xorhi	r16,zero,62
 4000948:	04001060 	cmpeqi	r16,zero,65
 400094c:	040010f4 	movhi	r16,67
 4000950:	04000aec 	andhi	r16,zero,43
 4000954:	040015a4 	muli	r16,zero,86
 4000958:	0400113c 	xorhi	r16,zero,68
 400095c:	040015a4 	muli	r16,zero,86
 4000960:	040011cc 	andi	r16,zero,71
 4000964:	040015a4 	muli	r16,zero,86
 4000968:	040015a4 	muli	r16,zero,86
 400096c:	04001284 	movi	r16,74
			/*
			 * ``If the space and + flags both appear, the space
			 * flag will be ignored.''
			 *	-- ANSI X3J11
			 */
			if (!sign)
 4000970:	e0bfe2c3 	ldbu	r2,-117(fp)
 4000974:	10803fcc 	andi	r2,r2,255
 4000978:	1080201c 	xori	r2,r2,128
 400097c:	10bfe004 	addi	r2,r2,-128
 4000980:	103f941e 	bne	r2,zero,40007d4 <___vfprintf_internal_r+0x250>
				sign = ' ';
 4000984:	00800804 	movi	r2,32
 4000988:	e0bfe2c5 	stb	r2,-117(fp)
			goto rflag;
 400098c:	003f9106 	br	40007d4 <___vfprintf_internal_r+0x250>
		case '#':
			flags |= ALT;
 4000990:	8c400054 	ori	r17,r17,1
			goto rflag;
 4000994:	003f8f06 	br	40007d4 <___vfprintf_internal_r+0x250>
			 * ``A negative field width argument is taken as a
			 * - flag followed by a positive field width.''
			 *	-- ANSI X3J11
			 * They don't exclude field widths read from args.
			 */
			width = GET_ARG (n, ap, int);
 4000998:	e0bfba17 	ldw	r2,-280(fp)
 400099c:	10c00104 	addi	r3,r2,4
 40009a0:	e0ffba15 	stw	r3,-280(fp)
 40009a4:	10800017 	ldw	r2,0(r2)
 40009a8:	e0bff615 	stw	r2,-40(fp)
#ifndef _NO_POS_ARGS
			is_pos_arg = old_is_pos_arg;
#endif
			if (width >= 0)
 40009ac:	e0bff617 	ldw	r2,-40(fp)
 40009b0:	10000116 	blt	r2,zero,40009b8 <___vfprintf_internal_r+0x434>
				goto rflag;
 40009b4:	003f8706 	br	40007d4 <___vfprintf_internal_r+0x250>
			width = -width;
 40009b8:	e0bff617 	ldw	r2,-40(fp)
 40009bc:	0085c83a 	sub	r2,zero,r2
 40009c0:	e0bff615 	stw	r2,-40(fp)
			/* FALLTHROUGH */
		case '-':
			flags |= LADJUST;
 40009c4:	8c400114 	ori	r17,r17,4
			goto rflag;
 40009c8:	003f8206 	br	40007d4 <___vfprintf_internal_r+0x250>
		case '+':
			sign = '+';
 40009cc:	00800ac4 	movi	r2,43
 40009d0:	e0bfe2c5 	stb	r2,-117(fp)
			goto rflag;
 40009d4:	003f7f06 	br	40007d4 <___vfprintf_internal_r+0x250>
		case '.':
			if ((ch = *fmt++) == '*') {
 40009d8:	a805883a 	mov	r2,r21
 40009dc:	15400044 	addi	r21,r2,1
 40009e0:	10800003 	ldbu	r2,0(r2)
 40009e4:	15003fcc 	andi	r20,r2,255
 40009e8:	a500201c 	xori	r20,r20,128
 40009ec:	a53fe004 	addi	r20,r20,-128
 40009f0:	a0800a98 	cmpnei	r2,r20,42
 40009f4:	10000a1e 	bne	r2,zero,4000a20 <___vfprintf_internal_r+0x49c>
						fmt = old_fmt;
						goto rflag;
					}
				}
#endif /* !_NO_POS_ARGS */
				prec = GET_ARG (n, ap, int);
 40009f8:	e0bfba17 	ldw	r2,-280(fp)
 40009fc:	10c00104 	addi	r3,r2,4
 4000a00:	e0ffba15 	stw	r3,-280(fp)
 4000a04:	10800017 	ldw	r2,0(r2)
 4000a08:	e0bff515 	stw	r2,-44(fp)
#ifndef _NO_POS_ARGS
				is_pos_arg = old_is_pos_arg;
#endif
				if (prec < 0)
 4000a0c:	e0bff517 	ldw	r2,-44(fp)
 4000a10:	103f700e 	bge	r2,zero,40007d4 <___vfprintf_internal_r+0x250>
					prec = -1;
 4000a14:	00bfffc4 	movi	r2,-1
 4000a18:	e0bff515 	stw	r2,-44(fp)
				goto rflag;
 4000a1c:	003f6d06 	br	40007d4 <___vfprintf_internal_r+0x250>
			}
			n = 0;
 4000a20:	0027883a 	mov	r19,zero
			while (is_digit (ch)) {
 4000a24:	00000906 	br	4000a4c <___vfprintf_internal_r+0x4c8>
				n = 10 * n + to_digit (ch);
 4000a28:	98c002a4 	muli	r3,r19,10
 4000a2c:	a0bff404 	addi	r2,r20,-48
 4000a30:	18a7883a 	add	r19,r3,r2
				ch = *fmt++;
 4000a34:	a805883a 	mov	r2,r21
 4000a38:	15400044 	addi	r21,r2,1
 4000a3c:	10800003 	ldbu	r2,0(r2)
 4000a40:	15003fcc 	andi	r20,r2,255
 4000a44:	a500201c 	xori	r20,r20,128
 4000a48:	a53fe004 	addi	r20,r20,-128
			while (is_digit (ch)) {
 4000a4c:	a0bff404 	addi	r2,r20,-48
 4000a50:	108002b0 	cmpltui	r2,r2,10
 4000a54:	103ff41e 	bne	r2,zero,4000a28 <___vfprintf_internal_r+0x4a4>
			}
			prec = n < 0 ? -1 : n;
 4000a58:	9805883a 	mov	r2,r19
 4000a5c:	1000010e 	bge	r2,zero,4000a64 <___vfprintf_internal_r+0x4e0>
 4000a60:	00bfffc4 	movi	r2,-1
 4000a64:	e0bff515 	stw	r2,-44(fp)
			goto reswitch;
 4000a68:	003f6006 	br	40007ec <___vfprintf_internal_r+0x268>
			/*
			 * ``Note that 0 is taken as a flag, not as the
			 * beginning of a field width.''
			 *	-- ANSI X3J11
			 */
			flags |= ZEROPAD;
 4000a6c:	8c402014 	ori	r17,r17,128
			goto rflag;
 4000a70:	003f5806 	br	40007d4 <___vfprintf_internal_r+0x250>
		case '1': case '2': case '3': case '4':
		case '5': case '6': case '7': case '8': case '9':
			n = 0;
 4000a74:	0027883a 	mov	r19,zero
			do {
				n = 10 * n + to_digit (ch);
 4000a78:	98c002a4 	muli	r3,r19,10
 4000a7c:	a0bff404 	addi	r2,r20,-48
 4000a80:	18a7883a 	add	r19,r3,r2
				ch = *fmt++;
 4000a84:	a805883a 	mov	r2,r21
 4000a88:	15400044 	addi	r21,r2,1
 4000a8c:	10800003 	ldbu	r2,0(r2)
 4000a90:	15003fcc 	andi	r20,r2,255
 4000a94:	a500201c 	xori	r20,r20,128
 4000a98:	a53fe004 	addi	r20,r20,-128
			} while (is_digit (ch));
 4000a9c:	a0bff404 	addi	r2,r20,-48
 4000aa0:	108002b0 	cmpltui	r2,r2,10
 4000aa4:	103ff41e 	bne	r2,zero,4000a78 <___vfprintf_internal_r+0x4f4>
				}
				else
					goto error;
			}
#endif /* !_NO_POS_ARGS */
			width = n;
 4000aa8:	e4fff615 	stw	r19,-40(fp)
			goto reswitch;
 4000aac:	003f4f06 	br	40007ec <___vfprintf_internal_r+0x268>
#ifdef FLOATING_POINT
		case 'L':
			flags |= LONGDBL;
 4000ab0:	8c400214 	ori	r17,r17,8
			goto rflag;
 4000ab4:	003f4706 	br	40007d4 <___vfprintf_internal_r+0x250>
			if (*fmt == 'h') {
				fmt++;
				flags |= CHARINT;
			} else
#endif
				flags |= SHORTINT;
 4000ab8:	8c401014 	ori	r17,r17,64
			goto rflag;
 4000abc:	003f4506 	br	40007d4 <___vfprintf_internal_r+0x250>
		case 'l':
#if defined _WANT_IO_C99_FORMATS || !defined _NO_LONGLONG
			if (*fmt == 'l') {
 4000ac0:	a8800003 	ldbu	r2,0(r21)
 4000ac4:	10803fcc 	andi	r2,r2,255
 4000ac8:	1080201c 	xori	r2,r2,128
 4000acc:	10bfe004 	addi	r2,r2,-128
 4000ad0:	10801b18 	cmpnei	r2,r2,108
 4000ad4:	1000031e 	bne	r2,zero,4000ae4 <___vfprintf_internal_r+0x560>
				fmt++;
 4000ad8:	ad400044 	addi	r21,r21,1
				flags |= QUADINT;
 4000adc:	8c400814 	ori	r17,r17,32
 4000ae0:	003f3c06 	br	40007d4 <___vfprintf_internal_r+0x250>
			} else
#endif
				flags |= LONGINT;
 4000ae4:	8c400414 	ori	r17,r17,16
			goto rflag;
 4000ae8:	003f3a06 	br	40007d4 <___vfprintf_internal_r+0x250>
		case 'q': /* extension */
			flags |= QUADINT;
 4000aec:	8c400814 	ori	r17,r17,32
			goto rflag;
 4000af0:	003f3806 	br	40007d4 <___vfprintf_internal_r+0x250>
		    flags |= QUADINT;
		  goto rflag;
		case 'C':
#endif /* _WANT_IO_C99_FORMATS */
		case 'c':
			cp = buf;
 4000af4:	e4bfbf04 	addi	r18,fp,-260
				}
			}
			else
#endif /* _MB_CAPABLE */
			{
				*cp = GET_ARG (N, ap, int);
 4000af8:	e0bfba17 	ldw	r2,-280(fp)
 4000afc:	10c00104 	addi	r3,r2,4
 4000b00:	e0ffba15 	stw	r3,-280(fp)
 4000b04:	10800017 	ldw	r2,0(r2)
 4000b08:	90800005 	stb	r2,0(r18)
				size = 1;
 4000b0c:	00800044 	movi	r2,1
 4000b10:	e0bfed15 	stw	r2,-76(fp)
			}
			sign = '\0';
 4000b14:	e03fe2c5 	stb	zero,-117(fp)
			break;
 4000b18:	0002ab06 	br	40015c8 <___vfprintf_internal_r+0x1044>
		case 'D':  /* extension */
			flags |= LONGINT;
 4000b1c:	8c400414 	ori	r17,r17,16
			/*FALLTHROUGH*/
		case 'd':
		case 'i':
			_uquad = SARG ();
 4000b20:	8880080c 	andi	r2,r17,32
 4000b24:	10000826 	beq	r2,zero,4000b48 <___vfprintf_internal_r+0x5c4>
 4000b28:	e13fba17 	ldw	r4,-280(fp)
 4000b2c:	20800204 	addi	r2,r4,8
 4000b30:	e0bfba15 	stw	r2,-280(fp)
 4000b34:	20800017 	ldw	r2,0(r4)
 4000b38:	20c00117 	ldw	r3,4(r4)
 4000b3c:	e0bfb815 	stw	r2,-288(fp)
 4000b40:	e0ffb915 	stw	r3,-284(fp)
 4000b44:	00001e06 	br	4000bc0 <___vfprintf_internal_r+0x63c>
 4000b48:	8880040c 	andi	r2,r17,16
 4000b4c:	10000826 	beq	r2,zero,4000b70 <___vfprintf_internal_r+0x5ec>
 4000b50:	e0bfba17 	ldw	r2,-280(fp)
 4000b54:	10c00104 	addi	r3,r2,4
 4000b58:	e0ffba15 	stw	r3,-280(fp)
 4000b5c:	10800017 	ldw	r2,0(r2)
 4000b60:	e0bfb815 	stw	r2,-288(fp)
 4000b64:	1005d7fa 	srai	r2,r2,31
 4000b68:	e0bfb915 	stw	r2,-284(fp)
 4000b6c:	00001406 	br	4000bc0 <___vfprintf_internal_r+0x63c>
 4000b70:	8880100c 	andi	r2,r17,64
 4000b74:	10000b26 	beq	r2,zero,4000ba4 <___vfprintf_internal_r+0x620>
 4000b78:	e0bfba17 	ldw	r2,-280(fp)
 4000b7c:	10c00104 	addi	r3,r2,4
 4000b80:	e0ffba15 	stw	r3,-280(fp)
 4000b84:	10800017 	ldw	r2,0(r2)
 4000b88:	10bfffcc 	andi	r2,r2,65535
 4000b8c:	10a0001c 	xori	r2,r2,32768
 4000b90:	10a00004 	addi	r2,r2,-32768
 4000b94:	e0bfb815 	stw	r2,-288(fp)
 4000b98:	1005d7fa 	srai	r2,r2,31
 4000b9c:	e0bfb915 	stw	r2,-284(fp)
 4000ba0:	00000706 	br	4000bc0 <___vfprintf_internal_r+0x63c>
 4000ba4:	e0bfba17 	ldw	r2,-280(fp)
 4000ba8:	10c00104 	addi	r3,r2,4
 4000bac:	e0ffba15 	stw	r3,-280(fp)
 4000bb0:	10800017 	ldw	r2,0(r2)
 4000bb4:	e0bfb815 	stw	r2,-288(fp)
 4000bb8:	1005d7fa 	srai	r2,r2,31
 4000bbc:	e0bfb915 	stw	r2,-284(fp)
 4000bc0:	e0bfb817 	ldw	r2,-288(fp)
 4000bc4:	e0bff115 	stw	r2,-60(fp)
 4000bc8:	e0bfb917 	ldw	r2,-284(fp)
 4000bcc:	e0bff215 	stw	r2,-56(fp)
#ifndef _NO_LONGLONG
			if ((quad_t)_uquad < 0)
 4000bd0:	e0bff117 	ldw	r2,-60(fp)
 4000bd4:	e0fff217 	ldw	r3,-56(fp)
 4000bd8:	18000d0e 	bge	r3,zero,4000c10 <___vfprintf_internal_r+0x68c>
#else
			if ((long) _uquad < 0)
#endif
			{

				_uquad = -_uquad;
 4000bdc:	000d883a 	mov	r6,zero
 4000be0:	000f883a 	mov	r7,zero
 4000be4:	e13ff117 	ldw	r4,-60(fp)
 4000be8:	e17ff217 	ldw	r5,-56(fp)
 4000bec:	3105c83a 	sub	r2,r6,r4
 4000bf0:	3091803a 	cmpltu	r8,r6,r2
 4000bf4:	3947c83a 	sub	r3,r7,r5
 4000bf8:	1a09c83a 	sub	r4,r3,r8
 4000bfc:	2007883a 	mov	r3,r4
 4000c00:	e0bff115 	stw	r2,-60(fp)
 4000c04:	e0fff215 	stw	r3,-56(fp)
				sign = '-';
 4000c08:	00800b44 	movi	r2,45
 4000c0c:	e0bfe2c5 	stb	r2,-117(fp)
			}
			base = DEC;
 4000c10:	00800044 	movi	r2,1
 4000c14:	e0bff015 	stw	r2,-64(fp)
			goto number;
 4000c18:	0001d406 	br	400136c <___vfprintf_internal_r+0xde8>
		case 'E':
		case 'f':
		case 'g':
		case 'G':
# ifdef _NO_LONGDBL
			if (flags & LONGDBL) {
 4000c1c:	8880020c 	andi	r2,r17,8
 4000c20:	10000826 	beq	r2,zero,4000c44 <___vfprintf_internal_r+0x6c0>
				_fpvalue = (double) GET_ARG (N, ap, _LONG_DOUBLE);
 4000c24:	e13fba17 	ldw	r4,-280(fp)
 4000c28:	20800204 	addi	r2,r4,8
 4000c2c:	e0bfba15 	stw	r2,-280(fp)
 4000c30:	20800017 	ldw	r2,0(r4)
 4000c34:	20c00117 	ldw	r3,4(r4)
 4000c38:	e0bfe015 	stw	r2,-128(fp)
 4000c3c:	e0ffe115 	stw	r3,-124(fp)
 4000c40:	00000706 	br	4000c60 <___vfprintf_internal_r+0x6dc>
			} else {
				_fpvalue = GET_ARG (N, ap, double);
 4000c44:	e13fba17 	ldw	r4,-280(fp)
 4000c48:	20800204 	addi	r2,r4,8
 4000c4c:	e0bfba15 	stw	r2,-280(fp)
 4000c50:	20800017 	ldw	r2,0(r4)
 4000c54:	20c00117 	ldw	r3,4(r4)
 4000c58:	e0bfe015 	stw	r2,-128(fp)
 4000c5c:	e0ffe115 	stw	r3,-124(fp)

			   If the output is infinite or NaN, leading
			   zeros are not permitted.  Otherwise, scanf
			   could not read what printf wrote.
			 */
			if (isinf (_fpvalue)) {
 4000c60:	e0bfe017 	ldw	r2,-128(fp)
 4000c64:	e0ffe117 	ldw	r3,-124(fp)
 4000c68:	e0bfb215 	stw	r2,-312(fp)
 4000c6c:	01200034 	movhi	r4,32768
 4000c70:	213fffc4 	addi	r4,r4,-1
 4000c74:	1904703a 	and	r2,r3,r4
 4000c78:	e0bfb315 	stw	r2,-308(fp)
 4000c7c:	04c00044 	movi	r19,1
 4000c80:	01bfffc4 	movi	r6,-1
 4000c84:	01dffc34 	movhi	r7,32752
 4000c88:	39ffffc4 	addi	r7,r7,-1
 4000c8c:	e13fb217 	ldw	r4,-312(fp)
 4000c90:	e17fb317 	ldw	r5,-308(fp)
 4000c94:	40105700 	call	4010570 <__unorddf2>
 4000c98:	1000081e 	bne	r2,zero,4000cbc <___vfprintf_internal_r+0x738>
 4000c9c:	01bfffc4 	movi	r6,-1
 4000ca0:	01dffc34 	movhi	r7,32752
 4000ca4:	39ffffc4 	addi	r7,r7,-1
 4000ca8:	e13fb217 	ldw	r4,-312(fp)
 4000cac:	e17fb317 	ldw	r5,-308(fp)
 4000cb0:	400f4dc0 	call	400f4dc <__ledf2>
 4000cb4:	0080010e 	bge	zero,r2,4000cbc <___vfprintf_internal_r+0x738>
 4000cb8:	0027883a 	mov	r19,zero
 4000cbc:	9880005c 	xori	r2,r19,1
 4000cc0:	10803fcc 	andi	r2,r2,255
 4000cc4:	10000226 	beq	r2,zero,4000cd0 <___vfprintf_internal_r+0x74c>
 4000cc8:	00800044 	movi	r2,1
 4000ccc:	00000106 	br	4000cd4 <___vfprintf_internal_r+0x750>
 4000cd0:	0005883a 	mov	r2,zero
 4000cd4:	10803fcc 	andi	r2,r2,255
 4000cd8:	10001626 	beq	r2,zero,4000d34 <___vfprintf_internal_r+0x7b0>
				if (_fpvalue < 0)
 4000cdc:	e0bfe017 	ldw	r2,-128(fp)
 4000ce0:	e0ffe117 	ldw	r3,-124(fp)
 4000ce4:	000d883a 	mov	r6,zero
 4000ce8:	000f883a 	mov	r7,zero
 4000cec:	1009883a 	mov	r4,r2
 4000cf0:	180b883a 	mov	r5,r3
 4000cf4:	400f4dc0 	call	400f4dc <__ledf2>
 4000cf8:	1000020e 	bge	r2,zero,4000d04 <___vfprintf_internal_r+0x780>
					sign = '-';
 4000cfc:	00800b44 	movi	r2,45
 4000d00:	e0bfe2c5 	stb	r2,-117(fp)
				if (ch <= 'G') /* 'A', 'E', 'F', or 'G' */
 4000d04:	a0801208 	cmpgei	r2,r20,72
 4000d08:	1000031e 	bne	r2,zero,4000d18 <___vfprintf_internal_r+0x794>
					cp = "INF";
 4000d0c:	04810074 	movhi	r18,1025
 4000d10:	948da104 	addi	r18,r18,13956
 4000d14:	00000206 	br	4000d20 <___vfprintf_internal_r+0x79c>
				else
					cp = "inf";
 4000d18:	04810074 	movhi	r18,1025
 4000d1c:	948da204 	addi	r18,r18,13960
				size = 3;
 4000d20:	008000c4 	movi	r2,3
 4000d24:	e0bfed15 	stw	r2,-76(fp)
				flags &= ~ZEROPAD;
 4000d28:	00bfdfc4 	movi	r2,-129
 4000d2c:	88a2703a 	and	r17,r17,r2
				break;
 4000d30:	00022506 	br	40015c8 <___vfprintf_internal_r+0x1044>
			}
			if (isnan (_fpvalue)) {
 4000d34:	e0bfe017 	ldw	r2,-128(fp)
 4000d38:	e0ffe117 	ldw	r3,-124(fp)
 4000d3c:	100d883a 	mov	r6,r2
 4000d40:	180f883a 	mov	r7,r3
 4000d44:	1009883a 	mov	r4,r2
 4000d48:	180b883a 	mov	r5,r3
 4000d4c:	40105700 	call	4010570 <__unorddf2>
 4000d50:	10001326 	beq	r2,zero,4000da0 <___vfprintf_internal_r+0x81c>
				if (signbit (_fpvalue))
 4000d54:	e0bfe017 	ldw	r2,-128(fp)
 4000d58:	e0ffe117 	ldw	r3,-124(fp)
 4000d5c:	1805883a 	mov	r2,r3
 4000d60:	10a0002c 	andhi	r2,r2,32768
 4000d64:	10000226 	beq	r2,zero,4000d70 <___vfprintf_internal_r+0x7ec>
					sign = '-';
 4000d68:	00800b44 	movi	r2,45
 4000d6c:	e0bfe2c5 	stb	r2,-117(fp)
				if (ch <= 'G') /* 'A', 'E', 'F', or 'G' */
 4000d70:	a0801208 	cmpgei	r2,r20,72
 4000d74:	1000031e 	bne	r2,zero,4000d84 <___vfprintf_internal_r+0x800>
					cp = "NAN";
 4000d78:	04810074 	movhi	r18,1025
 4000d7c:	948da304 	addi	r18,r18,13964
 4000d80:	00000206 	br	4000d8c <___vfprintf_internal_r+0x808>
				else
					cp = "nan";
 4000d84:	04810074 	movhi	r18,1025
 4000d88:	948da404 	addi	r18,r18,13968
				size = 3;
 4000d8c:	008000c4 	movi	r2,3
 4000d90:	e0bfed15 	stw	r2,-76(fp)
				flags &= ~ZEROPAD;
 4000d94:	00bfdfc4 	movi	r2,-129
 4000d98:	88a2703a 	and	r17,r17,r2
				break;
 4000d9c:	00020a06 	br	40015c8 <___vfprintf_internal_r+0x1044>
				  }
				else
				  cp = buf;
			} else
# endif /* _WANT_IO_C99_FORMATS */
			if (prec == -1) {
 4000da0:	e0bff517 	ldw	r2,-44(fp)
 4000da4:	10bfffd8 	cmpnei	r2,r2,-1
 4000da8:	1000031e 	bne	r2,zero,4000db8 <___vfprintf_internal_r+0x834>
				prec = DEFPREC;
 4000dac:	00800184 	movi	r2,6
 4000db0:	e0bff515 	stw	r2,-44(fp)
 4000db4:	00000806 	br	4000dd8 <___vfprintf_internal_r+0x854>
			} else if ((ch == 'g' || ch == 'G') && prec == 0) {
 4000db8:	a08019e0 	cmpeqi	r2,r20,103
 4000dbc:	1000021e 	bne	r2,zero,4000dc8 <___vfprintf_internal_r+0x844>
 4000dc0:	a08011d8 	cmpnei	r2,r20,71
 4000dc4:	1000041e 	bne	r2,zero,4000dd8 <___vfprintf_internal_r+0x854>
 4000dc8:	e0bff517 	ldw	r2,-44(fp)
 4000dcc:	1000021e 	bne	r2,zero,4000dd8 <___vfprintf_internal_r+0x854>
				prec = 1;
 4000dd0:	00800044 	movi	r2,1
 4000dd4:	e0bff515 	stw	r2,-44(fp)
			}

			flags |= FPT;
 4000dd8:	8c404014 	ori	r17,r17,256

			cp = cvt (data, _fpvalue, prec, flags, &softsign,
 4000ddc:	e0bfe017 	ldw	r2,-128(fp)
 4000de0:	e0ffe117 	ldw	r3,-124(fp)
 4000de4:	dc800515 	stw	r18,20(sp)
 4000de8:	e13fdc04 	addi	r4,fp,-144
 4000dec:	d9000415 	stw	r4,16(sp)
 4000df0:	dd000315 	stw	r20,12(sp)
 4000df4:	e13fdf04 	addi	r4,fp,-132
 4000df8:	d9000215 	stw	r4,8(sp)
 4000dfc:	e13fe284 	addi	r4,fp,-118
 4000e00:	d9000115 	stw	r4,4(sp)
 4000e04:	dc400015 	stw	r17,0(sp)
 4000e08:	e1fff517 	ldw	r7,-44(fp)
 4000e0c:	100b883a 	mov	r5,r2
 4000e10:	180d883a 	mov	r6,r3
 4000e14:	e13fbd17 	ldw	r4,-268(fp)
 4000e18:	40026c40 	call	40026c4 <cvt>
 4000e1c:	1025883a 	mov	r18,r2
				  &expt, ch, &ndig, cp);

			if (ch == 'g' || ch == 'G') {
 4000e20:	a08019e0 	cmpeqi	r2,r20,103
 4000e24:	1000021e 	bne	r2,zero,4000e30 <___vfprintf_internal_r+0x8ac>
 4000e28:	a08011d8 	cmpnei	r2,r20,71
 4000e2c:	1000091e 	bne	r2,zero,4000e54 <___vfprintf_internal_r+0x8d0>
				if (expt <= -4 || expt > prec)
 4000e30:	e0bfdf17 	ldw	r2,-132(fp)
 4000e34:	10bfff50 	cmplti	r2,r2,-3
 4000e38:	1000031e 	bne	r2,zero,4000e48 <___vfprintf_internal_r+0x8c4>
 4000e3c:	e0bfdf17 	ldw	r2,-132(fp)
 4000e40:	e0fff517 	ldw	r3,-44(fp)
 4000e44:	1880020e 	bge	r3,r2,4000e50 <___vfprintf_internal_r+0x8cc>
					ch -= 2; /* 'e' or 'E' */
 4000e48:	a53fff84 	addi	r20,r20,-2
 4000e4c:	00000106 	br	4000e54 <___vfprintf_internal_r+0x8d0>
				else
					ch = 'g';
 4000e50:	050019c4 	movi	r20,103
			}
# ifdef _WANT_IO_C99_FORMATS
			else if (ch == 'F')
				ch = 'f';
# endif
			if (ch <= 'e') {	/* 'a', 'A', 'e', or 'E' fmt */
 4000e54:	a0801988 	cmpgei	r2,r20,102
 4000e58:	1000181e 	bne	r2,zero,4000ebc <___vfprintf_internal_r+0x938>
				--expt;
 4000e5c:	e0bfdf17 	ldw	r2,-132(fp)
 4000e60:	10bfffc4 	addi	r2,r2,-1
 4000e64:	e0bfdf15 	stw	r2,-132(fp)
				expsize = exponent (expstr, expt, ch);
 4000e68:	e0ffdf17 	ldw	r3,-132(fp)
 4000e6c:	e0bfdd44 	addi	r2,fp,-139
 4000e70:	a00d883a 	mov	r6,r20
 4000e74:	180b883a 	mov	r5,r3
 4000e78:	1009883a 	mov	r4,r2
 4000e7c:	40028cc0 	call	40028cc <exponent>
 4000e80:	e0bff415 	stw	r2,-48(fp)
				size = expsize + ndig;
 4000e84:	e0bfdc17 	ldw	r2,-144(fp)
 4000e88:	e0fff417 	ldw	r3,-48(fp)
 4000e8c:	1885883a 	add	r2,r3,r2
 4000e90:	e0bfed15 	stw	r2,-76(fp)
				if (ndig > 1 || flags & ALT)
 4000e94:	e0bfdc17 	ldw	r2,-144(fp)
 4000e98:	10800088 	cmpgei	r2,r2,2
 4000e9c:	1000021e 	bne	r2,zero,4000ea8 <___vfprintf_internal_r+0x924>
 4000ea0:	8880004c 	andi	r2,r17,1
 4000ea4:	10003d26 	beq	r2,zero,4000f9c <___vfprintf_internal_r+0xa18>
					size += decp_len;
 4000ea8:	e0ffed17 	ldw	r3,-76(fp)
 4000eac:	e0bfe717 	ldw	r2,-100(fp)
 4000eb0:	1885883a 	add	r2,r3,r2
 4000eb4:	e0bfed15 	stw	r2,-76(fp)
 4000eb8:	00003806 	br	4000f9c <___vfprintf_internal_r+0xa18>
# ifdef _WANT_IO_C99_FORMATS
				flags &= ~GROUPING;
# endif
			} else {
				if (ch == 'f') {		/* f fmt */
 4000ebc:	a0801998 	cmpnei	r2,r20,102
 4000ec0:	10001b1e 	bne	r2,zero,4000f30 <___vfprintf_internal_r+0x9ac>
					if (expt > 0) {
 4000ec4:	e0bfdf17 	ldw	r2,-132(fp)
 4000ec8:	00800d0e 	bge	zero,r2,4000f00 <___vfprintf_internal_r+0x97c>
						size = expt;
 4000ecc:	e0bfdf17 	ldw	r2,-132(fp)
 4000ed0:	e0bfed15 	stw	r2,-76(fp)
						if (prec || flags & ALT)
 4000ed4:	e0bff517 	ldw	r2,-44(fp)
 4000ed8:	1000021e 	bne	r2,zero,4000ee4 <___vfprintf_internal_r+0x960>
 4000edc:	8880004c 	andi	r2,r17,1
 4000ee0:	10002c26 	beq	r2,zero,4000f94 <___vfprintf_internal_r+0xa10>
							size += prec + decp_len;
 4000ee4:	e0fff517 	ldw	r3,-44(fp)
 4000ee8:	e0bfe717 	ldw	r2,-100(fp)
 4000eec:	1887883a 	add	r3,r3,r2
 4000ef0:	e0bfed17 	ldw	r2,-76(fp)
 4000ef4:	1885883a 	add	r2,r3,r2
 4000ef8:	e0bfed15 	stw	r2,-76(fp)
 4000efc:	00002506 	br	4000f94 <___vfprintf_internal_r+0xa10>
					} else	/* "0.X" */
						size = (prec || flags & ALT)
							  ? prec + 1 + decp_len
							  : 1;
 4000f00:	e0bff517 	ldw	r2,-44(fp)
 4000f04:	1000021e 	bne	r2,zero,4000f10 <___vfprintf_internal_r+0x98c>
						size = (prec || flags & ALT)
 4000f08:	8880004c 	andi	r2,r17,1
 4000f0c:	10000526 	beq	r2,zero,4000f24 <___vfprintf_internal_r+0x9a0>
							  ? prec + 1 + decp_len
 4000f10:	e0fff517 	ldw	r3,-44(fp)
 4000f14:	e0bfe717 	ldw	r2,-100(fp)
 4000f18:	1885883a 	add	r2,r3,r2
 4000f1c:	10800044 	addi	r2,r2,1
							  : 1;
 4000f20:	00000106 	br	4000f28 <___vfprintf_internal_r+0x9a4>
 4000f24:	00800044 	movi	r2,1
						size = (prec || flags & ALT)
 4000f28:	e0bfed15 	stw	r2,-76(fp)
 4000f2c:	00001906 	br	4000f94 <___vfprintf_internal_r+0xa10>
				} else if (expt >= ndig) { /* fixed g fmt */
 4000f30:	e0ffdf17 	ldw	r3,-132(fp)
 4000f34:	e0bfdc17 	ldw	r2,-144(fp)
 4000f38:	18800916 	blt	r3,r2,4000f60 <___vfprintf_internal_r+0x9dc>
					size = expt;
 4000f3c:	e0bfdf17 	ldw	r2,-132(fp)
 4000f40:	e0bfed15 	stw	r2,-76(fp)
					if (flags & ALT)
 4000f44:	8880004c 	andi	r2,r17,1
 4000f48:	10001226 	beq	r2,zero,4000f94 <___vfprintf_internal_r+0xa10>
						size += decp_len;
 4000f4c:	e0ffed17 	ldw	r3,-76(fp)
 4000f50:	e0bfe717 	ldw	r2,-100(fp)
 4000f54:	1885883a 	add	r2,r3,r2
 4000f58:	e0bfed15 	stw	r2,-76(fp)
 4000f5c:	00000d06 	br	4000f94 <___vfprintf_internal_r+0xa10>
				} else {
					size = ndig + decp_len;
 4000f60:	e0bfdc17 	ldw	r2,-144(fp)
 4000f64:	1007883a 	mov	r3,r2
 4000f68:	e0bfe717 	ldw	r2,-100(fp)
 4000f6c:	1885883a 	add	r2,r3,r2
 4000f70:	e0bfed15 	stw	r2,-76(fp)
					if (expt <= 0)
 4000f74:	e0bfdf17 	ldw	r2,-132(fp)
 4000f78:	00800616 	blt	zero,r2,4000f94 <___vfprintf_internal_r+0xa10>
						size += 1 - expt;
 4000f7c:	e0bfdf17 	ldw	r2,-132(fp)
 4000f80:	00c00044 	movi	r3,1
 4000f84:	1885c83a 	sub	r2,r3,r2
 4000f88:	e0ffed17 	ldw	r3,-76(fp)
 4000f8c:	1885883a 	add	r2,r3,r2
 4000f90:	e0bfed15 	stw	r2,-76(fp)
							nrepeats++;
					}
					size += (nseps + nrepeats) * thsnd_len;
				} else
# endif
					lead = expt;
 4000f94:	e0bfdf17 	ldw	r2,-132(fp)
 4000f98:	e0bff315 	stw	r2,-52(fp)
			}

			if (softsign)
 4000f9c:	e0bfe283 	ldbu	r2,-118(fp)
 4000fa0:	10803fcc 	andi	r2,r2,255
 4000fa4:	1080201c 	xori	r2,r2,128
 4000fa8:	10bfe004 	addi	r2,r2,-128
 4000fac:	10018526 	beq	r2,zero,40015c4 <___vfprintf_internal_r+0x1040>
				sign = '-';
 4000fb0:	00800b44 	movi	r2,45
 4000fb4:	e0bfe2c5 	stb	r2,-117(fp)
			break;
 4000fb8:	00018206 	br	40015c4 <___vfprintf_internal_r+0x1040>
			flags &= ~LONGINT;
			goto string;
#endif
		case 'n':
#ifndef _NO_LONGLONG
			if (flags & QUADINT)
 4000fbc:	8880080c 	andi	r2,r17,32
 4000fc0:	10000d26 	beq	r2,zero,4000ff8 <___vfprintf_internal_r+0xa74>
				*GET_ARG (N, ap, quad_ptr_t) = ret;
 4000fc4:	e0bfba17 	ldw	r2,-280(fp)
 4000fc8:	10c00104 	addi	r3,r2,4
 4000fcc:	e0ffba15 	stw	r3,-280(fp)
 4000fd0:	10800017 	ldw	r2,0(r2)
 4000fd4:	e0fff717 	ldw	r3,-36(fp)
 4000fd8:	e0ffb015 	stw	r3,-320(fp)
 4000fdc:	1807d7fa 	srai	r3,r3,31
 4000fe0:	e0ffb115 	stw	r3,-316(fp)
 4000fe4:	e0ffb017 	ldw	r3,-320(fp)
 4000fe8:	10c00015 	stw	r3,0(r2)
 4000fec:	e0ffb117 	ldw	r3,-316(fp)
 4000ff0:	10c00115 	stw	r3,4(r2)
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
			continue;	/* no output */
 4000ff4:	00054106 	br	40024fc <___vfprintf_internal_r+0x1f78>
			if (flags & LONGINT)
 4000ff8:	8880040c 	andi	r2,r17,16
 4000ffc:	10000726 	beq	r2,zero,400101c <___vfprintf_internal_r+0xa98>
				*GET_ARG (N, ap, long_ptr_t) = ret;
 4001000:	e0bfba17 	ldw	r2,-280(fp)
 4001004:	10c00104 	addi	r3,r2,4
 4001008:	e0ffba15 	stw	r3,-280(fp)
 400100c:	10800017 	ldw	r2,0(r2)
 4001010:	e0fff717 	ldw	r3,-36(fp)
 4001014:	10c00015 	stw	r3,0(r2)
			continue;	/* no output */
 4001018:	00053806 	br	40024fc <___vfprintf_internal_r+0x1f78>
			else if (flags & SHORTINT)
 400101c:	8880100c 	andi	r2,r17,64
 4001020:	10000726 	beq	r2,zero,4001040 <___vfprintf_internal_r+0xabc>
				*GET_ARG (N, ap, short_ptr_t) = ret;
 4001024:	e0bfba17 	ldw	r2,-280(fp)
 4001028:	10c00104 	addi	r3,r2,4
 400102c:	e0ffba15 	stw	r3,-280(fp)
 4001030:	10800017 	ldw	r2,0(r2)
 4001034:	e0fff717 	ldw	r3,-36(fp)
 4001038:	10c0000d 	sth	r3,0(r2)
			continue;	/* no output */
 400103c:	00052f06 	br	40024fc <___vfprintf_internal_r+0x1f78>
				*GET_ARG (N, ap, int_ptr_t) = ret;
 4001040:	e0bfba17 	ldw	r2,-280(fp)
 4001044:	10c00104 	addi	r3,r2,4
 4001048:	e0ffba15 	stw	r3,-280(fp)
 400104c:	10800017 	ldw	r2,0(r2)
 4001050:	e0fff717 	ldw	r3,-36(fp)
 4001054:	10c00015 	stw	r3,0(r2)
			continue;	/* no output */
 4001058:	00052806 	br	40024fc <___vfprintf_internal_r+0x1f78>
		case 'O': /* extension */
			flags |= LONGINT;
 400105c:	8c400414 	ori	r17,r17,16
			/*FALLTHROUGH*/
		case 'o':
			_uquad = UARG ();
 4001060:	8880080c 	andi	r2,r17,32
 4001064:	10000626 	beq	r2,zero,4001080 <___vfprintf_internal_r+0xafc>
 4001068:	e0bfba17 	ldw	r2,-280(fp)
 400106c:	10c00204 	addi	r3,r2,8
 4001070:	e0ffba15 	stw	r3,-280(fp)
 4001074:	15800017 	ldw	r22,0(r2)
 4001078:	15c00117 	ldw	r23,4(r2)
 400107c:	00001906 	br	40010e4 <___vfprintf_internal_r+0xb60>
 4001080:	8880040c 	andi	r2,r17,16
 4001084:	10000726 	beq	r2,zero,40010a4 <___vfprintf_internal_r+0xb20>
 4001088:	e0bfba17 	ldw	r2,-280(fp)
 400108c:	10c00104 	addi	r3,r2,4
 4001090:	e0ffba15 	stw	r3,-280(fp)
 4001094:	10800017 	ldw	r2,0(r2)
 4001098:	102d883a 	mov	r22,r2
 400109c:	002f883a 	mov	r23,zero
 40010a0:	00001006 	br	40010e4 <___vfprintf_internal_r+0xb60>
 40010a4:	8880100c 	andi	r2,r17,64
 40010a8:	10000826 	beq	r2,zero,40010cc <___vfprintf_internal_r+0xb48>
 40010ac:	e0bfba17 	ldw	r2,-280(fp)
 40010b0:	10c00104 	addi	r3,r2,4
 40010b4:	e0ffba15 	stw	r3,-280(fp)
 40010b8:	10800017 	ldw	r2,0(r2)
 40010bc:	10bfffcc 	andi	r2,r2,65535
 40010c0:	102d883a 	mov	r22,r2
 40010c4:	002f883a 	mov	r23,zero
 40010c8:	00000606 	br	40010e4 <___vfprintf_internal_r+0xb60>
 40010cc:	e0bfba17 	ldw	r2,-280(fp)
 40010d0:	10c00104 	addi	r3,r2,4
 40010d4:	e0ffba15 	stw	r3,-280(fp)
 40010d8:	10800017 	ldw	r2,0(r2)
 40010dc:	102d883a 	mov	r22,r2
 40010e0:	002f883a 	mov	r23,zero
 40010e4:	e5bff115 	stw	r22,-60(fp)
 40010e8:	e5fff215 	stw	r23,-56(fp)
			base = OCT;
 40010ec:	e03ff015 	stw	zero,-64(fp)
#ifdef _WANT_IO_C99_FORMATS
			flags &= ~GROUPING;
#endif
			goto nosign;
 40010f0:	00009d06 	br	4001368 <___vfprintf_internal_r+0xde4>
			 * of printable characters, in an implementation-
			 * defined manner.''
			 *	-- ANSI X3J11
			 */
			/* NOSTRICT */
			_uquad = (uintptr_t) GET_ARG (N, ap, void_ptr_t);
 40010f4:	e0bfba17 	ldw	r2,-280(fp)
 40010f8:	10c00104 	addi	r3,r2,4
 40010fc:	e0ffba15 	stw	r3,-280(fp)
 4001100:	10800017 	ldw	r2,0(r2)
 4001104:	e0bff115 	stw	r2,-60(fp)
 4001108:	e03ff215 	stw	zero,-56(fp)
			base = HEX;
 400110c:	00800084 	movi	r2,2
 4001110:	e0bff015 	stw	r2,-64(fp)
			xdigs = "0123456789abcdef";
 4001114:	00810074 	movhi	r2,1025
 4001118:	108da504 	addi	r2,r2,13972
 400111c:	e0bfec15 	stw	r2,-80(fp)
			flags |= HEXPREFIX;
 4001120:	8c400094 	ori	r17,r17,2
			ox[0] = '0';
 4001124:	00800c04 	movi	r2,48
 4001128:	e0bfbe85 	stb	r2,-262(fp)
			ox[1] = ch = 'x';
 400112c:	05001e04 	movi	r20,120
 4001130:	00801e04 	movi	r2,120
 4001134:	e0bfbec5 	stb	r2,-261(fp)
			goto nosign;
 4001138:	00008b06 	br	4001368 <___vfprintf_internal_r+0xde4>
		case 's':
#ifdef _WANT_IO_C99_FORMATS
		case 'S':
#endif
			cp = GET_ARG (N, ap, char_ptr_t);
 400113c:	e0bfba17 	ldw	r2,-280(fp)
 4001140:	10c00104 	addi	r3,r2,4
 4001144:	e0ffba15 	stw	r3,-280(fp)
 4001148:	14800017 	ldw	r18,0(r2)
#ifdef _GLIBC_EXTENSION
string:
#endif
			sign = '\0';
 400114c:	e03fe2c5 	stb	zero,-117(fp)
#ifndef __OPTIMIZE_SIZE__
			/* Behavior is undefined if the user passed a
			   NULL string when precision is not 0.
			   However, if we are not optimizing for size,
			   we might as well mirror glibc behavior.  */
			if (cp == NULL) {
 4001150:	9000081e 	bne	r18,zero,4001174 <___vfprintf_internal_r+0xbf0>
				cp = "(null)";
 4001154:	04810074 	movhi	r18,1025
 4001158:	948daa04 	addi	r18,r18,13992
				size = ((unsigned) prec > 6U) ? 6 : prec;
 400115c:	e0bff517 	ldw	r2,-44(fp)
 4001160:	10c001f0 	cmpltui	r3,r2,7
 4001164:	1800011e 	bne	r3,zero,400116c <___vfprintf_internal_r+0xbe8>
 4001168:	00800184 	movi	r2,6
 400116c:	e0bfed15 	stw	r2,-76(fp)
				else
					size = prec;
			} else
				size = strlen (cp);

			break;
 4001170:	00011506 	br	40015c8 <___vfprintf_internal_r+0x1044>
			if (prec >= 0) {
 4001174:	e0bff517 	ldw	r2,-44(fp)
 4001178:	10000f16 	blt	r2,zero,40011b8 <___vfprintf_internal_r+0xc34>
				char *p = memchr (cp, 0, prec);
 400117c:	e0bff517 	ldw	r2,-44(fp)
 4001180:	100d883a 	mov	r6,r2
 4001184:	000b883a 	mov	r5,zero
 4001188:	9009883a 	mov	r4,r18
 400118c:	40073d80 	call	40073d8 <memchr>
 4001190:	e0bfe415 	stw	r2,-112(fp)
				if (p != NULL)
 4001194:	e0bfe417 	ldw	r2,-112(fp)
 4001198:	10000426 	beq	r2,zero,40011ac <___vfprintf_internal_r+0xc28>
					size = p - cp;
 400119c:	e0bfe417 	ldw	r2,-112(fp)
 40011a0:	1485c83a 	sub	r2,r2,r18
 40011a4:	e0bfed15 	stw	r2,-76(fp)
			break;
 40011a8:	00010706 	br	40015c8 <___vfprintf_internal_r+0x1044>
					size = prec;
 40011ac:	e0bff517 	ldw	r2,-44(fp)
 40011b0:	e0bfed15 	stw	r2,-76(fp)
			break;
 40011b4:	00010406 	br	40015c8 <___vfprintf_internal_r+0x1044>
				size = strlen (cp);
 40011b8:	9009883a 	mov	r4,r18
 40011bc:	40098340 	call	4009834 <strlen>
 40011c0:	e0bfed15 	stw	r2,-76(fp)
			break;
 40011c4:	00010006 	br	40015c8 <___vfprintf_internal_r+0x1044>
		case 'U': /* extension */
			flags |= LONGINT;
 40011c8:	8c400414 	ori	r17,r17,16
			/*FALLTHROUGH*/
		case 'u':
			_uquad = UARG ();
 40011cc:	8880080c 	andi	r2,r17,32
 40011d0:	10000826 	beq	r2,zero,40011f4 <___vfprintf_internal_r+0xc70>
 40011d4:	e0bfba17 	ldw	r2,-280(fp)
 40011d8:	10c00204 	addi	r3,r2,8
 40011dc:	e0ffba15 	stw	r3,-280(fp)
 40011e0:	10c00017 	ldw	r3,0(r2)
 40011e4:	e0ffb615 	stw	r3,-296(fp)
 40011e8:	10800117 	ldw	r2,4(r2)
 40011ec:	e0bfb715 	stw	r2,-292(fp)
 40011f0:	00001906 	br	4001258 <___vfprintf_internal_r+0xcd4>
 40011f4:	8880040c 	andi	r2,r17,16
 40011f8:	10000726 	beq	r2,zero,4001218 <___vfprintf_internal_r+0xc94>
 40011fc:	e0bfba17 	ldw	r2,-280(fp)
 4001200:	10c00104 	addi	r3,r2,4
 4001204:	e0ffba15 	stw	r3,-280(fp)
 4001208:	10800017 	ldw	r2,0(r2)
 400120c:	e0bfb615 	stw	r2,-296(fp)
 4001210:	e03fb715 	stw	zero,-292(fp)
 4001214:	00001006 	br	4001258 <___vfprintf_internal_r+0xcd4>
 4001218:	8880100c 	andi	r2,r17,64
 400121c:	10000826 	beq	r2,zero,4001240 <___vfprintf_internal_r+0xcbc>
 4001220:	e0bfba17 	ldw	r2,-280(fp)
 4001224:	10c00104 	addi	r3,r2,4
 4001228:	e0ffba15 	stw	r3,-280(fp)
 400122c:	10800017 	ldw	r2,0(r2)
 4001230:	10bfffcc 	andi	r2,r2,65535
 4001234:	e0bfb615 	stw	r2,-296(fp)
 4001238:	e03fb715 	stw	zero,-292(fp)
 400123c:	00000606 	br	4001258 <___vfprintf_internal_r+0xcd4>
 4001240:	e0bfba17 	ldw	r2,-280(fp)
 4001244:	10c00104 	addi	r3,r2,4
 4001248:	e0ffba15 	stw	r3,-280(fp)
 400124c:	10800017 	ldw	r2,0(r2)
 4001250:	e0bfb615 	stw	r2,-296(fp)
 4001254:	e03fb715 	stw	zero,-292(fp)
 4001258:	e0bfb617 	ldw	r2,-296(fp)
 400125c:	e0bff115 	stw	r2,-60(fp)
 4001260:	e0bfb717 	ldw	r2,-292(fp)
 4001264:	e0bff215 	stw	r2,-56(fp)
			base = DEC;
 4001268:	00800044 	movi	r2,1
 400126c:	e0bff015 	stw	r2,-64(fp)
			goto nosign;
 4001270:	00003d06 	br	4001368 <___vfprintf_internal_r+0xde4>
		case 'X':
			xdigs = "0123456789ABCDEF";
 4001274:	00810074 	movhi	r2,1025
 4001278:	108dac04 	addi	r2,r2,14000
 400127c:	e0bfec15 	stw	r2,-80(fp)
			goto hex;
 4001280:	00000306 	br	4001290 <___vfprintf_internal_r+0xd0c>
		case 'x':
			xdigs = "0123456789abcdef";
 4001284:	00810074 	movhi	r2,1025
 4001288:	108da504 	addi	r2,r2,13972
 400128c:	e0bfec15 	stw	r2,-80(fp)
hex:			_uquad = UARG ();
 4001290:	8880080c 	andi	r2,r17,32
 4001294:	10000826 	beq	r2,zero,40012b8 <___vfprintf_internal_r+0xd34>
 4001298:	e0bfba17 	ldw	r2,-280(fp)
 400129c:	10c00204 	addi	r3,r2,8
 40012a0:	e0ffba15 	stw	r3,-280(fp)
 40012a4:	10c00017 	ldw	r3,0(r2)
 40012a8:	e0ffb415 	stw	r3,-304(fp)
 40012ac:	10800117 	ldw	r2,4(r2)
 40012b0:	e0bfb515 	stw	r2,-300(fp)
 40012b4:	00001906 	br	400131c <___vfprintf_internal_r+0xd98>
 40012b8:	8880040c 	andi	r2,r17,16
 40012bc:	10000726 	beq	r2,zero,40012dc <___vfprintf_internal_r+0xd58>
 40012c0:	e0bfba17 	ldw	r2,-280(fp)
 40012c4:	10c00104 	addi	r3,r2,4
 40012c8:	e0ffba15 	stw	r3,-280(fp)
 40012cc:	10800017 	ldw	r2,0(r2)
 40012d0:	e0bfb415 	stw	r2,-304(fp)
 40012d4:	e03fb515 	stw	zero,-300(fp)
 40012d8:	00001006 	br	400131c <___vfprintf_internal_r+0xd98>
 40012dc:	8880100c 	andi	r2,r17,64
 40012e0:	10000826 	beq	r2,zero,4001304 <___vfprintf_internal_r+0xd80>
 40012e4:	e0bfba17 	ldw	r2,-280(fp)
 40012e8:	10c00104 	addi	r3,r2,4
 40012ec:	e0ffba15 	stw	r3,-280(fp)
 40012f0:	10800017 	ldw	r2,0(r2)
 40012f4:	10bfffcc 	andi	r2,r2,65535
 40012f8:	e0bfb415 	stw	r2,-304(fp)
 40012fc:	e03fb515 	stw	zero,-300(fp)
 4001300:	00000606 	br	400131c <___vfprintf_internal_r+0xd98>
 4001304:	e0bfba17 	ldw	r2,-280(fp)
 4001308:	10c00104 	addi	r3,r2,4
 400130c:	e0ffba15 	stw	r3,-280(fp)
 4001310:	10800017 	ldw	r2,0(r2)
 4001314:	e0bfb415 	stw	r2,-304(fp)
 4001318:	e03fb515 	stw	zero,-300(fp)
 400131c:	e0bfb417 	ldw	r2,-304(fp)
 4001320:	e0bff115 	stw	r2,-60(fp)
 4001324:	e0bfb517 	ldw	r2,-300(fp)
 4001328:	e0bff215 	stw	r2,-56(fp)
			base = HEX;
 400132c:	00800084 	movi	r2,2
 4001330:	e0bff015 	stw	r2,-64(fp)
			/* leading 0x/X only if non-zero */
			if (flags & ALT && _uquad != 0) {
 4001334:	8880004c 	andi	r2,r17,1
 4001338:	10000a26 	beq	r2,zero,4001364 <___vfprintf_internal_r+0xde0>
 400133c:	e0bff117 	ldw	r2,-60(fp)
 4001340:	e0fff217 	ldw	r3,-56(fp)
 4001344:	10c4b03a 	or	r2,r2,r3
 4001348:	10000726 	beq	r2,zero,4001368 <___vfprintf_internal_r+0xde4>
				ox[0] = '0';
 400134c:	00800c04 	movi	r2,48
 4001350:	e0bfbe85 	stb	r2,-262(fp)
				ox[1] = ch;
 4001354:	a005883a 	mov	r2,r20
 4001358:	e0bfbec5 	stb	r2,-261(fp)
				flags |= HEXPREFIX;
 400135c:	8c400094 	ori	r17,r17,2
 4001360:	00000106 	br	4001368 <___vfprintf_internal_r+0xde4>

#ifdef _WANT_IO_C99_FORMATS
			flags &= ~GROUPING;
#endif
			/* unsigned conversions */
nosign:			sign = '\0';
 4001364:	0001883a 	nop
 4001368:	e03fe2c5 	stb	zero,-117(fp)
			/*
			 * ``... diouXx conversions ... if a precision is
			 * specified, the 0 flag will be ignored.''
			 *	-- ANSI X3J11
			 */
number:			if ((dprec = prec) >= 0)
 400136c:	e0bff517 	ldw	r2,-44(fp)
 4001370:	e0bfef15 	stw	r2,-68(fp)
 4001374:	e0bfef17 	ldw	r2,-68(fp)
 4001378:	10000216 	blt	r2,zero,4001384 <___vfprintf_internal_r+0xe00>
				flags &= ~ZEROPAD;
 400137c:	00bfdfc4 	movi	r2,-129
 4001380:	88a2703a 	and	r17,r17,r2
			/*
			 * ``The result of converting a zero value with an
			 * explicit precision of zero is no characters.''
			 *	-- ANSI X3J11
			 */
			cp = buf + BUF;
 4001384:	e4bfbf04 	addi	r18,fp,-260
 4001388:	94800a04 	addi	r18,r18,40
			if (_uquad != 0 || prec != 0) {
 400138c:	e0bff117 	ldw	r2,-60(fp)
 4001390:	e0fff217 	ldw	r3,-56(fp)
 4001394:	10c4b03a 	or	r2,r2,r3
 4001398:	1000021e 	bne	r2,zero,40013a4 <___vfprintf_internal_r+0xe20>
 400139c:	e0bff517 	ldw	r2,-44(fp)
 40013a0:	10007426 	beq	r2,zero,4001574 <___vfprintf_internal_r+0xff0>
 40013a4:	e0bff017 	ldw	r2,-64(fp)
 40013a8:	108000a0 	cmpeqi	r2,r2,2
 40013ac:	1000531e 	bne	r2,zero,40014fc <___vfprintf_internal_r+0xf78>
 40013b0:	e0bff017 	ldw	r2,-64(fp)
 40013b4:	108000e8 	cmpgeui	r2,r2,3
 40013b8:	1000651e 	bne	r2,zero,4001550 <___vfprintf_internal_r+0xfcc>
 40013bc:	e0bff017 	ldw	r2,-64(fp)
 40013c0:	10000526 	beq	r2,zero,40013d8 <___vfprintf_internal_r+0xe54>
 40013c4:	e0bff017 	ldw	r2,-64(fp)
 40013c8:	10800060 	cmpeqi	r2,r2,1
 40013cc:	1000201e 	bne	r2,zero,4001450 <___vfprintf_internal_r+0xecc>
 40013d0:	00005f06 	br	4001550 <___vfprintf_internal_r+0xfcc>
				 * Unsigned mod is hard, and unsigned mod
				 * by a constant is easier than that by
				 * a variable; hence this switch.
				 */
				switch (base) {
				case OCT:
 40013d4:	0001883a 	nop
					do {
						*--cp = to_char (_uquad & 7);
 40013d8:	e0bff117 	ldw	r2,-60(fp)
 40013dc:	108001cc 	andi	r2,r2,7
 40013e0:	10800c04 	addi	r2,r2,48
 40013e4:	94bfffc4 	addi	r18,r18,-1
 40013e8:	90800005 	stb	r2,0(r18)
						_uquad >>= 3;
 40013ec:	e0bff217 	ldw	r2,-56(fp)
 40013f0:	1004977a 	slli	r2,r2,29
 40013f4:	e0fff117 	ldw	r3,-60(fp)
 40013f8:	1806d0fa 	srli	r3,r3,3
 40013fc:	1884b03a 	or	r2,r3,r2
 4001400:	e0bff115 	stw	r2,-60(fp)
 4001404:	e0bff217 	ldw	r2,-56(fp)
 4001408:	1004d0fa 	srli	r2,r2,3
 400140c:	e0bff215 	stw	r2,-56(fp)
					} while (_uquad);
 4001410:	e0bff117 	ldw	r2,-60(fp)
 4001414:	e0fff217 	ldw	r3,-56(fp)
 4001418:	10c4b03a 	or	r2,r2,r3
 400141c:	103fed1e 	bne	r2,zero,40013d4 <___vfprintf_internal_r+0xe50>
					/* handle octal leading 0 */
					if (flags & ALT && *cp != '0')
 4001420:	8880004c 	andi	r2,r17,1
 4001424:	10005126 	beq	r2,zero,400156c <___vfprintf_internal_r+0xfe8>
 4001428:	90800003 	ldbu	r2,0(r18)
 400142c:	10803fcc 	andi	r2,r2,255
 4001430:	1080201c 	xori	r2,r2,128
 4001434:	10bfe004 	addi	r2,r2,-128
 4001438:	10800c20 	cmpeqi	r2,r2,48
 400143c:	10004b1e 	bne	r2,zero,400156c <___vfprintf_internal_r+0xfe8>
						*--cp = '0';
 4001440:	94bfffc4 	addi	r18,r18,-1
 4001444:	00800c04 	movi	r2,48
 4001448:	90800005 	stb	r2,0(r18)
					break;
 400144c:	00004706 	br	400156c <___vfprintf_internal_r+0xfe8>

				case DEC:
					/* many numbers are 1 digit */
					if (_uquad < 10) {
 4001450:	e0bff217 	ldw	r2,-56(fp)
 4001454:	10000a1e 	bne	r2,zero,4001480 <___vfprintf_internal_r+0xefc>
 4001458:	e0bff217 	ldw	r2,-56(fp)
 400145c:	1000031e 	bne	r2,zero,400146c <___vfprintf_internal_r+0xee8>
 4001460:	e0bff117 	ldw	r2,-60(fp)
 4001464:	108002a8 	cmpgeui	r2,r2,10
 4001468:	1000051e 	bne	r2,zero,4001480 <___vfprintf_internal_r+0xefc>
						*--cp = to_char(_uquad);
 400146c:	e0bff117 	ldw	r2,-60(fp)
 4001470:	10800c04 	addi	r2,r2,48
 4001474:	94bfffc4 	addi	r18,r18,-1
 4001478:	90800005 	stb	r2,0(r18)
						break;
 400147c:	00003c06 	br	4001570 <___vfprintf_internal_r+0xfec>
					}
#ifdef _WANT_IO_C99_FORMATS
					ndig = 0;
#endif
					do {
					  *--cp = to_char (_uquad % 10);
 4001480:	e0bff117 	ldw	r2,-60(fp)
 4001484:	e0fff217 	ldw	r3,-56(fp)
 4001488:	01800284 	movi	r6,10
 400148c:	000f883a 	mov	r7,zero
 4001490:	1009883a 	mov	r4,r2
 4001494:	180b883a 	mov	r5,r3
 4001498:	400daac0 	call	400daac <__umoddi3>
 400149c:	1009883a 	mov	r4,r2
 40014a0:	180b883a 	mov	r5,r3
 40014a4:	2005883a 	mov	r2,r4
 40014a8:	2807883a 	mov	r3,r5
 40014ac:	10800c04 	addi	r2,r2,48
 40014b0:	94bfffc4 	addi	r18,r18,-1
 40014b4:	90800005 	stb	r2,0(r18)
					       next cases. */
					    if (grouping[1] != '\0')
					      grouping++;
					  }
#endif
					  _uquad /= 10;
 40014b8:	e0bff117 	ldw	r2,-60(fp)
 40014bc:	e0fff217 	ldw	r3,-56(fp)
 40014c0:	01800284 	movi	r6,10
 40014c4:	000f883a 	mov	r7,zero
 40014c8:	1009883a 	mov	r4,r2
 40014cc:	180b883a 	mov	r5,r3
 40014d0:	400d51c0 	call	400d51c <__udivdi3>
 40014d4:	1009883a 	mov	r4,r2
 40014d8:	180b883a 	mov	r5,r3
 40014dc:	e13ff115 	stw	r4,-60(fp)
 40014e0:	e17ff215 	stw	r5,-56(fp)
					} while (_uquad != 0);
 40014e4:	e0bff117 	ldw	r2,-60(fp)
 40014e8:	e0fff217 	ldw	r3,-56(fp)
 40014ec:	10c4b03a 	or	r2,r2,r3
 40014f0:	103fe31e 	bne	r2,zero,4001480 <___vfprintf_internal_r+0xefc>
					break;
 40014f4:	00001e06 	br	4001570 <___vfprintf_internal_r+0xfec>

				case HEX:
 40014f8:	0001883a 	nop
					do {
						*--cp = xdigs[_uquad & 15];
 40014fc:	e0bff117 	ldw	r2,-60(fp)
 4001500:	108003cc 	andi	r2,r2,15
 4001504:	e0ffec17 	ldw	r3,-80(fp)
 4001508:	1885883a 	add	r2,r3,r2
 400150c:	94bfffc4 	addi	r18,r18,-1
 4001510:	10800003 	ldbu	r2,0(r2)
 4001514:	90800005 	stb	r2,0(r18)
						_uquad >>= 4;
 4001518:	e0bff217 	ldw	r2,-56(fp)
 400151c:	1004973a 	slli	r2,r2,28
 4001520:	e0fff117 	ldw	r3,-60(fp)
 4001524:	1806d13a 	srli	r3,r3,4
 4001528:	1884b03a 	or	r2,r3,r2
 400152c:	e0bff115 	stw	r2,-60(fp)
 4001530:	e0bff217 	ldw	r2,-56(fp)
 4001534:	1004d13a 	srli	r2,r2,4
 4001538:	e0bff215 	stw	r2,-56(fp)
					} while (_uquad);
 400153c:	e0bff117 	ldw	r2,-60(fp)
 4001540:	e0fff217 	ldw	r3,-56(fp)
 4001544:	10c4b03a 	or	r2,r2,r3
 4001548:	103feb1e 	bne	r2,zero,40014f8 <___vfprintf_internal_r+0xf74>
					break;
 400154c:	00000806 	br	4001570 <___vfprintf_internal_r+0xfec>

				default:
					cp = "bug in vfprintf: bad base";
 4001550:	04810074 	movhi	r18,1025
 4001554:	948db104 	addi	r18,r18,14020
					size = strlen (cp);
 4001558:	9009883a 	mov	r4,r18
 400155c:	40098340 	call	4009834 <strlen>
 4001560:	e0bfed15 	stw	r2,-76(fp)
					goto skipsize;
 4001564:	0001883a 	nop
                       else if (base == OCT && (flags & ALT))
                         *--cp = '0';

			size = buf + BUF - cp;
		skipsize:
			break;
 4001568:	00001706 	br	40015c8 <___vfprintf_internal_r+0x1044>
					break;
 400156c:	0001883a 	nop
				switch (base) {
 4001570:	00000706 	br	4001590 <___vfprintf_internal_r+0x100c>
                       else if (base == OCT && (flags & ALT))
 4001574:	e0bff017 	ldw	r2,-64(fp)
 4001578:	1000051e 	bne	r2,zero,4001590 <___vfprintf_internal_r+0x100c>
 400157c:	8880004c 	andi	r2,r17,1
 4001580:	10000326 	beq	r2,zero,4001590 <___vfprintf_internal_r+0x100c>
                         *--cp = '0';
 4001584:	94bfffc4 	addi	r18,r18,-1
 4001588:	00800c04 	movi	r2,48
 400158c:	90800005 	stb	r2,0(r18)
			size = buf + BUF - cp;
 4001590:	e0bfbf04 	addi	r2,fp,-260
 4001594:	10800a04 	addi	r2,r2,40
 4001598:	1485c83a 	sub	r2,r2,r18
 400159c:	e0bfed15 	stw	r2,-76(fp)
			break;
 40015a0:	00000906 	br	40015c8 <___vfprintf_internal_r+0x1044>
		default:	/* "%?" prints ?, unless ? is NUL */
			if (ch == '\0')
 40015a4:	a003d826 	beq	r20,zero,4002508 <___vfprintf_internal_r+0x1f84>
				goto done;
			/* pretend it was %c with argument ch */
			cp = buf;
 40015a8:	e4bfbf04 	addi	r18,fp,-260
			*cp = ch;
 40015ac:	a005883a 	mov	r2,r20
 40015b0:	90800005 	stb	r2,0(r18)
			size = 1;
 40015b4:	00800044 	movi	r2,1
 40015b8:	e0bfed15 	stw	r2,-76(fp)
			sign = '\0';
 40015bc:	e03fe2c5 	stb	zero,-117(fp)
			break;
 40015c0:	00000106 	br	40015c8 <___vfprintf_internal_r+0x1044>
			break;
 40015c4:	0001883a 	nop
		 * If flags&FPT, ch must be in [aAeEfg].
		 *
		 * Compute actual size, so we know how much to pad.
		 * size excludes decimal prec; realsz includes it.
		 */
		realsz = dprec > size ? dprec : size;
 40015c8:	e0ffef17 	ldw	r3,-68(fp)
 40015cc:	e0bfed17 	ldw	r2,-76(fp)
 40015d0:	10c0010e 	bge	r2,r3,40015d8 <___vfprintf_internal_r+0x1054>
 40015d4:	1805883a 	mov	r2,r3
 40015d8:	e0bfee15 	stw	r2,-72(fp)
		if (sign)
 40015dc:	e0bfe2c3 	ldbu	r2,-117(fp)
 40015e0:	10803fcc 	andi	r2,r2,255
 40015e4:	1080201c 	xori	r2,r2,128
 40015e8:	10bfe004 	addi	r2,r2,-128
 40015ec:	10000326 	beq	r2,zero,40015fc <___vfprintf_internal_r+0x1078>
			realsz++;
 40015f0:	e0bfee17 	ldw	r2,-72(fp)
 40015f4:	10800044 	addi	r2,r2,1
 40015f8:	e0bfee15 	stw	r2,-72(fp)
		if (flags & HEXPREFIX)
 40015fc:	8880008c 	andi	r2,r17,2
 4001600:	10000326 	beq	r2,zero,4001610 <___vfprintf_internal_r+0x108c>
			realsz+= 2;
 4001604:	e0bfee17 	ldw	r2,-72(fp)
 4001608:	10800084 	addi	r2,r2,2
 400160c:	e0bfee15 	stw	r2,-72(fp)

		/* right-adjusting blank padding */
		if ((flags & (LADJUST|ZEROPAD)) == 0)
 4001610:	8880210c 	andi	r2,r17,132
 4001614:	1000351e 	bne	r2,zero,40016ec <___vfprintf_internal_r+0x1168>
			PAD (width - realsz, blanks);
 4001618:	e0fff617 	ldw	r3,-40(fp)
 400161c:	e0bfee17 	ldw	r2,-72(fp)
 4001620:	18a7c83a 	sub	r19,r3,r2
 4001624:	04c0310e 	bge	zero,r19,40016ec <___vfprintf_internal_r+0x1168>
 4001628:	00001706 	br	4001688 <___vfprintf_internal_r+0x1104>
 400162c:	00810074 	movhi	r2,1025
 4001630:	108db904 	addi	r2,r2,14052
 4001634:	80800015 	stw	r2,0(r16)
 4001638:	00800404 	movi	r2,16
 400163c:	80800115 	stw	r2,4(r16)
 4001640:	e0bfdb17 	ldw	r2,-148(fp)
 4001644:	10800404 	addi	r2,r2,16
 4001648:	e0bfdb15 	stw	r2,-148(fp)
 400164c:	84000204 	addi	r16,r16,8
 4001650:	e0bfda17 	ldw	r2,-152(fp)
 4001654:	10800044 	addi	r2,r2,1
 4001658:	e0bfda15 	stw	r2,-152(fp)
 400165c:	e0bfda17 	ldw	r2,-152(fp)
 4001660:	10800210 	cmplti	r2,r2,8
 4001664:	1000071e 	bne	r2,zero,4001684 <___vfprintf_internal_r+0x1100>
 4001668:	e0bfd904 	addi	r2,fp,-156
 400166c:	100d883a 	mov	r6,r2
 4001670:	e17fbc17 	ldw	r5,-272(fp)
 4001674:	e13fbd17 	ldw	r4,-268(fp)
 4001678:	40099280 	call	4009928 <__sprint_r>
 400167c:	1003b01e 	bne	r2,zero,4002540 <___vfprintf_internal_r+0x1fbc>
 4001680:	e43fc904 	addi	r16,fp,-220
 4001684:	9cfffc04 	addi	r19,r19,-16
 4001688:	98800448 	cmpgei	r2,r19,17
 400168c:	103fe71e 	bne	r2,zero,400162c <___vfprintf_internal_r+0x10a8>
 4001690:	00810074 	movhi	r2,1025
 4001694:	108db904 	addi	r2,r2,14052
 4001698:	80800015 	stw	r2,0(r16)
 400169c:	9805883a 	mov	r2,r19
 40016a0:	80800115 	stw	r2,4(r16)
 40016a4:	e0bfdb17 	ldw	r2,-148(fp)
 40016a8:	9807883a 	mov	r3,r19
 40016ac:	10c5883a 	add	r2,r2,r3
 40016b0:	e0bfdb15 	stw	r2,-148(fp)
 40016b4:	84000204 	addi	r16,r16,8
 40016b8:	e0bfda17 	ldw	r2,-152(fp)
 40016bc:	10800044 	addi	r2,r2,1
 40016c0:	e0bfda15 	stw	r2,-152(fp)
 40016c4:	e0bfda17 	ldw	r2,-152(fp)
 40016c8:	10800210 	cmplti	r2,r2,8
 40016cc:	1000071e 	bne	r2,zero,40016ec <___vfprintf_internal_r+0x1168>
 40016d0:	e0bfd904 	addi	r2,fp,-156
 40016d4:	100d883a 	mov	r6,r2
 40016d8:	e17fbc17 	ldw	r5,-272(fp)
 40016dc:	e13fbd17 	ldw	r4,-268(fp)
 40016e0:	40099280 	call	4009928 <__sprint_r>
 40016e4:	1003981e 	bne	r2,zero,4002548 <___vfprintf_internal_r+0x1fc4>
 40016e8:	e43fc904 	addi	r16,fp,-220

		/* prefix */
		if (sign)
 40016ec:	e0bfe2c3 	ldbu	r2,-117(fp)
 40016f0:	10803fcc 	andi	r2,r2,255
 40016f4:	1080201c 	xori	r2,r2,128
 40016f8:	10bfe004 	addi	r2,r2,-128
 40016fc:	10001526 	beq	r2,zero,4001754 <___vfprintf_internal_r+0x11d0>
			PRINT (&sign, 1);
 4001700:	e0bfe2c4 	addi	r2,fp,-117
 4001704:	80800015 	stw	r2,0(r16)
 4001708:	00800044 	movi	r2,1
 400170c:	80800115 	stw	r2,4(r16)
 4001710:	e0bfdb17 	ldw	r2,-148(fp)
 4001714:	10800044 	addi	r2,r2,1
 4001718:	e0bfdb15 	stw	r2,-148(fp)
 400171c:	84000204 	addi	r16,r16,8
 4001720:	e0bfda17 	ldw	r2,-152(fp)
 4001724:	10800044 	addi	r2,r2,1
 4001728:	e0bfda15 	stw	r2,-152(fp)
 400172c:	e0bfda17 	ldw	r2,-152(fp)
 4001730:	10800210 	cmplti	r2,r2,8
 4001734:	1000071e 	bne	r2,zero,4001754 <___vfprintf_internal_r+0x11d0>
 4001738:	e0bfd904 	addi	r2,fp,-156
 400173c:	100d883a 	mov	r6,r2
 4001740:	e17fbc17 	ldw	r5,-272(fp)
 4001744:	e13fbd17 	ldw	r4,-268(fp)
 4001748:	40099280 	call	4009928 <__sprint_r>
 400174c:	1003801e 	bne	r2,zero,4002550 <___vfprintf_internal_r+0x1fcc>
 4001750:	e43fc904 	addi	r16,fp,-220
		if (flags & HEXPREFIX)
 4001754:	8880008c 	andi	r2,r17,2
 4001758:	10001526 	beq	r2,zero,40017b0 <___vfprintf_internal_r+0x122c>
			PRINT (ox, 2);
 400175c:	e0bfbe84 	addi	r2,fp,-262
 4001760:	80800015 	stw	r2,0(r16)
 4001764:	00800084 	movi	r2,2
 4001768:	80800115 	stw	r2,4(r16)
 400176c:	e0bfdb17 	ldw	r2,-148(fp)
 4001770:	10800084 	addi	r2,r2,2
 4001774:	e0bfdb15 	stw	r2,-148(fp)
 4001778:	84000204 	addi	r16,r16,8
 400177c:	e0bfda17 	ldw	r2,-152(fp)
 4001780:	10800044 	addi	r2,r2,1
 4001784:	e0bfda15 	stw	r2,-152(fp)
 4001788:	e0bfda17 	ldw	r2,-152(fp)
 400178c:	10800210 	cmplti	r2,r2,8
 4001790:	1000071e 	bne	r2,zero,40017b0 <___vfprintf_internal_r+0x122c>
 4001794:	e0bfd904 	addi	r2,fp,-156
 4001798:	100d883a 	mov	r6,r2
 400179c:	e17fbc17 	ldw	r5,-272(fp)
 40017a0:	e13fbd17 	ldw	r4,-268(fp)
 40017a4:	40099280 	call	4009928 <__sprint_r>
 40017a8:	10036b1e 	bne	r2,zero,4002558 <___vfprintf_internal_r+0x1fd4>
 40017ac:	e43fc904 	addi	r16,fp,-220

		/* right-adjusting zero padding */
		if ((flags & (LADJUST|ZEROPAD)) == ZEROPAD)
 40017b0:	8880210c 	andi	r2,r17,132
 40017b4:	10802018 	cmpnei	r2,r2,128
 40017b8:	1000351e 	bne	r2,zero,4001890 <___vfprintf_internal_r+0x130c>
			PAD (width - realsz, zeroes);
 40017bc:	e0fff617 	ldw	r3,-40(fp)
 40017c0:	e0bfee17 	ldw	r2,-72(fp)
 40017c4:	18a7c83a 	sub	r19,r3,r2
 40017c8:	04c0310e 	bge	zero,r19,4001890 <___vfprintf_internal_r+0x130c>
 40017cc:	00001706 	br	400182c <___vfprintf_internal_r+0x12a8>
 40017d0:	00810074 	movhi	r2,1025
 40017d4:	108dbd04 	addi	r2,r2,14068
 40017d8:	80800015 	stw	r2,0(r16)
 40017dc:	00800404 	movi	r2,16
 40017e0:	80800115 	stw	r2,4(r16)
 40017e4:	e0bfdb17 	ldw	r2,-148(fp)
 40017e8:	10800404 	addi	r2,r2,16
 40017ec:	e0bfdb15 	stw	r2,-148(fp)
 40017f0:	84000204 	addi	r16,r16,8
 40017f4:	e0bfda17 	ldw	r2,-152(fp)
 40017f8:	10800044 	addi	r2,r2,1
 40017fc:	e0bfda15 	stw	r2,-152(fp)
 4001800:	e0bfda17 	ldw	r2,-152(fp)
 4001804:	10800210 	cmplti	r2,r2,8
 4001808:	1000071e 	bne	r2,zero,4001828 <___vfprintf_internal_r+0x12a4>
 400180c:	e0bfd904 	addi	r2,fp,-156
 4001810:	100d883a 	mov	r6,r2
 4001814:	e17fbc17 	ldw	r5,-272(fp)
 4001818:	e13fbd17 	ldw	r4,-268(fp)
 400181c:	40099280 	call	4009928 <__sprint_r>
 4001820:	10034f1e 	bne	r2,zero,4002560 <___vfprintf_internal_r+0x1fdc>
 4001824:	e43fc904 	addi	r16,fp,-220
 4001828:	9cfffc04 	addi	r19,r19,-16
 400182c:	98800448 	cmpgei	r2,r19,17
 4001830:	103fe71e 	bne	r2,zero,40017d0 <___vfprintf_internal_r+0x124c>
 4001834:	00810074 	movhi	r2,1025
 4001838:	108dbd04 	addi	r2,r2,14068
 400183c:	80800015 	stw	r2,0(r16)
 4001840:	9805883a 	mov	r2,r19
 4001844:	80800115 	stw	r2,4(r16)
 4001848:	e0bfdb17 	ldw	r2,-148(fp)
 400184c:	9807883a 	mov	r3,r19
 4001850:	10c5883a 	add	r2,r2,r3
 4001854:	e0bfdb15 	stw	r2,-148(fp)
 4001858:	84000204 	addi	r16,r16,8
 400185c:	e0bfda17 	ldw	r2,-152(fp)
 4001860:	10800044 	addi	r2,r2,1
 4001864:	e0bfda15 	stw	r2,-152(fp)
 4001868:	e0bfda17 	ldw	r2,-152(fp)
 400186c:	10800210 	cmplti	r2,r2,8
 4001870:	1000071e 	bne	r2,zero,4001890 <___vfprintf_internal_r+0x130c>
 4001874:	e0bfd904 	addi	r2,fp,-156
 4001878:	100d883a 	mov	r6,r2
 400187c:	e17fbc17 	ldw	r5,-272(fp)
 4001880:	e13fbd17 	ldw	r4,-268(fp)
 4001884:	40099280 	call	4009928 <__sprint_r>
 4001888:	1003371e 	bne	r2,zero,4002568 <___vfprintf_internal_r+0x1fe4>
 400188c:	e43fc904 	addi	r16,fp,-220

		/* leading zeroes from decimal precision */
		PAD (dprec - size, zeroes);
 4001890:	e0ffef17 	ldw	r3,-68(fp)
 4001894:	e0bfed17 	ldw	r2,-76(fp)
 4001898:	18a7c83a 	sub	r19,r3,r2
 400189c:	04c0310e 	bge	zero,r19,4001964 <___vfprintf_internal_r+0x13e0>
 40018a0:	00001706 	br	4001900 <___vfprintf_internal_r+0x137c>
 40018a4:	00810074 	movhi	r2,1025
 40018a8:	108dbd04 	addi	r2,r2,14068
 40018ac:	80800015 	stw	r2,0(r16)
 40018b0:	00800404 	movi	r2,16
 40018b4:	80800115 	stw	r2,4(r16)
 40018b8:	e0bfdb17 	ldw	r2,-148(fp)
 40018bc:	10800404 	addi	r2,r2,16
 40018c0:	e0bfdb15 	stw	r2,-148(fp)
 40018c4:	84000204 	addi	r16,r16,8
 40018c8:	e0bfda17 	ldw	r2,-152(fp)
 40018cc:	10800044 	addi	r2,r2,1
 40018d0:	e0bfda15 	stw	r2,-152(fp)
 40018d4:	e0bfda17 	ldw	r2,-152(fp)
 40018d8:	10800210 	cmplti	r2,r2,8
 40018dc:	1000071e 	bne	r2,zero,40018fc <___vfprintf_internal_r+0x1378>
 40018e0:	e0bfd904 	addi	r2,fp,-156
 40018e4:	100d883a 	mov	r6,r2
 40018e8:	e17fbc17 	ldw	r5,-272(fp)
 40018ec:	e13fbd17 	ldw	r4,-268(fp)
 40018f0:	40099280 	call	4009928 <__sprint_r>
 40018f4:	10031e1e 	bne	r2,zero,4002570 <___vfprintf_internal_r+0x1fec>
 40018f8:	e43fc904 	addi	r16,fp,-220
 40018fc:	9cfffc04 	addi	r19,r19,-16
 4001900:	98800448 	cmpgei	r2,r19,17
 4001904:	103fe71e 	bne	r2,zero,40018a4 <___vfprintf_internal_r+0x1320>
 4001908:	00810074 	movhi	r2,1025
 400190c:	108dbd04 	addi	r2,r2,14068
 4001910:	80800015 	stw	r2,0(r16)
 4001914:	9805883a 	mov	r2,r19
 4001918:	80800115 	stw	r2,4(r16)
 400191c:	e0bfdb17 	ldw	r2,-148(fp)
 4001920:	9807883a 	mov	r3,r19
 4001924:	10c5883a 	add	r2,r2,r3
 4001928:	e0bfdb15 	stw	r2,-148(fp)
 400192c:	84000204 	addi	r16,r16,8
 4001930:	e0bfda17 	ldw	r2,-152(fp)
 4001934:	10800044 	addi	r2,r2,1
 4001938:	e0bfda15 	stw	r2,-152(fp)
 400193c:	e0bfda17 	ldw	r2,-152(fp)
 4001940:	10800210 	cmplti	r2,r2,8
 4001944:	1000071e 	bne	r2,zero,4001964 <___vfprintf_internal_r+0x13e0>
 4001948:	e0bfd904 	addi	r2,fp,-156
 400194c:	100d883a 	mov	r6,r2
 4001950:	e17fbc17 	ldw	r5,-272(fp)
 4001954:	e13fbd17 	ldw	r4,-268(fp)
 4001958:	40099280 	call	4009928 <__sprint_r>
 400195c:	1003061e 	bne	r2,zero,4002578 <___vfprintf_internal_r+0x1ff4>
 4001960:	e43fc904 	addi	r16,fp,-220

		/* the string or number proper */
#ifdef FLOATING_POINT
		if ((flags & FPT) == 0) {
 4001964:	8880400c 	andi	r2,r17,256
 4001968:	1000161e 	bne	r2,zero,40019c4 <___vfprintf_internal_r+0x1440>
			PRINT (cp, size);
 400196c:	84800015 	stw	r18,0(r16)
 4001970:	e0bfed17 	ldw	r2,-76(fp)
 4001974:	80800115 	stw	r2,4(r16)
 4001978:	e0ffdb17 	ldw	r3,-148(fp)
 400197c:	e0bfed17 	ldw	r2,-76(fp)
 4001980:	1885883a 	add	r2,r3,r2
 4001984:	e0bfdb15 	stw	r2,-148(fp)
 4001988:	84000204 	addi	r16,r16,8
 400198c:	e0bfda17 	ldw	r2,-152(fp)
 4001990:	10800044 	addi	r2,r2,1
 4001994:	e0bfda15 	stw	r2,-152(fp)
 4001998:	e0bfda17 	ldw	r2,-152(fp)
 400199c:	10800210 	cmplti	r2,r2,8
 40019a0:	1002881e 	bne	r2,zero,40023c4 <___vfprintf_internal_r+0x1e40>
 40019a4:	e0bfd904 	addi	r2,fp,-156
 40019a8:	100d883a 	mov	r6,r2
 40019ac:	e17fbc17 	ldw	r5,-272(fp)
 40019b0:	e13fbd17 	ldw	r4,-268(fp)
 40019b4:	40099280 	call	4009928 <__sprint_r>
 40019b8:	1002f11e 	bne	r2,zero,4002580 <___vfprintf_internal_r+0x1ffc>
 40019bc:	e43fc904 	addi	r16,fp,-220
 40019c0:	00028006 	br	40023c4 <___vfprintf_internal_r+0x1e40>
		} else {	/* glue together f_p fragments */
			if (ch >= 'f') {	/* 'f' or 'g' */
 40019c4:	a0801990 	cmplti	r2,r20,102
 40019c8:	1001cd1e 	bne	r2,zero,4002100 <___vfprintf_internal_r+0x1b7c>
				if (_fpvalue == 0) {
 40019cc:	e0bfe017 	ldw	r2,-128(fp)
 40019d0:	e0ffe117 	ldw	r3,-124(fp)
 40019d4:	000d883a 	mov	r6,zero
 40019d8:	000f883a 	mov	r7,zero
 40019dc:	1009883a 	mov	r4,r2
 40019e0:	180b883a 	mov	r5,r3
 40019e4:	400f36c0 	call	400f36c <__eqdf2>
 40019e8:	1000661e 	bne	r2,zero,4001b84 <___vfprintf_internal_r+0x1600>
					/* kludge for __dtoa irregularity */
					PRINT ("0", 1);
 40019ec:	00810074 	movhi	r2,1025
 40019f0:	108db804 	addi	r2,r2,14048
 40019f4:	80800015 	stw	r2,0(r16)
 40019f8:	00800044 	movi	r2,1
 40019fc:	80800115 	stw	r2,4(r16)
 4001a00:	e0bfdb17 	ldw	r2,-148(fp)
 4001a04:	10800044 	addi	r2,r2,1
 4001a08:	e0bfdb15 	stw	r2,-148(fp)
 4001a0c:	84000204 	addi	r16,r16,8
 4001a10:	e0bfda17 	ldw	r2,-152(fp)
 4001a14:	10800044 	addi	r2,r2,1
 4001a18:	e0bfda15 	stw	r2,-152(fp)
 4001a1c:	e0bfda17 	ldw	r2,-152(fp)
 4001a20:	10800210 	cmplti	r2,r2,8
 4001a24:	1000071e 	bne	r2,zero,4001a44 <___vfprintf_internal_r+0x14c0>
 4001a28:	e0bfd904 	addi	r2,fp,-156
 4001a2c:	100d883a 	mov	r6,r2
 4001a30:	e17fbc17 	ldw	r5,-272(fp)
 4001a34:	e13fbd17 	ldw	r4,-268(fp)
 4001a38:	40099280 	call	4009928 <__sprint_r>
 4001a3c:	1002d21e 	bne	r2,zero,4002588 <___vfprintf_internal_r+0x2004>
 4001a40:	e43fc904 	addi	r16,fp,-220
					if (expt < ndig || flags & ALT) {
 4001a44:	e0ffdf17 	ldw	r3,-132(fp)
 4001a48:	e0bfdc17 	ldw	r2,-144(fp)
 4001a4c:	18800216 	blt	r3,r2,4001a58 <___vfprintf_internal_r+0x14d4>
 4001a50:	8880004c 	andi	r2,r17,1
 4001a54:	10025b26 	beq	r2,zero,40023c4 <___vfprintf_internal_r+0x1e40>
						PRINT (decimal_point, decp_len);
 4001a58:	e0bfe817 	ldw	r2,-96(fp)
 4001a5c:	80800015 	stw	r2,0(r16)
 4001a60:	e0bfe717 	ldw	r2,-100(fp)
 4001a64:	80800115 	stw	r2,4(r16)
 4001a68:	e0ffdb17 	ldw	r3,-148(fp)
 4001a6c:	e0bfe717 	ldw	r2,-100(fp)
 4001a70:	1885883a 	add	r2,r3,r2
 4001a74:	e0bfdb15 	stw	r2,-148(fp)
 4001a78:	84000204 	addi	r16,r16,8
 4001a7c:	e0bfda17 	ldw	r2,-152(fp)
 4001a80:	10800044 	addi	r2,r2,1
 4001a84:	e0bfda15 	stw	r2,-152(fp)
 4001a88:	e0bfda17 	ldw	r2,-152(fp)
 4001a8c:	10800210 	cmplti	r2,r2,8
 4001a90:	1000071e 	bne	r2,zero,4001ab0 <___vfprintf_internal_r+0x152c>
 4001a94:	e0bfd904 	addi	r2,fp,-156
 4001a98:	100d883a 	mov	r6,r2
 4001a9c:	e17fbc17 	ldw	r5,-272(fp)
 4001aa0:	e13fbd17 	ldw	r4,-268(fp)
 4001aa4:	40099280 	call	4009928 <__sprint_r>
 4001aa8:	1002b91e 	bne	r2,zero,4002590 <___vfprintf_internal_r+0x200c>
 4001aac:	e43fc904 	addi	r16,fp,-220
						PAD (ndig - 1, zeroes);
 4001ab0:	e0bfdc17 	ldw	r2,-144(fp)
 4001ab4:	14ffffc4 	addi	r19,r2,-1
 4001ab8:	04c2420e 	bge	zero,r19,40023c4 <___vfprintf_internal_r+0x1e40>
 4001abc:	00001706 	br	4001b1c <___vfprintf_internal_r+0x1598>
 4001ac0:	00810074 	movhi	r2,1025
 4001ac4:	108dbd04 	addi	r2,r2,14068
 4001ac8:	80800015 	stw	r2,0(r16)
 4001acc:	00800404 	movi	r2,16
 4001ad0:	80800115 	stw	r2,4(r16)
 4001ad4:	e0bfdb17 	ldw	r2,-148(fp)
 4001ad8:	10800404 	addi	r2,r2,16
 4001adc:	e0bfdb15 	stw	r2,-148(fp)
 4001ae0:	84000204 	addi	r16,r16,8
 4001ae4:	e0bfda17 	ldw	r2,-152(fp)
 4001ae8:	10800044 	addi	r2,r2,1
 4001aec:	e0bfda15 	stw	r2,-152(fp)
 4001af0:	e0bfda17 	ldw	r2,-152(fp)
 4001af4:	10800210 	cmplti	r2,r2,8
 4001af8:	1000071e 	bne	r2,zero,4001b18 <___vfprintf_internal_r+0x1594>
 4001afc:	e0bfd904 	addi	r2,fp,-156
 4001b00:	100d883a 	mov	r6,r2
 4001b04:	e17fbc17 	ldw	r5,-272(fp)
 4001b08:	e13fbd17 	ldw	r4,-268(fp)
 4001b0c:	40099280 	call	4009928 <__sprint_r>
 4001b10:	1002a11e 	bne	r2,zero,4002598 <___vfprintf_internal_r+0x2014>
 4001b14:	e43fc904 	addi	r16,fp,-220
 4001b18:	9cfffc04 	addi	r19,r19,-16
 4001b1c:	98800448 	cmpgei	r2,r19,17
 4001b20:	103fe71e 	bne	r2,zero,4001ac0 <___vfprintf_internal_r+0x153c>
 4001b24:	00810074 	movhi	r2,1025
 4001b28:	108dbd04 	addi	r2,r2,14068
 4001b2c:	80800015 	stw	r2,0(r16)
 4001b30:	9805883a 	mov	r2,r19
 4001b34:	80800115 	stw	r2,4(r16)
 4001b38:	e0bfdb17 	ldw	r2,-148(fp)
 4001b3c:	9807883a 	mov	r3,r19
 4001b40:	10c5883a 	add	r2,r2,r3
 4001b44:	e0bfdb15 	stw	r2,-148(fp)
 4001b48:	84000204 	addi	r16,r16,8
 4001b4c:	e0bfda17 	ldw	r2,-152(fp)
 4001b50:	10800044 	addi	r2,r2,1
 4001b54:	e0bfda15 	stw	r2,-152(fp)
 4001b58:	e0bfda17 	ldw	r2,-152(fp)
 4001b5c:	10800210 	cmplti	r2,r2,8
 4001b60:	1002181e 	bne	r2,zero,40023c4 <___vfprintf_internal_r+0x1e40>
 4001b64:	e0bfd904 	addi	r2,fp,-156
 4001b68:	100d883a 	mov	r6,r2
 4001b6c:	e17fbc17 	ldw	r5,-272(fp)
 4001b70:	e13fbd17 	ldw	r4,-268(fp)
 4001b74:	40099280 	call	4009928 <__sprint_r>
 4001b78:	1002891e 	bne	r2,zero,40025a0 <___vfprintf_internal_r+0x201c>
 4001b7c:	e43fc904 	addi	r16,fp,-220
 4001b80:	00021006 	br	40023c4 <___vfprintf_internal_r+0x1e40>
					}
				} else if (expt <= 0) {
 4001b84:	e0bfdf17 	ldw	r2,-132(fp)
 4001b88:	00807c16 	blt	zero,r2,4001d7c <___vfprintf_internal_r+0x17f8>
					PRINT ("0", 1);
 4001b8c:	00810074 	movhi	r2,1025
 4001b90:	108db804 	addi	r2,r2,14048
 4001b94:	80800015 	stw	r2,0(r16)
 4001b98:	00800044 	movi	r2,1
 4001b9c:	80800115 	stw	r2,4(r16)
 4001ba0:	e0bfdb17 	ldw	r2,-148(fp)
 4001ba4:	10800044 	addi	r2,r2,1
 4001ba8:	e0bfdb15 	stw	r2,-148(fp)
 4001bac:	84000204 	addi	r16,r16,8
 4001bb0:	e0bfda17 	ldw	r2,-152(fp)
 4001bb4:	10800044 	addi	r2,r2,1
 4001bb8:	e0bfda15 	stw	r2,-152(fp)
 4001bbc:	e0bfda17 	ldw	r2,-152(fp)
 4001bc0:	10800210 	cmplti	r2,r2,8
 4001bc4:	1000071e 	bne	r2,zero,4001be4 <___vfprintf_internal_r+0x1660>
 4001bc8:	e0bfd904 	addi	r2,fp,-156
 4001bcc:	100d883a 	mov	r6,r2
 4001bd0:	e17fbc17 	ldw	r5,-272(fp)
 4001bd4:	e13fbd17 	ldw	r4,-268(fp)
 4001bd8:	40099280 	call	4009928 <__sprint_r>
 4001bdc:	1002721e 	bne	r2,zero,40025a8 <___vfprintf_internal_r+0x2024>
 4001be0:	e43fc904 	addi	r16,fp,-220
					if (expt || ndig || flags & ALT) {
 4001be4:	e0bfdf17 	ldw	r2,-132(fp)
 4001be8:	1000041e 	bne	r2,zero,4001bfc <___vfprintf_internal_r+0x1678>
 4001bec:	e0bfdc17 	ldw	r2,-144(fp)
 4001bf0:	1000021e 	bne	r2,zero,4001bfc <___vfprintf_internal_r+0x1678>
 4001bf4:	8880004c 	andi	r2,r17,1
 4001bf8:	1001f226 	beq	r2,zero,40023c4 <___vfprintf_internal_r+0x1e40>
						PRINT (decimal_point, decp_len);
 4001bfc:	e0bfe817 	ldw	r2,-96(fp)
 4001c00:	80800015 	stw	r2,0(r16)
 4001c04:	e0bfe717 	ldw	r2,-100(fp)
 4001c08:	80800115 	stw	r2,4(r16)
 4001c0c:	e0ffdb17 	ldw	r3,-148(fp)
 4001c10:	e0bfe717 	ldw	r2,-100(fp)
 4001c14:	1885883a 	add	r2,r3,r2
 4001c18:	e0bfdb15 	stw	r2,-148(fp)
 4001c1c:	84000204 	addi	r16,r16,8
 4001c20:	e0bfda17 	ldw	r2,-152(fp)
 4001c24:	10800044 	addi	r2,r2,1
 4001c28:	e0bfda15 	stw	r2,-152(fp)
 4001c2c:	e0bfda17 	ldw	r2,-152(fp)
 4001c30:	10800210 	cmplti	r2,r2,8
 4001c34:	1000071e 	bne	r2,zero,4001c54 <___vfprintf_internal_r+0x16d0>
 4001c38:	e0bfd904 	addi	r2,fp,-156
 4001c3c:	100d883a 	mov	r6,r2
 4001c40:	e17fbc17 	ldw	r5,-272(fp)
 4001c44:	e13fbd17 	ldw	r4,-268(fp)
 4001c48:	40099280 	call	4009928 <__sprint_r>
 4001c4c:	1002581e 	bne	r2,zero,40025b0 <___vfprintf_internal_r+0x202c>
 4001c50:	e43fc904 	addi	r16,fp,-220
						PAD (-expt, zeroes);
 4001c54:	e0bfdf17 	ldw	r2,-132(fp)
 4001c58:	00a7c83a 	sub	r19,zero,r2
 4001c5c:	04c0310e 	bge	zero,r19,4001d24 <___vfprintf_internal_r+0x17a0>
 4001c60:	00001706 	br	4001cc0 <___vfprintf_internal_r+0x173c>
 4001c64:	00810074 	movhi	r2,1025
 4001c68:	108dbd04 	addi	r2,r2,14068
 4001c6c:	80800015 	stw	r2,0(r16)
 4001c70:	00800404 	movi	r2,16
 4001c74:	80800115 	stw	r2,4(r16)
 4001c78:	e0bfdb17 	ldw	r2,-148(fp)
 4001c7c:	10800404 	addi	r2,r2,16
 4001c80:	e0bfdb15 	stw	r2,-148(fp)
 4001c84:	84000204 	addi	r16,r16,8
 4001c88:	e0bfda17 	ldw	r2,-152(fp)
 4001c8c:	10800044 	addi	r2,r2,1
 4001c90:	e0bfda15 	stw	r2,-152(fp)
 4001c94:	e0bfda17 	ldw	r2,-152(fp)
 4001c98:	10800210 	cmplti	r2,r2,8
 4001c9c:	1000071e 	bne	r2,zero,4001cbc <___vfprintf_internal_r+0x1738>
 4001ca0:	e0bfd904 	addi	r2,fp,-156
 4001ca4:	100d883a 	mov	r6,r2
 4001ca8:	e17fbc17 	ldw	r5,-272(fp)
 4001cac:	e13fbd17 	ldw	r4,-268(fp)
 4001cb0:	40099280 	call	4009928 <__sprint_r>
 4001cb4:	1002401e 	bne	r2,zero,40025b8 <___vfprintf_internal_r+0x2034>
 4001cb8:	e43fc904 	addi	r16,fp,-220
 4001cbc:	9cfffc04 	addi	r19,r19,-16
 4001cc0:	98800448 	cmpgei	r2,r19,17
 4001cc4:	103fe71e 	bne	r2,zero,4001c64 <___vfprintf_internal_r+0x16e0>
 4001cc8:	00810074 	movhi	r2,1025
 4001ccc:	108dbd04 	addi	r2,r2,14068
 4001cd0:	80800015 	stw	r2,0(r16)
 4001cd4:	9805883a 	mov	r2,r19
 4001cd8:	80800115 	stw	r2,4(r16)
 4001cdc:	e0bfdb17 	ldw	r2,-148(fp)
 4001ce0:	9807883a 	mov	r3,r19
 4001ce4:	10c5883a 	add	r2,r2,r3
 4001ce8:	e0bfdb15 	stw	r2,-148(fp)
 4001cec:	84000204 	addi	r16,r16,8
 4001cf0:	e0bfda17 	ldw	r2,-152(fp)
 4001cf4:	10800044 	addi	r2,r2,1
 4001cf8:	e0bfda15 	stw	r2,-152(fp)
 4001cfc:	e0bfda17 	ldw	r2,-152(fp)
 4001d00:	10800210 	cmplti	r2,r2,8
 4001d04:	1000071e 	bne	r2,zero,4001d24 <___vfprintf_internal_r+0x17a0>
 4001d08:	e0bfd904 	addi	r2,fp,-156
 4001d0c:	100d883a 	mov	r6,r2
 4001d10:	e17fbc17 	ldw	r5,-272(fp)
 4001d14:	e13fbd17 	ldw	r4,-268(fp)
 4001d18:	40099280 	call	4009928 <__sprint_r>
 4001d1c:	1002281e 	bne	r2,zero,40025c0 <___vfprintf_internal_r+0x203c>
 4001d20:	e43fc904 	addi	r16,fp,-220
						PRINT (cp, ndig);
 4001d24:	84800015 	stw	r18,0(r16)
 4001d28:	e0bfdc17 	ldw	r2,-144(fp)
 4001d2c:	80800115 	stw	r2,4(r16)
 4001d30:	e0bfdb17 	ldw	r2,-148(fp)
 4001d34:	e0ffdc17 	ldw	r3,-144(fp)
 4001d38:	10c5883a 	add	r2,r2,r3
 4001d3c:	e0bfdb15 	stw	r2,-148(fp)
 4001d40:	84000204 	addi	r16,r16,8
 4001d44:	e0bfda17 	ldw	r2,-152(fp)
 4001d48:	10800044 	addi	r2,r2,1
 4001d4c:	e0bfda15 	stw	r2,-152(fp)
 4001d50:	e0bfda17 	ldw	r2,-152(fp)
 4001d54:	10800210 	cmplti	r2,r2,8
 4001d58:	10019a1e 	bne	r2,zero,40023c4 <___vfprintf_internal_r+0x1e40>
 4001d5c:	e0bfd904 	addi	r2,fp,-156
 4001d60:	100d883a 	mov	r6,r2
 4001d64:	e17fbc17 	ldw	r5,-272(fp)
 4001d68:	e13fbd17 	ldw	r4,-268(fp)
 4001d6c:	40099280 	call	4009928 <__sprint_r>
 4001d70:	1002151e 	bne	r2,zero,40025c8 <___vfprintf_internal_r+0x2044>
 4001d74:	e43fc904 	addi	r16,fp,-220
 4001d78:	00019206 	br	40023c4 <___vfprintf_internal_r+0x1e40>
					}
				} else {
					char *convbuf = cp;
 4001d7c:	e4bfe315 	stw	r18,-116(fp)
					PRINTANDPAD(cp, convbuf + ndig,
 4001d80:	e0bfdc17 	ldw	r2,-144(fp)
 4001d84:	1007883a 	mov	r3,r2
 4001d88:	e0bfe317 	ldw	r2,-116(fp)
 4001d8c:	10c5883a 	add	r2,r2,r3
 4001d90:	1485c83a 	sub	r2,r2,r18
 4001d94:	e0bfea15 	stw	r2,-88(fp)
 4001d98:	e0bfea17 	ldw	r2,-88(fp)
 4001d9c:	e0fff317 	ldw	r3,-52(fp)
 4001da0:	1880020e 	bge	r3,r2,4001dac <___vfprintf_internal_r+0x1828>
 4001da4:	e0bff317 	ldw	r2,-52(fp)
 4001da8:	e0bfea15 	stw	r2,-88(fp)
 4001dac:	e0bfea17 	ldw	r2,-88(fp)
 4001db0:	0080150e 	bge	zero,r2,4001e08 <___vfprintf_internal_r+0x1884>
 4001db4:	84800015 	stw	r18,0(r16)
 4001db8:	e0bfea17 	ldw	r2,-88(fp)
 4001dbc:	80800115 	stw	r2,4(r16)
 4001dc0:	e0ffdb17 	ldw	r3,-148(fp)
 4001dc4:	e0bfea17 	ldw	r2,-88(fp)
 4001dc8:	1885883a 	add	r2,r3,r2
 4001dcc:	e0bfdb15 	stw	r2,-148(fp)
 4001dd0:	84000204 	addi	r16,r16,8
 4001dd4:	e0bfda17 	ldw	r2,-152(fp)
 4001dd8:	10800044 	addi	r2,r2,1
 4001ddc:	e0bfda15 	stw	r2,-152(fp)
 4001de0:	e0bfda17 	ldw	r2,-152(fp)
 4001de4:	10800210 	cmplti	r2,r2,8
 4001de8:	1000071e 	bne	r2,zero,4001e08 <___vfprintf_internal_r+0x1884>
 4001dec:	e0bfd904 	addi	r2,fp,-156
 4001df0:	100d883a 	mov	r6,r2
 4001df4:	e17fbc17 	ldw	r5,-272(fp)
 4001df8:	e13fbd17 	ldw	r4,-268(fp)
 4001dfc:	40099280 	call	4009928 <__sprint_r>
 4001e00:	1001f31e 	bne	r2,zero,40025d0 <___vfprintf_internal_r+0x204c>
 4001e04:	e43fc904 	addi	r16,fp,-220
 4001e08:	e0bfea17 	ldw	r2,-88(fp)
 4001e0c:	1000010e 	bge	r2,zero,4001e14 <___vfprintf_internal_r+0x1890>
 4001e10:	0005883a 	mov	r2,zero
 4001e14:	e0fff317 	ldw	r3,-52(fp)
 4001e18:	1885c83a 	sub	r2,r3,r2
 4001e1c:	e0bfea15 	stw	r2,-88(fp)
 4001e20:	e0bfea17 	ldw	r2,-88(fp)
 4001e24:	0080340e 	bge	zero,r2,4001ef8 <___vfprintf_internal_r+0x1974>
 4001e28:	00001906 	br	4001e90 <___vfprintf_internal_r+0x190c>
 4001e2c:	00810074 	movhi	r2,1025
 4001e30:	108dbd04 	addi	r2,r2,14068
 4001e34:	80800015 	stw	r2,0(r16)
 4001e38:	00800404 	movi	r2,16
 4001e3c:	80800115 	stw	r2,4(r16)
 4001e40:	e0bfdb17 	ldw	r2,-148(fp)
 4001e44:	10800404 	addi	r2,r2,16
 4001e48:	e0bfdb15 	stw	r2,-148(fp)
 4001e4c:	84000204 	addi	r16,r16,8
 4001e50:	e0bfda17 	ldw	r2,-152(fp)
 4001e54:	10800044 	addi	r2,r2,1
 4001e58:	e0bfda15 	stw	r2,-152(fp)
 4001e5c:	e0bfda17 	ldw	r2,-152(fp)
 4001e60:	10800210 	cmplti	r2,r2,8
 4001e64:	1000071e 	bne	r2,zero,4001e84 <___vfprintf_internal_r+0x1900>
 4001e68:	e0bfd904 	addi	r2,fp,-156
 4001e6c:	100d883a 	mov	r6,r2
 4001e70:	e17fbc17 	ldw	r5,-272(fp)
 4001e74:	e13fbd17 	ldw	r4,-268(fp)
 4001e78:	40099280 	call	4009928 <__sprint_r>
 4001e7c:	1001d61e 	bne	r2,zero,40025d8 <___vfprintf_internal_r+0x2054>
 4001e80:	e43fc904 	addi	r16,fp,-220
 4001e84:	e0bfea17 	ldw	r2,-88(fp)
 4001e88:	10bffc04 	addi	r2,r2,-16
 4001e8c:	e0bfea15 	stw	r2,-88(fp)
 4001e90:	e0bfea17 	ldw	r2,-88(fp)
 4001e94:	10800448 	cmpgei	r2,r2,17
 4001e98:	103fe41e 	bne	r2,zero,4001e2c <___vfprintf_internal_r+0x18a8>
 4001e9c:	00810074 	movhi	r2,1025
 4001ea0:	108dbd04 	addi	r2,r2,14068
 4001ea4:	80800015 	stw	r2,0(r16)
 4001ea8:	e0bfea17 	ldw	r2,-88(fp)
 4001eac:	80800115 	stw	r2,4(r16)
 4001eb0:	e0ffdb17 	ldw	r3,-148(fp)
 4001eb4:	e0bfea17 	ldw	r2,-88(fp)
 4001eb8:	1885883a 	add	r2,r3,r2
 4001ebc:	e0bfdb15 	stw	r2,-148(fp)
 4001ec0:	84000204 	addi	r16,r16,8
 4001ec4:	e0bfda17 	ldw	r2,-152(fp)
 4001ec8:	10800044 	addi	r2,r2,1
 4001ecc:	e0bfda15 	stw	r2,-152(fp)
 4001ed0:	e0bfda17 	ldw	r2,-152(fp)
 4001ed4:	10800210 	cmplti	r2,r2,8
 4001ed8:	1000071e 	bne	r2,zero,4001ef8 <___vfprintf_internal_r+0x1974>
 4001edc:	e0bfd904 	addi	r2,fp,-156
 4001ee0:	100d883a 	mov	r6,r2
 4001ee4:	e17fbc17 	ldw	r5,-272(fp)
 4001ee8:	e13fbd17 	ldw	r4,-268(fp)
 4001eec:	40099280 	call	4009928 <__sprint_r>
 4001ef0:	1001bb1e 	bne	r2,zero,40025e0 <___vfprintf_internal_r+0x205c>
 4001ef4:	e43fc904 	addi	r16,fp,-220
						    lead, zeroes);
					cp += lead;
 4001ef8:	e0bff317 	ldw	r2,-52(fp)
 4001efc:	90a5883a 	add	r18,r18,r2
					    }
					    if (cp > convbuf + ndig)
						cp = convbuf + ndig;
					}
#endif
					if (expt < ndig || flags & ALT)
 4001f00:	e0ffdf17 	ldw	r3,-132(fp)
 4001f04:	e0bfdc17 	ldw	r2,-144(fp)
 4001f08:	18800216 	blt	r3,r2,4001f14 <___vfprintf_internal_r+0x1990>
 4001f0c:	8880004c 	andi	r2,r17,1
 4001f10:	10001626 	beq	r2,zero,4001f6c <___vfprintf_internal_r+0x19e8>
					    PRINT (decimal_point, decp_len);
 4001f14:	e0bfe817 	ldw	r2,-96(fp)
 4001f18:	80800015 	stw	r2,0(r16)
 4001f1c:	e0bfe717 	ldw	r2,-100(fp)
 4001f20:	80800115 	stw	r2,4(r16)
 4001f24:	e0ffdb17 	ldw	r3,-148(fp)
 4001f28:	e0bfe717 	ldw	r2,-100(fp)
 4001f2c:	1885883a 	add	r2,r3,r2
 4001f30:	e0bfdb15 	stw	r2,-148(fp)
 4001f34:	84000204 	addi	r16,r16,8
 4001f38:	e0bfda17 	ldw	r2,-152(fp)
 4001f3c:	10800044 	addi	r2,r2,1
 4001f40:	e0bfda15 	stw	r2,-152(fp)
 4001f44:	e0bfda17 	ldw	r2,-152(fp)
 4001f48:	10800210 	cmplti	r2,r2,8
 4001f4c:	1000071e 	bne	r2,zero,4001f6c <___vfprintf_internal_r+0x19e8>
 4001f50:	e0bfd904 	addi	r2,fp,-156
 4001f54:	100d883a 	mov	r6,r2
 4001f58:	e17fbc17 	ldw	r5,-272(fp)
 4001f5c:	e13fbd17 	ldw	r4,-268(fp)
 4001f60:	40099280 	call	4009928 <__sprint_r>
 4001f64:	1001a01e 	bne	r2,zero,40025e8 <___vfprintf_internal_r+0x2064>
 4001f68:	e43fc904 	addi	r16,fp,-220
					PRINTANDPAD (cp, convbuf + ndig,
 4001f6c:	e0bfdc17 	ldw	r2,-144(fp)
 4001f70:	1007883a 	mov	r3,r2
 4001f74:	e0bfe317 	ldw	r2,-116(fp)
 4001f78:	10c5883a 	add	r2,r2,r3
 4001f7c:	1485c83a 	sub	r2,r2,r18
 4001f80:	e0bfe915 	stw	r2,-92(fp)
 4001f84:	e0ffdc17 	ldw	r3,-144(fp)
 4001f88:	e0bfdf17 	ldw	r2,-132(fp)
 4001f8c:	1887c83a 	sub	r3,r3,r2
 4001f90:	e0bfe917 	ldw	r2,-92(fp)
 4001f94:	1880040e 	bge	r3,r2,4001fa8 <___vfprintf_internal_r+0x1a24>
 4001f98:	e0ffdc17 	ldw	r3,-144(fp)
 4001f9c:	e0bfdf17 	ldw	r2,-132(fp)
 4001fa0:	1885c83a 	sub	r2,r3,r2
 4001fa4:	e0bfe915 	stw	r2,-92(fp)
 4001fa8:	e0bfe917 	ldw	r2,-92(fp)
 4001fac:	0080150e 	bge	zero,r2,4002004 <___vfprintf_internal_r+0x1a80>
 4001fb0:	84800015 	stw	r18,0(r16)
 4001fb4:	e0bfe917 	ldw	r2,-92(fp)
 4001fb8:	80800115 	stw	r2,4(r16)
 4001fbc:	e0ffdb17 	ldw	r3,-148(fp)
 4001fc0:	e0bfe917 	ldw	r2,-92(fp)
 4001fc4:	1885883a 	add	r2,r3,r2
 4001fc8:	e0bfdb15 	stw	r2,-148(fp)
 4001fcc:	84000204 	addi	r16,r16,8
 4001fd0:	e0bfda17 	ldw	r2,-152(fp)
 4001fd4:	10800044 	addi	r2,r2,1
 4001fd8:	e0bfda15 	stw	r2,-152(fp)
 4001fdc:	e0bfda17 	ldw	r2,-152(fp)
 4001fe0:	10800210 	cmplti	r2,r2,8
 4001fe4:	1000071e 	bne	r2,zero,4002004 <___vfprintf_internal_r+0x1a80>
 4001fe8:	e0bfd904 	addi	r2,fp,-156
 4001fec:	100d883a 	mov	r6,r2
 4001ff0:	e17fbc17 	ldw	r5,-272(fp)
 4001ff4:	e13fbd17 	ldw	r4,-268(fp)
 4001ff8:	40099280 	call	4009928 <__sprint_r>
 4001ffc:	10017c1e 	bne	r2,zero,40025f0 <___vfprintf_internal_r+0x206c>
 4002000:	e43fc904 	addi	r16,fp,-220
 4002004:	e0ffdc17 	ldw	r3,-144(fp)
 4002008:	e0bfdf17 	ldw	r2,-132(fp)
 400200c:	1887c83a 	sub	r3,r3,r2
 4002010:	e0bfe917 	ldw	r2,-92(fp)
 4002014:	1000010e 	bge	r2,zero,400201c <___vfprintf_internal_r+0x1a98>
 4002018:	0005883a 	mov	r2,zero
 400201c:	1885c83a 	sub	r2,r3,r2
 4002020:	e0bfe915 	stw	r2,-92(fp)
 4002024:	e0bfe917 	ldw	r2,-92(fp)
 4002028:	0080e60e 	bge	zero,r2,40023c4 <___vfprintf_internal_r+0x1e40>
 400202c:	00001906 	br	4002094 <___vfprintf_internal_r+0x1b10>
 4002030:	00810074 	movhi	r2,1025
 4002034:	108dbd04 	addi	r2,r2,14068
 4002038:	80800015 	stw	r2,0(r16)
 400203c:	00800404 	movi	r2,16
 4002040:	80800115 	stw	r2,4(r16)
 4002044:	e0bfdb17 	ldw	r2,-148(fp)
 4002048:	10800404 	addi	r2,r2,16
 400204c:	e0bfdb15 	stw	r2,-148(fp)
 4002050:	84000204 	addi	r16,r16,8
 4002054:	e0bfda17 	ldw	r2,-152(fp)
 4002058:	10800044 	addi	r2,r2,1
 400205c:	e0bfda15 	stw	r2,-152(fp)
 4002060:	e0bfda17 	ldw	r2,-152(fp)
 4002064:	10800210 	cmplti	r2,r2,8
 4002068:	1000071e 	bne	r2,zero,4002088 <___vfprintf_internal_r+0x1b04>
 400206c:	e0bfd904 	addi	r2,fp,-156
 4002070:	100d883a 	mov	r6,r2
 4002074:	e17fbc17 	ldw	r5,-272(fp)
 4002078:	e13fbd17 	ldw	r4,-268(fp)
 400207c:	40099280 	call	4009928 <__sprint_r>
 4002080:	10015d1e 	bne	r2,zero,40025f8 <___vfprintf_internal_r+0x2074>
 4002084:	e43fc904 	addi	r16,fp,-220
 4002088:	e0bfe917 	ldw	r2,-92(fp)
 400208c:	10bffc04 	addi	r2,r2,-16
 4002090:	e0bfe915 	stw	r2,-92(fp)
 4002094:	e0bfe917 	ldw	r2,-92(fp)
 4002098:	10800448 	cmpgei	r2,r2,17
 400209c:	103fe41e 	bne	r2,zero,4002030 <___vfprintf_internal_r+0x1aac>
 40020a0:	00810074 	movhi	r2,1025
 40020a4:	108dbd04 	addi	r2,r2,14068
 40020a8:	80800015 	stw	r2,0(r16)
 40020ac:	e0bfe917 	ldw	r2,-92(fp)
 40020b0:	80800115 	stw	r2,4(r16)
 40020b4:	e0ffdb17 	ldw	r3,-148(fp)
 40020b8:	e0bfe917 	ldw	r2,-92(fp)
 40020bc:	1885883a 	add	r2,r3,r2
 40020c0:	e0bfdb15 	stw	r2,-148(fp)
 40020c4:	84000204 	addi	r16,r16,8
 40020c8:	e0bfda17 	ldw	r2,-152(fp)
 40020cc:	10800044 	addi	r2,r2,1
 40020d0:	e0bfda15 	stw	r2,-152(fp)
 40020d4:	e0bfda17 	ldw	r2,-152(fp)
 40020d8:	10800210 	cmplti	r2,r2,8
 40020dc:	1000b91e 	bne	r2,zero,40023c4 <___vfprintf_internal_r+0x1e40>
 40020e0:	e0bfd904 	addi	r2,fp,-156
 40020e4:	100d883a 	mov	r6,r2
 40020e8:	e17fbc17 	ldw	r5,-272(fp)
 40020ec:	e13fbd17 	ldw	r4,-268(fp)
 40020f0:	40099280 	call	4009928 <__sprint_r>
 40020f4:	1001421e 	bne	r2,zero,4002600 <___vfprintf_internal_r+0x207c>
 40020f8:	e43fc904 	addi	r16,fp,-220
 40020fc:	0000b106 	br	40023c4 <___vfprintf_internal_r+0x1e40>
						     ndig - expt, zeroes);
				}
			} else {	/* 'a', 'A', 'e', or 'E' */
				if (ndig > 1 || flags & ALT) {
 4002100:	e0bfdc17 	ldw	r2,-144(fp)
 4002104:	10800088 	cmpgei	r2,r2,2
 4002108:	1000021e 	bne	r2,zero,4002114 <___vfprintf_internal_r+0x1b90>
 400210c:	8880004c 	andi	r2,r17,1
 4002110:	10008026 	beq	r2,zero,4002314 <___vfprintf_internal_r+0x1d90>
					PRINT (cp, 1);
 4002114:	84800015 	stw	r18,0(r16)
 4002118:	00800044 	movi	r2,1
 400211c:	80800115 	stw	r2,4(r16)
 4002120:	e0bfdb17 	ldw	r2,-148(fp)
 4002124:	10800044 	addi	r2,r2,1
 4002128:	e0bfdb15 	stw	r2,-148(fp)
 400212c:	84000204 	addi	r16,r16,8
 4002130:	e0bfda17 	ldw	r2,-152(fp)
 4002134:	10800044 	addi	r2,r2,1
 4002138:	e0bfda15 	stw	r2,-152(fp)
 400213c:	e0bfda17 	ldw	r2,-152(fp)
 4002140:	10800210 	cmplti	r2,r2,8
 4002144:	1000071e 	bne	r2,zero,4002164 <___vfprintf_internal_r+0x1be0>
 4002148:	e0bfd904 	addi	r2,fp,-156
 400214c:	100d883a 	mov	r6,r2
 4002150:	e17fbc17 	ldw	r5,-272(fp)
 4002154:	e13fbd17 	ldw	r4,-268(fp)
 4002158:	40099280 	call	4009928 <__sprint_r>
 400215c:	10012a1e 	bne	r2,zero,4002608 <___vfprintf_internal_r+0x2084>
 4002160:	e43fc904 	addi	r16,fp,-220
					cp++;
 4002164:	94800044 	addi	r18,r18,1
					PRINT (decimal_point, decp_len);
 4002168:	e0bfe817 	ldw	r2,-96(fp)
 400216c:	80800015 	stw	r2,0(r16)
 4002170:	e0bfe717 	ldw	r2,-100(fp)
 4002174:	80800115 	stw	r2,4(r16)
 4002178:	e0ffdb17 	ldw	r3,-148(fp)
 400217c:	e0bfe717 	ldw	r2,-100(fp)
 4002180:	1885883a 	add	r2,r3,r2
 4002184:	e0bfdb15 	stw	r2,-148(fp)
 4002188:	84000204 	addi	r16,r16,8
 400218c:	e0bfda17 	ldw	r2,-152(fp)
 4002190:	10800044 	addi	r2,r2,1
 4002194:	e0bfda15 	stw	r2,-152(fp)
 4002198:	e0bfda17 	ldw	r2,-152(fp)
 400219c:	10800210 	cmplti	r2,r2,8
 40021a0:	1000071e 	bne	r2,zero,40021c0 <___vfprintf_internal_r+0x1c3c>
 40021a4:	e0bfd904 	addi	r2,fp,-156
 40021a8:	100d883a 	mov	r6,r2
 40021ac:	e17fbc17 	ldw	r5,-272(fp)
 40021b0:	e13fbd17 	ldw	r4,-268(fp)
 40021b4:	40099280 	call	4009928 <__sprint_r>
 40021b8:	1001151e 	bne	r2,zero,4002610 <___vfprintf_internal_r+0x208c>
 40021bc:	e43fc904 	addi	r16,fp,-220
					if (_fpvalue) {
 40021c0:	e0bfe017 	ldw	r2,-128(fp)
 40021c4:	e0ffe117 	ldw	r3,-124(fp)
 40021c8:	000d883a 	mov	r6,zero
 40021cc:	000f883a 	mov	r7,zero
 40021d0:	1009883a 	mov	r4,r2
 40021d4:	180b883a 	mov	r5,r3
 40021d8:	400f36c0 	call	400f36c <__eqdf2>
 40021dc:	10001826 	beq	r2,zero,4002240 <___vfprintf_internal_r+0x1cbc>
						PRINT (cp, ndig - 1);
 40021e0:	84800015 	stw	r18,0(r16)
 40021e4:	e0bfdc17 	ldw	r2,-144(fp)
 40021e8:	10bfffc4 	addi	r2,r2,-1
 40021ec:	80800115 	stw	r2,4(r16)
 40021f0:	e0bfdb17 	ldw	r2,-148(fp)
 40021f4:	e0ffdc17 	ldw	r3,-144(fp)
 40021f8:	10c5883a 	add	r2,r2,r3
 40021fc:	10bfffc4 	addi	r2,r2,-1
 4002200:	e0bfdb15 	stw	r2,-148(fp)
 4002204:	84000204 	addi	r16,r16,8
 4002208:	e0bfda17 	ldw	r2,-152(fp)
 400220c:	10800044 	addi	r2,r2,1
 4002210:	e0bfda15 	stw	r2,-152(fp)
 4002214:	e0bfda17 	ldw	r2,-152(fp)
 4002218:	10800210 	cmplti	r2,r2,8
 400221c:	1000521e 	bne	r2,zero,4002368 <___vfprintf_internal_r+0x1de4>
 4002220:	e0bfd904 	addi	r2,fp,-156
 4002224:	100d883a 	mov	r6,r2
 4002228:	e17fbc17 	ldw	r5,-272(fp)
 400222c:	e13fbd17 	ldw	r4,-268(fp)
 4002230:	40099280 	call	4009928 <__sprint_r>
 4002234:	1000f81e 	bne	r2,zero,4002618 <___vfprintf_internal_r+0x2094>
 4002238:	e43fc904 	addi	r16,fp,-220
					if (_fpvalue) {
 400223c:	00004a06 	br	4002368 <___vfprintf_internal_r+0x1de4>
					} else	/* 0.[0..] */
						/* __dtoa irregularity */
						PAD (ndig - 1, zeroes);
 4002240:	e0bfdc17 	ldw	r2,-144(fp)
 4002244:	14ffffc4 	addi	r19,r2,-1
 4002248:	04c0470e 	bge	zero,r19,4002368 <___vfprintf_internal_r+0x1de4>
 400224c:	00001706 	br	40022ac <___vfprintf_internal_r+0x1d28>
 4002250:	00810074 	movhi	r2,1025
 4002254:	108dbd04 	addi	r2,r2,14068
 4002258:	80800015 	stw	r2,0(r16)
 400225c:	00800404 	movi	r2,16
 4002260:	80800115 	stw	r2,4(r16)
 4002264:	e0bfdb17 	ldw	r2,-148(fp)
 4002268:	10800404 	addi	r2,r2,16
 400226c:	e0bfdb15 	stw	r2,-148(fp)
 4002270:	84000204 	addi	r16,r16,8
 4002274:	e0bfda17 	ldw	r2,-152(fp)
 4002278:	10800044 	addi	r2,r2,1
 400227c:	e0bfda15 	stw	r2,-152(fp)
 4002280:	e0bfda17 	ldw	r2,-152(fp)
 4002284:	10800210 	cmplti	r2,r2,8
 4002288:	1000071e 	bne	r2,zero,40022a8 <___vfprintf_internal_r+0x1d24>
 400228c:	e0bfd904 	addi	r2,fp,-156
 4002290:	100d883a 	mov	r6,r2
 4002294:	e17fbc17 	ldw	r5,-272(fp)
 4002298:	e13fbd17 	ldw	r4,-268(fp)
 400229c:	40099280 	call	4009928 <__sprint_r>
 40022a0:	1000df1e 	bne	r2,zero,4002620 <___vfprintf_internal_r+0x209c>
 40022a4:	e43fc904 	addi	r16,fp,-220
 40022a8:	9cfffc04 	addi	r19,r19,-16
 40022ac:	98800448 	cmpgei	r2,r19,17
 40022b0:	103fe71e 	bne	r2,zero,4002250 <___vfprintf_internal_r+0x1ccc>
 40022b4:	00810074 	movhi	r2,1025
 40022b8:	108dbd04 	addi	r2,r2,14068
 40022bc:	80800015 	stw	r2,0(r16)
 40022c0:	9805883a 	mov	r2,r19
 40022c4:	80800115 	stw	r2,4(r16)
 40022c8:	e0bfdb17 	ldw	r2,-148(fp)
 40022cc:	9807883a 	mov	r3,r19
 40022d0:	10c5883a 	add	r2,r2,r3
 40022d4:	e0bfdb15 	stw	r2,-148(fp)
 40022d8:	84000204 	addi	r16,r16,8
 40022dc:	e0bfda17 	ldw	r2,-152(fp)
 40022e0:	10800044 	addi	r2,r2,1
 40022e4:	e0bfda15 	stw	r2,-152(fp)
 40022e8:	e0bfda17 	ldw	r2,-152(fp)
 40022ec:	10800210 	cmplti	r2,r2,8
 40022f0:	10001d1e 	bne	r2,zero,4002368 <___vfprintf_internal_r+0x1de4>
 40022f4:	e0bfd904 	addi	r2,fp,-156
 40022f8:	100d883a 	mov	r6,r2
 40022fc:	e17fbc17 	ldw	r5,-272(fp)
 4002300:	e13fbd17 	ldw	r4,-268(fp)
 4002304:	40099280 	call	4009928 <__sprint_r>
 4002308:	1000c71e 	bne	r2,zero,4002628 <___vfprintf_internal_r+0x20a4>
 400230c:	e43fc904 	addi	r16,fp,-220
					if (_fpvalue) {
 4002310:	00001506 	br	4002368 <___vfprintf_internal_r+0x1de4>
				} else	/* XeYYY */
					PRINT (cp, 1);
 4002314:	84800015 	stw	r18,0(r16)
 4002318:	00800044 	movi	r2,1
 400231c:	80800115 	stw	r2,4(r16)
 4002320:	e0bfdb17 	ldw	r2,-148(fp)
 4002324:	10800044 	addi	r2,r2,1
 4002328:	e0bfdb15 	stw	r2,-148(fp)
 400232c:	84000204 	addi	r16,r16,8
 4002330:	e0bfda17 	ldw	r2,-152(fp)
 4002334:	10800044 	addi	r2,r2,1
 4002338:	e0bfda15 	stw	r2,-152(fp)
 400233c:	e0bfda17 	ldw	r2,-152(fp)
 4002340:	10800210 	cmplti	r2,r2,8
 4002344:	1000091e 	bne	r2,zero,400236c <___vfprintf_internal_r+0x1de8>
 4002348:	e0bfd904 	addi	r2,fp,-156
 400234c:	100d883a 	mov	r6,r2
 4002350:	e17fbc17 	ldw	r5,-272(fp)
 4002354:	e13fbd17 	ldw	r4,-268(fp)
 4002358:	40099280 	call	4009928 <__sprint_r>
 400235c:	1000b41e 	bne	r2,zero,4002630 <___vfprintf_internal_r+0x20ac>
 4002360:	e43fc904 	addi	r16,fp,-220
 4002364:	00000106 	br	400236c <___vfprintf_internal_r+0x1de8>
					if (_fpvalue) {
 4002368:	0001883a 	nop
				PRINT (expstr, expsize);
 400236c:	e0bfdd44 	addi	r2,fp,-139
 4002370:	80800015 	stw	r2,0(r16)
 4002374:	e0bff417 	ldw	r2,-48(fp)
 4002378:	80800115 	stw	r2,4(r16)
 400237c:	e0ffdb17 	ldw	r3,-148(fp)
 4002380:	e0bff417 	ldw	r2,-48(fp)
 4002384:	1885883a 	add	r2,r3,r2
 4002388:	e0bfdb15 	stw	r2,-148(fp)
 400238c:	84000204 	addi	r16,r16,8
 4002390:	e0bfda17 	ldw	r2,-152(fp)
 4002394:	10800044 	addi	r2,r2,1
 4002398:	e0bfda15 	stw	r2,-152(fp)
 400239c:	e0bfda17 	ldw	r2,-152(fp)
 40023a0:	10800210 	cmplti	r2,r2,8
 40023a4:	1000071e 	bne	r2,zero,40023c4 <___vfprintf_internal_r+0x1e40>
 40023a8:	e0bfd904 	addi	r2,fp,-156
 40023ac:	100d883a 	mov	r6,r2
 40023b0:	e17fbc17 	ldw	r5,-272(fp)
 40023b4:	e13fbd17 	ldw	r4,-268(fp)
 40023b8:	40099280 	call	4009928 <__sprint_r>
 40023bc:	10009e1e 	bne	r2,zero,4002638 <___vfprintf_internal_r+0x20b4>
 40023c0:	e43fc904 	addi	r16,fp,-220
		}
#else /* !FLOATING_POINT */
		PRINT (cp, size);
#endif
		/* left-adjusting padding (always blank) */
		if (flags & LADJUST)
 40023c4:	8880010c 	andi	r2,r17,4
 40023c8:	10003526 	beq	r2,zero,40024a0 <___vfprintf_internal_r+0x1f1c>
			PAD (width - realsz, blanks);
 40023cc:	e0fff617 	ldw	r3,-40(fp)
 40023d0:	e0bfee17 	ldw	r2,-72(fp)
 40023d4:	18a7c83a 	sub	r19,r3,r2
 40023d8:	04c0310e 	bge	zero,r19,40024a0 <___vfprintf_internal_r+0x1f1c>
 40023dc:	00001706 	br	400243c <___vfprintf_internal_r+0x1eb8>
 40023e0:	00810074 	movhi	r2,1025
 40023e4:	108db904 	addi	r2,r2,14052
 40023e8:	80800015 	stw	r2,0(r16)
 40023ec:	00800404 	movi	r2,16
 40023f0:	80800115 	stw	r2,4(r16)
 40023f4:	e0bfdb17 	ldw	r2,-148(fp)
 40023f8:	10800404 	addi	r2,r2,16
 40023fc:	e0bfdb15 	stw	r2,-148(fp)
 4002400:	84000204 	addi	r16,r16,8
 4002404:	e0bfda17 	ldw	r2,-152(fp)
 4002408:	10800044 	addi	r2,r2,1
 400240c:	e0bfda15 	stw	r2,-152(fp)
 4002410:	e0bfda17 	ldw	r2,-152(fp)
 4002414:	10800210 	cmplti	r2,r2,8
 4002418:	1000071e 	bne	r2,zero,4002438 <___vfprintf_internal_r+0x1eb4>
 400241c:	e0bfd904 	addi	r2,fp,-156
 4002420:	100d883a 	mov	r6,r2
 4002424:	e17fbc17 	ldw	r5,-272(fp)
 4002428:	e13fbd17 	ldw	r4,-268(fp)
 400242c:	40099280 	call	4009928 <__sprint_r>
 4002430:	1000831e 	bne	r2,zero,4002640 <___vfprintf_internal_r+0x20bc>
 4002434:	e43fc904 	addi	r16,fp,-220
 4002438:	9cfffc04 	addi	r19,r19,-16
 400243c:	98800448 	cmpgei	r2,r19,17
 4002440:	103fe71e 	bne	r2,zero,40023e0 <___vfprintf_internal_r+0x1e5c>
 4002444:	00810074 	movhi	r2,1025
 4002448:	108db904 	addi	r2,r2,14052
 400244c:	80800015 	stw	r2,0(r16)
 4002450:	9805883a 	mov	r2,r19
 4002454:	80800115 	stw	r2,4(r16)
 4002458:	e0bfdb17 	ldw	r2,-148(fp)
 400245c:	9807883a 	mov	r3,r19
 4002460:	10c5883a 	add	r2,r2,r3
 4002464:	e0bfdb15 	stw	r2,-148(fp)
 4002468:	84000204 	addi	r16,r16,8
 400246c:	e0bfda17 	ldw	r2,-152(fp)
 4002470:	10800044 	addi	r2,r2,1
 4002474:	e0bfda15 	stw	r2,-152(fp)
 4002478:	e0bfda17 	ldw	r2,-152(fp)
 400247c:	10800210 	cmplti	r2,r2,8
 4002480:	1000071e 	bne	r2,zero,40024a0 <___vfprintf_internal_r+0x1f1c>
 4002484:	e0bfd904 	addi	r2,fp,-156
 4002488:	100d883a 	mov	r6,r2
 400248c:	e17fbc17 	ldw	r5,-272(fp)
 4002490:	e13fbd17 	ldw	r4,-268(fp)
 4002494:	40099280 	call	4009928 <__sprint_r>
 4002498:	10006b1e 	bne	r2,zero,4002648 <___vfprintf_internal_r+0x20c4>
 400249c:	e43fc904 	addi	r16,fp,-220

		/* finally, adjust ret */
		ret += width > realsz ? width : realsz;
 40024a0:	e0fff617 	ldw	r3,-40(fp)
 40024a4:	e0bfee17 	ldw	r2,-72(fp)
 40024a8:	10c0010e 	bge	r2,r3,40024b0 <___vfprintf_internal_r+0x1f2c>
 40024ac:	1805883a 	mov	r2,r3
 40024b0:	e0fff717 	ldw	r3,-36(fp)
 40024b4:	1885883a 	add	r2,r3,r2
 40024b8:	e0bff715 	stw	r2,-36(fp)

		FLUSH ();	/* copy out the I/O vectors */
 40024bc:	e0bfdb17 	ldw	r2,-148(fp)
 40024c0:	10000626 	beq	r2,zero,40024dc <___vfprintf_internal_r+0x1f58>
 40024c4:	e0bfd904 	addi	r2,fp,-156
 40024c8:	100d883a 	mov	r6,r2
 40024cc:	e17fbc17 	ldw	r5,-272(fp)
 40024d0:	e13fbd17 	ldw	r4,-268(fp)
 40024d4:	40099280 	call	4009928 <__sprint_r>
 40024d8:	10005d1e 	bne	r2,zero,4002650 <___vfprintf_internal_r+0x20cc>
 40024dc:	e03fda15 	stw	zero,-152(fp)
 40024e0:	e43fc904 	addi	r16,fp,-220

                if (malloc_buf != NULL) {
 40024e4:	e0bfeb17 	ldw	r2,-84(fp)
 40024e8:	10388426 	beq	r2,zero,40006fc <___vfprintf_internal_r+0x178>
			_free_r (data, malloc_buf);
 40024ec:	e17feb17 	ldw	r5,-84(fp)
 40024f0:	e13fbd17 	ldw	r4,-268(fp)
 40024f4:	40055ac0 	call	40055ac <_free_r>
			malloc_buf = NULL;
 40024f8:	e03feb15 	stw	zero,-84(fp)
	        cp = fmt;
 40024fc:	00387f06 	br	40006fc <___vfprintf_internal_r+0x178>
                    goto done;
 4002500:	0001883a 	nop
 4002504:	00000106 	br	400250c <___vfprintf_internal_r+0x1f88>
				goto done;
 4002508:	0001883a 	nop
		}
	}
done:
	FLUSH ();
 400250c:	e0bfdb17 	ldw	r2,-148(fp)
 4002510:	10000626 	beq	r2,zero,400252c <___vfprintf_internal_r+0x1fa8>
 4002514:	e0bfd904 	addi	r2,fp,-156
 4002518:	100d883a 	mov	r6,r2
 400251c:	e17fbc17 	ldw	r5,-272(fp)
 4002520:	e13fbd17 	ldw	r4,-268(fp)
 4002524:	40099280 	call	4009928 <__sprint_r>
 4002528:	10004b1e 	bne	r2,zero,4002658 <___vfprintf_internal_r+0x20d4>
 400252c:	e03fda15 	stw	zero,-152(fp)
 4002530:	e43fc904 	addi	r16,fp,-220
 4002534:	00004906 	br	400265c <___vfprintf_internal_r+0x20d8>
			PRINT (cp, m);
 4002538:	0001883a 	nop
 400253c:	00004706 	br	400265c <___vfprintf_internal_r+0x20d8>
			PAD (width - realsz, blanks);
 4002540:	0001883a 	nop
 4002544:	00004506 	br	400265c <___vfprintf_internal_r+0x20d8>
 4002548:	0001883a 	nop
 400254c:	00004306 	br	400265c <___vfprintf_internal_r+0x20d8>
			PRINT (&sign, 1);
 4002550:	0001883a 	nop
 4002554:	00004106 	br	400265c <___vfprintf_internal_r+0x20d8>
			PRINT (ox, 2);
 4002558:	0001883a 	nop
 400255c:	00003f06 	br	400265c <___vfprintf_internal_r+0x20d8>
			PAD (width - realsz, zeroes);
 4002560:	0001883a 	nop
 4002564:	00003d06 	br	400265c <___vfprintf_internal_r+0x20d8>
 4002568:	0001883a 	nop
 400256c:	00003b06 	br	400265c <___vfprintf_internal_r+0x20d8>
		PAD (dprec - size, zeroes);
 4002570:	0001883a 	nop
 4002574:	00003906 	br	400265c <___vfprintf_internal_r+0x20d8>
 4002578:	0001883a 	nop
 400257c:	00003706 	br	400265c <___vfprintf_internal_r+0x20d8>
			PRINT (cp, size);
 4002580:	0001883a 	nop
 4002584:	00003506 	br	400265c <___vfprintf_internal_r+0x20d8>
					PRINT ("0", 1);
 4002588:	0001883a 	nop
 400258c:	00003306 	br	400265c <___vfprintf_internal_r+0x20d8>
						PRINT (decimal_point, decp_len);
 4002590:	0001883a 	nop
 4002594:	00003106 	br	400265c <___vfprintf_internal_r+0x20d8>
						PAD (ndig - 1, zeroes);
 4002598:	0001883a 	nop
 400259c:	00002f06 	br	400265c <___vfprintf_internal_r+0x20d8>
 40025a0:	0001883a 	nop
 40025a4:	00002d06 	br	400265c <___vfprintf_internal_r+0x20d8>
					PRINT ("0", 1);
 40025a8:	0001883a 	nop
 40025ac:	00002b06 	br	400265c <___vfprintf_internal_r+0x20d8>
						PRINT (decimal_point, decp_len);
 40025b0:	0001883a 	nop
 40025b4:	00002906 	br	400265c <___vfprintf_internal_r+0x20d8>
						PAD (-expt, zeroes);
 40025b8:	0001883a 	nop
 40025bc:	00002706 	br	400265c <___vfprintf_internal_r+0x20d8>
 40025c0:	0001883a 	nop
 40025c4:	00002506 	br	400265c <___vfprintf_internal_r+0x20d8>
						PRINT (cp, ndig);
 40025c8:	0001883a 	nop
 40025cc:	00002306 	br	400265c <___vfprintf_internal_r+0x20d8>
					PRINTANDPAD(cp, convbuf + ndig,
 40025d0:	0001883a 	nop
 40025d4:	00002106 	br	400265c <___vfprintf_internal_r+0x20d8>
 40025d8:	0001883a 	nop
 40025dc:	00001f06 	br	400265c <___vfprintf_internal_r+0x20d8>
 40025e0:	0001883a 	nop
 40025e4:	00001d06 	br	400265c <___vfprintf_internal_r+0x20d8>
					    PRINT (decimal_point, decp_len);
 40025e8:	0001883a 	nop
 40025ec:	00001b06 	br	400265c <___vfprintf_internal_r+0x20d8>
					PRINTANDPAD (cp, convbuf + ndig,
 40025f0:	0001883a 	nop
 40025f4:	00001906 	br	400265c <___vfprintf_internal_r+0x20d8>
 40025f8:	0001883a 	nop
 40025fc:	00001706 	br	400265c <___vfprintf_internal_r+0x20d8>
 4002600:	0001883a 	nop
 4002604:	00001506 	br	400265c <___vfprintf_internal_r+0x20d8>
					PRINT (cp, 1);
 4002608:	0001883a 	nop
 400260c:	00001306 	br	400265c <___vfprintf_internal_r+0x20d8>
					PRINT (decimal_point, decp_len);
 4002610:	0001883a 	nop
 4002614:	00001106 	br	400265c <___vfprintf_internal_r+0x20d8>
						PRINT (cp, ndig - 1);
 4002618:	0001883a 	nop
 400261c:	00000f06 	br	400265c <___vfprintf_internal_r+0x20d8>
						PAD (ndig - 1, zeroes);
 4002620:	0001883a 	nop
 4002624:	00000d06 	br	400265c <___vfprintf_internal_r+0x20d8>
 4002628:	0001883a 	nop
 400262c:	00000b06 	br	400265c <___vfprintf_internal_r+0x20d8>
					PRINT (cp, 1);
 4002630:	0001883a 	nop
 4002634:	00000906 	br	400265c <___vfprintf_internal_r+0x20d8>
				PRINT (expstr, expsize);
 4002638:	0001883a 	nop
 400263c:	00000706 	br	400265c <___vfprintf_internal_r+0x20d8>
			PAD (width - realsz, blanks);
 4002640:	0001883a 	nop
 4002644:	00000506 	br	400265c <___vfprintf_internal_r+0x20d8>
 4002648:	0001883a 	nop
 400264c:	00000306 	br	400265c <___vfprintf_internal_r+0x20d8>
		FLUSH ();	/* copy out the I/O vectors */
 4002650:	0001883a 	nop
 4002654:	00000106 	br	400265c <___vfprintf_internal_r+0x20d8>
	FLUSH ();
 4002658:	0001883a 	nop
error:
	if (malloc_buf != NULL)
 400265c:	e0bfeb17 	ldw	r2,-84(fp)
 4002660:	10000326 	beq	r2,zero,4002670 <___vfprintf_internal_r+0x20ec>
		_free_r (data, malloc_buf);
 4002664:	e17feb17 	ldw	r5,-84(fp)
 4002668:	e13fbd17 	ldw	r4,-268(fp)
 400266c:	40055ac0 	call	40055ac <_free_r>
#ifndef STRING_ONLY
	_newlib_flockfile_end (fp);
#endif
	return (__sferror (fp) ? EOF : ret);
 4002670:	e0bfbc17 	ldw	r2,-272(fp)
 4002674:	1080030b 	ldhu	r2,12(r2)
 4002678:	10bfffcc 	andi	r2,r2,65535
 400267c:	1080100c 	andi	r2,r2,64
 4002680:	1000021e 	bne	r2,zero,400268c <___vfprintf_internal_r+0x2108>
 4002684:	e0bff717 	ldw	r2,-36(fp)
 4002688:	00000106 	br	4002690 <___vfprintf_internal_r+0x210c>
 400268c:	00bfffc4 	movi	r2,-1
	/* NOTREACHED */
}
 4002690:	e6fff804 	addi	sp,fp,-32
 4002694:	dfc00917 	ldw	ra,36(sp)
 4002698:	df000817 	ldw	fp,32(sp)
 400269c:	ddc00717 	ldw	r23,28(sp)
 40026a0:	dd800617 	ldw	r22,24(sp)
 40026a4:	dd400517 	ldw	r21,20(sp)
 40026a8:	dd000417 	ldw	r20,16(sp)
 40026ac:	dcc00317 	ldw	r19,12(sp)
 40026b0:	dc800217 	ldw	r18,8(sp)
 40026b4:	dc400117 	ldw	r17,4(sp)
 40026b8:	dc000017 	ldw	r16,0(sp)
 40026bc:	dec00a04 	addi	sp,sp,40
 40026c0:	f800283a 	ret

040026c4 <cvt>:
   [aAeEfFgG]; if it is [aA], then the return string lives in BUF,
   otherwise the return value shares the mprec reentrant storage.  */
static char *
cvt(struct _reent *data, _PRINTF_FLOAT_TYPE value, int ndigits, int flags,
    char *sign, int *decpt, int ch, int *length, char *buf)
{
 40026c4:	deffef04 	addi	sp,sp,-68
 40026c8:	dfc01015 	stw	ra,64(sp)
 40026cc:	df000f15 	stw	fp,60(sp)
 40026d0:	df000f04 	addi	fp,sp,60
 40026d4:	e13ff815 	stw	r4,-32(fp)
 40026d8:	e17ff615 	stw	r5,-40(fp)
 40026dc:	e1bff715 	stw	r6,-36(fp)
 40026e0:	e1fff515 	stw	r7,-44(fp)
	int mode, dsgn;
	char *digits, *bp, *rve;
# ifdef _NO_LONGDBL
	union double_union tmp;

	tmp.d = value;
 40026e4:	e0bff617 	ldw	r2,-40(fp)
 40026e8:	e0bff915 	stw	r2,-28(fp)
 40026ec:	e0bff717 	ldw	r2,-36(fp)
 40026f0:	e0bffa15 	stw	r2,-24(fp)
	if (word0 (tmp) & Sign_bit) { /* this will check for < 0 and -0.0 */
 40026f4:	e0bffa17 	ldw	r2,-24(fp)
 40026f8:	1000090e 	bge	r2,zero,4002720 <cvt+0x5c>
		value = -value;
 40026fc:	e0bff617 	ldw	r2,-40(fp)
 4002700:	e0bff615 	stw	r2,-40(fp)
 4002704:	e0bff717 	ldw	r2,-36(fp)
 4002708:	10a0003c 	xorhi	r2,r2,32768
 400270c:	e0bff715 	stw	r2,-36(fp)
		*sign = '-';
 4002710:	e0800317 	ldw	r2,12(fp)
 4002714:	00c00b44 	movi	r3,45
 4002718:	10c00005 	stb	r3,0(r2)
 400271c:	00000206 	br	4002728 <cvt+0x64>
	} else
		*sign = '\000';
 4002720:	e0800317 	ldw	r2,12(fp)
 4002724:	10000005 	stb	zero,0(r2)
		}
		*length = bp - buf;
		return buf;
	}
# endif /* _WANT_IO_C99_FORMATS */
	if (ch == 'f' || ch == 'F') {
 4002728:	e0800517 	ldw	r2,20(fp)
 400272c:	108019a0 	cmpeqi	r2,r2,102
 4002730:	1000031e 	bne	r2,zero,4002740 <cvt+0x7c>
 4002734:	e0800517 	ldw	r2,20(fp)
 4002738:	10801198 	cmpnei	r2,r2,70
 400273c:	1000031e 	bne	r2,zero,400274c <cvt+0x88>
		mode = 3;		/* ndigits after the decimal point */
 4002740:	008000c4 	movi	r2,3
 4002744:	e0bfff15 	stw	r2,-4(fp)
 4002748:	00000b06 	br	4002778 <cvt+0xb4>
	} else {
		/* To obtain ndigits after the decimal point for the 'e'
		 * and 'E' formats, round to ndigits + 1 significant
		 * figures.
		 */
		if (ch == 'e' || ch == 'E') {
 400274c:	e0800517 	ldw	r2,20(fp)
 4002750:	10801960 	cmpeqi	r2,r2,101
 4002754:	1000031e 	bne	r2,zero,4002764 <cvt+0xa0>
 4002758:	e0800517 	ldw	r2,20(fp)
 400275c:	10801158 	cmpnei	r2,r2,69
 4002760:	1000031e 	bne	r2,zero,4002770 <cvt+0xac>
			ndigits++;
 4002764:	e0bff517 	ldw	r2,-44(fp)
 4002768:	10800044 	addi	r2,r2,1
 400276c:	e0bff515 	stw	r2,-44(fp)
		}
		mode = 2;		/* ndigits significant digits */
 4002770:	00800084 	movi	r2,2
 4002774:	e0bfff15 	stw	r2,-4(fp)
	}

	digits = _DTOA_R (data, value, mode, ndigits, decpt, &dsgn, &rve);
 4002778:	e0bffb04 	addi	r2,fp,-20
 400277c:	d8800315 	stw	r2,12(sp)
 4002780:	e0bffc04 	addi	r2,fp,-16
 4002784:	d8800215 	stw	r2,8(sp)
 4002788:	e0800417 	ldw	r2,16(fp)
 400278c:	d8800115 	stw	r2,4(sp)
 4002790:	e0bff517 	ldw	r2,-44(fp)
 4002794:	d8800015 	stw	r2,0(sp)
 4002798:	e1ffff17 	ldw	r7,-4(fp)
 400279c:	e17ff617 	ldw	r5,-40(fp)
 40027a0:	e1bff717 	ldw	r6,-36(fp)
 40027a4:	e13ff817 	ldw	r4,-32(fp)
 40027a8:	4002f580 	call	4002f58 <_dtoa_r>
 40027ac:	e0bffd15 	stw	r2,-12(fp)

	if ((ch != 'g' && ch != 'G') || flags & ALT) {	/* Print trailing zeros */
 40027b0:	e0800517 	ldw	r2,20(fp)
 40027b4:	108019e0 	cmpeqi	r2,r2,103
 40027b8:	1000031e 	bne	r2,zero,40027c8 <cvt+0x104>
 40027bc:	e0800517 	ldw	r2,20(fp)
 40027c0:	108011d8 	cmpnei	r2,r2,71
 40027c4:	1000031e 	bne	r2,zero,40027d4 <cvt+0x110>
 40027c8:	e0800217 	ldw	r2,8(fp)
 40027cc:	1080004c 	andi	r2,r2,1
 40027d0:	10003326 	beq	r2,zero,40028a0 <cvt+0x1dc>
		bp = digits + ndigits;
 40027d4:	e0bff517 	ldw	r2,-44(fp)
 40027d8:	e0fffd17 	ldw	r3,-12(fp)
 40027dc:	1885883a 	add	r2,r3,r2
 40027e0:	e0bffe15 	stw	r2,-8(fp)
		if (ch == 'f' || ch == 'F') {
 40027e4:	e0800517 	ldw	r2,20(fp)
 40027e8:	108019a0 	cmpeqi	r2,r2,102
 40027ec:	1000031e 	bne	r2,zero,40027fc <cvt+0x138>
 40027f0:	e0800517 	ldw	r2,20(fp)
 40027f4:	10801198 	cmpnei	r2,r2,70
 40027f8:	1000181e 	bne	r2,zero,400285c <cvt+0x198>
			if (*digits == '0' && value)
 40027fc:	e0bffd17 	ldw	r2,-12(fp)
 4002800:	10800003 	ldbu	r2,0(r2)
 4002804:	10803fcc 	andi	r2,r2,255
 4002808:	1080201c 	xori	r2,r2,128
 400280c:	10bfe004 	addi	r2,r2,-128
 4002810:	10800c18 	cmpnei	r2,r2,48
 4002814:	10000b1e 	bne	r2,zero,4002844 <cvt+0x180>
 4002818:	000d883a 	mov	r6,zero
 400281c:	000f883a 	mov	r7,zero
 4002820:	e13ff617 	ldw	r4,-40(fp)
 4002824:	e17ff717 	ldw	r5,-36(fp)
 4002828:	400f36c0 	call	400f36c <__eqdf2>
 400282c:	10000526 	beq	r2,zero,4002844 <cvt+0x180>
				*decpt = -ndigits + 1;
 4002830:	00c00044 	movi	r3,1
 4002834:	e0bff517 	ldw	r2,-44(fp)
 4002838:	1887c83a 	sub	r3,r3,r2
 400283c:	e0800417 	ldw	r2,16(fp)
 4002840:	10c00015 	stw	r3,0(r2)
			bp += *decpt;
 4002844:	e0800417 	ldw	r2,16(fp)
 4002848:	10800017 	ldw	r2,0(r2)
 400284c:	1007883a 	mov	r3,r2
 4002850:	e0bffe17 	ldw	r2,-8(fp)
 4002854:	10c5883a 	add	r2,r2,r3
 4002858:	e0bffe15 	stw	r2,-8(fp)
		}
		if (value == 0)	/* kludge for __dtoa irregularity */
 400285c:	000d883a 	mov	r6,zero
 4002860:	000f883a 	mov	r7,zero
 4002864:	e13ff617 	ldw	r4,-40(fp)
 4002868:	e17ff717 	ldw	r5,-36(fp)
 400286c:	400f36c0 	call	400f36c <__eqdf2>
 4002870:	1000081e 	bne	r2,zero,4002894 <cvt+0x1d0>
			rve = bp;
 4002874:	e0bffe17 	ldw	r2,-8(fp)
 4002878:	e0bffb15 	stw	r2,-20(fp)
		while (rve < bp)
 400287c:	00000506 	br	4002894 <cvt+0x1d0>
			*rve++ = '0';
 4002880:	e0bffb17 	ldw	r2,-20(fp)
 4002884:	10c00044 	addi	r3,r2,1
 4002888:	e0fffb15 	stw	r3,-20(fp)
 400288c:	00c00c04 	movi	r3,48
 4002890:	10c00005 	stb	r3,0(r2)
		while (rve < bp)
 4002894:	e0fffb17 	ldw	r3,-20(fp)
 4002898:	e0bffe17 	ldw	r2,-8(fp)
 400289c:	18bff836 	bltu	r3,r2,4002880 <cvt+0x1bc>
	}
	*length = rve - digits;
 40028a0:	e0fffb17 	ldw	r3,-20(fp)
 40028a4:	e0bffd17 	ldw	r2,-12(fp)
 40028a8:	1887c83a 	sub	r3,r3,r2
 40028ac:	e0800617 	ldw	r2,24(fp)
 40028b0:	10c00015 	stw	r3,0(r2)
	return (digits);
 40028b4:	e0bffd17 	ldw	r2,-12(fp)
}
 40028b8:	e037883a 	mov	sp,fp
 40028bc:	dfc00117 	ldw	ra,4(sp)
 40028c0:	df000017 	ldw	fp,0(sp)
 40028c4:	dec00204 	addi	sp,sp,8
 40028c8:	f800283a 	ret

040028cc <exponent>:

static int
exponent(char *p0, int exp, int fmtch)
{
 40028cc:	defff704 	addi	sp,sp,-36
 40028d0:	dfc00815 	stw	ra,32(sp)
 40028d4:	df000715 	stw	fp,28(sp)
 40028d8:	dc400615 	stw	r17,24(sp)
 40028dc:	dc000515 	stw	r16,20(sp)
 40028e0:	df000704 	addi	fp,sp,28
 40028e4:	e13ffb15 	stw	r4,-20(fp)
 40028e8:	e17ffa15 	stw	r5,-24(fp)
 40028ec:	e1bff915 	stw	r6,-28(fp)
	int isa = fmtch == 'a' || fmtch == 'A';
# else
#  define isa 0
# endif

	p = p0;
 40028f0:	e47ffb17 	ldw	r17,-20(fp)
	*p++ = isa ? 'p' - 'a' + fmtch : fmtch;
 40028f4:	8805883a 	mov	r2,r17
 40028f8:	14400044 	addi	r17,r2,1
 40028fc:	e0fff917 	ldw	r3,-28(fp)
 4002900:	10c00005 	stb	r3,0(r2)
	if (exp < 0) {
 4002904:	e0bffa17 	ldw	r2,-24(fp)
 4002908:	1000080e 	bge	r2,zero,400292c <exponent+0x60>
		exp = -exp;
 400290c:	e0bffa17 	ldw	r2,-24(fp)
 4002910:	0085c83a 	sub	r2,zero,r2
 4002914:	e0bffa15 	stw	r2,-24(fp)
		*p++ = '-';
 4002918:	8805883a 	mov	r2,r17
 400291c:	14400044 	addi	r17,r2,1
 4002920:	00c00b44 	movi	r3,45
 4002924:	10c00005 	stb	r3,0(r2)
 4002928:	00000406 	br	400293c <exponent+0x70>
	}
	else
		*p++ = '+';
 400292c:	8805883a 	mov	r2,r17
 4002930:	14400044 	addi	r17,r2,1
 4002934:	00c00ac4 	movi	r3,43
 4002938:	10c00005 	stb	r3,0(r2)
	t = expbuf + MAXEXPLEN;
 400293c:	e43ffc44 	addi	r16,fp,-15
 4002940:	840001c4 	addi	r16,r16,7
	if (exp > 9) {
 4002944:	e0bffa17 	ldw	r2,-24(fp)
 4002948:	10800290 	cmplti	r2,r2,10
 400294c:	10001e1e 	bne	r2,zero,40029c8 <exponent+0xfc>
		do {
			*--t = to_char (exp % 10);
 4002950:	e0bffa17 	ldw	r2,-24(fp)
 4002954:	01400284 	movi	r5,10
 4002958:	1009883a 	mov	r4,r2
 400295c:	400e0600 	call	400e060 <__modsi3>
 4002960:	10800c04 	addi	r2,r2,48
 4002964:	843fffc4 	addi	r16,r16,-1
 4002968:	80800005 	stb	r2,0(r16)
		} while ((exp /= 10) > 9);
 400296c:	e0bffa17 	ldw	r2,-24(fp)
 4002970:	01400284 	movi	r5,10
 4002974:	1009883a 	mov	r4,r2
 4002978:	400dfe00 	call	400dfe0 <__divsi3>
 400297c:	e0bffa15 	stw	r2,-24(fp)
 4002980:	e0bffa17 	ldw	r2,-24(fp)
 4002984:	10800288 	cmpgei	r2,r2,10
 4002988:	103ff11e 	bne	r2,zero,4002950 <exponent+0x84>
		*--t = to_char (exp);
 400298c:	e0bffa17 	ldw	r2,-24(fp)
 4002990:	10800c04 	addi	r2,r2,48
 4002994:	843fffc4 	addi	r16,r16,-1
 4002998:	80800005 	stb	r2,0(r16)
		for (; t < expbuf + MAXEXPLEN; *p++ = *t++);
 400299c:	00000606 	br	40029b8 <exponent+0xec>
 40029a0:	8007883a 	mov	r3,r16
 40029a4:	1c000044 	addi	r16,r3,1
 40029a8:	8805883a 	mov	r2,r17
 40029ac:	14400044 	addi	r17,r2,1
 40029b0:	18c00003 	ldbu	r3,0(r3)
 40029b4:	10c00005 	stb	r3,0(r2)
 40029b8:	e0bffc44 	addi	r2,fp,-15
 40029bc:	108001c4 	addi	r2,r2,7
 40029c0:	80bff736 	bltu	r16,r2,40029a0 <exponent+0xd4>
 40029c4:	00000a06 	br	40029f0 <exponent+0x124>
	}
	else {
		if (!isa)
			*p++ = '0';
 40029c8:	8805883a 	mov	r2,r17
 40029cc:	14400044 	addi	r17,r2,1
 40029d0:	00c00c04 	movi	r3,48
 40029d4:	10c00005 	stb	r3,0(r2)
		*p++ = to_char (exp);
 40029d8:	e0bffa17 	ldw	r2,-24(fp)
 40029dc:	10800c04 	addi	r2,r2,48
 40029e0:	1007883a 	mov	r3,r2
 40029e4:	8805883a 	mov	r2,r17
 40029e8:	14400044 	addi	r17,r2,1
 40029ec:	10c00005 	stb	r3,0(r2)
	}
	return (p - p0);
 40029f0:	e0bffb17 	ldw	r2,-20(fp)
 40029f4:	8885c83a 	sub	r2,r17,r2
}
 40029f8:	e6fffe04 	addi	sp,fp,-8
 40029fc:	dfc00317 	ldw	ra,12(sp)
 4002a00:	df000217 	ldw	fp,8(sp)
 4002a04:	dc400117 	ldw	r17,4(sp)
 4002a08:	dc000017 	ldw	r16,0(sp)
 4002a0c:	dec00404 	addi	sp,sp,16
 4002a10:	f800283a 	ret

04002a14 <__swsetup_r>:
 */

int
__swsetup_r (struct _reent *ptr,
       register FILE * fp)
{
 4002a14:	defffb04 	addi	sp,sp,-20
 4002a18:	dfc00415 	stw	ra,16(sp)
 4002a1c:	df000315 	stw	fp,12(sp)
 4002a20:	dc000215 	stw	r16,8(sp)
 4002a24:	df000304 	addi	fp,sp,12
 4002a28:	e13ffd15 	stw	r4,-12(fp)
 4002a2c:	2821883a 	mov	r16,r5
  /* Make sure stdio is set up.  */

  CHECK_INIT (_REENT, fp);
 4002a30:	d0a00017 	ldw	r2,-32768(gp)
 4002a34:	e0bffe15 	stw	r2,-8(fp)
 4002a38:	e0bffe17 	ldw	r2,-8(fp)
 4002a3c:	10000526 	beq	r2,zero,4002a54 <__swsetup_r+0x40>
 4002a40:	e0bffe17 	ldw	r2,-8(fp)
 4002a44:	10800e17 	ldw	r2,56(r2)
 4002a48:	1000021e 	bne	r2,zero,4002a54 <__swsetup_r+0x40>
 4002a4c:	e13ffe17 	ldw	r4,-8(fp)
 4002a50:	40053b00 	call	40053b0 <__sinit>

  /*
   * If we are not writing, we had better be reading and writing.
   */

  if ((fp->_flags & __SWR) == 0)
 4002a54:	8080030b 	ldhu	r2,12(r16)
 4002a58:	10bfffcc 	andi	r2,r2,65535
 4002a5c:	1080020c 	andi	r2,r2,8
 4002a60:	1000241e 	bne	r2,zero,4002af4 <__swsetup_r+0xe0>
    {
      if ((fp->_flags & __SRW) == 0)
 4002a64:	8080030b 	ldhu	r2,12(r16)
 4002a68:	10bfffcc 	andi	r2,r2,65535
 4002a6c:	1080040c 	andi	r2,r2,16
 4002a70:	1000081e 	bne	r2,zero,4002a94 <__swsetup_r+0x80>
        {
	  ptr->_errno = EBADF;
 4002a74:	e0bffd17 	ldw	r2,-12(fp)
 4002a78:	00c00244 	movi	r3,9
 4002a7c:	10c00015 	stw	r3,0(r2)
	  fp->_flags |= __SERR;
 4002a80:	8080030b 	ldhu	r2,12(r16)
 4002a84:	10801014 	ori	r2,r2,64
 4002a88:	8080030d 	sth	r2,12(r16)
	  return EOF;
 4002a8c:	00bfffc4 	movi	r2,-1
 4002a90:	00004206 	br	4002b9c <__swsetup_r+0x188>
        }
      if (fp->_flags & __SRD)
 4002a94:	8080030b 	ldhu	r2,12(r16)
 4002a98:	10bfffcc 	andi	r2,r2,65535
 4002a9c:	1080010c 	andi	r2,r2,4
 4002aa0:	10001126 	beq	r2,zero,4002ae8 <__swsetup_r+0xd4>
	{
	  /* clobber any ungetc data */
	  if (HASUB (fp))
 4002aa4:	80800c17 	ldw	r2,48(r16)
 4002aa8:	10000826 	beq	r2,zero,4002acc <__swsetup_r+0xb8>
	    FREEUB (ptr, fp);
 4002aac:	80c00c17 	ldw	r3,48(r16)
 4002ab0:	80801004 	addi	r2,r16,64
 4002ab4:	18800426 	beq	r3,r2,4002ac8 <__swsetup_r+0xb4>
 4002ab8:	80800c17 	ldw	r2,48(r16)
 4002abc:	100b883a 	mov	r5,r2
 4002ac0:	e13ffd17 	ldw	r4,-12(fp)
 4002ac4:	40055ac0 	call	40055ac <_free_r>
 4002ac8:	80000c15 	stw	zero,48(r16)
	  fp->_flags &= ~(__SRD | __SEOF);
 4002acc:	80c0030b 	ldhu	r3,12(r16)
 4002ad0:	00bff6c4 	movi	r2,-37
 4002ad4:	1884703a 	and	r2,r3,r2
 4002ad8:	8080030d 	sth	r2,12(r16)
	  fp->_r = 0;
 4002adc:	80000115 	stw	zero,4(r16)
	  fp->_p = fp->_bf._base;
 4002ae0:	80800417 	ldw	r2,16(r16)
 4002ae4:	80800015 	stw	r2,0(r16)
	}
      fp->_flags |= __SWR;
 4002ae8:	8080030b 	ldhu	r2,12(r16)
 4002aec:	10800214 	ori	r2,r2,8
 4002af0:	8080030d 	sth	r2,12(r16)
  /*
   * Make a buffer if necessary, then set _w.
   * A string I/O file should not explicitly allocate a buffer
   * unless asprintf is being used.
   */
  if (fp->_bf._base == NULL
 4002af4:	80800417 	ldw	r2,16(r16)
 4002af8:	10000b1e 	bne	r2,zero,4002b28 <__swsetup_r+0x114>
        && (!(fp->_flags & __SSTR) || (fp->_flags & __SMBF)))
 4002afc:	8080030b 	ldhu	r2,12(r16)
 4002b00:	10bfffcc 	andi	r2,r2,65535
 4002b04:	1080800c 	andi	r2,r2,512
 4002b08:	10000426 	beq	r2,zero,4002b1c <__swsetup_r+0x108>
 4002b0c:	8080030b 	ldhu	r2,12(r16)
 4002b10:	10bfffcc 	andi	r2,r2,65535
 4002b14:	1080200c 	andi	r2,r2,128
 4002b18:	10000326 	beq	r2,zero,4002b28 <__swsetup_r+0x114>
    __smakebuf_r (ptr, fp);
 4002b1c:	800b883a 	mov	r5,r16
 4002b20:	e13ffd17 	ldw	r4,-12(fp)
 4002b24:	40060e40 	call	40060e4 <__smakebuf_r>

  if (fp->_flags & __SLBF)
 4002b28:	8080030b 	ldhu	r2,12(r16)
 4002b2c:	10bfffcc 	andi	r2,r2,65535
 4002b30:	1080004c 	andi	r2,r2,1
 4002b34:	10000526 	beq	r2,zero,4002b4c <__swsetup_r+0x138>
      /*
       * It is line buffered, so make _lbfsize be -_bufsize
       * for the putc() macro.  We will change _lbfsize back
       * to 0 whenever we turn off __SWR.
       */
      fp->_w = 0;
 4002b38:	80000215 	stw	zero,8(r16)
      fp->_lbfsize = -fp->_bf._size;
 4002b3c:	80800517 	ldw	r2,20(r16)
 4002b40:	0085c83a 	sub	r2,zero,r2
 4002b44:	80800615 	stw	r2,24(r16)
 4002b48:	00000806 	br	4002b6c <__swsetup_r+0x158>
    }
  else
    fp->_w = fp->_flags & __SNBF ? 0 : fp->_bf._size;
 4002b4c:	8080030b 	ldhu	r2,12(r16)
 4002b50:	10bfffcc 	andi	r2,r2,65535
 4002b54:	1080008c 	andi	r2,r2,2
 4002b58:	1000021e 	bne	r2,zero,4002b64 <__swsetup_r+0x150>
 4002b5c:	80800517 	ldw	r2,20(r16)
 4002b60:	00000106 	br	4002b68 <__swsetup_r+0x154>
 4002b64:	0005883a 	mov	r2,zero
 4002b68:	80800215 	stw	r2,8(r16)

  if (!fp->_bf._base && (fp->_flags & __SMBF))
 4002b6c:	80800417 	ldw	r2,16(r16)
 4002b70:	1000091e 	bne	r2,zero,4002b98 <__swsetup_r+0x184>
 4002b74:	8080030b 	ldhu	r2,12(r16)
 4002b78:	10bfffcc 	andi	r2,r2,65535
 4002b7c:	1080200c 	andi	r2,r2,128
 4002b80:	10000526 	beq	r2,zero,4002b98 <__swsetup_r+0x184>
    {
      /* __smakebuf_r set errno, but not flag */
      fp->_flags |= __SERR;
 4002b84:	8080030b 	ldhu	r2,12(r16)
 4002b88:	10801014 	ori	r2,r2,64
 4002b8c:	8080030d 	sth	r2,12(r16)
      return EOF;
 4002b90:	00bfffc4 	movi	r2,-1
 4002b94:	00000106 	br	4002b9c <__swsetup_r+0x188>
    }
  return 0;
 4002b98:	0005883a 	mov	r2,zero
}
 4002b9c:	e6ffff04 	addi	sp,fp,-4
 4002ba0:	dfc00217 	ldw	ra,8(sp)
 4002ba4:	df000117 	ldw	fp,4(sp)
 4002ba8:	dc000017 	ldw	r16,0(sp)
 4002bac:	dec00304 	addi	sp,sp,12
 4002bb0:	f800283a 	ret

04002bb4 <quorem>:
#include <string.h>
#include "mprec.h"

static int
quorem (_Bigint * b, _Bigint * S)
{
 4002bb4:	deffef04 	addi	sp,sp,-68
 4002bb8:	dfc01015 	stw	ra,64(sp)
 4002bbc:	df000f15 	stw	fp,60(sp)
 4002bc0:	df000f04 	addi	fp,sp,60
 4002bc4:	e13ff215 	stw	r4,-56(fp)
 4002bc8:	e17ff115 	stw	r5,-60(fp)
#ifdef Pack_32
  __Long z;
  __ULong si, zs;
#endif

  n = S->_wds;
 4002bcc:	e0bff117 	ldw	r2,-60(fp)
 4002bd0:	10800417 	ldw	r2,16(r2)
 4002bd4:	e0bfff15 	stw	r2,-4(fp)
#ifdef DEBUG
  /*debug*/ if (b->_wds > n)
    /*debug*/ Bug ("oversize b in quorem");
#endif
  if (b->_wds < n)
 4002bd8:	e0bff217 	ldw	r2,-56(fp)
 4002bdc:	10c00417 	ldw	r3,16(r2)
 4002be0:	e0bfff17 	ldw	r2,-4(fp)
 4002be4:	1880020e 	bge	r3,r2,4002bf0 <quorem+0x3c>
    return 0;
 4002be8:	0005883a 	mov	r2,zero
 4002bec:	0000d506 	br	4002f44 <quorem+0x390>
  sx = S->_x;
 4002bf0:	e0bff117 	ldw	r2,-60(fp)
 4002bf4:	10800504 	addi	r2,r2,20
 4002bf8:	e0bff915 	stw	r2,-28(fp)
  sxe = sx + --n;
 4002bfc:	e0bfff17 	ldw	r2,-4(fp)
 4002c00:	10bfffc4 	addi	r2,r2,-1
 4002c04:	e0bfff15 	stw	r2,-4(fp)
 4002c08:	e0bfff17 	ldw	r2,-4(fp)
 4002c0c:	100490ba 	slli	r2,r2,2
 4002c10:	e0fff917 	ldw	r3,-28(fp)
 4002c14:	1885883a 	add	r2,r3,r2
 4002c18:	e0bff815 	stw	r2,-32(fp)
  bx = b->_x;
 4002c1c:	e0bff217 	ldw	r2,-56(fp)
 4002c20:	10800504 	addi	r2,r2,20
 4002c24:	e0bffb15 	stw	r2,-20(fp)
  bxe = bx + n;
 4002c28:	e0bfff17 	ldw	r2,-4(fp)
 4002c2c:	100490ba 	slli	r2,r2,2
 4002c30:	e0fffb17 	ldw	r3,-20(fp)
 4002c34:	1885883a 	add	r2,r3,r2
 4002c38:	e0bffa15 	stw	r2,-24(fp)
  q = *bxe / (*sxe + 1);	/* ensure q <= true quotient */
 4002c3c:	e0bffa17 	ldw	r2,-24(fp)
 4002c40:	10c00017 	ldw	r3,0(r2)
 4002c44:	e0bff817 	ldw	r2,-32(fp)
 4002c48:	10800017 	ldw	r2,0(r2)
 4002c4c:	10800044 	addi	r2,r2,1
 4002c50:	100b883a 	mov	r5,r2
 4002c54:	1809883a 	mov	r4,r3
 4002c58:	400e0d40 	call	400e0d4 <__udivsi3>
 4002c5c:	e0bffc15 	stw	r2,-16(fp)
#ifdef DEBUG
  /*debug*/ if (q > 9)
    /*debug*/ Bug ("oversized quotient in quorem");
#endif
  if (q)
 4002c60:	e0bffc17 	ldw	r2,-16(fp)
 4002c64:	10005426 	beq	r2,zero,4002db8 <quorem+0x204>
    {
      borrow = 0;
 4002c68:	e03ffe15 	stw	zero,-8(fp)
      carry = 0;
 4002c6c:	e03ffd15 	stw	zero,-12(fp)
      do
	{
#ifdef Pack_32
	  si = *sx++;
 4002c70:	e0bff917 	ldw	r2,-28(fp)
 4002c74:	10c00104 	addi	r3,r2,4
 4002c78:	e0fff915 	stw	r3,-28(fp)
 4002c7c:	10800017 	ldw	r2,0(r2)
 4002c80:	e0bff715 	stw	r2,-36(fp)
	  ys = (si & 0xffff) * q + carry;
 4002c84:	e0bff717 	ldw	r2,-36(fp)
 4002c88:	10ffffcc 	andi	r3,r2,65535
 4002c8c:	e0bffc17 	ldw	r2,-16(fp)
 4002c90:	1885383a 	mul	r2,r3,r2
 4002c94:	e0fffd17 	ldw	r3,-12(fp)
 4002c98:	1885883a 	add	r2,r3,r2
 4002c9c:	e0bff615 	stw	r2,-40(fp)
	  zs = (si >> 16) * q + (ys >> 16);
 4002ca0:	e0bff717 	ldw	r2,-36(fp)
 4002ca4:	1006d43a 	srli	r3,r2,16
 4002ca8:	e0bffc17 	ldw	r2,-16(fp)
 4002cac:	1887383a 	mul	r3,r3,r2
 4002cb0:	e0bff617 	ldw	r2,-40(fp)
 4002cb4:	1004d43a 	srli	r2,r2,16
 4002cb8:	1885883a 	add	r2,r3,r2
 4002cbc:	e0bff515 	stw	r2,-44(fp)
	  carry = zs >> 16;
 4002cc0:	e0bff517 	ldw	r2,-44(fp)
 4002cc4:	1004d43a 	srli	r2,r2,16
 4002cc8:	e0bffd15 	stw	r2,-12(fp)
	  y = (*bx & 0xffff) - (ys & 0xffff) + borrow;
 4002ccc:	e0bffb17 	ldw	r2,-20(fp)
 4002cd0:	10800017 	ldw	r2,0(r2)
 4002cd4:	10ffffcc 	andi	r3,r2,65535
 4002cd8:	e0bff617 	ldw	r2,-40(fp)
 4002cdc:	10bfffcc 	andi	r2,r2,65535
 4002ce0:	1887c83a 	sub	r3,r3,r2
 4002ce4:	e0bffe17 	ldw	r2,-8(fp)
 4002ce8:	1885883a 	add	r2,r3,r2
 4002cec:	e0bff415 	stw	r2,-48(fp)
	  borrow = y >> 16;
 4002cf0:	e0bff417 	ldw	r2,-48(fp)
 4002cf4:	1005d43a 	srai	r2,r2,16
 4002cf8:	e0bffe15 	stw	r2,-8(fp)
	  Sign_Extend (borrow, y);
	  z = (*bx >> 16) - (zs & 0xffff) + borrow;
 4002cfc:	e0bffb17 	ldw	r2,-20(fp)
 4002d00:	10800017 	ldw	r2,0(r2)
 4002d04:	1006d43a 	srli	r3,r2,16
 4002d08:	e0bff517 	ldw	r2,-44(fp)
 4002d0c:	10bfffcc 	andi	r2,r2,65535
 4002d10:	1887c83a 	sub	r3,r3,r2
 4002d14:	e0bffe17 	ldw	r2,-8(fp)
 4002d18:	1885883a 	add	r2,r3,r2
 4002d1c:	e0bff315 	stw	r2,-52(fp)
	  borrow = z >> 16;
 4002d20:	e0bff317 	ldw	r2,-52(fp)
 4002d24:	1005d43a 	srai	r2,r2,16
 4002d28:	e0bffe15 	stw	r2,-8(fp)
	  Sign_Extend (borrow, z);
	  Storeinc (bx, z, y);
 4002d2c:	e0bff317 	ldw	r2,-52(fp)
 4002d30:	1006943a 	slli	r3,r2,16
 4002d34:	e0bff417 	ldw	r2,-48(fp)
 4002d38:	10bfffcc 	andi	r2,r2,65535
 4002d3c:	1888b03a 	or	r4,r3,r2
 4002d40:	e0bffb17 	ldw	r2,-20(fp)
 4002d44:	10c00104 	addi	r3,r2,4
 4002d48:	e0fffb15 	stw	r3,-20(fp)
 4002d4c:	2007883a 	mov	r3,r4
 4002d50:	10c00015 	stw	r3,0(r2)
	  borrow = y >> 16;
	  Sign_Extend (borrow, y);
	  *bx++ = y & 0xffff;
#endif
	}
      while (sx <= sxe);
 4002d54:	e0bff917 	ldw	r2,-28(fp)
 4002d58:	e0fff817 	ldw	r3,-32(fp)
 4002d5c:	18bfc42e 	bgeu	r3,r2,4002c70 <quorem+0xbc>
      if (!*bxe)
 4002d60:	e0bffa17 	ldw	r2,-24(fp)
 4002d64:	10800017 	ldw	r2,0(r2)
 4002d68:	1000131e 	bne	r2,zero,4002db8 <quorem+0x204>
	{
	  bx = b->_x;
 4002d6c:	e0bff217 	ldw	r2,-56(fp)
 4002d70:	10800504 	addi	r2,r2,20
 4002d74:	e0bffb15 	stw	r2,-20(fp)
	  while (--bxe > bx && !*bxe)
 4002d78:	00000306 	br	4002d88 <quorem+0x1d4>
	    --n;
 4002d7c:	e0bfff17 	ldw	r2,-4(fp)
 4002d80:	10bfffc4 	addi	r2,r2,-1
 4002d84:	e0bfff15 	stw	r2,-4(fp)
	  while (--bxe > bx && !*bxe)
 4002d88:	e0bffa17 	ldw	r2,-24(fp)
 4002d8c:	10bfff04 	addi	r2,r2,-4
 4002d90:	e0bffa15 	stw	r2,-24(fp)
 4002d94:	e0bffa17 	ldw	r2,-24(fp)
 4002d98:	e0fffb17 	ldw	r3,-20(fp)
 4002d9c:	1880032e 	bgeu	r3,r2,4002dac <quorem+0x1f8>
 4002da0:	e0bffa17 	ldw	r2,-24(fp)
 4002da4:	10800017 	ldw	r2,0(r2)
 4002da8:	103ff426 	beq	r2,zero,4002d7c <quorem+0x1c8>
	  b->_wds = n;
 4002dac:	e0bff217 	ldw	r2,-56(fp)
 4002db0:	e0ffff17 	ldw	r3,-4(fp)
 4002db4:	10c00415 	stw	r3,16(r2)
	}
    }
  if (cmp (b, S) >= 0)
 4002db8:	e17ff117 	ldw	r5,-60(fp)
 4002dbc:	e13ff217 	ldw	r4,-56(fp)
 4002dc0:	400874c0 	call	400874c <__mcmp>
 4002dc4:	10005e16 	blt	r2,zero,4002f40 <quorem+0x38c>
    {
      q++;
 4002dc8:	e0bffc17 	ldw	r2,-16(fp)
 4002dcc:	10800044 	addi	r2,r2,1
 4002dd0:	e0bffc15 	stw	r2,-16(fp)
      borrow = 0;
 4002dd4:	e03ffe15 	stw	zero,-8(fp)
      carry = 0;
 4002dd8:	e03ffd15 	stw	zero,-12(fp)
      bx = b->_x;
 4002ddc:	e0bff217 	ldw	r2,-56(fp)
 4002de0:	10800504 	addi	r2,r2,20
 4002de4:	e0bffb15 	stw	r2,-20(fp)
      sx = S->_x;
 4002de8:	e0bff117 	ldw	r2,-60(fp)
 4002dec:	10800504 	addi	r2,r2,20
 4002df0:	e0bff915 	stw	r2,-28(fp)
      do
	{
#ifdef Pack_32
	  si = *sx++;
 4002df4:	e0bff917 	ldw	r2,-28(fp)
 4002df8:	10c00104 	addi	r3,r2,4
 4002dfc:	e0fff915 	stw	r3,-28(fp)
 4002e00:	10800017 	ldw	r2,0(r2)
 4002e04:	e0bff715 	stw	r2,-36(fp)
	  ys = (si & 0xffff) + carry;
 4002e08:	e0bff717 	ldw	r2,-36(fp)
 4002e0c:	10bfffcc 	andi	r2,r2,65535
 4002e10:	e0fffd17 	ldw	r3,-12(fp)
 4002e14:	1885883a 	add	r2,r3,r2
 4002e18:	e0bff615 	stw	r2,-40(fp)
	  zs = (si >> 16) + (ys >> 16);
 4002e1c:	e0bff717 	ldw	r2,-36(fp)
 4002e20:	1006d43a 	srli	r3,r2,16
 4002e24:	e0bff617 	ldw	r2,-40(fp)
 4002e28:	1004d43a 	srli	r2,r2,16
 4002e2c:	1885883a 	add	r2,r3,r2
 4002e30:	e0bff515 	stw	r2,-44(fp)
	  carry = zs >> 16;
 4002e34:	e0bff517 	ldw	r2,-44(fp)
 4002e38:	1004d43a 	srli	r2,r2,16
 4002e3c:	e0bffd15 	stw	r2,-12(fp)
	  y = (*bx & 0xffff) - (ys & 0xffff) + borrow;
 4002e40:	e0bffb17 	ldw	r2,-20(fp)
 4002e44:	10800017 	ldw	r2,0(r2)
 4002e48:	10ffffcc 	andi	r3,r2,65535
 4002e4c:	e0bff617 	ldw	r2,-40(fp)
 4002e50:	10bfffcc 	andi	r2,r2,65535
 4002e54:	1887c83a 	sub	r3,r3,r2
 4002e58:	e0bffe17 	ldw	r2,-8(fp)
 4002e5c:	1885883a 	add	r2,r3,r2
 4002e60:	e0bff415 	stw	r2,-48(fp)
	  borrow = y >> 16;
 4002e64:	e0bff417 	ldw	r2,-48(fp)
 4002e68:	1005d43a 	srai	r2,r2,16
 4002e6c:	e0bffe15 	stw	r2,-8(fp)
	  Sign_Extend (borrow, y);
	  z = (*bx >> 16) - (zs & 0xffff) + borrow;
 4002e70:	e0bffb17 	ldw	r2,-20(fp)
 4002e74:	10800017 	ldw	r2,0(r2)
 4002e78:	1006d43a 	srli	r3,r2,16
 4002e7c:	e0bff517 	ldw	r2,-44(fp)
 4002e80:	10bfffcc 	andi	r2,r2,65535
 4002e84:	1887c83a 	sub	r3,r3,r2
 4002e88:	e0bffe17 	ldw	r2,-8(fp)
 4002e8c:	1885883a 	add	r2,r3,r2
 4002e90:	e0bff315 	stw	r2,-52(fp)
	  borrow = z >> 16;
 4002e94:	e0bff317 	ldw	r2,-52(fp)
 4002e98:	1005d43a 	srai	r2,r2,16
 4002e9c:	e0bffe15 	stw	r2,-8(fp)
	  Sign_Extend (borrow, z);
	  Storeinc (bx, z, y);
 4002ea0:	e0bff317 	ldw	r2,-52(fp)
 4002ea4:	1006943a 	slli	r3,r2,16
 4002ea8:	e0bff417 	ldw	r2,-48(fp)
 4002eac:	10bfffcc 	andi	r2,r2,65535
 4002eb0:	1888b03a 	or	r4,r3,r2
 4002eb4:	e0bffb17 	ldw	r2,-20(fp)
 4002eb8:	10c00104 	addi	r3,r2,4
 4002ebc:	e0fffb15 	stw	r3,-20(fp)
 4002ec0:	2007883a 	mov	r3,r4
 4002ec4:	10c00015 	stw	r3,0(r2)
	  borrow = y >> 16;
	  Sign_Extend (borrow, y);
	  *bx++ = y & 0xffff;
#endif
	}
      while (sx <= sxe);
 4002ec8:	e0bff917 	ldw	r2,-28(fp)
 4002ecc:	e0fff817 	ldw	r3,-32(fp)
 4002ed0:	18bfc82e 	bgeu	r3,r2,4002df4 <quorem+0x240>
      bx = b->_x;
 4002ed4:	e0bff217 	ldw	r2,-56(fp)
 4002ed8:	10800504 	addi	r2,r2,20
 4002edc:	e0bffb15 	stw	r2,-20(fp)
      bxe = bx + n;
 4002ee0:	e0bfff17 	ldw	r2,-4(fp)
 4002ee4:	100490ba 	slli	r2,r2,2
 4002ee8:	e0fffb17 	ldw	r3,-20(fp)
 4002eec:	1885883a 	add	r2,r3,r2
 4002ef0:	e0bffa15 	stw	r2,-24(fp)
      if (!*bxe)
 4002ef4:	e0bffa17 	ldw	r2,-24(fp)
 4002ef8:	10800017 	ldw	r2,0(r2)
 4002efc:	1000101e 	bne	r2,zero,4002f40 <quorem+0x38c>
	{
	  while (--bxe > bx && !*bxe)
 4002f00:	00000306 	br	4002f10 <quorem+0x35c>
	    --n;
 4002f04:	e0bfff17 	ldw	r2,-4(fp)
 4002f08:	10bfffc4 	addi	r2,r2,-1
 4002f0c:	e0bfff15 	stw	r2,-4(fp)
	  while (--bxe > bx && !*bxe)
 4002f10:	e0bffa17 	ldw	r2,-24(fp)
 4002f14:	10bfff04 	addi	r2,r2,-4
 4002f18:	e0bffa15 	stw	r2,-24(fp)
 4002f1c:	e0bffa17 	ldw	r2,-24(fp)
 4002f20:	e0fffb17 	ldw	r3,-20(fp)
 4002f24:	1880032e 	bgeu	r3,r2,4002f34 <quorem+0x380>
 4002f28:	e0bffa17 	ldw	r2,-24(fp)
 4002f2c:	10800017 	ldw	r2,0(r2)
 4002f30:	103ff426 	beq	r2,zero,4002f04 <quorem+0x350>
	  b->_wds = n;
 4002f34:	e0bff217 	ldw	r2,-56(fp)
 4002f38:	e0ffff17 	ldw	r3,-4(fp)
 4002f3c:	10c00415 	stw	r3,16(r2)
	}
    }
  return q;
 4002f40:	e0bffc17 	ldw	r2,-16(fp)
}
 4002f44:	e037883a 	mov	sp,fp
 4002f48:	dfc00117 	ldw	ra,4(sp)
 4002f4c:	df000017 	ldw	fp,0(sp)
 4002f50:	dec00204 	addi	sp,sp,8
 4002f54:	f800283a 	ret

04002f58 <_dtoa_r>:
	int mode,
	int ndigits,
	int *decpt,
	int *sign,
	char **rve)
{
 4002f58:	deffca04 	addi	sp,sp,-216
 4002f5c:	dfc03515 	stw	ra,212(sp)
 4002f60:	df003415 	stw	fp,208(sp)
 4002f64:	dcc03315 	stw	r19,204(sp)
 4002f68:	dc803215 	stw	r18,200(sp)
 4002f6c:	dc403115 	stw	r17,196(sp)
 4002f70:	dc003015 	stw	r16,192(sp)
 4002f74:	df003404 	addi	fp,sp,208
 4002f78:	e13fd015 	stw	r4,-192(fp)
 4002f7c:	e17fce15 	stw	r5,-200(fp)
 4002f80:	e1bfcf15 	stw	r6,-196(fp)
 4002f84:	e1ffcd15 	stw	r7,-204(fp)
  __Long L;
#ifndef Sudden_Underflow
  int denorm;
  __ULong x;
#endif
  _Bigint *b, *b1, *delta, *mlo = NULL, *mhi, *S;
 4002f88:	e03fe815 	stw	zero,-96(fp)
  double ds;
  char *s, *s0;

  d.d = _d;
 4002f8c:	e0bfce17 	ldw	r2,-200(fp)
 4002f90:	e0bfd515 	stw	r2,-172(fp)
 4002f94:	e0bfcf17 	ldw	r2,-196(fp)
 4002f98:	e0bfd615 	stw	r2,-168(fp)

  _REENT_CHECK_MP(ptr);
  if (_REENT_MP_RESULT(ptr))
 4002f9c:	e0bfd017 	ldw	r2,-192(fp)
 4002fa0:	10801017 	ldw	r2,64(r2)
 4002fa4:	10001326 	beq	r2,zero,4002ff4 <_dtoa_r+0x9c>
    {
      _REENT_MP_RESULT(ptr)->_k = _REENT_MP_RESULT_K(ptr);
 4002fa8:	e0bfd017 	ldw	r2,-192(fp)
 4002fac:	10801017 	ldw	r2,64(r2)
 4002fb0:	e0ffd017 	ldw	r3,-192(fp)
 4002fb4:	18c01117 	ldw	r3,68(r3)
 4002fb8:	10c00115 	stw	r3,4(r2)
      _REENT_MP_RESULT(ptr)->_maxwds = 1 << _REENT_MP_RESULT_K(ptr);
 4002fbc:	e0bfd017 	ldw	r2,-192(fp)
 4002fc0:	10c01117 	ldw	r3,68(r2)
 4002fc4:	e0bfd017 	ldw	r2,-192(fp)
 4002fc8:	10801017 	ldw	r2,64(r2)
 4002fcc:	01000044 	movi	r4,1
 4002fd0:	20c6983a 	sll	r3,r4,r3
 4002fd4:	10c00215 	stw	r3,8(r2)
      Bfree (ptr, _REENT_MP_RESULT(ptr));
 4002fd8:	e0bfd017 	ldw	r2,-192(fp)
 4002fdc:	10801017 	ldw	r2,64(r2)
 4002fe0:	100b883a 	mov	r5,r2
 4002fe4:	e13fd017 	ldw	r4,-192(fp)
 4002fe8:	4007a040 	call	4007a04 <_Bfree>
      _REENT_MP_RESULT(ptr) = 0;
 4002fec:	e0bfd017 	ldw	r2,-192(fp)
 4002ff0:	10001015 	stw	zero,64(r2)
    }

  if (word0 (d) & Sign_bit)
 4002ff4:	e0bfd617 	ldw	r2,-168(fp)
 4002ff8:	1000090e 	bge	r2,zero,4003020 <_dtoa_r+0xc8>
    {
      /* set sign for everything, including 0's and NaNs */
      *sign = 1;
 4002ffc:	e0800417 	ldw	r2,16(fp)
 4003000:	00c00044 	movi	r3,1
 4003004:	10c00015 	stw	r3,0(r2)
      word0 (d) &= ~Sign_bit;	/* clear sign bit */
 4003008:	e0ffd617 	ldw	r3,-168(fp)
 400300c:	00a00034 	movhi	r2,32768
 4003010:	10bfffc4 	addi	r2,r2,-1
 4003014:	1884703a 	and	r2,r3,r2
 4003018:	e0bfd615 	stw	r2,-168(fp)
 400301c:	00000206 	br	4003028 <_dtoa_r+0xd0>
    }
  else
    *sign = 0;
 4003020:	e0800417 	ldw	r2,16(fp)
 4003024:	10000015 	stw	zero,0(r2)

#if defined(IEEE_Arith) + defined(VAX)
#ifdef IEEE_Arith
  if ((word0 (d) & Exp_mask) == Exp_mask)
 4003028:	e0bfd617 	ldw	r2,-168(fp)
 400302c:	10dffc2c 	andhi	r3,r2,32752
 4003030:	009ffc34 	movhi	r2,32752
 4003034:	1880221e 	bne	r3,r2,40030c0 <_dtoa_r+0x168>
#else
  if (word0 (d) == 0x8000)
#endif
    {
      /* Infinity or NaN */
      *decpt = 9999;
 4003038:	e0800317 	ldw	r2,12(fp)
 400303c:	00c9c3c4 	movi	r3,9999
 4003040:	10c00015 	stw	r3,0(r2)
      s =
#ifdef IEEE_Arith
	!word1 (d) && !(word0 (d) & 0xfffff) ? "Infinity" :
 4003044:	e0bfd517 	ldw	r2,-172(fp)
 4003048:	1000081e 	bne	r2,zero,400306c <_dtoa_r+0x114>
 400304c:	e0ffd617 	ldw	r3,-168(fp)
 4003050:	00800434 	movhi	r2,16
 4003054:	10bfffc4 	addi	r2,r2,-1
 4003058:	1884703a 	and	r2,r3,r2
 400305c:	1000031e 	bne	r2,zero,400306c <_dtoa_r+0x114>
 4003060:	00810074 	movhi	r2,1025
 4003064:	108dc104 	addi	r2,r2,14084
 4003068:	00000206 	br	4003074 <_dtoa_r+0x11c>
 400306c:	00810074 	movhi	r2,1025
 4003070:	108dc404 	addi	r2,r2,14096
      s =
 4003074:	e0bfe315 	stw	r2,-116(fp)
#endif
	"NaN";
      if (rve)
 4003078:	e0800517 	ldw	r2,20(fp)
 400307c:	10000e26 	beq	r2,zero,40030b8 <_dtoa_r+0x160>
	*rve =
#ifdef IEEE_Arith
	  s[3] ? s + 8 :
 4003080:	e0bfe317 	ldw	r2,-116(fp)
 4003084:	108000c4 	addi	r2,r2,3
 4003088:	10800003 	ldbu	r2,0(r2)
 400308c:	10803fcc 	andi	r2,r2,255
 4003090:	1080201c 	xori	r2,r2,128
 4003094:	10bfe004 	addi	r2,r2,-128
 4003098:	10000326 	beq	r2,zero,40030a8 <_dtoa_r+0x150>
 400309c:	e0bfe317 	ldw	r2,-116(fp)
 40030a0:	10800204 	addi	r2,r2,8
 40030a4:	00000206 	br	40030b0 <_dtoa_r+0x158>
 40030a8:	e0bfe317 	ldw	r2,-116(fp)
 40030ac:	108000c4 	addi	r2,r2,3
	*rve =
 40030b0:	e0c00517 	ldw	r3,20(fp)
 40030b4:	18800015 	stw	r2,0(r3)
#endif
	  s + 3;
      return s;
 40030b8:	e0bfe317 	ldw	r2,-116(fp)
 40030bc:	0006a806 	br	4004b60 <_dtoa_r+0x1c08>
    }
#endif
#ifdef IBM
  d.d += 0;			/* normalize */
#endif
  if (!d.d)
 40030c0:	e0bfd517 	ldw	r2,-172(fp)
 40030c4:	e0ffd617 	ldw	r3,-168(fp)
 40030c8:	000d883a 	mov	r6,zero
 40030cc:	000f883a 	mov	r7,zero
 40030d0:	1009883a 	mov	r4,r2
 40030d4:	180b883a 	mov	r5,r3
 40030d8:	400f36c0 	call	400f36c <__eqdf2>
 40030dc:	10000e1e 	bne	r2,zero,4003118 <_dtoa_r+0x1c0>
    {
      *decpt = 1;
 40030e0:	e0800317 	ldw	r2,12(fp)
 40030e4:	00c00044 	movi	r3,1
 40030e8:	10c00015 	stw	r3,0(r2)
      s = "0";
 40030ec:	00810074 	movhi	r2,1025
 40030f0:	108dc504 	addi	r2,r2,14100
 40030f4:	e0bfe315 	stw	r2,-116(fp)
      if (rve)
 40030f8:	e0800517 	ldw	r2,20(fp)
 40030fc:	10000426 	beq	r2,zero,4003110 <_dtoa_r+0x1b8>
	*rve = s + 1;
 4003100:	e0bfe317 	ldw	r2,-116(fp)
 4003104:	10c00044 	addi	r3,r2,1
 4003108:	e0800517 	ldw	r2,20(fp)
 400310c:	10c00015 	stw	r3,0(r2)
      return s;
 4003110:	e0bfe317 	ldw	r2,-116(fp)
 4003114:	00069206 	br	4004b60 <_dtoa_r+0x1c08>
    }

  b = d2b (ptr, d.d, &be, &bbits);
 4003118:	e0bfd517 	ldw	r2,-172(fp)
 400311c:	e0ffd617 	ldw	r3,-168(fp)
 4003120:	e17fd704 	addi	r5,fp,-164
 4003124:	e13fd804 	addi	r4,fp,-160
 4003128:	d9000015 	stw	r4,0(sp)
 400312c:	280f883a 	mov	r7,r5
 4003130:	100b883a 	mov	r5,r2
 4003134:	180d883a 	mov	r6,r3
 4003138:	e13fd017 	ldw	r4,-192(fp)
 400313c:	4008e040 	call	4008e04 <__d2b>
 4003140:	e0bfe915 	stw	r2,-92(fp)
#ifdef Sudden_Underflow
  i = (int) (word0 (d) >> Exp_shift1 & (Exp_mask >> Exp_shift1));
#else
  if ((i = (int) (word0 (d) >> Exp_shift1 & (Exp_mask >> Exp_shift1))) != 0)
 4003144:	e0bfd617 	ldw	r2,-168(fp)
 4003148:	1004d53a 	srli	r2,r2,20
 400314c:	1081ffcc 	andi	r2,r2,2047
 4003150:	e0bff815 	stw	r2,-32(fp)
 4003154:	e0bff817 	ldw	r2,-32(fp)
 4003158:	10001126 	beq	r2,zero,40031a0 <_dtoa_r+0x248>
    {
#endif
      d2.d = d.d;
 400315c:	e0bfd517 	ldw	r2,-172(fp)
 4003160:	e0ffd617 	ldw	r3,-168(fp)
 4003164:	e0bfd315 	stw	r2,-180(fp)
 4003168:	e0ffd415 	stw	r3,-176(fp)
      word0 (d2) &= Frac_mask1;
 400316c:	e0ffd417 	ldw	r3,-176(fp)
 4003170:	00800434 	movhi	r2,16
 4003174:	10bfffc4 	addi	r2,r2,-1
 4003178:	1884703a 	and	r2,r3,r2
 400317c:	e0bfd415 	stw	r2,-176(fp)
      word0 (d2) |= Exp_11;
 4003180:	e0bfd417 	ldw	r2,-176(fp)
 4003184:	108ffc34 	orhi	r2,r2,16368
 4003188:	e0bfd415 	stw	r2,-176(fp)
		 * Hence we adjust the constant term to 0.1760912590558.
		 * (We could get a more accurate k by invoking log10,
		 *  but this is probably not worthwhile.)
		 */

      i -= Bias;
 400318c:	e0bff817 	ldw	r2,-32(fp)
 4003190:	10bf0044 	addi	r2,r2,-1023
 4003194:	e0bff815 	stw	r2,-32(fp)
#ifdef IBM
      i <<= 2;
      i += j;
#endif
#ifndef Sudden_Underflow
      denorm = 0;
 4003198:	e03fea15 	stw	zero,-88(fp)
 400319c:	00002806 	br	4003240 <_dtoa_r+0x2e8>
    }
  else
    {
      /* d is denormalized */

      i = bbits + be + (Bias + (P - 1) - 1);
 40031a0:	e0ffd817 	ldw	r3,-160(fp)
 40031a4:	e0bfd717 	ldw	r2,-164(fp)
 40031a8:	1885883a 	add	r2,r3,r2
 40031ac:	10810c84 	addi	r2,r2,1074
 40031b0:	e0bff815 	stw	r2,-32(fp)
#if defined (_DOUBLE_IS_32BITS)
      x = word0 (d) << (32 - i);
#else
      x = (i > 32) ? (word0 (d) << (64 - i)) | (word1 (d) >> (i - 32))
       : (word1 (d) << (32 - i));
 40031b4:	e0bff817 	ldw	r2,-32(fp)
 40031b8:	10800850 	cmplti	r2,r2,33
 40031bc:	10000b1e 	bne	r2,zero,40031ec <_dtoa_r+0x294>
      x = (i > 32) ? (word0 (d) << (64 - i)) | (word1 (d) >> (i - 32))
 40031c0:	e0ffd617 	ldw	r3,-168(fp)
 40031c4:	01001004 	movi	r4,64
 40031c8:	e0bff817 	ldw	r2,-32(fp)
 40031cc:	2085c83a 	sub	r2,r4,r2
 40031d0:	1886983a 	sll	r3,r3,r2
 40031d4:	e13fd517 	ldw	r4,-172(fp)
 40031d8:	e0bff817 	ldw	r2,-32(fp)
 40031dc:	10bff804 	addi	r2,r2,-32
 40031e0:	2084d83a 	srl	r2,r4,r2
       : (word1 (d) << (32 - i));
 40031e4:	1884b03a 	or	r2,r3,r2
 40031e8:	00000506 	br	4003200 <_dtoa_r+0x2a8>
 40031ec:	e0ffd517 	ldw	r3,-172(fp)
 40031f0:	01000804 	movi	r4,32
 40031f4:	e0bff817 	ldw	r2,-32(fp)
 40031f8:	2085c83a 	sub	r2,r4,r2
 40031fc:	1884983a 	sll	r2,r3,r2
      x = (i > 32) ? (word0 (d) << (64 - i)) | (word1 (d) >> (i - 32))
 4003200:	e0bfe215 	stw	r2,-120(fp)
#endif
      d2.d = x;
 4003204:	e13fe217 	ldw	r4,-120(fp)
 4003208:	40107000 	call	4010700 <__floatunsidf>
 400320c:	1009883a 	mov	r4,r2
 4003210:	180b883a 	mov	r5,r3
 4003214:	e13fd315 	stw	r4,-180(fp)
 4003218:	e17fd415 	stw	r5,-176(fp)
      word0 (d2) -= 31 * Exp_msk1;	/* adjust exponent */
 400321c:	e0ffd417 	ldw	r3,-176(fp)
 4003220:	00bf8434 	movhi	r2,65040
 4003224:	1885883a 	add	r2,r3,r2
 4003228:	e0bfd415 	stw	r2,-176(fp)
      i -= (Bias + (P - 1) - 1) + 1;
 400322c:	e0bff817 	ldw	r2,-32(fp)
 4003230:	10bef344 	addi	r2,r2,-1075
 4003234:	e0bff815 	stw	r2,-32(fp)
      denorm = 1;
 4003238:	00800044 	movi	r2,1
 400323c:	e0bfea15 	stw	r2,-88(fp)
    }
#endif
#if defined (_DOUBLE_IS_32BITS)
  ds = (d2.d - 1.5) * 0.289529651 + 0.176091269 + i * 0.30103001;
#else
  ds = (d2.d - 1.5) * 0.289529654602168 + 0.1760912590558 + i * 0.301029995663981;
 4003240:	e0bfd317 	ldw	r2,-180(fp)
 4003244:	e0ffd417 	ldw	r3,-176(fp)
 4003248:	000d883a 	mov	r6,zero
 400324c:	01cffe34 	movhi	r7,16376
 4003250:	1009883a 	mov	r4,r2
 4003254:	180b883a 	mov	r5,r3
 4003258:	400fc3c0 	call	400fc3c <__subdf3>
 400325c:	1009883a 	mov	r4,r2
 4003260:	180b883a 	mov	r5,r3
 4003264:	2005883a 	mov	r2,r4
 4003268:	2807883a 	mov	r3,r5
 400326c:	0198dbf4 	movhi	r6,25455
 4003270:	3190d844 	addi	r6,r6,17249
 4003274:	01cff4f4 	movhi	r7,16339
 4003278:	39e1e9c4 	addi	r7,r7,-30809
 400327c:	1009883a 	mov	r4,r2
 4003280:	180b883a 	mov	r5,r3
 4003284:	400f5cc0 	call	400f5cc <__muldf3>
 4003288:	1009883a 	mov	r4,r2
 400328c:	180b883a 	mov	r5,r3
 4003290:	2005883a 	mov	r2,r4
 4003294:	2807883a 	mov	r3,r5
 4003298:	01a2d874 	movhi	r6,35681
 400329c:	31b22cc4 	addi	r6,r6,-14157
 40032a0:	01cff1f4 	movhi	r7,16327
 40032a4:	39e28a04 	addi	r7,r7,-30168
 40032a8:	1009883a 	mov	r4,r2
 40032ac:	180b883a 	mov	r5,r3
 40032b0:	400e1940 	call	400e194 <__adddf3>
 40032b4:	1009883a 	mov	r4,r2
 40032b8:	180b883a 	mov	r5,r3
 40032bc:	2025883a 	mov	r18,r4
 40032c0:	2827883a 	mov	r19,r5
 40032c4:	e13ff817 	ldw	r4,-32(fp)
 40032c8:	40106440 	call	4010644 <__floatsidf>
 40032cc:	1011883a 	mov	r8,r2
 40032d0:	1813883a 	mov	r9,r3
 40032d4:	019427f4 	movhi	r6,20639
 40032d8:	319e7ec4 	addi	r6,r6,31227
 40032dc:	01cff4f4 	movhi	r7,16339
 40032e0:	39d104c4 	addi	r7,r7,17427
 40032e4:	4009883a 	mov	r4,r8
 40032e8:	480b883a 	mov	r5,r9
 40032ec:	400f5cc0 	call	400f5cc <__muldf3>
 40032f0:	1009883a 	mov	r4,r2
 40032f4:	180b883a 	mov	r5,r3
 40032f8:	2005883a 	mov	r2,r4
 40032fc:	2807883a 	mov	r3,r5
 4003300:	100d883a 	mov	r6,r2
 4003304:	180f883a 	mov	r7,r3
 4003308:	9009883a 	mov	r4,r18
 400330c:	980b883a 	mov	r5,r19
 4003310:	400e1940 	call	400e194 <__adddf3>
 4003314:	1009883a 	mov	r4,r2
 4003318:	180b883a 	mov	r5,r3
 400331c:	e13fe415 	stw	r4,-112(fp)
 4003320:	e17fe515 	stw	r5,-108(fp)
#endif
  k = (int) ds;
 4003324:	e13fe417 	ldw	r4,-112(fp)
 4003328:	e17fe517 	ldw	r5,-108(fp)
 400332c:	40105c40 	call	40105c4 <__fixdfsi>
 4003330:	e0bff315 	stw	r2,-52(fp)
  if (ds < 0. && ds != k)
 4003334:	000d883a 	mov	r6,zero
 4003338:	000f883a 	mov	r7,zero
 400333c:	e13fe417 	ldw	r4,-112(fp)
 4003340:	e17fe517 	ldw	r5,-108(fp)
 4003344:	400f4dc0 	call	400f4dc <__ledf2>
 4003348:	10000d0e 	bge	r2,zero,4003380 <_dtoa_r+0x428>
 400334c:	e13ff317 	ldw	r4,-52(fp)
 4003350:	40106440 	call	4010644 <__floatsidf>
 4003354:	1009883a 	mov	r4,r2
 4003358:	180b883a 	mov	r5,r3
 400335c:	200d883a 	mov	r6,r4
 4003360:	280f883a 	mov	r7,r5
 4003364:	e13fe417 	ldw	r4,-112(fp)
 4003368:	e17fe517 	ldw	r5,-108(fp)
 400336c:	400f36c0 	call	400f36c <__eqdf2>
 4003370:	10000326 	beq	r2,zero,4003380 <_dtoa_r+0x428>
    k--;			/* want k = floor(ds) */
 4003374:	e0bff317 	ldw	r2,-52(fp)
 4003378:	10bfffc4 	addi	r2,r2,-1
 400337c:	e0bff315 	stw	r2,-52(fp)
  k_check = 1;
 4003380:	00800044 	movi	r2,1
 4003384:	e0bff215 	stw	r2,-56(fp)
  if (k >= 0 && k <= Ten_pmax)
 4003388:	e0bff317 	ldw	r2,-52(fp)
 400338c:	10001716 	blt	r2,zero,40033ec <_dtoa_r+0x494>
 4003390:	e0bff317 	ldw	r2,-52(fp)
 4003394:	108005c8 	cmpgei	r2,r2,23
 4003398:	1000141e 	bne	r2,zero,40033ec <_dtoa_r+0x494>
    {
      if (d.d < tens[k])
 400339c:	e0bfd517 	ldw	r2,-172(fp)
 40033a0:	e0ffd617 	ldw	r3,-168(fp)
 40033a4:	e13ff317 	ldw	r4,-52(fp)
 40033a8:	200e90fa 	slli	r7,r4,3
 40033ac:	01810074 	movhi	r6,1025
 40033b0:	398d883a 	add	r6,r7,r6
 40033b4:	310e0717 	ldw	r4,14364(r6)
 40033b8:	01810074 	movhi	r6,1025
 40033bc:	398d883a 	add	r6,r7,r6
 40033c0:	314e0817 	ldw	r5,14368(r6)
 40033c4:	200d883a 	mov	r6,r4
 40033c8:	280f883a 	mov	r7,r5
 40033cc:	1009883a 	mov	r4,r2
 40033d0:	180b883a 	mov	r5,r3
 40033d4:	400f4dc0 	call	400f4dc <__ledf2>
 40033d8:	1000030e 	bge	r2,zero,40033e8 <_dtoa_r+0x490>
	k--;
 40033dc:	e0bff317 	ldw	r2,-52(fp)
 40033e0:	10bfffc4 	addi	r2,r2,-1
 40033e4:	e0bff315 	stw	r2,-52(fp)
      k_check = 0;
 40033e8:	e03ff215 	stw	zero,-56(fp)
    }
  j = bbits - i - 1;
 40033ec:	e0ffd817 	ldw	r3,-160(fp)
 40033f0:	e0bff817 	ldw	r2,-32(fp)
 40033f4:	1885c83a 	sub	r2,r3,r2
 40033f8:	10bfffc4 	addi	r2,r2,-1
 40033fc:	e0bff415 	stw	r2,-48(fp)
  if (j >= 0)
 4003400:	e0bff417 	ldw	r2,-48(fp)
 4003404:	10000416 	blt	r2,zero,4003418 <_dtoa_r+0x4c0>
    {
      b2 = 0;
 4003408:	e03ffb15 	stw	zero,-20(fp)
      s2 = j;
 400340c:	e0bff417 	ldw	r2,-48(fp)
 4003410:	e0bfee15 	stw	r2,-72(fp)
 4003414:	00000406 	br	4003428 <_dtoa_r+0x4d0>
    }
  else
    {
      b2 = -j;
 4003418:	e0bff417 	ldw	r2,-48(fp)
 400341c:	0085c83a 	sub	r2,zero,r2
 4003420:	e0bffb15 	stw	r2,-20(fp)
      s2 = 0;
 4003424:	e03fee15 	stw	zero,-72(fp)
    }
  if (k >= 0)
 4003428:	e0bff317 	ldw	r2,-52(fp)
 400342c:	10000816 	blt	r2,zero,4003450 <_dtoa_r+0x4f8>
    {
      b5 = 0;
 4003430:	e03ffa15 	stw	zero,-24(fp)
      s5 = k;
 4003434:	e0bff317 	ldw	r2,-52(fp)
 4003438:	e0bfed15 	stw	r2,-76(fp)
      s2 += k;
 400343c:	e0ffee17 	ldw	r3,-72(fp)
 4003440:	e0bff317 	ldw	r2,-52(fp)
 4003444:	1885883a 	add	r2,r3,r2
 4003448:	e0bfee15 	stw	r2,-72(fp)
 400344c:	00000806 	br	4003470 <_dtoa_r+0x518>
    }
  else
    {
      b2 -= k;
 4003450:	e0fffb17 	ldw	r3,-20(fp)
 4003454:	e0bff317 	ldw	r2,-52(fp)
 4003458:	1885c83a 	sub	r2,r3,r2
 400345c:	e0bffb15 	stw	r2,-20(fp)
      b5 = -k;
 4003460:	e0bff317 	ldw	r2,-52(fp)
 4003464:	0085c83a 	sub	r2,zero,r2
 4003468:	e0bffa15 	stw	r2,-24(fp)
      s5 = 0;
 400346c:	e03fed15 	stw	zero,-76(fp)
    }
  if (mode < 0 || mode > 9)
 4003470:	e0bfcd17 	ldw	r2,-204(fp)
 4003474:	10000316 	blt	r2,zero,4003484 <_dtoa_r+0x52c>
 4003478:	e0bfcd17 	ldw	r2,-204(fp)
 400347c:	10800290 	cmplti	r2,r2,10
 4003480:	1000011e 	bne	r2,zero,4003488 <_dtoa_r+0x530>
    mode = 0;
 4003484:	e03fcd15 	stw	zero,-204(fp)
  try_quick = 1;
 4003488:	00800044 	movi	r2,1
 400348c:	e0bfeb15 	stw	r2,-84(fp)
  if (mode > 5)
 4003490:	e0bfcd17 	ldw	r2,-204(fp)
 4003494:	10800190 	cmplti	r2,r2,6
 4003498:	1000041e 	bne	r2,zero,40034ac <_dtoa_r+0x554>
    {
      mode -= 4;
 400349c:	e0bfcd17 	ldw	r2,-204(fp)
 40034a0:	10bfff04 	addi	r2,r2,-4
 40034a4:	e0bfcd15 	stw	r2,-204(fp)
      try_quick = 0;
 40034a8:	e03feb15 	stw	zero,-84(fp)
    }
  leftright = 1;
 40034ac:	00800044 	movi	r2,1
 40034b0:	e0bff115 	stw	r2,-60(fp)
  ilim = ilim1 = -1;
 40034b4:	00bfffc4 	movi	r2,-1
 40034b8:	e0bff515 	stw	r2,-44(fp)
 40034bc:	e0bff517 	ldw	r2,-44(fp)
 40034c0:	e0bff615 	stw	r2,-40(fp)
 40034c4:	e0bfcd17 	ldw	r2,-204(fp)
 40034c8:	108001a8 	cmpgeui	r2,r2,6
 40034cc:	10002b1e 	bne	r2,zero,400357c <_dtoa_r+0x624>
 40034d0:	e0bfcd17 	ldw	r2,-204(fp)
 40034d4:	100690ba 	slli	r3,r2,2
 40034d8:	00810034 	movhi	r2,1024
 40034dc:	1885883a 	add	r2,r3,r2
 40034e0:	108d3a17 	ldw	r2,13544(r2)
 40034e4:	1000683a 	jmp	r2
 40034e8:	04003500 	call	400350 <__alt_mem_dram_controller-0x3bffcb0>
 40034ec:	04003500 	call	400350 <__alt_mem_dram_controller-0x3bffcb0>
 40034f0:	04003510 	cmplti	r16,zero,212
 40034f4:	04003540 	call	400354 <__alt_mem_dram_controller-0x3bffcac>
 40034f8:	04003514 	movui	r16,212
 40034fc:	04003544 	movi	r16,213
  switch (mode)
    {
    case 0:
    case 1:
      i = 18;
 4003500:	00800484 	movi	r2,18
 4003504:	e0bff815 	stw	r2,-32(fp)
      ndigits = 0;
 4003508:	e0000215 	stw	zero,8(fp)
      break;
 400350c:	00001b06 	br	400357c <_dtoa_r+0x624>
    case 2:
      leftright = 0;
 4003510:	e03ff115 	stw	zero,-60(fp)
      /* no break */
    case 4:
      if (ndigits <= 0)
 4003514:	e0800217 	ldw	r2,8(fp)
 4003518:	00800216 	blt	zero,r2,4003524 <_dtoa_r+0x5cc>
	ndigits = 1;
 400351c:	00800044 	movi	r2,1
 4003520:	e0800215 	stw	r2,8(fp)
      ilim = ilim1 = i = ndigits;
 4003524:	e0800217 	ldw	r2,8(fp)
 4003528:	e0bff815 	stw	r2,-32(fp)
 400352c:	e0bff817 	ldw	r2,-32(fp)
 4003530:	e0bff515 	stw	r2,-44(fp)
 4003534:	e0bff517 	ldw	r2,-44(fp)
 4003538:	e0bff615 	stw	r2,-40(fp)
      break;
 400353c:	00000f06 	br	400357c <_dtoa_r+0x624>
    case 3:
      leftright = 0;
 4003540:	e03ff115 	stw	zero,-60(fp)
      /* no break */
    case 5:
      i = ndigits + k + 1;
 4003544:	e0c00217 	ldw	r3,8(fp)
 4003548:	e0bff317 	ldw	r2,-52(fp)
 400354c:	1885883a 	add	r2,r3,r2
 4003550:	10800044 	addi	r2,r2,1
 4003554:	e0bff815 	stw	r2,-32(fp)
      ilim = i;
 4003558:	e0bff817 	ldw	r2,-32(fp)
 400355c:	e0bff615 	stw	r2,-40(fp)
      ilim1 = i - 1;
 4003560:	e0bff817 	ldw	r2,-32(fp)
 4003564:	10bfffc4 	addi	r2,r2,-1
 4003568:	e0bff515 	stw	r2,-44(fp)
      if (i <= 0)
 400356c:	e0bff817 	ldw	r2,-32(fp)
 4003570:	00800216 	blt	zero,r2,400357c <_dtoa_r+0x624>
	i = 1;
 4003574:	00800044 	movi	r2,1
 4003578:	e0bff815 	stw	r2,-32(fp)
    }
  j = sizeof (__ULong);
 400357c:	00800104 	movi	r2,4
 4003580:	e0bff415 	stw	r2,-48(fp)
  for (_REENT_MP_RESULT_K(ptr) = 0; sizeof (_Bigint) - sizeof (__ULong) + j <= i;
 4003584:	e0bfd017 	ldw	r2,-192(fp)
 4003588:	10001115 	stw	zero,68(r2)
 400358c:	00000806 	br	40035b0 <_dtoa_r+0x658>
       j <<= 1)
    _REENT_MP_RESULT_K(ptr)++;
 4003590:	e0bfd017 	ldw	r2,-192(fp)
 4003594:	10801117 	ldw	r2,68(r2)
 4003598:	10c00044 	addi	r3,r2,1
 400359c:	e0bfd017 	ldw	r2,-192(fp)
 40035a0:	10c01115 	stw	r3,68(r2)
       j <<= 1)
 40035a4:	e0bff417 	ldw	r2,-48(fp)
 40035a8:	1085883a 	add	r2,r2,r2
 40035ac:	e0bff415 	stw	r2,-48(fp)
  for (_REENT_MP_RESULT_K(ptr) = 0; sizeof (_Bigint) - sizeof (__ULong) + j <= i;
 40035b0:	e0bff417 	ldw	r2,-48(fp)
 40035b4:	10800504 	addi	r2,r2,20
 40035b8:	e0fff817 	ldw	r3,-32(fp)
 40035bc:	18bff42e 	bgeu	r3,r2,4003590 <_dtoa_r+0x638>
  _REENT_MP_RESULT(ptr) = eBalloc (ptr, _REENT_MP_RESULT_K(ptr));
 40035c0:	e0bfd017 	ldw	r2,-192(fp)
 40035c4:	10801117 	ldw	r2,68(r2)
 40035c8:	100b883a 	mov	r5,r2
 40035cc:	e13fd017 	ldw	r4,-192(fp)
 40035d0:	40078e00 	call	40078e0 <_Balloc>
 40035d4:	e0bfe115 	stw	r2,-124(fp)
 40035d8:	e0bfe117 	ldw	r2,-124(fp)
 40035dc:	1000071e 	bne	r2,zero,40035fc <_dtoa_r+0x6a4>
 40035e0:	01c10074 	movhi	r7,1025
 40035e4:	39cdc604 	addi	r7,r7,14104
 40035e8:	000d883a 	mov	r6,zero
 40035ec:	01406a84 	movi	r5,426
 40035f0:	01010074 	movhi	r4,1025
 40035f4:	210dcb04 	addi	r4,r4,14124
 40035f8:	400b01c0 	call	400b01c <__assert_func>
 40035fc:	e0ffe117 	ldw	r3,-124(fp)
 4003600:	e0bfd017 	ldw	r2,-192(fp)
 4003604:	10c01015 	stw	r3,64(r2)
  s = s0 = (char *) _REENT_MP_RESULT(ptr);
 4003608:	e0bfd017 	ldw	r2,-192(fp)
 400360c:	10801017 	ldw	r2,64(r2)
 4003610:	e0bfe015 	stw	r2,-128(fp)
 4003614:	e0bfe017 	ldw	r2,-128(fp)
 4003618:	e0bfe315 	stw	r2,-116(fp)

  if (ilim >= 0 && ilim <= Quick_max && try_quick)
 400361c:	e0bff617 	ldw	r2,-40(fp)
 4003620:	10022016 	blt	r2,zero,4003ea4 <_dtoa_r+0xf4c>
 4003624:	e0bff617 	ldw	r2,-40(fp)
 4003628:	108003c8 	cmpgei	r2,r2,15
 400362c:	10021d1e 	bne	r2,zero,4003ea4 <_dtoa_r+0xf4c>
 4003630:	e0bfeb17 	ldw	r2,-84(fp)
 4003634:	10021b26 	beq	r2,zero,4003ea4 <_dtoa_r+0xf4c>
    {
      /* Try to get by with floating-point arithmetic. */

      i = 0;
 4003638:	e03ff815 	stw	zero,-32(fp)
      d2.d = d.d;
 400363c:	e0bfd517 	ldw	r2,-172(fp)
 4003640:	e0ffd617 	ldw	r3,-168(fp)
 4003644:	e0bfd315 	stw	r2,-180(fp)
 4003648:	e0ffd415 	stw	r3,-176(fp)
      k0 = k;
 400364c:	e0bff317 	ldw	r2,-52(fp)
 4003650:	e0bfdf15 	stw	r2,-132(fp)
      ilim0 = ilim;
 4003654:	e0bff617 	ldw	r2,-40(fp)
 4003658:	e0bfde15 	stw	r2,-136(fp)
      ieps = 2;			/* conservative */
 400365c:	00800084 	movi	r2,2
 4003660:	e0bff715 	stw	r2,-36(fp)
      if (k > 0)
 4003664:	e0bff317 	ldw	r2,-52(fp)
 4003668:	0080560e 	bge	zero,r2,40037c4 <_dtoa_r+0x86c>
	{
	  ds = tens[k & 0xf];
 400366c:	e0bff317 	ldw	r2,-52(fp)
 4003670:	108003cc 	andi	r2,r2,15
 4003674:	100690fa 	slli	r3,r2,3
 4003678:	00810074 	movhi	r2,1025
 400367c:	1885883a 	add	r2,r3,r2
 4003680:	108e0717 	ldw	r2,14364(r2)
 4003684:	e0bfe415 	stw	r2,-112(fp)
 4003688:	00810074 	movhi	r2,1025
 400368c:	1885883a 	add	r2,r3,r2
 4003690:	108e0817 	ldw	r2,14368(r2)
 4003694:	e0bfe515 	stw	r2,-108(fp)
	  j = k >> 4;
 4003698:	e0bff317 	ldw	r2,-52(fp)
 400369c:	1005d13a 	srai	r2,r2,4
 40036a0:	e0bff415 	stw	r2,-48(fp)
	  if (j & Bletch)
 40036a4:	e0bff417 	ldw	r2,-48(fp)
 40036a8:	1080040c 	andi	r2,r2,16
 40036ac:	10003526 	beq	r2,zero,4003784 <_dtoa_r+0x82c>
	    {
	      /* prevent overflows */
	      j &= Bletch - 1;
 40036b0:	e0bff417 	ldw	r2,-48(fp)
 40036b4:	108003cc 	andi	r2,r2,15
 40036b8:	e0bff415 	stw	r2,-48(fp)
	      d.d /= bigtens[n_bigtens - 1];
 40036bc:	e0bfd517 	ldw	r2,-172(fp)
 40036c0:	e0ffd617 	ldw	r3,-168(fp)
 40036c4:	01810074 	movhi	r6,1025
 40036c8:	310e4117 	ldw	r4,14596(r6)
 40036cc:	01810074 	movhi	r6,1025
 40036d0:	314e4217 	ldw	r5,14600(r6)
 40036d4:	200d883a 	mov	r6,r4
 40036d8:	280f883a 	mov	r7,r5
 40036dc:	1009883a 	mov	r4,r2
 40036e0:	180b883a 	mov	r5,r3
 40036e4:	400eb0c0 	call	400eb0c <__divdf3>
 40036e8:	1009883a 	mov	r4,r2
 40036ec:	180b883a 	mov	r5,r3
 40036f0:	2005883a 	mov	r2,r4
 40036f4:	2807883a 	mov	r3,r5
 40036f8:	e0bfd515 	stw	r2,-172(fp)
 40036fc:	e0ffd615 	stw	r3,-168(fp)
	      ieps++;
 4003700:	e0bff717 	ldw	r2,-36(fp)
 4003704:	10800044 	addi	r2,r2,1
 4003708:	e0bff715 	stw	r2,-36(fp)
	    }
	  for (; j; j >>= 1, i++)
 400370c:	00001d06 	br	4003784 <_dtoa_r+0x82c>
	    if (j & 1)
 4003710:	e0bff417 	ldw	r2,-48(fp)
 4003714:	1080004c 	andi	r2,r2,1
 4003718:	10001426 	beq	r2,zero,400376c <_dtoa_r+0x814>
	      {
		ieps++;
 400371c:	e0bff717 	ldw	r2,-36(fp)
 4003720:	10800044 	addi	r2,r2,1
 4003724:	e0bff715 	stw	r2,-36(fp)
		ds *= bigtens[i];
 4003728:	e0bff817 	ldw	r2,-32(fp)
 400372c:	100a90fa 	slli	r5,r2,3
 4003730:	01010074 	movhi	r4,1025
 4003734:	2909883a 	add	r4,r5,r4
 4003738:	208e3917 	ldw	r2,14564(r4)
 400373c:	01010074 	movhi	r4,1025
 4003740:	2909883a 	add	r4,r5,r4
 4003744:	20ce3a17 	ldw	r3,14568(r4)
 4003748:	100d883a 	mov	r6,r2
 400374c:	180f883a 	mov	r7,r3
 4003750:	e13fe417 	ldw	r4,-112(fp)
 4003754:	e17fe517 	ldw	r5,-108(fp)
 4003758:	400f5cc0 	call	400f5cc <__muldf3>
 400375c:	1009883a 	mov	r4,r2
 4003760:	180b883a 	mov	r5,r3
 4003764:	e13fe415 	stw	r4,-112(fp)
 4003768:	e17fe515 	stw	r5,-108(fp)
	  for (; j; j >>= 1, i++)
 400376c:	e0bff417 	ldw	r2,-48(fp)
 4003770:	1005d07a 	srai	r2,r2,1
 4003774:	e0bff415 	stw	r2,-48(fp)
 4003778:	e0bff817 	ldw	r2,-32(fp)
 400377c:	10800044 	addi	r2,r2,1
 4003780:	e0bff815 	stw	r2,-32(fp)
 4003784:	e0bff417 	ldw	r2,-48(fp)
 4003788:	103fe11e 	bne	r2,zero,4003710 <_dtoa_r+0x7b8>
	      }
	  d.d /= ds;
 400378c:	e0bfd517 	ldw	r2,-172(fp)
 4003790:	e0ffd617 	ldw	r3,-168(fp)
 4003794:	e1bfe417 	ldw	r6,-112(fp)
 4003798:	e1ffe517 	ldw	r7,-108(fp)
 400379c:	1009883a 	mov	r4,r2
 40037a0:	180b883a 	mov	r5,r3
 40037a4:	400eb0c0 	call	400eb0c <__divdf3>
 40037a8:	1009883a 	mov	r4,r2
 40037ac:	180b883a 	mov	r5,r3
 40037b0:	2005883a 	mov	r2,r4
 40037b4:	2807883a 	mov	r3,r5
 40037b8:	e0bfd515 	stw	r2,-172(fp)
 40037bc:	e0ffd615 	stw	r3,-168(fp)
 40037c0:	00004206 	br	40038cc <_dtoa_r+0x974>
	}
      else if ((j1 = -k) != 0)
 40037c4:	e0bff317 	ldw	r2,-52(fp)
 40037c8:	0085c83a 	sub	r2,zero,r2
 40037cc:	e0bfdd15 	stw	r2,-140(fp)
 40037d0:	e0bfdd17 	ldw	r2,-140(fp)
 40037d4:	10003d26 	beq	r2,zero,40038cc <_dtoa_r+0x974>
	{
	  d.d *= tens[j1 & 0xf];
 40037d8:	e0bfd517 	ldw	r2,-172(fp)
 40037dc:	e0ffd617 	ldw	r3,-168(fp)
 40037e0:	e13fdd17 	ldw	r4,-140(fp)
 40037e4:	210003cc 	andi	r4,r4,15
 40037e8:	200e90fa 	slli	r7,r4,3
 40037ec:	01810074 	movhi	r6,1025
 40037f0:	398d883a 	add	r6,r7,r6
 40037f4:	310e0717 	ldw	r4,14364(r6)
 40037f8:	01810074 	movhi	r6,1025
 40037fc:	398d883a 	add	r6,r7,r6
 4003800:	314e0817 	ldw	r5,14368(r6)
 4003804:	200d883a 	mov	r6,r4
 4003808:	280f883a 	mov	r7,r5
 400380c:	1009883a 	mov	r4,r2
 4003810:	180b883a 	mov	r5,r3
 4003814:	400f5cc0 	call	400f5cc <__muldf3>
 4003818:	1009883a 	mov	r4,r2
 400381c:	180b883a 	mov	r5,r3
 4003820:	2005883a 	mov	r2,r4
 4003824:	2807883a 	mov	r3,r5
 4003828:	e0bfd515 	stw	r2,-172(fp)
 400382c:	e0ffd615 	stw	r3,-168(fp)
	  for (j = j1 >> 4; j; j >>= 1, i++)
 4003830:	e0bfdd17 	ldw	r2,-140(fp)
 4003834:	1005d13a 	srai	r2,r2,4
 4003838:	e0bff415 	stw	r2,-48(fp)
 400383c:	00002106 	br	40038c4 <_dtoa_r+0x96c>
	    if (j & 1)
 4003840:	e0bff417 	ldw	r2,-48(fp)
 4003844:	1080004c 	andi	r2,r2,1
 4003848:	10001826 	beq	r2,zero,40038ac <_dtoa_r+0x954>
	      {
		ieps++;
 400384c:	e0bff717 	ldw	r2,-36(fp)
 4003850:	10800044 	addi	r2,r2,1
 4003854:	e0bff715 	stw	r2,-36(fp)
		d.d *= bigtens[i];
 4003858:	e0bfd517 	ldw	r2,-172(fp)
 400385c:	e0ffd617 	ldw	r3,-168(fp)
 4003860:	e13ff817 	ldw	r4,-32(fp)
 4003864:	200e90fa 	slli	r7,r4,3
 4003868:	01810074 	movhi	r6,1025
 400386c:	398d883a 	add	r6,r7,r6
 4003870:	310e3917 	ldw	r4,14564(r6)
 4003874:	01810074 	movhi	r6,1025
 4003878:	398d883a 	add	r6,r7,r6
 400387c:	314e3a17 	ldw	r5,14568(r6)
 4003880:	200d883a 	mov	r6,r4
 4003884:	280f883a 	mov	r7,r5
 4003888:	1009883a 	mov	r4,r2
 400388c:	180b883a 	mov	r5,r3
 4003890:	400f5cc0 	call	400f5cc <__muldf3>
 4003894:	1009883a 	mov	r4,r2
 4003898:	180b883a 	mov	r5,r3
 400389c:	2005883a 	mov	r2,r4
 40038a0:	2807883a 	mov	r3,r5
 40038a4:	e0bfd515 	stw	r2,-172(fp)
 40038a8:	e0ffd615 	stw	r3,-168(fp)
	  for (j = j1 >> 4; j; j >>= 1, i++)
 40038ac:	e0bff417 	ldw	r2,-48(fp)
 40038b0:	1005d07a 	srai	r2,r2,1
 40038b4:	e0bff415 	stw	r2,-48(fp)
 40038b8:	e0bff817 	ldw	r2,-32(fp)
 40038bc:	10800044 	addi	r2,r2,1
 40038c0:	e0bff815 	stw	r2,-32(fp)
 40038c4:	e0bff417 	ldw	r2,-48(fp)
 40038c8:	103fdd1e 	bne	r2,zero,4003840 <_dtoa_r+0x8e8>
	      }
	}
      if (k_check && d.d < 1. && ilim > 0)
 40038cc:	e0bff217 	ldw	r2,-56(fp)
 40038d0:	10002126 	beq	r2,zero,4003958 <_dtoa_r+0xa00>
 40038d4:	e0bfd517 	ldw	r2,-172(fp)
 40038d8:	e0ffd617 	ldw	r3,-168(fp)
 40038dc:	000d883a 	mov	r6,zero
 40038e0:	01cffc34 	movhi	r7,16368
 40038e4:	1009883a 	mov	r4,r2
 40038e8:	180b883a 	mov	r5,r3
 40038ec:	400f4dc0 	call	400f4dc <__ledf2>
 40038f0:	1000190e 	bge	r2,zero,4003958 <_dtoa_r+0xa00>
 40038f4:	e0bff617 	ldw	r2,-40(fp)
 40038f8:	0080170e 	bge	zero,r2,4003958 <_dtoa_r+0xa00>
	{
	  if (ilim1 <= 0)
 40038fc:	e0bff517 	ldw	r2,-44(fp)
 4003900:	00815b0e 	bge	zero,r2,4003e70 <_dtoa_r+0xf18>
	    goto fast_failed;
	  ilim = ilim1;
 4003904:	e0bff517 	ldw	r2,-44(fp)
 4003908:	e0bff615 	stw	r2,-40(fp)
	  k--;
 400390c:	e0bff317 	ldw	r2,-52(fp)
 4003910:	10bfffc4 	addi	r2,r2,-1
 4003914:	e0bff315 	stw	r2,-52(fp)
	  d.d *= 10.;
 4003918:	e0bfd517 	ldw	r2,-172(fp)
 400391c:	e0ffd617 	ldw	r3,-168(fp)
 4003920:	000d883a 	mov	r6,zero
 4003924:	01d00934 	movhi	r7,16420
 4003928:	1009883a 	mov	r4,r2
 400392c:	180b883a 	mov	r5,r3
 4003930:	400f5cc0 	call	400f5cc <__muldf3>
 4003934:	1009883a 	mov	r4,r2
 4003938:	180b883a 	mov	r5,r3
 400393c:	2005883a 	mov	r2,r4
 4003940:	2807883a 	mov	r3,r5
 4003944:	e0bfd515 	stw	r2,-172(fp)
 4003948:	e0ffd615 	stw	r3,-168(fp)
	  ieps++;
 400394c:	e0bff717 	ldw	r2,-36(fp)
 4003950:	10800044 	addi	r2,r2,1
 4003954:	e0bff715 	stw	r2,-36(fp)
	}
      eps.d = ieps * d.d + 7.;
 4003958:	e13ff717 	ldw	r4,-36(fp)
 400395c:	40106440 	call	4010644 <__floatsidf>
 4003960:	1011883a 	mov	r8,r2
 4003964:	1813883a 	mov	r9,r3
 4003968:	e0bfd517 	ldw	r2,-172(fp)
 400396c:	e0ffd617 	ldw	r3,-168(fp)
 4003970:	100d883a 	mov	r6,r2
 4003974:	180f883a 	mov	r7,r3
 4003978:	4009883a 	mov	r4,r8
 400397c:	480b883a 	mov	r5,r9
 4003980:	400f5cc0 	call	400f5cc <__muldf3>
 4003984:	1009883a 	mov	r4,r2
 4003988:	180b883a 	mov	r5,r3
 400398c:	2005883a 	mov	r2,r4
 4003990:	2807883a 	mov	r3,r5
 4003994:	000d883a 	mov	r6,zero
 4003998:	01d00734 	movhi	r7,16412
 400399c:	1009883a 	mov	r4,r2
 40039a0:	180b883a 	mov	r5,r3
 40039a4:	400e1940 	call	400e194 <__adddf3>
 40039a8:	1009883a 	mov	r4,r2
 40039ac:	180b883a 	mov	r5,r3
 40039b0:	2005883a 	mov	r2,r4
 40039b4:	2807883a 	mov	r3,r5
 40039b8:	e0bfd115 	stw	r2,-188(fp)
 40039bc:	e0ffd215 	stw	r3,-184(fp)
      word0 (eps) -= (P - 1) * Exp_msk1;
 40039c0:	e0ffd217 	ldw	r3,-184(fp)
 40039c4:	00bf3034 	movhi	r2,64704
 40039c8:	1885883a 	add	r2,r3,r2
 40039cc:	e0bfd215 	stw	r2,-184(fp)
      if (ilim == 0)
 40039d0:	e0bff617 	ldw	r2,-40(fp)
 40039d4:	1000271e 	bne	r2,zero,4003a74 <_dtoa_r+0xb1c>
	{
	  S = mhi = 0;
 40039d8:	e03fe715 	stw	zero,-100(fp)
 40039dc:	e0bfe717 	ldw	r2,-100(fp)
 40039e0:	e0bfe615 	stw	r2,-104(fp)
	  d.d -= 5.;
 40039e4:	e0bfd517 	ldw	r2,-172(fp)
 40039e8:	e0ffd617 	ldw	r3,-168(fp)
 40039ec:	000d883a 	mov	r6,zero
 40039f0:	01d00534 	movhi	r7,16404
 40039f4:	1009883a 	mov	r4,r2
 40039f8:	180b883a 	mov	r5,r3
 40039fc:	400fc3c0 	call	400fc3c <__subdf3>
 4003a00:	1009883a 	mov	r4,r2
 4003a04:	180b883a 	mov	r5,r3
 4003a08:	2005883a 	mov	r2,r4
 4003a0c:	2807883a 	mov	r3,r5
 4003a10:	e0bfd515 	stw	r2,-172(fp)
 4003a14:	e0ffd615 	stw	r3,-168(fp)
	  if (d.d > eps.d)
 4003a18:	e0bfd517 	ldw	r2,-172(fp)
 4003a1c:	e0ffd617 	ldw	r3,-168(fp)
 4003a20:	e13fd117 	ldw	r4,-188(fp)
 4003a24:	e17fd217 	ldw	r5,-184(fp)
 4003a28:	200d883a 	mov	r6,r4
 4003a2c:	280f883a 	mov	r7,r5
 4003a30:	1009883a 	mov	r4,r2
 4003a34:	180b883a 	mov	r5,r3
 4003a38:	400f3ec0 	call	400f3ec <__gedf2>
 4003a3c:	0082f916 	blt	zero,r2,4004624 <_dtoa_r+0x16cc>
	    goto one_digit;
	  if (d.d < -eps.d)
 4003a40:	e23fd517 	ldw	r8,-172(fp)
 4003a44:	e27fd617 	ldw	r9,-168(fp)
 4003a48:	e0bfd117 	ldw	r2,-188(fp)
 4003a4c:	e0ffd217 	ldw	r3,-184(fp)
 4003a50:	1021883a 	mov	r16,r2
 4003a54:	1c60003c 	xorhi	r17,r3,32768
 4003a58:	800d883a 	mov	r6,r16
 4003a5c:	880f883a 	mov	r7,r17
 4003a60:	4009883a 	mov	r4,r8
 4003a64:	480b883a 	mov	r5,r9
 4003a68:	400f4dc0 	call	400f4dc <__ledf2>
 4003a6c:	1002e416 	blt	r2,zero,4004600 <_dtoa_r+0x16a8>
	    goto no_digits;
	  goto fast_failed;
 4003a70:	00010206 	br	4003e7c <_dtoa_r+0xf24>
	}
#ifndef No_leftright
      if (leftright)
 4003a74:	e0bff117 	ldw	r2,-60(fp)
 4003a78:	10007d26 	beq	r2,zero,4003c70 <_dtoa_r+0xd18>
	{
	  /* Use Steele & White method of only
	   * generating digits needed.
	   */
	  eps.d = 0.5 / tens[ilim - 1] - eps.d;
 4003a7c:	e0bff617 	ldw	r2,-40(fp)
 4003a80:	10bfffc4 	addi	r2,r2,-1
 4003a84:	100a90fa 	slli	r5,r2,3
 4003a88:	01010074 	movhi	r4,1025
 4003a8c:	2909883a 	add	r4,r5,r4
 4003a90:	208e0717 	ldw	r2,14364(r4)
 4003a94:	01010074 	movhi	r4,1025
 4003a98:	2909883a 	add	r4,r5,r4
 4003a9c:	20ce0817 	ldw	r3,14368(r4)
 4003aa0:	100d883a 	mov	r6,r2
 4003aa4:	180f883a 	mov	r7,r3
 4003aa8:	0009883a 	mov	r4,zero
 4003aac:	014ff834 	movhi	r5,16352
 4003ab0:	400eb0c0 	call	400eb0c <__divdf3>
 4003ab4:	1009883a 	mov	r4,r2
 4003ab8:	180b883a 	mov	r5,r3
 4003abc:	2011883a 	mov	r8,r4
 4003ac0:	2813883a 	mov	r9,r5
 4003ac4:	e0bfd117 	ldw	r2,-188(fp)
 4003ac8:	e0ffd217 	ldw	r3,-184(fp)
 4003acc:	100d883a 	mov	r6,r2
 4003ad0:	180f883a 	mov	r7,r3
 4003ad4:	4009883a 	mov	r4,r8
 4003ad8:	480b883a 	mov	r5,r9
 4003adc:	400fc3c0 	call	400fc3c <__subdf3>
 4003ae0:	1009883a 	mov	r4,r2
 4003ae4:	180b883a 	mov	r5,r3
 4003ae8:	2005883a 	mov	r2,r4
 4003aec:	2807883a 	mov	r3,r5
 4003af0:	e0bfd115 	stw	r2,-188(fp)
 4003af4:	e0ffd215 	stw	r3,-184(fp)
	  for (i = 0;;)
 4003af8:	e03ff815 	stw	zero,-32(fp)
	    {
	      L = d.d;
 4003afc:	e0bfd517 	ldw	r2,-172(fp)
 4003b00:	e0ffd617 	ldw	r3,-168(fp)
 4003b04:	1009883a 	mov	r4,r2
 4003b08:	180b883a 	mov	r5,r3
 4003b0c:	40105c40 	call	40105c4 <__fixdfsi>
 4003b10:	e0bfdc15 	stw	r2,-144(fp)
	      d.d -= L;
 4003b14:	e43fd517 	ldw	r16,-172(fp)
 4003b18:	e47fd617 	ldw	r17,-168(fp)
 4003b1c:	e13fdc17 	ldw	r4,-144(fp)
 4003b20:	40106440 	call	4010644 <__floatsidf>
 4003b24:	1009883a 	mov	r4,r2
 4003b28:	180b883a 	mov	r5,r3
 4003b2c:	200d883a 	mov	r6,r4
 4003b30:	280f883a 	mov	r7,r5
 4003b34:	8009883a 	mov	r4,r16
 4003b38:	880b883a 	mov	r5,r17
 4003b3c:	400fc3c0 	call	400fc3c <__subdf3>
 4003b40:	1009883a 	mov	r4,r2
 4003b44:	180b883a 	mov	r5,r3
 4003b48:	2005883a 	mov	r2,r4
 4003b4c:	2807883a 	mov	r3,r5
 4003b50:	e0bfd515 	stw	r2,-172(fp)
 4003b54:	e0ffd615 	stw	r3,-168(fp)
	      *s++ = '0' + (int) L;
 4003b58:	e0bfdc17 	ldw	r2,-144(fp)
 4003b5c:	10800c04 	addi	r2,r2,48
 4003b60:	1009883a 	mov	r4,r2
 4003b64:	e0bfe317 	ldw	r2,-116(fp)
 4003b68:	10c00044 	addi	r3,r2,1
 4003b6c:	e0ffe315 	stw	r3,-116(fp)
 4003b70:	2007883a 	mov	r3,r4
 4003b74:	10c00005 	stb	r3,0(r2)
	      if (d.d < eps.d)
 4003b78:	e0bfd517 	ldw	r2,-172(fp)
 4003b7c:	e0ffd617 	ldw	r3,-168(fp)
 4003b80:	e13fd117 	ldw	r4,-188(fp)
 4003b84:	e17fd217 	ldw	r5,-184(fp)
 4003b88:	200d883a 	mov	r6,r4
 4003b8c:	280f883a 	mov	r7,r5
 4003b90:	1009883a 	mov	r4,r2
 4003b94:	180b883a 	mov	r5,r3
 4003b98:	400f4dc0 	call	400f4dc <__ledf2>
 4003b9c:	1003de16 	blt	r2,zero,4004b18 <_dtoa_r+0x1bc0>
		goto ret1;
	      if (1. - d.d < eps.d)
 4003ba0:	e0bfd517 	ldw	r2,-172(fp)
 4003ba4:	e0ffd617 	ldw	r3,-168(fp)
 4003ba8:	100d883a 	mov	r6,r2
 4003bac:	180f883a 	mov	r7,r3
 4003bb0:	0009883a 	mov	r4,zero
 4003bb4:	014ffc34 	movhi	r5,16368
 4003bb8:	400fc3c0 	call	400fc3c <__subdf3>
 4003bbc:	1009883a 	mov	r4,r2
 4003bc0:	180b883a 	mov	r5,r3
 4003bc4:	2011883a 	mov	r8,r4
 4003bc8:	2813883a 	mov	r9,r5
 4003bcc:	e0bfd117 	ldw	r2,-188(fp)
 4003bd0:	e0ffd217 	ldw	r3,-184(fp)
 4003bd4:	100d883a 	mov	r6,r2
 4003bd8:	180f883a 	mov	r7,r3
 4003bdc:	4009883a 	mov	r4,r8
 4003be0:	480b883a 	mov	r5,r9
 4003be4:	400f4dc0 	call	400f4dc <__ledf2>
 4003be8:	10012f16 	blt	r2,zero,40040a8 <_dtoa_r+0x1150>
		goto bump_up;
	      if (++i >= ilim)
 4003bec:	e0bff817 	ldw	r2,-32(fp)
 4003bf0:	10800044 	addi	r2,r2,1
 4003bf4:	e0bff815 	stw	r2,-32(fp)
 4003bf8:	e0fff817 	ldw	r3,-32(fp)
 4003bfc:	e0bff617 	ldw	r2,-40(fp)
 4003c00:	18809d0e 	bge	r3,r2,4003e78 <_dtoa_r+0xf20>
		break;
	      eps.d *= 10.;
 4003c04:	e0bfd117 	ldw	r2,-188(fp)
 4003c08:	e0ffd217 	ldw	r3,-184(fp)
 4003c0c:	000d883a 	mov	r6,zero
 4003c10:	01d00934 	movhi	r7,16420
 4003c14:	1009883a 	mov	r4,r2
 4003c18:	180b883a 	mov	r5,r3
 4003c1c:	400f5cc0 	call	400f5cc <__muldf3>
 4003c20:	1009883a 	mov	r4,r2
 4003c24:	180b883a 	mov	r5,r3
 4003c28:	2005883a 	mov	r2,r4
 4003c2c:	2807883a 	mov	r3,r5
 4003c30:	e0bfd115 	stw	r2,-188(fp)
 4003c34:	e0ffd215 	stw	r3,-184(fp)
	      d.d *= 10.;
 4003c38:	e0bfd517 	ldw	r2,-172(fp)
 4003c3c:	e0ffd617 	ldw	r3,-168(fp)
 4003c40:	000d883a 	mov	r6,zero
 4003c44:	01d00934 	movhi	r7,16420
 4003c48:	1009883a 	mov	r4,r2
 4003c4c:	180b883a 	mov	r5,r3
 4003c50:	400f5cc0 	call	400f5cc <__muldf3>
 4003c54:	1009883a 	mov	r4,r2
 4003c58:	180b883a 	mov	r5,r3
 4003c5c:	2005883a 	mov	r2,r4
 4003c60:	2807883a 	mov	r3,r5
 4003c64:	e0bfd515 	stw	r2,-172(fp)
 4003c68:	e0ffd615 	stw	r3,-168(fp)
	      L = d.d;
 4003c6c:	003fa306 	br	4003afc <_dtoa_r+0xba4>
	}
      else
	{
#endif
	  /* Generate ilim digits, then fix them up. */
	  eps.d *= tens[ilim - 1];
 4003c70:	e0bfd117 	ldw	r2,-188(fp)
 4003c74:	e0ffd217 	ldw	r3,-184(fp)
 4003c78:	e13ff617 	ldw	r4,-40(fp)
 4003c7c:	213fffc4 	addi	r4,r4,-1
 4003c80:	200e90fa 	slli	r7,r4,3
 4003c84:	01810074 	movhi	r6,1025
 4003c88:	398d883a 	add	r6,r7,r6
 4003c8c:	310e0717 	ldw	r4,14364(r6)
 4003c90:	01810074 	movhi	r6,1025
 4003c94:	398d883a 	add	r6,r7,r6
 4003c98:	314e0817 	ldw	r5,14368(r6)
 4003c9c:	200d883a 	mov	r6,r4
 4003ca0:	280f883a 	mov	r7,r5
 4003ca4:	1009883a 	mov	r4,r2
 4003ca8:	180b883a 	mov	r5,r3
 4003cac:	400f5cc0 	call	400f5cc <__muldf3>
 4003cb0:	1009883a 	mov	r4,r2
 4003cb4:	180b883a 	mov	r5,r3
 4003cb8:	2005883a 	mov	r2,r4
 4003cbc:	2807883a 	mov	r3,r5
 4003cc0:	e0bfd115 	stw	r2,-188(fp)
 4003cc4:	e0ffd215 	stw	r3,-184(fp)
	  for (i = 1;; i++, d.d *= 10.)
 4003cc8:	00800044 	movi	r2,1
 4003ccc:	e0bff815 	stw	r2,-32(fp)
	    {
	      L = d.d;
 4003cd0:	e0bfd517 	ldw	r2,-172(fp)
 4003cd4:	e0ffd617 	ldw	r3,-168(fp)
 4003cd8:	1009883a 	mov	r4,r2
 4003cdc:	180b883a 	mov	r5,r3
 4003ce0:	40105c40 	call	40105c4 <__fixdfsi>
 4003ce4:	e0bfdc15 	stw	r2,-144(fp)
	      d.d -= L;
 4003ce8:	e43fd517 	ldw	r16,-172(fp)
 4003cec:	e47fd617 	ldw	r17,-168(fp)
 4003cf0:	e13fdc17 	ldw	r4,-144(fp)
 4003cf4:	40106440 	call	4010644 <__floatsidf>
 4003cf8:	1009883a 	mov	r4,r2
 4003cfc:	180b883a 	mov	r5,r3
 4003d00:	200d883a 	mov	r6,r4
 4003d04:	280f883a 	mov	r7,r5
 4003d08:	8009883a 	mov	r4,r16
 4003d0c:	880b883a 	mov	r5,r17
 4003d10:	400fc3c0 	call	400fc3c <__subdf3>
 4003d14:	1009883a 	mov	r4,r2
 4003d18:	180b883a 	mov	r5,r3
 4003d1c:	2005883a 	mov	r2,r4
 4003d20:	2807883a 	mov	r3,r5
 4003d24:	e0bfd515 	stw	r2,-172(fp)
 4003d28:	e0ffd615 	stw	r3,-168(fp)
	      *s++ = '0' + (int) L;
 4003d2c:	e0bfdc17 	ldw	r2,-144(fp)
 4003d30:	10800c04 	addi	r2,r2,48
 4003d34:	1009883a 	mov	r4,r2
 4003d38:	e0bfe317 	ldw	r2,-116(fp)
 4003d3c:	10c00044 	addi	r3,r2,1
 4003d40:	e0ffe315 	stw	r3,-116(fp)
 4003d44:	2007883a 	mov	r3,r4
 4003d48:	10c00005 	stb	r3,0(r2)
	      if (i == ilim)
 4003d4c:	e0fff817 	ldw	r3,-32(fp)
 4003d50:	e0bff617 	ldw	r2,-40(fp)
 4003d54:	1880351e 	bne	r3,r2,4003e2c <_dtoa_r+0xed4>
		{
		  if (d.d > 0.5 + eps.d)
 4003d58:	e43fd517 	ldw	r16,-172(fp)
 4003d5c:	e47fd617 	ldw	r17,-168(fp)
 4003d60:	e0bfd117 	ldw	r2,-188(fp)
 4003d64:	e0ffd217 	ldw	r3,-184(fp)
 4003d68:	000d883a 	mov	r6,zero
 4003d6c:	01cff834 	movhi	r7,16352
 4003d70:	1009883a 	mov	r4,r2
 4003d74:	180b883a 	mov	r5,r3
 4003d78:	400e1940 	call	400e194 <__adddf3>
 4003d7c:	1009883a 	mov	r4,r2
 4003d80:	180b883a 	mov	r5,r3
 4003d84:	2005883a 	mov	r2,r4
 4003d88:	2807883a 	mov	r3,r5
 4003d8c:	100d883a 	mov	r6,r2
 4003d90:	180f883a 	mov	r7,r3
 4003d94:	8009883a 	mov	r4,r16
 4003d98:	880b883a 	mov	r5,r17
 4003d9c:	400f3ec0 	call	400f3ec <__gedf2>
 4003da0:	0080c316 	blt	zero,r2,40040b0 <_dtoa_r+0x1158>
		    goto bump_up;
		  else if (d.d < 0.5 - eps.d)
 4003da4:	e43fd517 	ldw	r16,-172(fp)
 4003da8:	e47fd617 	ldw	r17,-168(fp)
 4003dac:	e0bfd117 	ldw	r2,-188(fp)
 4003db0:	e0ffd217 	ldw	r3,-184(fp)
 4003db4:	100d883a 	mov	r6,r2
 4003db8:	180f883a 	mov	r7,r3
 4003dbc:	0009883a 	mov	r4,zero
 4003dc0:	014ff834 	movhi	r5,16352
 4003dc4:	400fc3c0 	call	400fc3c <__subdf3>
 4003dc8:	1009883a 	mov	r4,r2
 4003dcc:	180b883a 	mov	r5,r3
 4003dd0:	2005883a 	mov	r2,r4
 4003dd4:	2807883a 	mov	r3,r5
 4003dd8:	100d883a 	mov	r6,r2
 4003ddc:	180f883a 	mov	r7,r3
 4003de0:	8009883a 	mov	r4,r16
 4003de4:	880b883a 	mov	r5,r17
 4003de8:	400f4dc0 	call	400f4dc <__ledf2>
 4003dec:	10000116 	blt	r2,zero,4003df4 <_dtoa_r+0xe9c>
		    {
		      while (*--s == '0');
		      s++;
		      goto ret1;
		    }
		  break;
 4003df0:	00002206 	br	4003e7c <_dtoa_r+0xf24>
		      while (*--s == '0');
 4003df4:	e0bfe317 	ldw	r2,-116(fp)
 4003df8:	10bfffc4 	addi	r2,r2,-1
 4003dfc:	e0bfe315 	stw	r2,-116(fp)
 4003e00:	e0bfe317 	ldw	r2,-116(fp)
 4003e04:	10800003 	ldbu	r2,0(r2)
 4003e08:	10803fcc 	andi	r2,r2,255
 4003e0c:	1080201c 	xori	r2,r2,128
 4003e10:	10bfe004 	addi	r2,r2,-128
 4003e14:	10800c20 	cmpeqi	r2,r2,48
 4003e18:	103ff61e 	bne	r2,zero,4003df4 <_dtoa_r+0xe9c>
		      s++;
 4003e1c:	e0bfe317 	ldw	r2,-116(fp)
 4003e20:	10800044 	addi	r2,r2,1
 4003e24:	e0bfe315 	stw	r2,-116(fp)
		      goto ret1;
 4003e28:	00033e06 	br	4004b24 <_dtoa_r+0x1bcc>
	  for (i = 1;; i++, d.d *= 10.)
 4003e2c:	e0bff817 	ldw	r2,-32(fp)
 4003e30:	10800044 	addi	r2,r2,1
 4003e34:	e0bff815 	stw	r2,-32(fp)
 4003e38:	e0bfd517 	ldw	r2,-172(fp)
 4003e3c:	e0ffd617 	ldw	r3,-168(fp)
 4003e40:	000d883a 	mov	r6,zero
 4003e44:	01d00934 	movhi	r7,16420
 4003e48:	1009883a 	mov	r4,r2
 4003e4c:	180b883a 	mov	r5,r3
 4003e50:	400f5cc0 	call	400f5cc <__muldf3>
 4003e54:	1009883a 	mov	r4,r2
 4003e58:	180b883a 	mov	r5,r3
 4003e5c:	2005883a 	mov	r2,r4
 4003e60:	2807883a 	mov	r3,r5
 4003e64:	e0bfd515 	stw	r2,-172(fp)
 4003e68:	e0ffd615 	stw	r3,-168(fp)
	      L = d.d;
 4003e6c:	003f9806 	br	4003cd0 <_dtoa_r+0xd78>
	    goto fast_failed;
 4003e70:	0001883a 	nop
 4003e74:	00000106 	br	4003e7c <_dtoa_r+0xf24>
		break;
 4003e78:	0001883a 	nop
	    }
#ifndef No_leftright
	}
#endif
    fast_failed:
      s = s0;
 4003e7c:	e0bfe017 	ldw	r2,-128(fp)
 4003e80:	e0bfe315 	stw	r2,-116(fp)
      d.d = d2.d;
 4003e84:	e0bfd317 	ldw	r2,-180(fp)
 4003e88:	e0ffd417 	ldw	r3,-176(fp)
 4003e8c:	e0bfd515 	stw	r2,-172(fp)
 4003e90:	e0ffd615 	stw	r3,-168(fp)
      k = k0;
 4003e94:	e0bfdf17 	ldw	r2,-132(fp)
 4003e98:	e0bff315 	stw	r2,-52(fp)
      ilim = ilim0;
 4003e9c:	e0bfde17 	ldw	r2,-136(fp)
 4003ea0:	e0bff615 	stw	r2,-40(fp)
    }

  /* Do we have a "small" integer? */

  if (be >= 0 && k <= Int_max)
 4003ea4:	e0bfd717 	ldw	r2,-164(fp)
 4003ea8:	1000bd16 	blt	r2,zero,40041a0 <_dtoa_r+0x1248>
 4003eac:	e0bff317 	ldw	r2,-52(fp)
 4003eb0:	108003c8 	cmpgei	r2,r2,15
 4003eb4:	1000ba1e 	bne	r2,zero,40041a0 <_dtoa_r+0x1248>
    {
      /* Yes. */
      ds = tens[k];
 4003eb8:	e0bff317 	ldw	r2,-52(fp)
 4003ebc:	100690fa 	slli	r3,r2,3
 4003ec0:	00810074 	movhi	r2,1025
 4003ec4:	1885883a 	add	r2,r3,r2
 4003ec8:	108e0717 	ldw	r2,14364(r2)
 4003ecc:	e0bfe415 	stw	r2,-112(fp)
 4003ed0:	00810074 	movhi	r2,1025
 4003ed4:	1885883a 	add	r2,r3,r2
 4003ed8:	108e0817 	ldw	r2,14368(r2)
 4003edc:	e0bfe515 	stw	r2,-108(fp)
      if (ndigits < 0 && ilim <= 0)
 4003ee0:	e0800217 	ldw	r2,8(fp)
 4003ee4:	1000190e 	bge	r2,zero,4003f4c <_dtoa_r+0xff4>
 4003ee8:	e0bff617 	ldw	r2,-40(fp)
 4003eec:	00801716 	blt	zero,r2,4003f4c <_dtoa_r+0xff4>
	{
	  S = mhi = 0;
 4003ef0:	e03fe715 	stw	zero,-100(fp)
 4003ef4:	e0bfe717 	ldw	r2,-100(fp)
 4003ef8:	e0bfe615 	stw	r2,-104(fp)
	  if (ilim < 0 || d.d <= 5 * ds)
 4003efc:	e0bff617 	ldw	r2,-40(fp)
 4003f00:	1001c116 	blt	r2,zero,4004608 <_dtoa_r+0x16b0>
 4003f04:	e43fd517 	ldw	r16,-172(fp)
 4003f08:	e47fd617 	ldw	r17,-168(fp)
 4003f0c:	000d883a 	mov	r6,zero
 4003f10:	01d00534 	movhi	r7,16404
 4003f14:	e13fe417 	ldw	r4,-112(fp)
 4003f18:	e17fe517 	ldw	r5,-108(fp)
 4003f1c:	400f5cc0 	call	400f5cc <__muldf3>
 4003f20:	1009883a 	mov	r4,r2
 4003f24:	180b883a 	mov	r5,r3
 4003f28:	2005883a 	mov	r2,r4
 4003f2c:	2807883a 	mov	r3,r5
 4003f30:	100d883a 	mov	r6,r2
 4003f34:	180f883a 	mov	r7,r3
 4003f38:	8009883a 	mov	r4,r16
 4003f3c:	880b883a 	mov	r5,r17
 4003f40:	400f4dc0 	call	400f4dc <__ledf2>
 4003f44:	0081b00e 	bge	zero,r2,4004608 <_dtoa_r+0x16b0>
	    goto no_digits;
	  goto one_digit;
 4003f48:	0001b906 	br	4004630 <_dtoa_r+0x16d8>
	}
      for (i = 1;; i++)
 4003f4c:	00800044 	movi	r2,1
 4003f50:	e0bff815 	stw	r2,-32(fp)
	{
	  L = d.d / ds;
 4003f54:	e0bfd517 	ldw	r2,-172(fp)
 4003f58:	e0ffd617 	ldw	r3,-168(fp)
 4003f5c:	e1bfe417 	ldw	r6,-112(fp)
 4003f60:	e1ffe517 	ldw	r7,-108(fp)
 4003f64:	1009883a 	mov	r4,r2
 4003f68:	180b883a 	mov	r5,r3
 4003f6c:	400eb0c0 	call	400eb0c <__divdf3>
 4003f70:	1009883a 	mov	r4,r2
 4003f74:	180b883a 	mov	r5,r3
 4003f78:	2005883a 	mov	r2,r4
 4003f7c:	2807883a 	mov	r3,r5
 4003f80:	1009883a 	mov	r4,r2
 4003f84:	180b883a 	mov	r5,r3
 4003f88:	40105c40 	call	40105c4 <__fixdfsi>
 4003f8c:	e0bfdc15 	stw	r2,-144(fp)
	  d.d -= L * ds;
 4003f90:	e43fd517 	ldw	r16,-172(fp)
 4003f94:	e47fd617 	ldw	r17,-168(fp)
 4003f98:	e13fdc17 	ldw	r4,-144(fp)
 4003f9c:	40106440 	call	4010644 <__floatsidf>
 4003fa0:	1011883a 	mov	r8,r2
 4003fa4:	1813883a 	mov	r9,r3
 4003fa8:	e1bfe417 	ldw	r6,-112(fp)
 4003fac:	e1ffe517 	ldw	r7,-108(fp)
 4003fb0:	4009883a 	mov	r4,r8
 4003fb4:	480b883a 	mov	r5,r9
 4003fb8:	400f5cc0 	call	400f5cc <__muldf3>
 4003fbc:	1009883a 	mov	r4,r2
 4003fc0:	180b883a 	mov	r5,r3
 4003fc4:	2005883a 	mov	r2,r4
 4003fc8:	2807883a 	mov	r3,r5
 4003fcc:	100d883a 	mov	r6,r2
 4003fd0:	180f883a 	mov	r7,r3
 4003fd4:	8009883a 	mov	r4,r16
 4003fd8:	880b883a 	mov	r5,r17
 4003fdc:	400fc3c0 	call	400fc3c <__subdf3>
 4003fe0:	1009883a 	mov	r4,r2
 4003fe4:	180b883a 	mov	r5,r3
 4003fe8:	2005883a 	mov	r2,r4
 4003fec:	2807883a 	mov	r3,r5
 4003ff0:	e0bfd515 	stw	r2,-172(fp)
 4003ff4:	e0ffd615 	stw	r3,-168(fp)
	    {
	      L--;
	      d.d += ds;
	    }
#endif
	  *s++ = '0' + (int) L;
 4003ff8:	e0bfdc17 	ldw	r2,-144(fp)
 4003ffc:	10800c04 	addi	r2,r2,48
 4004000:	1009883a 	mov	r4,r2
 4004004:	e0bfe317 	ldw	r2,-116(fp)
 4004008:	10c00044 	addi	r3,r2,1
 400400c:	e0ffe315 	stw	r3,-116(fp)
 4004010:	2007883a 	mov	r3,r4
 4004014:	10c00005 	stb	r3,0(r2)
	  if (i == ilim)
 4004018:	e0fff817 	ldw	r3,-32(fp)
 400401c:	e0bff617 	ldw	r2,-40(fp)
 4004020:	1880421e 	bne	r3,r2,400412c <_dtoa_r+0x11d4>
	    {
	      d.d += d.d;
 4004024:	e0bfd517 	ldw	r2,-172(fp)
 4004028:	e0ffd617 	ldw	r3,-168(fp)
 400402c:	100d883a 	mov	r6,r2
 4004030:	180f883a 	mov	r7,r3
 4004034:	1009883a 	mov	r4,r2
 4004038:	180b883a 	mov	r5,r3
 400403c:	400e1940 	call	400e194 <__adddf3>
 4004040:	1009883a 	mov	r4,r2
 4004044:	180b883a 	mov	r5,r3
 4004048:	2005883a 	mov	r2,r4
 400404c:	2807883a 	mov	r3,r5
 4004050:	e0bfd515 	stw	r2,-172(fp)
 4004054:	e0ffd615 	stw	r3,-168(fp)
             if ((d.d > ds) || ((d.d == ds) && (L & 1)))
 4004058:	e0bfd517 	ldw	r2,-172(fp)
 400405c:	e0ffd617 	ldw	r3,-168(fp)
 4004060:	100d883a 	mov	r6,r2
 4004064:	180f883a 	mov	r7,r3
 4004068:	e13fe417 	ldw	r4,-112(fp)
 400406c:	e17fe517 	ldw	r5,-108(fp)
 4004070:	400f4dc0 	call	400f4dc <__ledf2>
 4004074:	10001016 	blt	r2,zero,40040b8 <_dtoa_r+0x1160>
 4004078:	e0bfd517 	ldw	r2,-172(fp)
 400407c:	e0ffd617 	ldw	r3,-168(fp)
 4004080:	100d883a 	mov	r6,r2
 4004084:	180f883a 	mov	r7,r3
 4004088:	e13fe417 	ldw	r4,-112(fp)
 400408c:	e17fe517 	ldw	r5,-108(fp)
 4004090:	400f36c0 	call	400f36c <__eqdf2>
 4004094:	10003e1e 	bne	r2,zero,4004190 <_dtoa_r+0x1238>
 4004098:	e0bfdc17 	ldw	r2,-144(fp)
 400409c:	1080004c 	andi	r2,r2,1
 40040a0:	10003b26 	beq	r2,zero,4004190 <_dtoa_r+0x1238>
		{
		bump_up:
 40040a4:	00000406 	br	40040b8 <_dtoa_r+0x1160>
		goto bump_up;
 40040a8:	0001883a 	nop
 40040ac:	00000e06 	br	40040e8 <_dtoa_r+0x1190>
		    goto bump_up;
 40040b0:	0001883a 	nop
 40040b4:	00000c06 	br	40040e8 <_dtoa_r+0x1190>
		bump_up:
 40040b8:	0001883a 	nop
		  while (*--s == '9')
 40040bc:	00000a06 	br	40040e8 <_dtoa_r+0x1190>
		    if (s == s0)
 40040c0:	e0ffe317 	ldw	r3,-116(fp)
 40040c4:	e0bfe017 	ldw	r2,-128(fp)
 40040c8:	1880071e 	bne	r3,r2,40040e8 <_dtoa_r+0x1190>
		      {
			k++;
 40040cc:	e0bff317 	ldw	r2,-52(fp)
 40040d0:	10800044 	addi	r2,r2,1
 40040d4:	e0bff315 	stw	r2,-52(fp)
			*s = '0';
 40040d8:	e0bfe317 	ldw	r2,-116(fp)
 40040dc:	00c00c04 	movi	r3,48
 40040e0:	10c00005 	stb	r3,0(r2)
			break;
 40040e4:	00000a06 	br	4004110 <_dtoa_r+0x11b8>
		  while (*--s == '9')
 40040e8:	e0bfe317 	ldw	r2,-116(fp)
 40040ec:	10bfffc4 	addi	r2,r2,-1
 40040f0:	e0bfe315 	stw	r2,-116(fp)
 40040f4:	e0bfe317 	ldw	r2,-116(fp)
 40040f8:	10800003 	ldbu	r2,0(r2)
 40040fc:	10803fcc 	andi	r2,r2,255
 4004100:	1080201c 	xori	r2,r2,128
 4004104:	10bfe004 	addi	r2,r2,-128
 4004108:	10800e60 	cmpeqi	r2,r2,57
 400410c:	103fec1e 	bne	r2,zero,40040c0 <_dtoa_r+0x1168>
		      }
		  ++*s++;
 4004110:	e0bfe317 	ldw	r2,-116(fp)
 4004114:	10c00044 	addi	r3,r2,1
 4004118:	e0ffe315 	stw	r3,-116(fp)
 400411c:	10c00003 	ldbu	r3,0(r2)
 4004120:	18c00044 	addi	r3,r3,1
 4004124:	10c00005 	stb	r3,0(r2)
		}
	      break;
 4004128:	00001906 	br	4004190 <_dtoa_r+0x1238>
	    }
	  if (!(d.d *= 10.))
 400412c:	e0bfd517 	ldw	r2,-172(fp)
 4004130:	e0ffd617 	ldw	r3,-168(fp)
 4004134:	000d883a 	mov	r6,zero
 4004138:	01d00934 	movhi	r7,16420
 400413c:	1009883a 	mov	r4,r2
 4004140:	180b883a 	mov	r5,r3
 4004144:	400f5cc0 	call	400f5cc <__muldf3>
 4004148:	1009883a 	mov	r4,r2
 400414c:	180b883a 	mov	r5,r3
 4004150:	2005883a 	mov	r2,r4
 4004154:	2807883a 	mov	r3,r5
 4004158:	e0bfd515 	stw	r2,-172(fp)
 400415c:	e0ffd615 	stw	r3,-168(fp)
 4004160:	e0bfd517 	ldw	r2,-172(fp)
 4004164:	e0ffd617 	ldw	r3,-168(fp)
 4004168:	000d883a 	mov	r6,zero
 400416c:	000f883a 	mov	r7,zero
 4004170:	1009883a 	mov	r4,r2
 4004174:	180b883a 	mov	r5,r3
 4004178:	400f36c0 	call	400f36c <__eqdf2>
 400417c:	10000626 	beq	r2,zero,4004198 <_dtoa_r+0x1240>
      for (i = 1;; i++)
 4004180:	e0bff817 	ldw	r2,-32(fp)
 4004184:	10800044 	addi	r2,r2,1
 4004188:	e0bff815 	stw	r2,-32(fp)
	  L = d.d / ds;
 400418c:	003f7106 	br	4003f54 <_dtoa_r+0xffc>
	      break;
 4004190:	0001883a 	nop
 4004194:	00026306 	br	4004b24 <_dtoa_r+0x1bcc>
	    break;
 4004198:	0001883a 	nop
	}
      goto ret1;
 400419c:	00026106 	br	4004b24 <_dtoa_r+0x1bcc>
    }

  m2 = b2;
 40041a0:	e0bffb17 	ldw	r2,-20(fp)
 40041a4:	e0bff015 	stw	r2,-64(fp)
  m5 = b5;
 40041a8:	e0bffa17 	ldw	r2,-24(fp)
 40041ac:	e0bfef15 	stw	r2,-68(fp)
  mhi = mlo = 0;
 40041b0:	e03fe815 	stw	zero,-96(fp)
 40041b4:	e0bfe817 	ldw	r2,-96(fp)
 40041b8:	e0bfe715 	stw	r2,-100(fp)
  if (leftright)
 40041bc:	e0bff117 	ldw	r2,-60(fp)
 40041c0:	10003a26 	beq	r2,zero,40042ac <_dtoa_r+0x1354>
    {
      if (mode < 2)
 40041c4:	e0bfcd17 	ldw	r2,-204(fp)
 40041c8:	10800088 	cmpgei	r2,r2,2
 40041cc:	10000a1e 	bne	r2,zero,40041f8 <_dtoa_r+0x12a0>
	{
	  i =
#ifndef Sudden_Underflow
	    denorm ? be + (Bias + (P - 1) - 1 + 1) :
 40041d0:	e0bfea17 	ldw	r2,-88(fp)
 40041d4:	10000326 	beq	r2,zero,40041e4 <_dtoa_r+0x128c>
 40041d8:	e0bfd717 	ldw	r2,-164(fp)
 40041dc:	10810cc4 	addi	r2,r2,1075
 40041e0:	00000306 	br	40041f0 <_dtoa_r+0x1298>
#endif
#ifdef IBM
	    1 + 4 * P - 3 - bbits + ((bbits + be - 1) & 3);
#else
	    1 + P - bbits;
 40041e4:	e0bfd817 	ldw	r2,-160(fp)
	    denorm ? be + (Bias + (P - 1) - 1 + 1) :
 40041e8:	00c00d84 	movi	r3,54
 40041ec:	1885c83a 	sub	r2,r3,r2
	  i =
 40041f0:	e0bff815 	stw	r2,-32(fp)
 40041f4:	00002106 	br	400427c <_dtoa_r+0x1324>
#endif
	}
      else
	{
	  j = ilim - 1;
 40041f8:	e0bff617 	ldw	r2,-40(fp)
 40041fc:	10bfffc4 	addi	r2,r2,-1
 4004200:	e0bff415 	stw	r2,-48(fp)
	  if (m5 >= j)
 4004204:	e0ffef17 	ldw	r3,-68(fp)
 4004208:	e0bff417 	ldw	r2,-48(fp)
 400420c:	18800516 	blt	r3,r2,4004224 <_dtoa_r+0x12cc>
	    m5 -= j;
 4004210:	e0ffef17 	ldw	r3,-68(fp)
 4004214:	e0bff417 	ldw	r2,-48(fp)
 4004218:	1885c83a 	sub	r2,r3,r2
 400421c:	e0bfef15 	stw	r2,-68(fp)
 4004220:	00000d06 	br	4004258 <_dtoa_r+0x1300>
	  else
	    {
	      s5 += j -= m5;
 4004224:	e0fff417 	ldw	r3,-48(fp)
 4004228:	e0bfef17 	ldw	r2,-68(fp)
 400422c:	1885c83a 	sub	r2,r3,r2
 4004230:	e0bff415 	stw	r2,-48(fp)
 4004234:	e0bff417 	ldw	r2,-48(fp)
 4004238:	e0ffed17 	ldw	r3,-76(fp)
 400423c:	1885883a 	add	r2,r3,r2
 4004240:	e0bfed15 	stw	r2,-76(fp)
	      b5 += j;
 4004244:	e0fffa17 	ldw	r3,-24(fp)
 4004248:	e0bff417 	ldw	r2,-48(fp)
 400424c:	1885883a 	add	r2,r3,r2
 4004250:	e0bffa15 	stw	r2,-24(fp)
	      m5 = 0;
 4004254:	e03fef15 	stw	zero,-68(fp)
	    }
	  if ((i = ilim) < 0)
 4004258:	e0bff617 	ldw	r2,-40(fp)
 400425c:	e0bff815 	stw	r2,-32(fp)
 4004260:	e0bff817 	ldw	r2,-32(fp)
 4004264:	1000050e 	bge	r2,zero,400427c <_dtoa_r+0x1324>
	    {
	      m2 -= i;
 4004268:	e0fff017 	ldw	r3,-64(fp)
 400426c:	e0bff817 	ldw	r2,-32(fp)
 4004270:	1885c83a 	sub	r2,r3,r2
 4004274:	e0bff015 	stw	r2,-64(fp)
	      i = 0;
 4004278:	e03ff815 	stw	zero,-32(fp)
	    }
	}
      b2 += i;
 400427c:	e0fffb17 	ldw	r3,-20(fp)
 4004280:	e0bff817 	ldw	r2,-32(fp)
 4004284:	1885883a 	add	r2,r3,r2
 4004288:	e0bffb15 	stw	r2,-20(fp)
      s2 += i;
 400428c:	e0ffee17 	ldw	r3,-72(fp)
 4004290:	e0bff817 	ldw	r2,-32(fp)
 4004294:	1885883a 	add	r2,r3,r2
 4004298:	e0bfee15 	stw	r2,-72(fp)
      mhi = i2b (ptr, 1);
 400429c:	01400044 	movi	r5,1
 40042a0:	e13fd017 	ldw	r4,-192(fp)
 40042a4:	4007f600 	call	4007f60 <__i2b>
 40042a8:	e0bfe715 	stw	r2,-100(fp)
    }
  if (m2 > 0 && s2 > 0)
 40042ac:	e0bff017 	ldw	r2,-64(fp)
 40042b0:	0080130e 	bge	zero,r2,4004300 <_dtoa_r+0x13a8>
 40042b4:	e0bfee17 	ldw	r2,-72(fp)
 40042b8:	0080110e 	bge	zero,r2,4004300 <_dtoa_r+0x13a8>
    {
      i = m2 < s2 ? m2 : s2;
 40042bc:	e0fff017 	ldw	r3,-64(fp)
 40042c0:	e0bfee17 	ldw	r2,-72(fp)
 40042c4:	1880010e 	bge	r3,r2,40042cc <_dtoa_r+0x1374>
 40042c8:	1805883a 	mov	r2,r3
 40042cc:	e0bff815 	stw	r2,-32(fp)
      b2 -= i;
 40042d0:	e0fffb17 	ldw	r3,-20(fp)
 40042d4:	e0bff817 	ldw	r2,-32(fp)
 40042d8:	1885c83a 	sub	r2,r3,r2
 40042dc:	e0bffb15 	stw	r2,-20(fp)
      m2 -= i;
 40042e0:	e0fff017 	ldw	r3,-64(fp)
 40042e4:	e0bff817 	ldw	r2,-32(fp)
 40042e8:	1885c83a 	sub	r2,r3,r2
 40042ec:	e0bff015 	stw	r2,-64(fp)
      s2 -= i;
 40042f0:	e0ffee17 	ldw	r3,-72(fp)
 40042f4:	e0bff817 	ldw	r2,-32(fp)
 40042f8:	1885c83a 	sub	r2,r3,r2
 40042fc:	e0bfee15 	stw	r2,-72(fp)
    }
  if (b5 > 0)
 4004300:	e0bffa17 	ldw	r2,-24(fp)
 4004304:	0080240e 	bge	zero,r2,4004398 <_dtoa_r+0x1440>
    {
      if (leftright)
 4004308:	e0bff117 	ldw	r2,-60(fp)
 400430c:	10001d26 	beq	r2,zero,4004384 <_dtoa_r+0x142c>
	{
	  if (m5 > 0)
 4004310:	e0bfef17 	ldw	r2,-68(fp)
 4004314:	00800f0e 	bge	zero,r2,4004354 <_dtoa_r+0x13fc>
	    {
	      mhi = pow5mult (ptr, mhi, m5);
 4004318:	e1bfef17 	ldw	r6,-68(fp)
 400431c:	e17fe717 	ldw	r5,-100(fp)
 4004320:	e13fd017 	ldw	r4,-192(fp)
 4004324:	40083c00 	call	40083c0 <__pow5mult>
 4004328:	e0bfe715 	stw	r2,-100(fp)
	      b1 = mult (ptr, mhi, b);
 400432c:	e1bfe917 	ldw	r6,-92(fp)
 4004330:	e17fe717 	ldw	r5,-100(fp)
 4004334:	e13fd017 	ldw	r4,-192(fp)
 4004338:	4007fe40 	call	4007fe4 <__multiply>
 400433c:	e0bfdb15 	stw	r2,-148(fp)
	      Bfree (ptr, b);
 4004340:	e17fe917 	ldw	r5,-92(fp)
 4004344:	e13fd017 	ldw	r4,-192(fp)
 4004348:	4007a040 	call	4007a04 <_Bfree>
	      b = b1;
 400434c:	e0bfdb17 	ldw	r2,-148(fp)
 4004350:	e0bfe915 	stw	r2,-92(fp)
	    }
         if ((j = b5 - m5) != 0)
 4004354:	e0fffa17 	ldw	r3,-24(fp)
 4004358:	e0bfef17 	ldw	r2,-68(fp)
 400435c:	1885c83a 	sub	r2,r3,r2
 4004360:	e0bff415 	stw	r2,-48(fp)
 4004364:	e0bff417 	ldw	r2,-48(fp)
 4004368:	10000b26 	beq	r2,zero,4004398 <_dtoa_r+0x1440>
	    b = pow5mult (ptr, b, j);
 400436c:	e1bff417 	ldw	r6,-48(fp)
 4004370:	e17fe917 	ldw	r5,-92(fp)
 4004374:	e13fd017 	ldw	r4,-192(fp)
 4004378:	40083c00 	call	40083c0 <__pow5mult>
 400437c:	e0bfe915 	stw	r2,-92(fp)
 4004380:	00000506 	br	4004398 <_dtoa_r+0x1440>
	}
      else
	b = pow5mult (ptr, b, b5);
 4004384:	e1bffa17 	ldw	r6,-24(fp)
 4004388:	e17fe917 	ldw	r5,-92(fp)
 400438c:	e13fd017 	ldw	r4,-192(fp)
 4004390:	40083c00 	call	40083c0 <__pow5mult>
 4004394:	e0bfe915 	stw	r2,-92(fp)
    }
  S = i2b (ptr, 1);
 4004398:	01400044 	movi	r5,1
 400439c:	e13fd017 	ldw	r4,-192(fp)
 40043a0:	4007f600 	call	4007f60 <__i2b>
 40043a4:	e0bfe615 	stw	r2,-104(fp)
  if (s5 > 0)
 40043a8:	e0bfed17 	ldw	r2,-76(fp)
 40043ac:	0080050e 	bge	zero,r2,40043c4 <_dtoa_r+0x146c>
    S = pow5mult (ptr, S, s5);
 40043b0:	e1bfed17 	ldw	r6,-76(fp)
 40043b4:	e17fe617 	ldw	r5,-104(fp)
 40043b8:	e13fd017 	ldw	r4,-192(fp)
 40043bc:	40083c00 	call	40083c0 <__pow5mult>
 40043c0:	e0bfe615 	stw	r2,-104(fp)

  /* Check for special case that d is a normalized power of 2. */

  spec_case = 0;
 40043c4:	e03fec15 	stw	zero,-80(fp)
  if (mode < 2)
 40043c8:	e0bfcd17 	ldw	r2,-204(fp)
 40043cc:	10800088 	cmpgei	r2,r2,2
 40043d0:	1000121e 	bne	r2,zero,400441c <_dtoa_r+0x14c4>
    {
      if (!word1 (d) && !(word0 (d) & Bndry_mask)
 40043d4:	e0bfd517 	ldw	r2,-172(fp)
 40043d8:	1000101e 	bne	r2,zero,400441c <_dtoa_r+0x14c4>
 40043dc:	e0ffd617 	ldw	r3,-168(fp)
 40043e0:	00800434 	movhi	r2,16
 40043e4:	10bfffc4 	addi	r2,r2,-1
 40043e8:	1884703a 	and	r2,r3,r2
 40043ec:	10000b1e 	bne	r2,zero,400441c <_dtoa_r+0x14c4>
#ifndef Sudden_Underflow
	  && word0 (d) & Exp_mask
 40043f0:	e0bfd617 	ldw	r2,-168(fp)
 40043f4:	109ffc2c 	andhi	r2,r2,32752
 40043f8:	10000826 	beq	r2,zero,400441c <_dtoa_r+0x14c4>
#endif
	)
	{
	  /* The special case */
	  b2 += Log2P;
 40043fc:	e0bffb17 	ldw	r2,-20(fp)
 4004400:	10800044 	addi	r2,r2,1
 4004404:	e0bffb15 	stw	r2,-20(fp)
	  s2 += Log2P;
 4004408:	e0bfee17 	ldw	r2,-72(fp)
 400440c:	10800044 	addi	r2,r2,1
 4004410:	e0bfee15 	stw	r2,-72(fp)
	  spec_case = 1;
 4004414:	00800044 	movi	r2,1
 4004418:	e0bfec15 	stw	r2,-80(fp)
   * and for all and pass them and a shift to quorem, so it
   * can do shifts and ors to compute the numerator for q.
   */

#ifdef Pack_32
  if ((i = ((s5 ? 32 - hi0bits (S->_x[S->_wds - 1]) : 1) + s2) & 0x1f) != 0)
 400441c:	e0bfed17 	ldw	r2,-76(fp)
 4004420:	10000e26 	beq	r2,zero,400445c <_dtoa_r+0x1504>
 4004424:	e0bfe617 	ldw	r2,-104(fp)
 4004428:	10800417 	ldw	r2,16(r2)
 400442c:	10bfffc4 	addi	r2,r2,-1
 4004430:	e0ffe617 	ldw	r3,-104(fp)
 4004434:	10800144 	addi	r2,r2,5
 4004438:	100490ba 	slli	r2,r2,2
 400443c:	1885883a 	add	r2,r3,r2
 4004440:	10800017 	ldw	r2,0(r2)
 4004444:	1009883a 	mov	r4,r2
 4004448:	4007de80 	call	4007de8 <__hi0bits>
 400444c:	1007883a 	mov	r3,r2
 4004450:	00800804 	movi	r2,32
 4004454:	10c5c83a 	sub	r2,r2,r3
 4004458:	00000106 	br	4004460 <_dtoa_r+0x1508>
 400445c:	00800044 	movi	r2,1
 4004460:	e0ffee17 	ldw	r3,-72(fp)
 4004464:	10c5883a 	add	r2,r2,r3
 4004468:	108007cc 	andi	r2,r2,31
 400446c:	e0bff815 	stw	r2,-32(fp)
 4004470:	e0bff817 	ldw	r2,-32(fp)
 4004474:	10000426 	beq	r2,zero,4004488 <_dtoa_r+0x1530>
    i = 32 - i;
 4004478:	00c00804 	movi	r3,32
 400447c:	e0bff817 	ldw	r2,-32(fp)
 4004480:	1885c83a 	sub	r2,r3,r2
 4004484:	e0bff815 	stw	r2,-32(fp)
#else
  if ((i = ((s5 ? 32 - hi0bits (S->_x[S->_wds - 1]) : 1) + s2) & 0xf) != 0)
    i = 16 - i;
#endif
  if (i > 4)
 4004488:	e0bff817 	ldw	r2,-32(fp)
 400448c:	10800150 	cmplti	r2,r2,5
 4004490:	1000101e 	bne	r2,zero,40044d4 <_dtoa_r+0x157c>
    {
      i -= 4;
 4004494:	e0bff817 	ldw	r2,-32(fp)
 4004498:	10bfff04 	addi	r2,r2,-4
 400449c:	e0bff815 	stw	r2,-32(fp)
      b2 += i;
 40044a0:	e0fffb17 	ldw	r3,-20(fp)
 40044a4:	e0bff817 	ldw	r2,-32(fp)
 40044a8:	1885883a 	add	r2,r3,r2
 40044ac:	e0bffb15 	stw	r2,-20(fp)
      m2 += i;
 40044b0:	e0fff017 	ldw	r3,-64(fp)
 40044b4:	e0bff817 	ldw	r2,-32(fp)
 40044b8:	1885883a 	add	r2,r3,r2
 40044bc:	e0bff015 	stw	r2,-64(fp)
      s2 += i;
 40044c0:	e0ffee17 	ldw	r3,-72(fp)
 40044c4:	e0bff817 	ldw	r2,-32(fp)
 40044c8:	1885883a 	add	r2,r3,r2
 40044cc:	e0bfee15 	stw	r2,-72(fp)
 40044d0:	00001206 	br	400451c <_dtoa_r+0x15c4>
    }
  else if (i < 4)
 40044d4:	e0bff817 	ldw	r2,-32(fp)
 40044d8:	10800108 	cmpgei	r2,r2,4
 40044dc:	10000f1e 	bne	r2,zero,400451c <_dtoa_r+0x15c4>
    {
      i += 28;
 40044e0:	e0bff817 	ldw	r2,-32(fp)
 40044e4:	10800704 	addi	r2,r2,28
 40044e8:	e0bff815 	stw	r2,-32(fp)
      b2 += i;
 40044ec:	e0fffb17 	ldw	r3,-20(fp)
 40044f0:	e0bff817 	ldw	r2,-32(fp)
 40044f4:	1885883a 	add	r2,r3,r2
 40044f8:	e0bffb15 	stw	r2,-20(fp)
      m2 += i;
 40044fc:	e0fff017 	ldw	r3,-64(fp)
 4004500:	e0bff817 	ldw	r2,-32(fp)
 4004504:	1885883a 	add	r2,r3,r2
 4004508:	e0bff015 	stw	r2,-64(fp)
      s2 += i;
 400450c:	e0ffee17 	ldw	r3,-72(fp)
 4004510:	e0bff817 	ldw	r2,-32(fp)
 4004514:	1885883a 	add	r2,r3,r2
 4004518:	e0bfee15 	stw	r2,-72(fp)
    }
  if (b2 > 0)
 400451c:	e0bffb17 	ldw	r2,-20(fp)
 4004520:	0080050e 	bge	zero,r2,4004538 <_dtoa_r+0x15e0>
    b = lshift (ptr, b, b2);
 4004524:	e1bffb17 	ldw	r6,-20(fp)
 4004528:	e17fe917 	ldw	r5,-92(fp)
 400452c:	e13fd017 	ldw	r4,-192(fp)
 4004530:	40085300 	call	4008530 <__lshift>
 4004534:	e0bfe915 	stw	r2,-92(fp)
  if (s2 > 0)
 4004538:	e0bfee17 	ldw	r2,-72(fp)
 400453c:	0080050e 	bge	zero,r2,4004554 <_dtoa_r+0x15fc>
    S = lshift (ptr, S, s2);
 4004540:	e1bfee17 	ldw	r6,-72(fp)
 4004544:	e17fe617 	ldw	r5,-104(fp)
 4004548:	e13fd017 	ldw	r4,-192(fp)
 400454c:	40085300 	call	4008530 <__lshift>
 4004550:	e0bfe615 	stw	r2,-104(fp)
  if (k_check)
 4004554:	e0bff217 	ldw	r2,-56(fp)
 4004558:	10001726 	beq	r2,zero,40045b8 <_dtoa_r+0x1660>
    {
      if (cmp (b, S) < 0)
 400455c:	e17fe617 	ldw	r5,-104(fp)
 4004560:	e13fe917 	ldw	r4,-92(fp)
 4004564:	400874c0 	call	400874c <__mcmp>
 4004568:	1000130e 	bge	r2,zero,40045b8 <_dtoa_r+0x1660>
	{
	  k--;
 400456c:	e0bff317 	ldw	r2,-52(fp)
 4004570:	10bfffc4 	addi	r2,r2,-1
 4004574:	e0bff315 	stw	r2,-52(fp)
	  b = multadd (ptr, b, 10, 0);	/* we botched the k estimate */
 4004578:	000f883a 	mov	r7,zero
 400457c:	01800284 	movi	r6,10
 4004580:	e17fe917 	ldw	r5,-92(fp)
 4004584:	e13fd017 	ldw	r4,-192(fp)
 4004588:	4007a780 	call	4007a78 <__multadd>
 400458c:	e0bfe915 	stw	r2,-92(fp)
	  if (leftright)
 4004590:	e0bff117 	ldw	r2,-60(fp)
 4004594:	10000626 	beq	r2,zero,40045b0 <_dtoa_r+0x1658>
	    mhi = multadd (ptr, mhi, 10, 0);
 4004598:	000f883a 	mov	r7,zero
 400459c:	01800284 	movi	r6,10
 40045a0:	e17fe717 	ldw	r5,-100(fp)
 40045a4:	e13fd017 	ldw	r4,-192(fp)
 40045a8:	4007a780 	call	4007a78 <__multadd>
 40045ac:	e0bfe715 	stw	r2,-100(fp)
	  ilim = ilim1;
 40045b0:	e0bff517 	ldw	r2,-44(fp)
 40045b4:	e0bff615 	stw	r2,-40(fp)
	}
    }
  if (ilim <= 0 && mode > 2)
 40045b8:	e0bff617 	ldw	r2,-40(fp)
 40045bc:	00802516 	blt	zero,r2,4004654 <_dtoa_r+0x16fc>
 40045c0:	e0bfcd17 	ldw	r2,-204(fp)
 40045c4:	108000d0 	cmplti	r2,r2,3
 40045c8:	1000221e 	bne	r2,zero,4004654 <_dtoa_r+0x16fc>
    {
      if (ilim < 0 || cmp (b, S = multadd (ptr, S, 5, 0)) <= 0)
 40045cc:	e0bff617 	ldw	r2,-40(fp)
 40045d0:	10000f16 	blt	r2,zero,4004610 <_dtoa_r+0x16b8>
 40045d4:	000f883a 	mov	r7,zero
 40045d8:	01800144 	movi	r6,5
 40045dc:	e17fe617 	ldw	r5,-104(fp)
 40045e0:	e13fd017 	ldw	r4,-192(fp)
 40045e4:	4007a780 	call	4007a78 <__multadd>
 40045e8:	e0bfe615 	stw	r2,-104(fp)
 40045ec:	e17fe617 	ldw	r5,-104(fp)
 40045f0:	e13fe917 	ldw	r4,-92(fp)
 40045f4:	400874c0 	call	400874c <__mcmp>
 40045f8:	00800c16 	blt	zero,r2,400462c <_dtoa_r+0x16d4>
	{
	  /* no digits, fcvt style */
	no_digits:
 40045fc:	00000406 	br	4004610 <_dtoa_r+0x16b8>
	    goto no_digits;
 4004600:	0001883a 	nop
 4004604:	00000306 	br	4004614 <_dtoa_r+0x16bc>
	    goto no_digits;
 4004608:	0001883a 	nop
 400460c:	00000106 	br	4004614 <_dtoa_r+0x16bc>
	no_digits:
 4004610:	0001883a 	nop
	  k = -1 - ndigits;
 4004614:	e0800217 	ldw	r2,8(fp)
 4004618:	0084303a 	nor	r2,zero,r2
 400461c:	e0bff315 	stw	r2,-52(fp)
	  goto ret;
 4004620:	00012c06 	br	4004ad4 <_dtoa_r+0x1b7c>
	    goto one_digit;
 4004624:	0001883a 	nop
 4004628:	00000106 	br	4004630 <_dtoa_r+0x16d8>
	}
    one_digit:
 400462c:	0001883a 	nop
      *s++ = '1';
 4004630:	e0bfe317 	ldw	r2,-116(fp)
 4004634:	10c00044 	addi	r3,r2,1
 4004638:	e0ffe315 	stw	r3,-116(fp)
 400463c:	00c00c44 	movi	r3,49
 4004640:	10c00005 	stb	r3,0(r2)
      k++;
 4004644:	e0bff317 	ldw	r2,-52(fp)
 4004648:	10800044 	addi	r2,r2,1
 400464c:	e0bff315 	stw	r2,-52(fp)
      goto ret;
 4004650:	00012006 	br	4004ad4 <_dtoa_r+0x1b7c>
    }
  if (leftright)
 4004654:	e0bff117 	ldw	r2,-60(fp)
 4004658:	1000c626 	beq	r2,zero,4004974 <_dtoa_r+0x1a1c>
    {
      if (m2 > 0)
 400465c:	e0bff017 	ldw	r2,-64(fp)
 4004660:	0080050e 	bge	zero,r2,4004678 <_dtoa_r+0x1720>
	mhi = lshift (ptr, mhi, m2);
 4004664:	e1bff017 	ldw	r6,-64(fp)
 4004668:	e17fe717 	ldw	r5,-100(fp)
 400466c:	e13fd017 	ldw	r4,-192(fp)
 4004670:	40085300 	call	4008530 <__lshift>
 4004674:	e0bfe715 	stw	r2,-100(fp)

      /* Compute mlo -- check for special case
       * that d is a normalized power of 2.
       */

      mlo = mhi;
 4004678:	e0bfe717 	ldw	r2,-100(fp)
 400467c:	e0bfe815 	stw	r2,-96(fp)
      if (spec_case)
 4004680:	e0bfec17 	ldw	r2,-80(fp)
 4004684:	10002226 	beq	r2,zero,4004710 <_dtoa_r+0x17b8>
	{
	  mhi = eBalloc (ptr, mhi->_k);
 4004688:	e0bfe717 	ldw	r2,-100(fp)
 400468c:	10800117 	ldw	r2,4(r2)
 4004690:	100b883a 	mov	r5,r2
 4004694:	e13fd017 	ldw	r4,-192(fp)
 4004698:	40078e00 	call	40078e0 <_Balloc>
 400469c:	e0bfda15 	stw	r2,-152(fp)
 40046a0:	e0bfda17 	ldw	r2,-152(fp)
 40046a4:	1000071e 	bne	r2,zero,40046c4 <_dtoa_r+0x176c>
 40046a8:	01c10074 	movhi	r7,1025
 40046ac:	39cdc604 	addi	r7,r7,14104
 40046b0:	000d883a 	mov	r6,zero
 40046b4:	0140ba84 	movi	r5,746
 40046b8:	01010074 	movhi	r4,1025
 40046bc:	210dcb04 	addi	r4,r4,14124
 40046c0:	400b01c0 	call	400b01c <__assert_func>
 40046c4:	e0bfda17 	ldw	r2,-152(fp)
 40046c8:	e0bfe715 	stw	r2,-100(fp)
	  Bcopy (mhi, mlo);
 40046cc:	e0bfe717 	ldw	r2,-100(fp)
 40046d0:	10c00304 	addi	r3,r2,12
 40046d4:	e0bfe817 	ldw	r2,-96(fp)
 40046d8:	11000304 	addi	r4,r2,12
 40046dc:	e0bfe817 	ldw	r2,-96(fp)
 40046e0:	10800417 	ldw	r2,16(r2)
 40046e4:	10800084 	addi	r2,r2,2
 40046e8:	100490ba 	slli	r2,r2,2
 40046ec:	100d883a 	mov	r6,r2
 40046f0:	200b883a 	mov	r5,r4
 40046f4:	1809883a 	mov	r4,r3
 40046f8:	40075940 	call	4007594 <memcpy>
	  mhi = lshift (ptr, mhi, Log2P);
 40046fc:	01800044 	movi	r6,1
 4004700:	e17fe717 	ldw	r5,-100(fp)
 4004704:	e13fd017 	ldw	r4,-192(fp)
 4004708:	40085300 	call	4008530 <__lshift>
 400470c:	e0bfe715 	stw	r2,-100(fp)
	}

      for (i = 1;; i++)
 4004710:	00800044 	movi	r2,1
 4004714:	e0bff815 	stw	r2,-32(fp)
	{
	  dig = quorem (b, S) + '0';
 4004718:	e17fe617 	ldw	r5,-104(fp)
 400471c:	e13fe917 	ldw	r4,-92(fp)
 4004720:	4002bb40 	call	4002bb4 <quorem>
 4004724:	10800c04 	addi	r2,r2,48
 4004728:	e0bff915 	stw	r2,-28(fp)
	  /* Do we yet have the shortest decimal string
	   * that will round to d?
	   */
	  j = cmp (b, mlo);
 400472c:	e17fe817 	ldw	r5,-96(fp)
 4004730:	e13fe917 	ldw	r4,-92(fp)
 4004734:	400874c0 	call	400874c <__mcmp>
 4004738:	e0bff415 	stw	r2,-48(fp)
	  delta = diff (ptr, S, mhi);
 400473c:	e1bfe717 	ldw	r6,-100(fp)
 4004740:	e17fe617 	ldw	r5,-104(fp)
 4004744:	e13fd017 	ldw	r4,-192(fp)
 4004748:	40088500 	call	4008850 <__mdiff>
 400474c:	e0bfd915 	stw	r2,-156(fp)
	  j1 = delta->_sign ? 1 : cmp (b, delta);
 4004750:	e0bfd917 	ldw	r2,-156(fp)
 4004754:	10800317 	ldw	r2,12(r2)
 4004758:	1000041e 	bne	r2,zero,400476c <_dtoa_r+0x1814>
 400475c:	e17fd917 	ldw	r5,-156(fp)
 4004760:	e13fe917 	ldw	r4,-92(fp)
 4004764:	400874c0 	call	400874c <__mcmp>
 4004768:	00000106 	br	4004770 <_dtoa_r+0x1818>
 400476c:	00800044 	movi	r2,1
 4004770:	e0bfdd15 	stw	r2,-140(fp)
	  Bfree (ptr, delta);
 4004774:	e17fd917 	ldw	r5,-156(fp)
 4004778:	e13fd017 	ldw	r4,-192(fp)
 400477c:	4007a040 	call	4007a04 <_Bfree>
#ifndef ROUND_BIASED
	  if (j1 == 0 && !mode && !(word1 (d) & 1))
 4004780:	e0bfdd17 	ldw	r2,-140(fp)
 4004784:	1000131e 	bne	r2,zero,40047d4 <_dtoa_r+0x187c>
 4004788:	e0bfcd17 	ldw	r2,-204(fp)
 400478c:	1000111e 	bne	r2,zero,40047d4 <_dtoa_r+0x187c>
 4004790:	e0bfd517 	ldw	r2,-172(fp)
 4004794:	1080004c 	andi	r2,r2,1
 4004798:	10000e1e 	bne	r2,zero,40047d4 <_dtoa_r+0x187c>
	    {
	      if (dig == '9')
 400479c:	e0bff917 	ldw	r2,-28(fp)
 40047a0:	10800e58 	cmpnei	r2,r2,57
 40047a4:	10003726 	beq	r2,zero,4004884 <_dtoa_r+0x192c>
		goto round_9_up;
	      if (j > 0)
 40047a8:	e0bff417 	ldw	r2,-48(fp)
 40047ac:	0080030e 	bge	zero,r2,40047bc <_dtoa_r+0x1864>
		dig++;
 40047b0:	e0bff917 	ldw	r2,-28(fp)
 40047b4:	10800044 	addi	r2,r2,1
 40047b8:	e0bff915 	stw	r2,-28(fp)
	      *s++ = dig;
 40047bc:	e0bfe317 	ldw	r2,-116(fp)
 40047c0:	10c00044 	addi	r3,r2,1
 40047c4:	e0ffe315 	stw	r3,-116(fp)
 40047c8:	e0fff917 	ldw	r3,-28(fp)
 40047cc:	10c00005 	stb	r3,0(r2)
	      goto ret;
 40047d0:	0000c006 	br	4004ad4 <_dtoa_r+0x1b7c>
	    }
#endif
         if ((j < 0) || ((j == 0) && !mode
 40047d4:	e0bff417 	ldw	r2,-48(fp)
 40047d8:	10000716 	blt	r2,zero,40047f8 <_dtoa_r+0x18a0>
 40047dc:	e0bff417 	ldw	r2,-48(fp)
 40047e0:	1000221e 	bne	r2,zero,400486c <_dtoa_r+0x1914>
 40047e4:	e0bfcd17 	ldw	r2,-204(fp)
 40047e8:	1000201e 	bne	r2,zero,400486c <_dtoa_r+0x1914>
#ifndef ROUND_BIASED
	      && !(word1 (d) & 1)
 40047ec:	e0bfd517 	ldw	r2,-172(fp)
 40047f0:	1080004c 	andi	r2,r2,1
 40047f4:	10001d1e 	bne	r2,zero,400486c <_dtoa_r+0x1914>
#endif
           ))
	    {
	      if (j1 > 0)
 40047f8:	e0bfdd17 	ldw	r2,-140(fp)
 40047fc:	0080150e 	bge	zero,r2,4004854 <_dtoa_r+0x18fc>
		{
		  b = lshift (ptr, b, 1);
 4004800:	01800044 	movi	r6,1
 4004804:	e17fe917 	ldw	r5,-92(fp)
 4004808:	e13fd017 	ldw	r4,-192(fp)
 400480c:	40085300 	call	4008530 <__lshift>
 4004810:	e0bfe915 	stw	r2,-92(fp)
		  j1 = cmp (b, S);
 4004814:	e17fe617 	ldw	r5,-104(fp)
 4004818:	e13fe917 	ldw	r4,-92(fp)
 400481c:	400874c0 	call	400874c <__mcmp>
 4004820:	e0bfdd15 	stw	r2,-140(fp)
                 if (((j1 > 0) || ((j1 == 0) && (dig & 1)))
 4004824:	e0bfdd17 	ldw	r2,-140(fp)
 4004828:	00800516 	blt	zero,r2,4004840 <_dtoa_r+0x18e8>
 400482c:	e0bfdd17 	ldw	r2,-140(fp)
 4004830:	1000081e 	bne	r2,zero,4004854 <_dtoa_r+0x18fc>
 4004834:	e0bff917 	ldw	r2,-28(fp)
 4004838:	1080004c 	andi	r2,r2,1
 400483c:	10000526 	beq	r2,zero,4004854 <_dtoa_r+0x18fc>
		      && dig++ == '9')
 4004840:	e0bff917 	ldw	r2,-28(fp)
 4004844:	10c00044 	addi	r3,r2,1
 4004848:	e0fff915 	stw	r3,-28(fp)
 400484c:	10800e58 	cmpnei	r2,r2,57
 4004850:	10000e26 	beq	r2,zero,400488c <_dtoa_r+0x1934>
		    goto round_9_up;
		}
	      *s++ = dig;
 4004854:	e0bfe317 	ldw	r2,-116(fp)
 4004858:	10c00044 	addi	r3,r2,1
 400485c:	e0ffe315 	stw	r3,-116(fp)
 4004860:	e0fff917 	ldw	r3,-28(fp)
 4004864:	10c00005 	stb	r3,0(r2)
	      goto ret;
 4004868:	00009a06 	br	4004ad4 <_dtoa_r+0x1b7c>
	    }
	  if (j1 > 0)
 400486c:	e0bfdd17 	ldw	r2,-140(fp)
 4004870:	0080160e 	bge	zero,r2,40048cc <_dtoa_r+0x1974>
	    {
	      if (dig == '9')
 4004874:	e0bff917 	ldw	r2,-28(fp)
 4004878:	10800e58 	cmpnei	r2,r2,57
 400487c:	10000a1e 	bne	r2,zero,40048a8 <_dtoa_r+0x1950>
		{		/* possible if i == 1 */
		round_9_up:
 4004880:	00000306 	br	4004890 <_dtoa_r+0x1938>
		goto round_9_up;
 4004884:	0001883a 	nop
 4004888:	00000106 	br	4004890 <_dtoa_r+0x1938>
		    goto round_9_up;
 400488c:	0001883a 	nop
		  *s++ = '9';
 4004890:	e0bfe317 	ldw	r2,-116(fp)
 4004894:	10c00044 	addi	r3,r2,1
 4004898:	e0ffe315 	stw	r3,-116(fp)
 400489c:	00c00e44 	movi	r3,57
 40048a0:	10c00005 	stb	r3,0(r2)
		  goto roundoff;
 40048a4:	00006006 	br	4004a28 <_dtoa_r+0x1ad0>
		}
	      *s++ = dig + 1;
 40048a8:	e0bff917 	ldw	r2,-28(fp)
 40048ac:	10800044 	addi	r2,r2,1
 40048b0:	1009883a 	mov	r4,r2
 40048b4:	e0bfe317 	ldw	r2,-116(fp)
 40048b8:	10c00044 	addi	r3,r2,1
 40048bc:	e0ffe315 	stw	r3,-116(fp)
 40048c0:	2007883a 	mov	r3,r4
 40048c4:	10c00005 	stb	r3,0(r2)
	      goto ret;
 40048c8:	00008206 	br	4004ad4 <_dtoa_r+0x1b7c>
	    }
	  *s++ = dig;
 40048cc:	e0bfe317 	ldw	r2,-116(fp)
 40048d0:	10c00044 	addi	r3,r2,1
 40048d4:	e0ffe315 	stw	r3,-116(fp)
 40048d8:	e0fff917 	ldw	r3,-28(fp)
 40048dc:	10c00005 	stb	r3,0(r2)
	  if (i == ilim)
 40048e0:	e0fff817 	ldw	r3,-32(fp)
 40048e4:	e0bff617 	ldw	r2,-40(fp)
 40048e8:	18803b26 	beq	r3,r2,40049d8 <_dtoa_r+0x1a80>
	    break;
	  b = multadd (ptr, b, 10, 0);
 40048ec:	000f883a 	mov	r7,zero
 40048f0:	01800284 	movi	r6,10
 40048f4:	e17fe917 	ldw	r5,-92(fp)
 40048f8:	e13fd017 	ldw	r4,-192(fp)
 40048fc:	4007a780 	call	4007a78 <__multadd>
 4004900:	e0bfe915 	stw	r2,-92(fp)
	  if (mlo == mhi)
 4004904:	e0ffe817 	ldw	r3,-96(fp)
 4004908:	e0bfe717 	ldw	r2,-100(fp)
 400490c:	1880091e 	bne	r3,r2,4004934 <_dtoa_r+0x19dc>
	    mlo = mhi = multadd (ptr, mhi, 10, 0);
 4004910:	000f883a 	mov	r7,zero
 4004914:	01800284 	movi	r6,10
 4004918:	e17fe717 	ldw	r5,-100(fp)
 400491c:	e13fd017 	ldw	r4,-192(fp)
 4004920:	4007a780 	call	4007a78 <__multadd>
 4004924:	e0bfe715 	stw	r2,-100(fp)
 4004928:	e0bfe717 	ldw	r2,-100(fp)
 400492c:	e0bfe815 	stw	r2,-96(fp)
 4004930:	00000c06 	br	4004964 <_dtoa_r+0x1a0c>
	  else
	    {
	      mlo = multadd (ptr, mlo, 10, 0);
 4004934:	000f883a 	mov	r7,zero
 4004938:	01800284 	movi	r6,10
 400493c:	e17fe817 	ldw	r5,-96(fp)
 4004940:	e13fd017 	ldw	r4,-192(fp)
 4004944:	4007a780 	call	4007a78 <__multadd>
 4004948:	e0bfe815 	stw	r2,-96(fp)
	      mhi = multadd (ptr, mhi, 10, 0);
 400494c:	000f883a 	mov	r7,zero
 4004950:	01800284 	movi	r6,10
 4004954:	e17fe717 	ldw	r5,-100(fp)
 4004958:	e13fd017 	ldw	r4,-192(fp)
 400495c:	4007a780 	call	4007a78 <__multadd>
 4004960:	e0bfe715 	stw	r2,-100(fp)
      for (i = 1;; i++)
 4004964:	e0bff817 	ldw	r2,-32(fp)
 4004968:	10800044 	addi	r2,r2,1
 400496c:	e0bff815 	stw	r2,-32(fp)
	  dig = quorem (b, S) + '0';
 4004970:	003f6906 	br	4004718 <_dtoa_r+0x17c0>
	    }
	}
    }
  else
    for (i = 1;; i++)
 4004974:	00800044 	movi	r2,1
 4004978:	e0bff815 	stw	r2,-32(fp)
      {
	*s++ = dig = quorem (b, S) + '0';
 400497c:	e17fe617 	ldw	r5,-104(fp)
 4004980:	e13fe917 	ldw	r4,-92(fp)
 4004984:	4002bb40 	call	4002bb4 <quorem>
 4004988:	10800c04 	addi	r2,r2,48
 400498c:	e0bff915 	stw	r2,-28(fp)
 4004990:	e0bfe317 	ldw	r2,-116(fp)
 4004994:	10c00044 	addi	r3,r2,1
 4004998:	e0ffe315 	stw	r3,-116(fp)
 400499c:	e0fff917 	ldw	r3,-28(fp)
 40049a0:	10c00005 	stb	r3,0(r2)
	if (i >= ilim)
 40049a4:	e0fff817 	ldw	r3,-32(fp)
 40049a8:	e0bff617 	ldw	r2,-40(fp)
 40049ac:	18800c0e 	bge	r3,r2,40049e0 <_dtoa_r+0x1a88>
	  break;
	b = multadd (ptr, b, 10, 0);
 40049b0:	000f883a 	mov	r7,zero
 40049b4:	01800284 	movi	r6,10
 40049b8:	e17fe917 	ldw	r5,-92(fp)
 40049bc:	e13fd017 	ldw	r4,-192(fp)
 40049c0:	4007a780 	call	4007a78 <__multadd>
 40049c4:	e0bfe915 	stw	r2,-92(fp)
    for (i = 1;; i++)
 40049c8:	e0bff817 	ldw	r2,-32(fp)
 40049cc:	10800044 	addi	r2,r2,1
 40049d0:	e0bff815 	stw	r2,-32(fp)
	*s++ = dig = quorem (b, S) + '0';
 40049d4:	003fe906 	br	400497c <_dtoa_r+0x1a24>
	    break;
 40049d8:	0001883a 	nop
 40049dc:	00000106 	br	40049e4 <_dtoa_r+0x1a8c>
	  break;
 40049e0:	0001883a 	nop
      }

  /* Round off last digit */

  b = lshift (ptr, b, 1);
 40049e4:	01800044 	movi	r6,1
 40049e8:	e17fe917 	ldw	r5,-92(fp)
 40049ec:	e13fd017 	ldw	r4,-192(fp)
 40049f0:	40085300 	call	4008530 <__lshift>
 40049f4:	e0bfe915 	stw	r2,-92(fp)
  j = cmp (b, S);
 40049f8:	e17fe617 	ldw	r5,-104(fp)
 40049fc:	e13fe917 	ldw	r4,-92(fp)
 4004a00:	400874c0 	call	400874c <__mcmp>
 4004a04:	e0bff415 	stw	r2,-48(fp)
  if ((j > 0) || ((j == 0) && (dig & 1)))
 4004a08:	e0bff417 	ldw	r2,-48(fp)
 4004a0c:	00800516 	blt	zero,r2,4004a24 <_dtoa_r+0x1acc>
 4004a10:	e0bff417 	ldw	r2,-48(fp)
 4004a14:	1000221e 	bne	r2,zero,4004aa0 <_dtoa_r+0x1b48>
 4004a18:	e0bff917 	ldw	r2,-28(fp)
 4004a1c:	1080004c 	andi	r2,r2,1
 4004a20:	10001f26 	beq	r2,zero,4004aa0 <_dtoa_r+0x1b48>
    {
    roundoff:
 4004a24:	0001883a 	nop
      while (*--s == '9')
 4004a28:	00000c06 	br	4004a5c <_dtoa_r+0x1b04>
	if (s == s0)
 4004a2c:	e0ffe317 	ldw	r3,-116(fp)
 4004a30:	e0bfe017 	ldw	r2,-128(fp)
 4004a34:	1880091e 	bne	r3,r2,4004a5c <_dtoa_r+0x1b04>
	  {
	    k++;
 4004a38:	e0bff317 	ldw	r2,-52(fp)
 4004a3c:	10800044 	addi	r2,r2,1
 4004a40:	e0bff315 	stw	r2,-52(fp)
	    *s++ = '1';
 4004a44:	e0bfe317 	ldw	r2,-116(fp)
 4004a48:	10c00044 	addi	r3,r2,1
 4004a4c:	e0ffe315 	stw	r3,-116(fp)
 4004a50:	00c00c44 	movi	r3,49
 4004a54:	10c00005 	stb	r3,0(r2)
	    goto ret;
 4004a58:	00001e06 	br	4004ad4 <_dtoa_r+0x1b7c>
      while (*--s == '9')
 4004a5c:	e0bfe317 	ldw	r2,-116(fp)
 4004a60:	10bfffc4 	addi	r2,r2,-1
 4004a64:	e0bfe315 	stw	r2,-116(fp)
 4004a68:	e0bfe317 	ldw	r2,-116(fp)
 4004a6c:	10800003 	ldbu	r2,0(r2)
 4004a70:	10803fcc 	andi	r2,r2,255
 4004a74:	1080201c 	xori	r2,r2,128
 4004a78:	10bfe004 	addi	r2,r2,-128
 4004a7c:	10800e60 	cmpeqi	r2,r2,57
 4004a80:	103fea1e 	bne	r2,zero,4004a2c <_dtoa_r+0x1ad4>
	  }
      ++*s++;
 4004a84:	e0bfe317 	ldw	r2,-116(fp)
 4004a88:	10c00044 	addi	r3,r2,1
 4004a8c:	e0ffe315 	stw	r3,-116(fp)
 4004a90:	10c00003 	ldbu	r3,0(r2)
 4004a94:	18c00044 	addi	r3,r3,1
 4004a98:	10c00005 	stb	r3,0(r2)
 4004a9c:	00000d06 	br	4004ad4 <_dtoa_r+0x1b7c>
    }
  else
    {
      while (*--s == '0');
 4004aa0:	e0bfe317 	ldw	r2,-116(fp)
 4004aa4:	10bfffc4 	addi	r2,r2,-1
 4004aa8:	e0bfe315 	stw	r2,-116(fp)
 4004aac:	e0bfe317 	ldw	r2,-116(fp)
 4004ab0:	10800003 	ldbu	r2,0(r2)
 4004ab4:	10803fcc 	andi	r2,r2,255
 4004ab8:	1080201c 	xori	r2,r2,128
 4004abc:	10bfe004 	addi	r2,r2,-128
 4004ac0:	10800c20 	cmpeqi	r2,r2,48
 4004ac4:	103ff61e 	bne	r2,zero,4004aa0 <_dtoa_r+0x1b48>
      s++;
 4004ac8:	e0bfe317 	ldw	r2,-116(fp)
 4004acc:	10800044 	addi	r2,r2,1
 4004ad0:	e0bfe315 	stw	r2,-116(fp)
    }
ret:
  Bfree (ptr, S);
 4004ad4:	e17fe617 	ldw	r5,-104(fp)
 4004ad8:	e13fd017 	ldw	r4,-192(fp)
 4004adc:	4007a040 	call	4007a04 <_Bfree>
  if (mhi)
 4004ae0:	e0bfe717 	ldw	r2,-100(fp)
 4004ae4:	10000e26 	beq	r2,zero,4004b20 <_dtoa_r+0x1bc8>
    {
      if (mlo && mlo != mhi)
 4004ae8:	e0bfe817 	ldw	r2,-96(fp)
 4004aec:	10000626 	beq	r2,zero,4004b08 <_dtoa_r+0x1bb0>
 4004af0:	e0ffe817 	ldw	r3,-96(fp)
 4004af4:	e0bfe717 	ldw	r2,-100(fp)
 4004af8:	18800326 	beq	r3,r2,4004b08 <_dtoa_r+0x1bb0>
	Bfree (ptr, mlo);
 4004afc:	e17fe817 	ldw	r5,-96(fp)
 4004b00:	e13fd017 	ldw	r4,-192(fp)
 4004b04:	4007a040 	call	4007a04 <_Bfree>
      Bfree (ptr, mhi);
 4004b08:	e17fe717 	ldw	r5,-100(fp)
 4004b0c:	e13fd017 	ldw	r4,-192(fp)
 4004b10:	4007a040 	call	4007a04 <_Bfree>
 4004b14:	00000306 	br	4004b24 <_dtoa_r+0x1bcc>
		goto ret1;
 4004b18:	0001883a 	nop
 4004b1c:	00000106 	br	4004b24 <_dtoa_r+0x1bcc>
    }
ret1:
 4004b20:	0001883a 	nop
  Bfree (ptr, b);
 4004b24:	e17fe917 	ldw	r5,-92(fp)
 4004b28:	e13fd017 	ldw	r4,-192(fp)
 4004b2c:	4007a040 	call	4007a04 <_Bfree>
  *s = 0;
 4004b30:	e0bfe317 	ldw	r2,-116(fp)
 4004b34:	10000005 	stb	zero,0(r2)
  *decpt = k + 1;
 4004b38:	e0bff317 	ldw	r2,-52(fp)
 4004b3c:	10c00044 	addi	r3,r2,1
 4004b40:	e0800317 	ldw	r2,12(fp)
 4004b44:	10c00015 	stw	r3,0(r2)
  if (rve)
 4004b48:	e0800517 	ldw	r2,20(fp)
 4004b4c:	10000326 	beq	r2,zero,4004b5c <_dtoa_r+0x1c04>
    *rve = s;
 4004b50:	e0800517 	ldw	r2,20(fp)
 4004b54:	e0ffe317 	ldw	r3,-116(fp)
 4004b58:	10c00015 	stw	r3,0(r2)
  return s0;
 4004b5c:	e0bfe017 	ldw	r2,-128(fp)
}
 4004b60:	e6fffc04 	addi	sp,fp,-16
 4004b64:	dfc00517 	ldw	ra,20(sp)
 4004b68:	df000417 	ldw	fp,16(sp)
 4004b6c:	dcc00317 	ldw	r19,12(sp)
 4004b70:	dc800217 	ldw	r18,8(sp)
 4004b74:	dc400117 	ldw	r17,4(sp)
 4004b78:	dc000017 	ldw	r16,0(sp)
 4004b7c:	dec00604 	addi	sp,sp,24
 4004b80:	f800283a 	ret

04004b84 <__sflush_r>:
/* Core function which does not lock file pointer.  This gets called
   directly from __srefill. */
int
__sflush_r (struct _reent *ptr,
       register FILE * fp)
{
 4004b84:	defff504 	addi	sp,sp,-44
 4004b88:	dfc00a15 	stw	ra,40(sp)
 4004b8c:	df000915 	stw	fp,36(sp)
 4004b90:	dcc00815 	stw	r19,32(sp)
 4004b94:	dc800715 	stw	r18,28(sp)
 4004b98:	dc400615 	stw	r17,24(sp)
 4004b9c:	dc000515 	stw	r16,20(sp)
 4004ba0:	df000904 	addi	fp,sp,36
 4004ba4:	e13ff715 	stw	r4,-36(fp)
 4004ba8:	2821883a 	mov	r16,r5
  register unsigned char *p;
  register _READ_WRITE_BUFSIZE_TYPE n;
  register _READ_WRITE_RETURN_TYPE t;
  short flags;

  flags = fp->_flags;
 4004bac:	8080030b 	ldhu	r2,12(r16)
 4004bb0:	e0bff98d 	sth	r2,-26(fp)
  if ((flags & __SWR) == 0)
 4004bb4:	e0bff98b 	ldhu	r2,-26(fp)
 4004bb8:	10bfffcc 	andi	r2,r2,65535
 4004bbc:	1080020c 	andi	r2,r2,8
 4004bc0:	1000831e 	bne	r2,zero,4004dd0 <__sflush_r+0x24c>
    {
#ifdef _FSEEK_OPTIMIZATION
      /* For a read stream, an fflush causes the next seek to be
         unoptimized (i.e. forces a system-level seek).  This conforms
         to the POSIX and SUSv3 standards.  */
      fp->_flags |= __SNPT;
 4004bc4:	8080030b 	ldhu	r2,12(r16)
 4004bc8:	10820014 	ori	r2,r2,2048
 4004bcc:	8080030d 	sth	r2,12(r16)
         the next byte from the file rather than the buffer.  This conforms
         to the POSIX and SUSv3 standards.  Note that the standards allow
         this seek to be deferred until necessary, but we choose to do it here
         to make the change simpler, more contained, and less likely
         to miss a code scenario.  */
      if ((fp->_r > 0 || fp->_ur > 0) && fp->_seek != NULL)
 4004bd0:	80800117 	ldw	r2,4(r16)
 4004bd4:	00800216 	blt	zero,r2,4004be0 <__sflush_r+0x5c>
 4004bd8:	80800f17 	ldw	r2,60(r16)
 4004bdc:	00807a0e 	bge	zero,r2,4004dc8 <__sflush_r+0x244>
 4004be0:	80800a17 	ldw	r2,40(r16)
 4004be4:	10007826 	beq	r2,zero,4004dc8 <__sflush_r+0x244>
#endif

	  /* Save last errno and set errno to 0, so we can check if a device
	     returns with a valid position -1.  We restore the last errno if
	     no other error condition has been encountered. */
	  tmp_errno = ptr->_errno;
 4004be8:	e0bff717 	ldw	r2,-36(fp)
 4004bec:	10800017 	ldw	r2,0(r2)
 4004bf0:	e0bff815 	stw	r2,-32(fp)
	  ptr->_errno = 0;
 4004bf4:	e0bff717 	ldw	r2,-36(fp)
 4004bf8:	10000015 	stw	zero,0(r2)
	  /* Get the physical position we are at in the file.  */
	  if (fp->_flags & __SOFF)
 4004bfc:	8080030b 	ldhu	r2,12(r16)
 4004c00:	10bfffcc 	andi	r2,r2,65535
 4004c04:	1084000c 	andi	r2,r2,4096
 4004c08:	10000326 	beq	r2,zero,4004c18 <__sflush_r+0x94>
	    curoff = fp->_offset;
 4004c0c:	80801417 	ldw	r2,80(r16)
 4004c10:	e0bffb15 	stw	r2,-20(fp)
 4004c14:	00002206 	br	4004ca0 <__sflush_r+0x11c>
#ifdef __LARGE64_FILES
	      if (fp->_flags & __SL64)
		curoff = fp->_seek64 (ptr, fp->_cookie, 0, SEEK_CUR);
	      else
#endif
		curoff = fp->_seek (ptr, fp->_cookie, 0, SEEK_CUR);
 4004c18:	80800a17 	ldw	r2,40(r16)
 4004c1c:	80c00717 	ldw	r3,28(r16)
 4004c20:	01c00044 	movi	r7,1
 4004c24:	000d883a 	mov	r6,zero
 4004c28:	180b883a 	mov	r5,r3
 4004c2c:	e13ff717 	ldw	r4,-36(fp)
 4004c30:	103ee83a 	callr	r2
 4004c34:	e0bffb15 	stw	r2,-20(fp)
	      if (curoff == -1L && ptr->_errno != 0)
 4004c38:	e0bffb17 	ldw	r2,-20(fp)
 4004c3c:	10bfffd8 	cmpnei	r2,r2,-1
 4004c40:	1000171e 	bne	r2,zero,4004ca0 <__sflush_r+0x11c>
 4004c44:	e0bff717 	ldw	r2,-36(fp)
 4004c48:	10800017 	ldw	r2,0(r2)
 4004c4c:	10001426 	beq	r2,zero,4004ca0 <__sflush_r+0x11c>
		{
		  int result = EOF;
 4004c50:	00bfffc4 	movi	r2,-1
 4004c54:	e0bffa15 	stw	r2,-24(fp)
		  if (ptr->_errno == ESPIPE || ptr->_errno == EINVAL)
 4004c58:	e0bff717 	ldw	r2,-36(fp)
 4004c5c:	10800017 	ldw	r2,0(r2)
 4004c60:	10800760 	cmpeqi	r2,r2,29
 4004c64:	1000041e 	bne	r2,zero,4004c78 <__sflush_r+0xf4>
 4004c68:	e0bff717 	ldw	r2,-36(fp)
 4004c6c:	10800017 	ldw	r2,0(r2)
 4004c70:	10800598 	cmpnei	r2,r2,22
 4004c74:	1000051e 	bne	r2,zero,4004c8c <__sflush_r+0x108>
		    {
		      result = 0;
 4004c78:	e03ffa15 	stw	zero,-24(fp)
		      ptr->_errno = tmp_errno;
 4004c7c:	e0bff717 	ldw	r2,-36(fp)
 4004c80:	e0fff817 	ldw	r3,-32(fp)
 4004c84:	10c00015 	stw	r3,0(r2)
 4004c88:	00000306 	br	4004c98 <__sflush_r+0x114>
		    }
		  else
		    fp->_flags |= __SERR;
 4004c8c:	8080030b 	ldhu	r2,12(r16)
 4004c90:	10801014 	ori	r2,r2,64
 4004c94:	8080030d 	sth	r2,12(r16)
		  return result;
 4004c98:	e0bffa17 	ldw	r2,-24(fp)
 4004c9c:	00006f06 	br	4004e5c <__sflush_r+0x2d8>
		}
            }
          if (fp->_flags & __SRD)
 4004ca0:	8080030b 	ldhu	r2,12(r16)
 4004ca4:	10bfffcc 	andi	r2,r2,65535
 4004ca8:	1080010c 	andi	r2,r2,4
 4004cac:	10000a26 	beq	r2,zero,4004cd8 <__sflush_r+0x154>
            {
              /* Current offset is at end of buffer.  Compensate for
                 characters not yet read.  */
              curoff -= fp->_r;
 4004cb0:	80800117 	ldw	r2,4(r16)
 4004cb4:	e0fffb17 	ldw	r3,-20(fp)
 4004cb8:	1885c83a 	sub	r2,r3,r2
 4004cbc:	e0bffb15 	stw	r2,-20(fp)
              if (HASUB (fp))
 4004cc0:	80800c17 	ldw	r2,48(r16)
 4004cc4:	10000426 	beq	r2,zero,4004cd8 <__sflush_r+0x154>
                curoff -= fp->_ur;
 4004cc8:	80800f17 	ldw	r2,60(r16)
 4004ccc:	e0fffb17 	ldw	r3,-20(fp)
 4004cd0:	1885c83a 	sub	r2,r3,r2
 4004cd4:	e0bffb15 	stw	r2,-20(fp)
#ifdef __LARGE64_FILES
	  if (fp->_flags & __SL64)
	    curoff = fp->_seek64 (ptr, fp->_cookie, curoff, SEEK_SET);
	  else
#endif
	    curoff = fp->_seek (ptr, fp->_cookie, curoff, SEEK_SET);
 4004cd8:	80800a17 	ldw	r2,40(r16)
 4004cdc:	80c00717 	ldw	r3,28(r16)
 4004ce0:	000f883a 	mov	r7,zero
 4004ce4:	e1bffb17 	ldw	r6,-20(fp)
 4004ce8:	180b883a 	mov	r5,r3
 4004cec:	e13ff717 	ldw	r4,-36(fp)
 4004cf0:	103ee83a 	callr	r2
 4004cf4:	e0bffb15 	stw	r2,-20(fp)
	  if (curoff != -1 || ptr->_errno == 0
 4004cf8:	e0bffb17 	ldw	r2,-20(fp)
 4004cfc:	10bfffd8 	cmpnei	r2,r2,-1
 4004d00:	10000b1e 	bne	r2,zero,4004d30 <__sflush_r+0x1ac>
 4004d04:	e0bff717 	ldw	r2,-36(fp)
 4004d08:	10800017 	ldw	r2,0(r2)
 4004d0c:	10000826 	beq	r2,zero,4004d30 <__sflush_r+0x1ac>
	      || ptr->_errno == ESPIPE || ptr->_errno == EINVAL)
 4004d10:	e0bff717 	ldw	r2,-36(fp)
 4004d14:	10800017 	ldw	r2,0(r2)
 4004d18:	10800760 	cmpeqi	r2,r2,29
 4004d1c:	1000041e 	bne	r2,zero,4004d30 <__sflush_r+0x1ac>
 4004d20:	e0bff717 	ldw	r2,-36(fp)
 4004d24:	10800017 	ldw	r2,0(r2)
 4004d28:	10800598 	cmpnei	r2,r2,22
 4004d2c:	1000211e 	bne	r2,zero,4004db4 <__sflush_r+0x230>
	    {
	      /* Seek successful or ignorable error condition.
		 We can clear read buffer now.  */
#ifdef _FSEEK_OPTIMIZATION
	      fp->_flags &= ~__SNPT;
 4004d30:	80c0030b 	ldhu	r3,12(r16)
 4004d34:	00bdffc4 	movi	r2,-2049
 4004d38:	1884703a 	and	r2,r3,r2
 4004d3c:	8080030d 	sth	r2,12(r16)
#endif
	      fp->_r = 0;
 4004d40:	80000115 	stw	zero,4(r16)
	      fp->_p = fp->_bf._base;
 4004d44:	80800417 	ldw	r2,16(r16)
 4004d48:	80800015 	stw	r2,0(r16)
	      if ((fp->_flags & __SOFF) && (curoff != -1 || ptr->_errno == 0))
 4004d4c:	8080030b 	ldhu	r2,12(r16)
 4004d50:	10bfffcc 	andi	r2,r2,65535
 4004d54:	1084000c 	andi	r2,r2,4096
 4004d58:	10000826 	beq	r2,zero,4004d7c <__sflush_r+0x1f8>
 4004d5c:	e0bffb17 	ldw	r2,-20(fp)
 4004d60:	10bfffd8 	cmpnei	r2,r2,-1
 4004d64:	1000031e 	bne	r2,zero,4004d74 <__sflush_r+0x1f0>
 4004d68:	e0bff717 	ldw	r2,-36(fp)
 4004d6c:	10800017 	ldw	r2,0(r2)
 4004d70:	1000021e 	bne	r2,zero,4004d7c <__sflush_r+0x1f8>
		fp->_offset = curoff;
 4004d74:	e0bffb17 	ldw	r2,-20(fp)
 4004d78:	80801415 	stw	r2,80(r16)
	      ptr->_errno = tmp_errno;
 4004d7c:	e0bff717 	ldw	r2,-36(fp)
 4004d80:	e0fff817 	ldw	r3,-32(fp)
 4004d84:	10c00015 	stw	r3,0(r2)
	      if (HASUB (fp))
 4004d88:	80800c17 	ldw	r2,48(r16)
 4004d8c:	10000e26 	beq	r2,zero,4004dc8 <__sflush_r+0x244>
		FREEUB (ptr, fp);
 4004d90:	80c00c17 	ldw	r3,48(r16)
 4004d94:	80801004 	addi	r2,r16,64
 4004d98:	18800426 	beq	r3,r2,4004dac <__sflush_r+0x228>
 4004d9c:	80800c17 	ldw	r2,48(r16)
 4004da0:	100b883a 	mov	r5,r2
 4004da4:	e13ff717 	ldw	r4,-36(fp)
 4004da8:	40055ac0 	call	40055ac <_free_r>
 4004dac:	80000c15 	stw	zero,48(r16)
	      if (HASUB (fp))
 4004db0:	00000506 	br	4004dc8 <__sflush_r+0x244>
	    }
	  else
	    {
	      fp->_flags |= __SERR;
 4004db4:	8080030b 	ldhu	r2,12(r16)
 4004db8:	10801014 	ori	r2,r2,64
 4004dbc:	8080030d 	sth	r2,12(r16)
	      return EOF;
 4004dc0:	00bfffc4 	movi	r2,-1
 4004dc4:	00002506 	br	4004e5c <__sflush_r+0x2d8>
	    }
	}
      return 0;
 4004dc8:	0005883a 	mov	r2,zero
 4004dcc:	00002306 	br	4004e5c <__sflush_r+0x2d8>
    }
  if ((p = fp->_bf._base) == NULL)
 4004dd0:	84400417 	ldw	r17,16(r16)
 4004dd4:	8800021e 	bne	r17,zero,4004de0 <__sflush_r+0x25c>
    {
      /* Nothing to flush.  */
      return 0;
 4004dd8:	0005883a 	mov	r2,zero
 4004ddc:	00001f06 	br	4004e5c <__sflush_r+0x2d8>
    }
  n = fp->_p - p;		/* write this much */
 4004de0:	80800017 	ldw	r2,0(r16)
 4004de4:	1465c83a 	sub	r18,r2,r17
  /*
   * Set these immediately to avoid problems with longjmp
   * and to allow exchange buffering (via setvbuf) in user
   * write function.
   */
  fp->_p = p;
 4004de8:	84400015 	stw	r17,0(r16)
  fp->_w = flags & (__SLBF | __SNBF) ? 0 : fp->_bf._size;
 4004dec:	e0bff98b 	ldhu	r2,-26(fp)
 4004df0:	10bfffcc 	andi	r2,r2,65535
 4004df4:	108000cc 	andi	r2,r2,3
 4004df8:	1000021e 	bne	r2,zero,4004e04 <__sflush_r+0x280>
 4004dfc:	80800517 	ldw	r2,20(r16)
 4004e00:	00000106 	br	4004e08 <__sflush_r+0x284>
 4004e04:	0005883a 	mov	r2,zero
 4004e08:	80800215 	stw	r2,8(r16)

  while (n > 0)
 4004e0c:	00001106 	br	4004e54 <__sflush_r+0x2d0>
    {
      t = fp->_write (ptr, fp->_cookie, (char *) p, n);
 4004e10:	80800917 	ldw	r2,36(r16)
 4004e14:	80c00717 	ldw	r3,28(r16)
 4004e18:	900f883a 	mov	r7,r18
 4004e1c:	880d883a 	mov	r6,r17
 4004e20:	180b883a 	mov	r5,r3
 4004e24:	e13ff717 	ldw	r4,-36(fp)
 4004e28:	103ee83a 	callr	r2
 4004e2c:	1027883a 	mov	r19,r2
      if (t <= 0)
 4004e30:	04c00516 	blt	zero,r19,4004e48 <__sflush_r+0x2c4>
	{
          fp->_flags |= __SERR;
 4004e34:	8080030b 	ldhu	r2,12(r16)
 4004e38:	10801014 	ori	r2,r2,64
 4004e3c:	8080030d 	sth	r2,12(r16)
          return EOF;
 4004e40:	00bfffc4 	movi	r2,-1
 4004e44:	00000506 	br	4004e5c <__sflush_r+0x2d8>
	}
      p += t;
 4004e48:	9805883a 	mov	r2,r19
 4004e4c:	88a3883a 	add	r17,r17,r2
      n -= t;
 4004e50:	94e5c83a 	sub	r18,r18,r19
  while (n > 0)
 4004e54:	04bfee16 	blt	zero,r18,4004e10 <__sflush_r+0x28c>
    }
  return 0;
 4004e58:	0005883a 	mov	r2,zero
}
 4004e5c:	e6fffc04 	addi	sp,fp,-16
 4004e60:	dfc00517 	ldw	ra,20(sp)
 4004e64:	df000417 	ldw	fp,16(sp)
 4004e68:	dcc00317 	ldw	r19,12(sp)
 4004e6c:	dc800217 	ldw	r18,8(sp)
 4004e70:	dc400117 	ldw	r17,4(sp)
 4004e74:	dc000017 	ldw	r16,0(sp)
 4004e78:	dec00604 	addi	sp,sp,24
 4004e7c:	f800283a 	ret

04004e80 <_fflush_r>:
#endif /* __IMPL_UNLOCKED__ */

int
_fflush_r (struct _reent *ptr,
       register FILE * fp)
{
 4004e80:	defffa04 	addi	sp,sp,-24
 4004e84:	dfc00515 	stw	ra,20(sp)
 4004e88:	df000415 	stw	fp,16(sp)
 4004e8c:	dc000315 	stw	r16,12(sp)
 4004e90:	df000404 	addi	fp,sp,16
 4004e94:	e13ffc15 	stw	r4,-16(fp)
 4004e98:	2821883a 	mov	r16,r5
     2 is implemented here due to its simplicity.  */
  if (fp->_bf._base == NULL)
    return 0;
#endif /* _REENT_SMALL  */

  CHECK_INIT (ptr, fp);
 4004e9c:	e0bffc17 	ldw	r2,-16(fp)
 4004ea0:	e0bffe15 	stw	r2,-8(fp)
 4004ea4:	e0bffe17 	ldw	r2,-8(fp)
 4004ea8:	10000526 	beq	r2,zero,4004ec0 <_fflush_r+0x40>
 4004eac:	e0bffe17 	ldw	r2,-8(fp)
 4004eb0:	10800e17 	ldw	r2,56(r2)
 4004eb4:	1000021e 	bne	r2,zero,4004ec0 <_fflush_r+0x40>
 4004eb8:	e13ffe17 	ldw	r4,-8(fp)
 4004ebc:	40053b00 	call	40053b0 <__sinit>

  if (!fp->_flags)
 4004ec0:	8080030b 	ldhu	r2,12(r16)
 4004ec4:	10bfffcc 	andi	r2,r2,65535
 4004ec8:	10a0001c 	xori	r2,r2,32768
 4004ecc:	10a00004 	addi	r2,r2,-32768
 4004ed0:	1000021e 	bne	r2,zero,4004edc <_fflush_r+0x5c>
    return 0;
 4004ed4:	0005883a 	mov	r2,zero
 4004ed8:	00000506 	br	4004ef0 <_fflush_r+0x70>

  _newlib_flockfile_start (fp);
  ret = __sflush_r (ptr, fp);
 4004edc:	800b883a 	mov	r5,r16
 4004ee0:	e13ffc17 	ldw	r4,-16(fp)
 4004ee4:	4004b840 	call	4004b84 <__sflush_r>
 4004ee8:	e0bffd15 	stw	r2,-12(fp)
  _newlib_flockfile_end (fp);
  return ret;
 4004eec:	e0bffd17 	ldw	r2,-12(fp)
}
 4004ef0:	e6ffff04 	addi	sp,fp,-4
 4004ef4:	dfc00217 	ldw	ra,8(sp)
 4004ef8:	df000117 	ldw	fp,4(sp)
 4004efc:	dc000017 	ldw	r16,0(sp)
 4004f00:	dec00304 	addi	sp,sp,12
 4004f04:	f800283a 	ret

04004f08 <fflush>:

#ifndef _REENT_ONLY

int
fflush (register FILE * fp)
{
 4004f08:	defffe04 	addi	sp,sp,-8
 4004f0c:	dfc00115 	stw	ra,4(sp)
 4004f10:	df000015 	stw	fp,0(sp)
 4004f14:	d839883a 	mov	fp,sp
 4004f18:	2005883a 	mov	r2,r4
  if (fp == NULL)
 4004f1c:	1000061e 	bne	r2,zero,4004f38 <fflush+0x30>
    return _fwalk_reent (_GLOBAL_REENT, _fflush_r);
 4004f20:	d0a00117 	ldw	r2,-32764(gp)
 4004f24:	01410034 	movhi	r5,1024
 4004f28:	2953a004 	addi	r5,r5,20096
 4004f2c:	1009883a 	mov	r4,r2
 4004f30:	4005d9c0 	call	4005d9c <_fwalk_reent>
 4004f34:	00000406 	br	4004f48 <fflush+0x40>

  return _fflush_r (_REENT, fp);
 4004f38:	d0e00017 	ldw	r3,-32768(gp)
 4004f3c:	100b883a 	mov	r5,r2
 4004f40:	1809883a 	mov	r4,r3
 4004f44:	4004e800 	call	4004e80 <_fflush_r>
}
 4004f48:	e037883a 	mov	sp,fp
 4004f4c:	dfc00117 	ldw	ra,4(sp)
 4004f50:	df000017 	ldw	fp,0(sp)
 4004f54:	dec00204 	addi	sp,sp,8
 4004f58:	f800283a 	ret

04004f5c <std>:
static void
#endif
std (FILE *ptr,
            int flags,
            int file)
{
 4004f5c:	defffb04 	addi	sp,sp,-20
 4004f60:	dfc00415 	stw	ra,16(sp)
 4004f64:	df000315 	stw	fp,12(sp)
 4004f68:	df000304 	addi	fp,sp,12
 4004f6c:	e13fff15 	stw	r4,-4(fp)
 4004f70:	e17ffe15 	stw	r5,-8(fp)
 4004f74:	e1bffd15 	stw	r6,-12(fp)
  ptr->_p = 0;
 4004f78:	e0bfff17 	ldw	r2,-4(fp)
 4004f7c:	10000015 	stw	zero,0(r2)
  ptr->_r = 0;
 4004f80:	e0bfff17 	ldw	r2,-4(fp)
 4004f84:	10000115 	stw	zero,4(r2)
  ptr->_w = 0;
 4004f88:	e0bfff17 	ldw	r2,-4(fp)
 4004f8c:	10000215 	stw	zero,8(r2)
  ptr->_flags = flags;
 4004f90:	e0bffe17 	ldw	r2,-8(fp)
 4004f94:	1007883a 	mov	r3,r2
 4004f98:	e0bfff17 	ldw	r2,-4(fp)
 4004f9c:	10c0030d 	sth	r3,12(r2)
  ptr->_flags2 = 0;
 4004fa0:	e0bfff17 	ldw	r2,-4(fp)
 4004fa4:	10001915 	stw	zero,100(r2)
  ptr->_file = file;
 4004fa8:	e0bffd17 	ldw	r2,-12(fp)
 4004fac:	1007883a 	mov	r3,r2
 4004fb0:	e0bfff17 	ldw	r2,-4(fp)
 4004fb4:	10c0038d 	sth	r3,14(r2)
  ptr->_bf._base = 0;
 4004fb8:	e0bfff17 	ldw	r2,-4(fp)
 4004fbc:	10000415 	stw	zero,16(r2)
  ptr->_bf._size = 0;
 4004fc0:	e0bfff17 	ldw	r2,-4(fp)
 4004fc4:	10000515 	stw	zero,20(r2)
  ptr->_lbfsize = 0;
 4004fc8:	e0bfff17 	ldw	r2,-4(fp)
 4004fcc:	10000615 	stw	zero,24(r2)
  memset (&ptr->_mbstate, 0, sizeof (_mbstate_t));
 4004fd0:	e0bfff17 	ldw	r2,-4(fp)
 4004fd4:	10801704 	addi	r2,r2,92
 4004fd8:	01800204 	movi	r6,8
 4004fdc:	000b883a 	mov	r5,zero
 4004fe0:	1009883a 	mov	r4,r2
 4004fe4:	400771c0 	call	400771c <memset>
  ptr->_cookie = ptr;
 4004fe8:	e0bfff17 	ldw	r2,-4(fp)
 4004fec:	e0ffff17 	ldw	r3,-4(fp)
 4004ff0:	10c00715 	stw	r3,28(r2)
  ptr->_read = __sread;
 4004ff4:	e0ffff17 	ldw	r3,-4(fp)
 4004ff8:	00810074 	movhi	r2,1025
 4004ffc:	10a52004 	addi	r2,r2,-27520
 4005000:	18800815 	stw	r2,32(r3)
#ifndef __LARGE64_FILES
  ptr->_write = __swrite;
 4005004:	e0ffff17 	ldw	r3,-4(fp)
 4005008:	00810074 	movhi	r2,1025
 400500c:	10a55304 	addi	r2,r2,-27316
 4005010:	18800915 	stw	r2,36(r3)
#else /* __LARGE64_FILES */
  ptr->_write = __swrite64;
  ptr->_seek64 = __sseek64;
  ptr->_flags |= __SL64;
#endif /* __LARGE64_FILES */
  ptr->_seek = __sseek;
 4005014:	e0ffff17 	ldw	r3,-4(fp)
 4005018:	00810074 	movhi	r2,1025
 400501c:	10a58004 	addi	r2,r2,-27136
 4005020:	18800a15 	stw	r2,40(r3)
#ifdef _STDIO_CLOSE_PER_REENT_STD_STREAMS
  ptr->_close = __sclose;
 4005024:	e0ffff17 	ldw	r3,-4(fp)
 4005028:	00810074 	movhi	r2,1025
 400502c:	10a5a804 	addi	r2,r2,-26976
 4005030:	18800b15 	stw	r2,44(r3)

#ifdef __SCLE
  if (__stextmode (ptr->_file))
    ptr->_flags |= __SCLE;
#endif
}
 4005034:	0001883a 	nop
 4005038:	e037883a 	mov	sp,fp
 400503c:	dfc00117 	ldw	ra,4(sp)
 4005040:	df000017 	ldw	fp,0(sp)
 4005044:	dec00204 	addi	sp,sp,8
 4005048:	f800283a 	ret

0400504c <stdin_init>:

static inline void
stdin_init(FILE *ptr)
{
 400504c:	defffd04 	addi	sp,sp,-12
 4005050:	dfc00215 	stw	ra,8(sp)
 4005054:	df000115 	stw	fp,4(sp)
 4005058:	df000104 	addi	fp,sp,4
 400505c:	e13fff15 	stw	r4,-4(fp)
  std (ptr,  __SRD, 0);
 4005060:	000d883a 	mov	r6,zero
 4005064:	01400104 	movi	r5,4
 4005068:	e13fff17 	ldw	r4,-4(fp)
 400506c:	4004f5c0 	call	4004f5c <std>
}
 4005070:	0001883a 	nop
 4005074:	e037883a 	mov	sp,fp
 4005078:	dfc00117 	ldw	ra,4(sp)
 400507c:	df000017 	ldw	fp,0(sp)
 4005080:	dec00204 	addi	sp,sp,8
 4005084:	f800283a 	ret

04005088 <stdout_init>:

static inline void
stdout_init(FILE *ptr)
{
 4005088:	defffd04 	addi	sp,sp,-12
 400508c:	dfc00215 	stw	ra,8(sp)
 4005090:	df000115 	stw	fp,4(sp)
 4005094:	df000104 	addi	fp,sp,4
 4005098:	e13fff15 	stw	r4,-4(fp)
#ifdef HAVE_FCNTL
/*std (ptr, __SWR, 1); */
  std (ptr, __SWR | __SNBF, 1);	/* IntelSpecific: Change to have no buffering on stdout. */
#else
/*std (ptr, __SWR | __SLBF, 1); */
  std (ptr, __SWR | __SNBF, 1);	/* IntelSpecific: Change to have no buffering on stdout. */
 400509c:	01800044 	movi	r6,1
 40050a0:	01400284 	movi	r5,10
 40050a4:	e13fff17 	ldw	r4,-4(fp)
 40050a8:	4004f5c0 	call	4004f5c <std>
#endif
}
 40050ac:	0001883a 	nop
 40050b0:	e037883a 	mov	sp,fp
 40050b4:	dfc00117 	ldw	ra,4(sp)
 40050b8:	df000017 	ldw	fp,0(sp)
 40050bc:	dec00204 	addi	sp,sp,8
 40050c0:	f800283a 	ret

040050c4 <stderr_init>:

static inline void
stderr_init(FILE *ptr)
{
 40050c4:	defffd04 	addi	sp,sp,-12
 40050c8:	dfc00215 	stw	ra,8(sp)
 40050cc:	df000115 	stw	fp,4(sp)
 40050d0:	df000104 	addi	fp,sp,4
 40050d4:	e13fff15 	stw	r4,-4(fp)
  /* POSIX requires stderr to be opened for reading and writing, even
     when the underlying fd 2 is write-only.  */
  std (ptr, __SRW | __SNBF, 2);
 40050d8:	01800084 	movi	r6,2
 40050dc:	01400484 	movi	r5,18
 40050e0:	e13fff17 	ldw	r4,-4(fp)
 40050e4:	4004f5c0 	call	4004f5c <std>
}
 40050e8:	0001883a 	nop
 40050ec:	e037883a 	mov	sp,fp
 40050f0:	dfc00117 	ldw	ra,4(sp)
 40050f4:	df000017 	ldw	fp,0(sp)
 40050f8:	dec00204 	addi	sp,sp,8
 40050fc:	f800283a 	ret

04005100 <__sfmoreglue>:
};

struct _glue *
__sfmoreglue (struct _reent *d,
       register int n)
{
 4005100:	defffb04 	addi	sp,sp,-20
 4005104:	dfc00415 	stw	ra,16(sp)
 4005108:	df000315 	stw	fp,12(sp)
 400510c:	dc000215 	stw	r16,8(sp)
 4005110:	df000304 	addi	fp,sp,12
 4005114:	e13ffd15 	stw	r4,-12(fp)
 4005118:	2821883a 	mov	r16,r5
  struct glue_with_file *g;

  g = (struct glue_with_file *)
    _malloc_r (d, sizeof (*g) + (n - 1) * sizeof (FILE));
 400511c:	80bfffc4 	addi	r2,r16,-1
 4005120:	10801a24 	muli	r2,r2,104
 4005124:	10801d04 	addi	r2,r2,116
 4005128:	100b883a 	mov	r5,r2
 400512c:	e13ffd17 	ldw	r4,-12(fp)
 4005130:	40067380 	call	4006738 <_malloc_r>
 4005134:	e0bffe15 	stw	r2,-8(fp)
  if (g == NULL)
 4005138:	e0bffe17 	ldw	r2,-8(fp)
 400513c:	1000021e 	bne	r2,zero,4005148 <__sfmoreglue+0x48>
    return NULL;
 4005140:	0005883a 	mov	r2,zero
 4005144:	00001106 	br	400518c <__sfmoreglue+0x8c>
  g->glue._next = NULL;
 4005148:	e0bffe17 	ldw	r2,-8(fp)
 400514c:	10000015 	stw	zero,0(r2)
  g->glue._niobs = n;
 4005150:	e0bffe17 	ldw	r2,-8(fp)
 4005154:	14000115 	stw	r16,4(r2)
  g->glue._iobs = &g->file;
 4005158:	e0bffe17 	ldw	r2,-8(fp)
 400515c:	10c00304 	addi	r3,r2,12
 4005160:	e0bffe17 	ldw	r2,-8(fp)
 4005164:	10c00215 	stw	r3,8(r2)
  memset (&g->file, 0, n * sizeof (FILE));
 4005168:	e0bffe17 	ldw	r2,-8(fp)
 400516c:	10800304 	addi	r2,r2,12
 4005170:	8007883a 	mov	r3,r16
 4005174:	18c01a24 	muli	r3,r3,104
 4005178:	180d883a 	mov	r6,r3
 400517c:	000b883a 	mov	r5,zero
 4005180:	1009883a 	mov	r4,r2
 4005184:	400771c0 	call	400771c <memset>
  return &g->glue;
 4005188:	e0bffe17 	ldw	r2,-8(fp)
}
 400518c:	e6ffff04 	addi	sp,fp,-4
 4005190:	dfc00217 	ldw	ra,8(sp)
 4005194:	df000117 	ldw	fp,4(sp)
 4005198:	dc000017 	ldw	r16,0(sp)
 400519c:	dec00304 	addi	sp,sp,12
 40051a0:	f800283a 	ret

040051a4 <__sfp>:
 * Find a free FILE for fopen et al.
 */

FILE *
__sfp (struct _reent *d)
{
 40051a4:	defffa04 	addi	sp,sp,-24
 40051a8:	dfc00515 	stw	ra,20(sp)
 40051ac:	df000415 	stw	fp,16(sp)
 40051b0:	df000404 	addi	fp,sp,16
 40051b4:	e13ffc15 	stw	r4,-16(fp)
  FILE *fp;
  int n;
  struct _glue *g;

  _newlib_sfp_lock_start ();
 40051b8:	40054640 	call	4005464 <__sfp_lock_acquire>

  if (!_GLOBAL_REENT->__sdidinit)
 40051bc:	d0a00117 	ldw	r2,-32764(gp)
 40051c0:	10800e17 	ldw	r2,56(r2)
 40051c4:	1000031e 	bne	r2,zero,40051d4 <__sfp+0x30>
    __sinit (_GLOBAL_REENT);
 40051c8:	d0a00117 	ldw	r2,-32764(gp)
 40051cc:	1009883a 	mov	r4,r2
 40051d0:	40053b00 	call	40053b0 <__sinit>
  for (g = &_GLOBAL_REENT->__sglue;; g = g->_next)
 40051d4:	d0a00117 	ldw	r2,-32764(gp)
 40051d8:	1080b804 	addi	r2,r2,736
 40051dc:	e0bffd15 	stw	r2,-12(fp)
    {
      for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
 40051e0:	e0bffd17 	ldw	r2,-12(fp)
 40051e4:	10800217 	ldw	r2,8(r2)
 40051e8:	e0bfff15 	stw	r2,-4(fp)
 40051ec:	e0bffd17 	ldw	r2,-12(fp)
 40051f0:	10800117 	ldw	r2,4(r2)
 40051f4:	e0bffe15 	stw	r2,-8(fp)
 40051f8:	00000906 	br	4005220 <__sfp+0x7c>
	if (fp->_flags == 0)
 40051fc:	e0bfff17 	ldw	r2,-4(fp)
 4005200:	1080030b 	ldhu	r2,12(r2)
 4005204:	10bfffcc 	andi	r2,r2,65535
 4005208:	10a0001c 	xori	r2,r2,32768
 400520c:	10a00004 	addi	r2,r2,-32768
 4005210:	10001f26 	beq	r2,zero,4005290 <__sfp+0xec>
      for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
 4005214:	e0bfff17 	ldw	r2,-4(fp)
 4005218:	10801a04 	addi	r2,r2,104
 400521c:	e0bfff15 	stw	r2,-4(fp)
 4005220:	e0bffe17 	ldw	r2,-8(fp)
 4005224:	10bfffc4 	addi	r2,r2,-1
 4005228:	e0bffe15 	stw	r2,-8(fp)
 400522c:	e0bffe17 	ldw	r2,-8(fp)
 4005230:	103ff20e 	bge	r2,zero,40051fc <__sfp+0x58>
	  goto found;
      if (g->_next == NULL &&
 4005234:	e0bffd17 	ldw	r2,-12(fp)
 4005238:	10800017 	ldw	r2,0(r2)
 400523c:	1000091e 	bne	r2,zero,4005264 <__sfp+0xc0>
	  (g->_next = __sfmoreglue (d, NDYNAMIC)) == NULL)
 4005240:	01400104 	movi	r5,4
 4005244:	e13ffc17 	ldw	r4,-16(fp)
 4005248:	40051000 	call	4005100 <__sfmoreglue>
 400524c:	1007883a 	mov	r3,r2
 4005250:	e0bffd17 	ldw	r2,-12(fp)
 4005254:	10c00015 	stw	r3,0(r2)
 4005258:	e0bffd17 	ldw	r2,-12(fp)
 400525c:	10800017 	ldw	r2,0(r2)
      if (g->_next == NULL &&
 4005260:	10000426 	beq	r2,zero,4005274 <__sfp+0xd0>
  for (g = &_GLOBAL_REENT->__sglue;; g = g->_next)
 4005264:	e0bffd17 	ldw	r2,-12(fp)
 4005268:	10800017 	ldw	r2,0(r2)
 400526c:	e0bffd15 	stw	r2,-12(fp)
      for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
 4005270:	003fdb06 	br	40051e0 <__sfp+0x3c>
	break;
 4005274:	0001883a 	nop
    }
  _newlib_sfp_lock_exit ();
 4005278:	40054840 	call	4005484 <__sfp_lock_release>
  d->_errno = ENOMEM;
 400527c:	e0bffc17 	ldw	r2,-16(fp)
 4005280:	00c00304 	movi	r3,12
 4005284:	10c00015 	stw	r3,0(r2)
  return NULL;
 4005288:	0005883a 	mov	r2,zero
 400528c:	00002506 	br	4005324 <__sfp+0x180>
	  goto found;
 4005290:	0001883a 	nop

found:
  fp->_file = -1;		/* no file */
 4005294:	e0bfff17 	ldw	r2,-4(fp)
 4005298:	00ffffc4 	movi	r3,-1
 400529c:	10c0038d 	sth	r3,14(r2)
  fp->_flags = 1;		/* reserve this slot; caller sets real flags */
 40052a0:	e0bfff17 	ldw	r2,-4(fp)
 40052a4:	00c00044 	movi	r3,1
 40052a8:	10c0030d 	sth	r3,12(r2)
  fp->_flags2 = 0;
 40052ac:	e0bfff17 	ldw	r2,-4(fp)
 40052b0:	10001915 	stw	zero,100(r2)
#ifndef __SINGLE_THREAD__
  __lock_init_recursive (fp->_lock);
#endif
  _newlib_sfp_lock_end ();
 40052b4:	40054840 	call	4005484 <__sfp_lock_release>

  fp->_p = NULL;		/* no current pointer */
 40052b8:	e0bfff17 	ldw	r2,-4(fp)
 40052bc:	10000015 	stw	zero,0(r2)
  fp->_w = 0;			/* nothing to read or write */
 40052c0:	e0bfff17 	ldw	r2,-4(fp)
 40052c4:	10000215 	stw	zero,8(r2)
  fp->_r = 0;
 40052c8:	e0bfff17 	ldw	r2,-4(fp)
 40052cc:	10000115 	stw	zero,4(r2)
  fp->_bf._base = NULL;		/* no buffer */
 40052d0:	e0bfff17 	ldw	r2,-4(fp)
 40052d4:	10000415 	stw	zero,16(r2)
  fp->_bf._size = 0;
 40052d8:	e0bfff17 	ldw	r2,-4(fp)
 40052dc:	10000515 	stw	zero,20(r2)
  fp->_lbfsize = 0;		/* not line buffered */
 40052e0:	e0bfff17 	ldw	r2,-4(fp)
 40052e4:	10000615 	stw	zero,24(r2)
  memset (&fp->_mbstate, 0, sizeof (_mbstate_t));
 40052e8:	e0bfff17 	ldw	r2,-4(fp)
 40052ec:	10801704 	addi	r2,r2,92
 40052f0:	01800204 	movi	r6,8
 40052f4:	000b883a 	mov	r5,zero
 40052f8:	1009883a 	mov	r4,r2
 40052fc:	400771c0 	call	400771c <memset>
  /* fp->_cookie = <any>; */	/* caller sets cookie, _read/_write etc */
  fp->_ub._base = NULL;		/* no ungetc buffer */
 4005300:	e0bfff17 	ldw	r2,-4(fp)
 4005304:	10000c15 	stw	zero,48(r2)
  fp->_ub._size = 0;
 4005308:	e0bfff17 	ldw	r2,-4(fp)
 400530c:	10000d15 	stw	zero,52(r2)
  fp->_lb._base = NULL;		/* no line buffer */
 4005310:	e0bfff17 	ldw	r2,-4(fp)
 4005314:	10001115 	stw	zero,68(r2)
  fp->_lb._size = 0;
 4005318:	e0bfff17 	ldw	r2,-4(fp)
 400531c:	10001215 	stw	zero,72(r2)

  return fp;
 4005320:	e0bfff17 	ldw	r2,-4(fp)
}
 4005324:	e037883a 	mov	sp,fp
 4005328:	dfc00117 	ldw	ra,4(sp)
 400532c:	df000017 	ldw	fp,0(sp)
 4005330:	dec00204 	addi	sp,sp,8
 4005334:	f800283a 	ret

04005338 <_cleanup_r>:
 * The name `_cleanup' is, alas, fairly well known outside stdio.
 */

void
_cleanup_r (struct _reent *ptr)
{
 4005338:	defffc04 	addi	sp,sp,-16
 400533c:	dfc00315 	stw	ra,12(sp)
 4005340:	df000215 	stw	fp,8(sp)
 4005344:	df000204 	addi	fp,sp,8
 4005348:	e13ffe15 	stw	r4,-8(fp)
  /* Otherwise close files and flush read streams, too.
     Note we call flush directly if "--enable-lite-exit" is in effect.  */
#ifdef _LITE_EXIT
  cleanup_func = _fflush_r;
#else
  cleanup_func = _fclose_r;
 400534c:	00810074 	movhi	r2,1025
 4005350:	10ac8d04 	addi	r2,r2,-19916
 4005354:	e0bfff15 	stw	r2,-4(fp)
  if (ptr->_stdout != &__sf[1])
    (*cleanup_func) (ptr, ptr->_stdout);
  if (ptr->_stderr != &__sf[2])
    (*cleanup_func) (ptr, ptr->_stderr);
#endif
  (void) _fwalk_reent (ptr, cleanup_func);
 4005358:	e17fff17 	ldw	r5,-4(fp)
 400535c:	e13ffe17 	ldw	r4,-8(fp)
 4005360:	4005d9c0 	call	4005d9c <_fwalk_reent>
}
 4005364:	0001883a 	nop
 4005368:	e037883a 	mov	sp,fp
 400536c:	dfc00117 	ldw	ra,4(sp)
 4005370:	df000017 	ldw	fp,0(sp)
 4005374:	dec00204 	addi	sp,sp,8
 4005378:	f800283a 	ret

0400537c <_cleanup>:

#ifndef _REENT_ONLY
void
_cleanup (void)
{
 400537c:	defffe04 	addi	sp,sp,-8
 4005380:	dfc00115 	stw	ra,4(sp)
 4005384:	df000015 	stw	fp,0(sp)
 4005388:	d839883a 	mov	fp,sp
  _cleanup_r (_GLOBAL_REENT);
 400538c:	d0a00117 	ldw	r2,-32764(gp)
 4005390:	1009883a 	mov	r4,r2
 4005394:	40053380 	call	4005338 <_cleanup_r>
}
 4005398:	0001883a 	nop
 400539c:	e037883a 	mov	sp,fp
 40053a0:	dfc00117 	ldw	ra,4(sp)
 40053a4:	df000017 	ldw	fp,0(sp)
 40053a8:	dec00204 	addi	sp,sp,8
 40053ac:	f800283a 	ret

040053b0 <__sinit>:
 * __sinit() is called whenever stdio's internal variables must be set up.
 */

void
__sinit (struct _reent *s)
{
 40053b0:	defffd04 	addi	sp,sp,-12
 40053b4:	dfc00215 	stw	ra,8(sp)
 40053b8:	df000115 	stw	fp,4(sp)
 40053bc:	df000104 	addi	fp,sp,4
 40053c0:	e13fff15 	stw	r4,-4(fp)
  __sinit_lock_acquire ();
 40053c4:	40054a40 	call	40054a4 <__sinit_lock_acquire>

  if (s->__sdidinit)
 40053c8:	e0bfff17 	ldw	r2,-4(fp)
 40053cc:	10800e17 	ldw	r2,56(r2)
 40053d0:	10000226 	beq	r2,zero,40053dc <__sinit+0x2c>
    {
      __sinit_lock_release ();
 40053d4:	40054c40 	call	40054c4 <__sinit_lock_release>
      return;
 40053d8:	00001d06 	br	4005450 <__sinit+0xa0>
    }

  /* make sure we clean up on exit */
  s->__cleanup = _cleanup_r;	/* conservative */
 40053dc:	e0ffff17 	ldw	r3,-4(fp)
 40053e0:	00810034 	movhi	r2,1024
 40053e4:	1094ce04 	addi	r2,r2,21304
 40053e8:	18800f15 	stw	r2,60(r3)

  s->__sglue._next = NULL;
 40053ec:	e0bfff17 	ldw	r2,-4(fp)
 40053f0:	1000b815 	stw	zero,736(r2)
#ifndef _REENT_SMALL
# ifndef _REENT_GLOBAL_STDIO_STREAMS
  s->__sglue._niobs = 3;
 40053f4:	e0bfff17 	ldw	r2,-4(fp)
 40053f8:	00c000c4 	movi	r3,3
 40053fc:	10c0b915 	stw	r3,740(r2)
  s->__sglue._iobs = &s->__sf[0];
 4005400:	e0bfff17 	ldw	r2,-4(fp)
 4005404:	10c0bb04 	addi	r3,r2,748
 4005408:	e0bfff17 	ldw	r2,-4(fp)
 400540c:	10c0ba15 	stw	r3,744(r2)
    stdin_init (&__sf[0]);
    stdout_init (&__sf[1]);
    stderr_init (&__sf[2]);
  }
#else /* _REENT_GLOBAL_STDIO_STREAMS */
  stdin_init (s->_stdin);
 4005410:	e0bfff17 	ldw	r2,-4(fp)
 4005414:	10800117 	ldw	r2,4(r2)
 4005418:	1009883a 	mov	r4,r2
 400541c:	400504c0 	call	400504c <stdin_init>
  stdout_init (s->_stdout);
 4005420:	e0bfff17 	ldw	r2,-4(fp)
 4005424:	10800217 	ldw	r2,8(r2)
 4005428:	1009883a 	mov	r4,r2
 400542c:	40050880 	call	4005088 <stdout_init>
  stderr_init (s->_stderr);
 4005430:	e0bfff17 	ldw	r2,-4(fp)
 4005434:	10800317 	ldw	r2,12(r2)
 4005438:	1009883a 	mov	r4,r2
 400543c:	40050c40 	call	40050c4 <stderr_init>
#endif /* _REENT_GLOBAL_STDIO_STREAMS */

  s->__sdidinit = 1;
 4005440:	e0bfff17 	ldw	r2,-4(fp)
 4005444:	00c00044 	movi	r3,1
 4005448:	10c00e15 	stw	r3,56(r2)

  __sinit_lock_release ();
 400544c:	40054c40 	call	40054c4 <__sinit_lock_release>
}
 4005450:	e037883a 	mov	sp,fp
 4005454:	dfc00117 	ldw	ra,4(sp)
 4005458:	df000017 	ldw	fp,0(sp)
 400545c:	dec00204 	addi	sp,sp,8
 4005460:	f800283a 	ret

04005464 <__sfp_lock_acquire>:
__LOCK_INIT_RECURSIVE(static, __sfp_recursive_mutex);
__LOCK_INIT_RECURSIVE(static, __sinit_recursive_mutex);

void
__sfp_lock_acquire (void)
{
 4005464:	deffff04 	addi	sp,sp,-4
 4005468:	df000015 	stw	fp,0(sp)
 400546c:	d839883a 	mov	fp,sp
  __lock_acquire_recursive (__sfp_recursive_mutex);
}
 4005470:	0001883a 	nop
 4005474:	e037883a 	mov	sp,fp
 4005478:	df000017 	ldw	fp,0(sp)
 400547c:	dec00104 	addi	sp,sp,4
 4005480:	f800283a 	ret

04005484 <__sfp_lock_release>:

void
__sfp_lock_release (void)
{
 4005484:	deffff04 	addi	sp,sp,-4
 4005488:	df000015 	stw	fp,0(sp)
 400548c:	d839883a 	mov	fp,sp
  __lock_release_recursive (__sfp_recursive_mutex);
}
 4005490:	0001883a 	nop
 4005494:	e037883a 	mov	sp,fp
 4005498:	df000017 	ldw	fp,0(sp)
 400549c:	dec00104 	addi	sp,sp,4
 40054a0:	f800283a 	ret

040054a4 <__sinit_lock_acquire>:

void
__sinit_lock_acquire (void)
{
 40054a4:	deffff04 	addi	sp,sp,-4
 40054a8:	df000015 	stw	fp,0(sp)
 40054ac:	d839883a 	mov	fp,sp
  __lock_acquire_recursive (__sinit_recursive_mutex);
}
 40054b0:	0001883a 	nop
 40054b4:	e037883a 	mov	sp,fp
 40054b8:	df000017 	ldw	fp,0(sp)
 40054bc:	dec00104 	addi	sp,sp,4
 40054c0:	f800283a 	ret

040054c4 <__sinit_lock_release>:

void
__sinit_lock_release (void)
{
 40054c4:	deffff04 	addi	sp,sp,-4
 40054c8:	df000015 	stw	fp,0(sp)
 40054cc:	d839883a 	mov	fp,sp
  __lock_release_recursive (__sinit_recursive_mutex);
}
 40054d0:	0001883a 	nop
 40054d4:	e037883a 	mov	sp,fp
 40054d8:	df000017 	ldw	fp,0(sp)
 40054dc:	dec00104 	addi	sp,sp,4
 40054e0:	f800283a 	ret

040054e4 <__fp_lock>:

/* Walkable file locking routine.  */
static int
__fp_lock (FILE * ptr)
{
 40054e4:	defffe04 	addi	sp,sp,-8
 40054e8:	df000115 	stw	fp,4(sp)
 40054ec:	df000104 	addi	fp,sp,4
 40054f0:	e13fff15 	stw	r4,-4(fp)
  if (!(ptr->_flags2 & __SNLK))
    _flockfile (ptr);

  return 0;
 40054f4:	0005883a 	mov	r2,zero
}
 40054f8:	e037883a 	mov	sp,fp
 40054fc:	df000017 	ldw	fp,0(sp)
 4005500:	dec00104 	addi	sp,sp,4
 4005504:	f800283a 	ret

04005508 <__fp_unlock>:

/* Walkable file unlocking routine.  */
static int
__fp_unlock (FILE * ptr)
{
 4005508:	defffe04 	addi	sp,sp,-8
 400550c:	df000115 	stw	fp,4(sp)
 4005510:	df000104 	addi	fp,sp,4
 4005514:	e13fff15 	stw	r4,-4(fp)
  if (!(ptr->_flags2 & __SNLK))
    _funlockfile (ptr);

  return 0;
 4005518:	0005883a 	mov	r2,zero
}
 400551c:	e037883a 	mov	sp,fp
 4005520:	df000017 	ldw	fp,0(sp)
 4005524:	dec00104 	addi	sp,sp,4
 4005528:	f800283a 	ret

0400552c <__fp_lock_all>:

void
__fp_lock_all (void)
{
 400552c:	defffe04 	addi	sp,sp,-8
 4005530:	dfc00115 	stw	ra,4(sp)
 4005534:	df000015 	stw	fp,0(sp)
 4005538:	d839883a 	mov	fp,sp
  __sfp_lock_acquire ();
 400553c:	40054640 	call	4005464 <__sfp_lock_acquire>

  (void) _fwalk (_REENT, __fp_lock);
 4005540:	d0a00017 	ldw	r2,-32768(gp)
 4005544:	01410034 	movhi	r5,1024
 4005548:	29553904 	addi	r5,r5,21732
 400554c:	1009883a 	mov	r4,r2
 4005550:	4005cc40 	call	4005cc4 <_fwalk>
}
 4005554:	0001883a 	nop
 4005558:	e037883a 	mov	sp,fp
 400555c:	dfc00117 	ldw	ra,4(sp)
 4005560:	df000017 	ldw	fp,0(sp)
 4005564:	dec00204 	addi	sp,sp,8
 4005568:	f800283a 	ret

0400556c <__fp_unlock_all>:

void
__fp_unlock_all (void)
{
 400556c:	defffe04 	addi	sp,sp,-8
 4005570:	dfc00115 	stw	ra,4(sp)
 4005574:	df000015 	stw	fp,0(sp)
 4005578:	d839883a 	mov	fp,sp
  (void) _fwalk (_REENT, __fp_unlock);
 400557c:	d0a00017 	ldw	r2,-32768(gp)
 4005580:	01410034 	movhi	r5,1024
 4005584:	29554204 	addi	r5,r5,21768
 4005588:	1009883a 	mov	r4,r2
 400558c:	4005cc40 	call	4005cc4 <_fwalk>

  __sfp_lock_release ();
 4005590:	40054840 	call	4005484 <__sfp_lock_release>
}
 4005594:	0001883a 	nop
 4005598:	e037883a 	mov	sp,fp
 400559c:	dfc00117 	ldw	ra,4(sp)
 40055a0:	df000017 	ldw	fp,0(sp)
 40055a4:	dec00204 	addi	sp,sp,8
 40055a8:	f800283a 	ret

040055ac <_free_r>:
#if __STD_C
void fREe(RARG Void_t* mem)
#else
void fREe(RARG mem) RDECL Void_t* mem;
#endif
{
 40055ac:	defff204 	addi	sp,sp,-56
 40055b0:	dfc00d15 	stw	ra,52(sp)
 40055b4:	df000c15 	stw	fp,48(sp)
 40055b8:	df000c04 	addi	fp,sp,48
 40055bc:	e13ff515 	stw	r4,-44(fp)
 40055c0:	e17ff415 	stw	r5,-48(fp)
  INTERNAL_SIZE_T prevsz; /* size of previous contiguous chunk */
  mchunkptr bck;       /* misc temp for linking */
  mchunkptr fwd;       /* misc temp for linking */
  int       islr;      /* track whether merging with last_remainder */

  if (mem == 0)                              /* free(0) has no effect */
 40055c4:	e0bff417 	ldw	r2,-48(fp)
 40055c8:	10014826 	beq	r2,zero,4005aec <_free_r+0x540>
    return;

  MALLOC_LOCK;
 40055cc:	e13ff517 	ldw	r4,-44(fp)
 40055d0:	4010f200 	call	4010f20 <__malloc_lock>

  p = mem2chunk(mem);
 40055d4:	e0bff417 	ldw	r2,-48(fp)
 40055d8:	10bffe04 	addi	r2,r2,-8
 40055dc:	e0bfff15 	stw	r2,-4(fp)
  hd = p->size;
 40055e0:	e0bfff17 	ldw	r2,-4(fp)
 40055e4:	10800117 	ldw	r2,4(r2)
 40055e8:	e0bffa15 	stw	r2,-24(fp)
  }
#endif
  
  check_inuse_chunk(p);
  
  sz = hd & ~PREV_INUSE;
 40055ec:	e0fffa17 	ldw	r3,-24(fp)
 40055f0:	00bfff84 	movi	r2,-2
 40055f4:	1884703a 	and	r2,r3,r2
 40055f8:	e0bffe15 	stw	r2,-8(fp)
  next = chunk_at_offset(p, sz);
 40055fc:	e0ffff17 	ldw	r3,-4(fp)
 4005600:	e0bffe17 	ldw	r2,-8(fp)
 4005604:	1885883a 	add	r2,r3,r2
 4005608:	e0bff915 	stw	r2,-28(fp)
  nextsz = chunksize(next);
 400560c:	e0bff917 	ldw	r2,-28(fp)
 4005610:	10c00117 	ldw	r3,4(r2)
 4005614:	00bfff04 	movi	r2,-4
 4005618:	1884703a 	and	r2,r3,r2
 400561c:	e0bff815 	stw	r2,-32(fp)
  
  if (next == top)                            /* merge with top */
 4005620:	00810074 	movhi	r2,1025
 4005624:	1090cf04 	addi	r2,r2,17212
 4005628:	10800217 	ldw	r2,8(r2)
 400562c:	e0fff917 	ldw	r3,-28(fp)
 4005630:	1880311e 	bne	r3,r2,40056f8 <_free_r+0x14c>
  {
    sz += nextsz;
 4005634:	e0fffe17 	ldw	r3,-8(fp)
 4005638:	e0bff817 	ldw	r2,-32(fp)
 400563c:	1885883a 	add	r2,r3,r2
 4005640:	e0bffe15 	stw	r2,-8(fp)

    if (!(hd & PREV_INUSE))                    /* consolidate backward */
 4005644:	e0bffa17 	ldw	r2,-24(fp)
 4005648:	1080004c 	andi	r2,r2,1
 400564c:	1000181e 	bne	r2,zero,40056b0 <_free_r+0x104>
    {
      prevsz = p->prev_size;
 4005650:	e0bfff17 	ldw	r2,-4(fp)
 4005654:	10800017 	ldw	r2,0(r2)
 4005658:	e0bff715 	stw	r2,-36(fp)
      p = chunk_at_offset(p, -prevsz);
 400565c:	e0bff717 	ldw	r2,-36(fp)
 4005660:	0085c83a 	sub	r2,zero,r2
 4005664:	e0ffff17 	ldw	r3,-4(fp)
 4005668:	1885883a 	add	r2,r3,r2
 400566c:	e0bfff15 	stw	r2,-4(fp)
      sz += prevsz;
 4005670:	e0fffe17 	ldw	r3,-8(fp)
 4005674:	e0bff717 	ldw	r2,-36(fp)
 4005678:	1885883a 	add	r2,r3,r2
 400567c:	e0bffe15 	stw	r2,-8(fp)
      unlink(p, bck, fwd);
 4005680:	e0bfff17 	ldw	r2,-4(fp)
 4005684:	10800317 	ldw	r2,12(r2)
 4005688:	e0bffd15 	stw	r2,-12(fp)
 400568c:	e0bfff17 	ldw	r2,-4(fp)
 4005690:	10800217 	ldw	r2,8(r2)
 4005694:	e0bffc15 	stw	r2,-16(fp)
 4005698:	e0bffc17 	ldw	r2,-16(fp)
 400569c:	e0fffd17 	ldw	r3,-12(fp)
 40056a0:	10c00315 	stw	r3,12(r2)
 40056a4:	e0bffd17 	ldw	r2,-12(fp)
 40056a8:	e0fffc17 	ldw	r3,-16(fp)
 40056ac:	10c00215 	stw	r3,8(r2)
    }

    set_head(p, sz | PREV_INUSE);
 40056b0:	e0bffe17 	ldw	r2,-8(fp)
 40056b4:	10c00054 	ori	r3,r2,1
 40056b8:	e0bfff17 	ldw	r2,-4(fp)
 40056bc:	10c00115 	stw	r3,4(r2)
    top = p;
 40056c0:	00810074 	movhi	r2,1025
 40056c4:	1090cf04 	addi	r2,r2,17212
 40056c8:	e0ffff17 	ldw	r3,-4(fp)
 40056cc:	10c00215 	stw	r3,8(r2)
    if ((unsigned long)(sz) >= (unsigned long)trim_threshold) 
 40056d0:	d0a00217 	ldw	r2,-32760(gp)
 40056d4:	e0fffe17 	ldw	r3,-8(fp)
 40056d8:	18800436 	bltu	r3,r2,40056ec <_free_r+0x140>
      malloc_trim(RCALL top_pad); 
 40056dc:	d0a71217 	ldw	r2,-25528(gp)
 40056e0:	100b883a 	mov	r5,r2
 40056e4:	e13ff517 	ldw	r4,-44(fp)
 40056e8:	4005b040 	call	4005b04 <_malloc_trim_r>
    MALLOC_UNLOCK;
 40056ec:	e13ff517 	ldw	r4,-44(fp)
 40056f0:	4010f440 	call	4010f44 <__malloc_unlock>
    return;
 40056f4:	0000fe06 	br	4005af0 <_free_r+0x544>
  }

  set_head(next, nextsz);                    /* clear inuse bit */
 40056f8:	e0bff917 	ldw	r2,-28(fp)
 40056fc:	e0fff817 	ldw	r3,-32(fp)
 4005700:	10c00115 	stw	r3,4(r2)

  islr = 0;
 4005704:	e03ffb15 	stw	zero,-20(fp)

  if (!(hd & PREV_INUSE))                    /* consolidate backward */
 4005708:	e0bffa17 	ldw	r2,-24(fp)
 400570c:	1080004c 	andi	r2,r2,1
 4005710:	1000201e 	bne	r2,zero,4005794 <_free_r+0x1e8>
  {
    prevsz = p->prev_size;
 4005714:	e0bfff17 	ldw	r2,-4(fp)
 4005718:	10800017 	ldw	r2,0(r2)
 400571c:	e0bff715 	stw	r2,-36(fp)
    p = chunk_at_offset(p, -prevsz);
 4005720:	e0bff717 	ldw	r2,-36(fp)
 4005724:	0085c83a 	sub	r2,zero,r2
 4005728:	e0ffff17 	ldw	r3,-4(fp)
 400572c:	1885883a 	add	r2,r3,r2
 4005730:	e0bfff15 	stw	r2,-4(fp)
    sz += prevsz;
 4005734:	e0fffe17 	ldw	r3,-8(fp)
 4005738:	e0bff717 	ldw	r2,-36(fp)
 400573c:	1885883a 	add	r2,r3,r2
 4005740:	e0bffe15 	stw	r2,-8(fp)
    
    if (p->fd == last_remainder)             /* keep as last_remainder */
 4005744:	e0bfff17 	ldw	r2,-4(fp)
 4005748:	10c00217 	ldw	r3,8(r2)
 400574c:	00810074 	movhi	r2,1025
 4005750:	1090d104 	addi	r2,r2,17220
 4005754:	1880031e 	bne	r3,r2,4005764 <_free_r+0x1b8>
      islr = 1;
 4005758:	00800044 	movi	r2,1
 400575c:	e0bffb15 	stw	r2,-20(fp)
 4005760:	00000c06 	br	4005794 <_free_r+0x1e8>
    else
      unlink(p, bck, fwd);
 4005764:	e0bfff17 	ldw	r2,-4(fp)
 4005768:	10800317 	ldw	r2,12(r2)
 400576c:	e0bffd15 	stw	r2,-12(fp)
 4005770:	e0bfff17 	ldw	r2,-4(fp)
 4005774:	10800217 	ldw	r2,8(r2)
 4005778:	e0bffc15 	stw	r2,-16(fp)
 400577c:	e0bffc17 	ldw	r2,-16(fp)
 4005780:	e0fffd17 	ldw	r3,-12(fp)
 4005784:	10c00315 	stw	r3,12(r2)
 4005788:	e0bffd17 	ldw	r2,-12(fp)
 400578c:	e0fffc17 	ldw	r3,-16(fp)
 4005790:	10c00215 	stw	r3,8(r2)
  }
  
  if (!(inuse_bit_at_offset(next, nextsz)))   /* consolidate forward */
 4005794:	e0fff917 	ldw	r3,-28(fp)
 4005798:	e0bff817 	ldw	r2,-32(fp)
 400579c:	1885883a 	add	r2,r3,r2
 40057a0:	10800117 	ldw	r2,4(r2)
 40057a4:	1080004c 	andi	r2,r2,1
 40057a8:	10002a1e 	bne	r2,zero,4005854 <_free_r+0x2a8>
  {
    sz += nextsz;
 40057ac:	e0fffe17 	ldw	r3,-8(fp)
 40057b0:	e0bff817 	ldw	r2,-32(fp)
 40057b4:	1885883a 	add	r2,r3,r2
 40057b8:	e0bffe15 	stw	r2,-8(fp)
    
    if (!islr && next->fd == last_remainder)  /* re-insert last_remainder */
 40057bc:	e0bffb17 	ldw	r2,-20(fp)
 40057c0:	1000181e 	bne	r2,zero,4005824 <_free_r+0x278>
 40057c4:	e0bff917 	ldw	r2,-28(fp)
 40057c8:	10c00217 	ldw	r3,8(r2)
 40057cc:	00810074 	movhi	r2,1025
 40057d0:	1090d104 	addi	r2,r2,17220
 40057d4:	1880131e 	bne	r3,r2,4005824 <_free_r+0x278>
    {
      islr = 1;
 40057d8:	00800044 	movi	r2,1
 40057dc:	e0bffb15 	stw	r2,-20(fp)
      link_last_remainder(p);   
 40057e0:	00810074 	movhi	r2,1025
 40057e4:	1090d104 	addi	r2,r2,17220
 40057e8:	e0ffff17 	ldw	r3,-4(fp)
 40057ec:	10c00315 	stw	r3,12(r2)
 40057f0:	00c10074 	movhi	r3,1025
 40057f4:	18d0d104 	addi	r3,r3,17220
 40057f8:	10800317 	ldw	r2,12(r2)
 40057fc:	18800215 	stw	r2,8(r3)
 4005800:	00810074 	movhi	r2,1025
 4005804:	1090d104 	addi	r2,r2,17220
 4005808:	e0ffff17 	ldw	r3,-4(fp)
 400580c:	18800315 	stw	r2,12(r3)
 4005810:	e0bfff17 	ldw	r2,-4(fp)
 4005814:	10c00317 	ldw	r3,12(r2)
 4005818:	e0bfff17 	ldw	r2,-4(fp)
 400581c:	10c00215 	stw	r3,8(r2)
 4005820:	00000c06 	br	4005854 <_free_r+0x2a8>
    }
    else
      unlink(next, bck, fwd);
 4005824:	e0bff917 	ldw	r2,-28(fp)
 4005828:	10800317 	ldw	r2,12(r2)
 400582c:	e0bffd15 	stw	r2,-12(fp)
 4005830:	e0bff917 	ldw	r2,-28(fp)
 4005834:	10800217 	ldw	r2,8(r2)
 4005838:	e0bffc15 	stw	r2,-16(fp)
 400583c:	e0bffc17 	ldw	r2,-16(fp)
 4005840:	e0fffd17 	ldw	r3,-12(fp)
 4005844:	10c00315 	stw	r3,12(r2)
 4005848:	e0bffd17 	ldw	r2,-12(fp)
 400584c:	e0fffc17 	ldw	r3,-16(fp)
 4005850:	10c00215 	stw	r3,8(r2)
  }


  set_head(p, sz | PREV_INUSE);
 4005854:	e0bffe17 	ldw	r2,-8(fp)
 4005858:	10c00054 	ori	r3,r2,1
 400585c:	e0bfff17 	ldw	r2,-4(fp)
 4005860:	10c00115 	stw	r3,4(r2)
  set_foot(p, sz);
 4005864:	e0ffff17 	ldw	r3,-4(fp)
 4005868:	e0bffe17 	ldw	r2,-8(fp)
 400586c:	1885883a 	add	r2,r3,r2
 4005870:	e0fffe17 	ldw	r3,-8(fp)
 4005874:	10c00015 	stw	r3,0(r2)
  if (!islr)
 4005878:	e0bffb17 	ldw	r2,-20(fp)
 400587c:	1000981e 	bne	r2,zero,4005ae0 <_free_r+0x534>
    frontlink(p, sz, idx, bck, fwd);  
 4005880:	e0bffe17 	ldw	r2,-8(fp)
 4005884:	10808028 	cmpgeui	r2,r2,512
 4005888:	10002b1e 	bne	r2,zero,4005938 <_free_r+0x38c>
 400588c:	e0bffe17 	ldw	r2,-8(fp)
 4005890:	1004d0fa 	srli	r2,r2,3
 4005894:	e0bff615 	stw	r2,-40(fp)
 4005898:	00810074 	movhi	r2,1025
 400589c:	1090cf04 	addi	r2,r2,17212
 40058a0:	11000117 	ldw	r4,4(r2)
 40058a4:	e0bff617 	ldw	r2,-40(fp)
 40058a8:	1000010e 	bge	r2,zero,40058b0 <_free_r+0x304>
 40058ac:	108000c4 	addi	r2,r2,3
 40058b0:	1005d0ba 	srai	r2,r2,2
 40058b4:	1007883a 	mov	r3,r2
 40058b8:	00800044 	movi	r2,1
 40058bc:	10c6983a 	sll	r3,r2,r3
 40058c0:	00810074 	movhi	r2,1025
 40058c4:	1090cf04 	addi	r2,r2,17212
 40058c8:	20c6b03a 	or	r3,r4,r3
 40058cc:	10c00115 	stw	r3,4(r2)
 40058d0:	e0bff617 	ldw	r2,-40(fp)
 40058d4:	10800044 	addi	r2,r2,1
 40058d8:	1085883a 	add	r2,r2,r2
 40058dc:	100690ba 	slli	r3,r2,2
 40058e0:	00810074 	movhi	r2,1025
 40058e4:	1090cf04 	addi	r2,r2,17212
 40058e8:	1885883a 	add	r2,r3,r2
 40058ec:	10bffe04 	addi	r2,r2,-8
 40058f0:	e0bffd15 	stw	r2,-12(fp)
 40058f4:	e0bffd17 	ldw	r2,-12(fp)
 40058f8:	10800217 	ldw	r2,8(r2)
 40058fc:	e0bffc15 	stw	r2,-16(fp)
 4005900:	e0bfff17 	ldw	r2,-4(fp)
 4005904:	e0fffd17 	ldw	r3,-12(fp)
 4005908:	10c00315 	stw	r3,12(r2)
 400590c:	e0bfff17 	ldw	r2,-4(fp)
 4005910:	e0fffc17 	ldw	r3,-16(fp)
 4005914:	10c00215 	stw	r3,8(r2)
 4005918:	e0bffd17 	ldw	r2,-12(fp)
 400591c:	e0ffff17 	ldw	r3,-4(fp)
 4005920:	10c00215 	stw	r3,8(r2)
 4005924:	e0bffd17 	ldw	r2,-12(fp)
 4005928:	10c00217 	ldw	r3,8(r2)
 400592c:	e0bffc17 	ldw	r2,-16(fp)
 4005930:	10c00315 	stw	r3,12(r2)
 4005934:	00006a06 	br	4005ae0 <_free_r+0x534>
 4005938:	e0bffe17 	ldw	r2,-8(fp)
 400593c:	1004d27a 	srli	r2,r2,9
 4005940:	1000031e 	bne	r2,zero,4005950 <_free_r+0x3a4>
 4005944:	e0bffe17 	ldw	r2,-8(fp)
 4005948:	1004d0fa 	srli	r2,r2,3
 400594c:	00002906 	br	40059f4 <_free_r+0x448>
 4005950:	e0bffe17 	ldw	r2,-8(fp)
 4005954:	1004d27a 	srli	r2,r2,9
 4005958:	10800168 	cmpgeui	r2,r2,5
 400595c:	1000041e 	bne	r2,zero,4005970 <_free_r+0x3c4>
 4005960:	e0bffe17 	ldw	r2,-8(fp)
 4005964:	1004d1ba 	srli	r2,r2,6
 4005968:	10800e04 	addi	r2,r2,56
 400596c:	00002106 	br	40059f4 <_free_r+0x448>
 4005970:	e0bffe17 	ldw	r2,-8(fp)
 4005974:	1004d27a 	srli	r2,r2,9
 4005978:	10800568 	cmpgeui	r2,r2,21
 400597c:	1000041e 	bne	r2,zero,4005990 <_free_r+0x3e4>
 4005980:	e0bffe17 	ldw	r2,-8(fp)
 4005984:	1004d27a 	srli	r2,r2,9
 4005988:	108016c4 	addi	r2,r2,91
 400598c:	00001906 	br	40059f4 <_free_r+0x448>
 4005990:	e0bffe17 	ldw	r2,-8(fp)
 4005994:	1004d27a 	srli	r2,r2,9
 4005998:	10801568 	cmpgeui	r2,r2,85
 400599c:	1000041e 	bne	r2,zero,40059b0 <_free_r+0x404>
 40059a0:	e0bffe17 	ldw	r2,-8(fp)
 40059a4:	1004d33a 	srli	r2,r2,12
 40059a8:	10801b84 	addi	r2,r2,110
 40059ac:	00001106 	br	40059f4 <_free_r+0x448>
 40059b0:	e0bffe17 	ldw	r2,-8(fp)
 40059b4:	1004d27a 	srli	r2,r2,9
 40059b8:	10805568 	cmpgeui	r2,r2,341
 40059bc:	1000041e 	bne	r2,zero,40059d0 <_free_r+0x424>
 40059c0:	e0bffe17 	ldw	r2,-8(fp)
 40059c4:	1004d3fa 	srli	r2,r2,15
 40059c8:	10801dc4 	addi	r2,r2,119
 40059cc:	00000906 	br	40059f4 <_free_r+0x448>
 40059d0:	e0bffe17 	ldw	r2,-8(fp)
 40059d4:	1004d27a 	srli	r2,r2,9
 40059d8:	10815568 	cmpgeui	r2,r2,1365
 40059dc:	1000041e 	bne	r2,zero,40059f0 <_free_r+0x444>
 40059e0:	e0bffe17 	ldw	r2,-8(fp)
 40059e4:	1004d4ba 	srli	r2,r2,18
 40059e8:	10801f04 	addi	r2,r2,124
 40059ec:	00000106 	br	40059f4 <_free_r+0x448>
 40059f0:	00801f84 	movi	r2,126
 40059f4:	e0bff615 	stw	r2,-40(fp)
 40059f8:	e0bff617 	ldw	r2,-40(fp)
 40059fc:	10800044 	addi	r2,r2,1
 4005a00:	1085883a 	add	r2,r2,r2
 4005a04:	100690ba 	slli	r3,r2,2
 4005a08:	00810074 	movhi	r2,1025
 4005a0c:	1090cf04 	addi	r2,r2,17212
 4005a10:	1885883a 	add	r2,r3,r2
 4005a14:	10bffe04 	addi	r2,r2,-8
 4005a18:	e0bffd15 	stw	r2,-12(fp)
 4005a1c:	e0bffd17 	ldw	r2,-12(fp)
 4005a20:	10800217 	ldw	r2,8(r2)
 4005a24:	e0bffc15 	stw	r2,-16(fp)
 4005a28:	e0fffc17 	ldw	r3,-16(fp)
 4005a2c:	e0bffd17 	ldw	r2,-12(fp)
 4005a30:	1880121e 	bne	r3,r2,4005a7c <_free_r+0x4d0>
 4005a34:	00810074 	movhi	r2,1025
 4005a38:	1090cf04 	addi	r2,r2,17212
 4005a3c:	11000117 	ldw	r4,4(r2)
 4005a40:	e0bff617 	ldw	r2,-40(fp)
 4005a44:	1000010e 	bge	r2,zero,4005a4c <_free_r+0x4a0>
 4005a48:	108000c4 	addi	r2,r2,3
 4005a4c:	1005d0ba 	srai	r2,r2,2
 4005a50:	1007883a 	mov	r3,r2
 4005a54:	00800044 	movi	r2,1
 4005a58:	10c6983a 	sll	r3,r2,r3
 4005a5c:	00810074 	movhi	r2,1025
 4005a60:	1090cf04 	addi	r2,r2,17212
 4005a64:	20c6b03a 	or	r3,r4,r3
 4005a68:	10c00115 	stw	r3,4(r2)
 4005a6c:	00000f06 	br	4005aac <_free_r+0x500>
 4005a70:	e0bffc17 	ldw	r2,-16(fp)
 4005a74:	10800217 	ldw	r2,8(r2)
 4005a78:	e0bffc15 	stw	r2,-16(fp)
 4005a7c:	e0fffc17 	ldw	r3,-16(fp)
 4005a80:	e0bffd17 	ldw	r2,-12(fp)
 4005a84:	18800626 	beq	r3,r2,4005aa0 <_free_r+0x4f4>
 4005a88:	e0bffc17 	ldw	r2,-16(fp)
 4005a8c:	10c00117 	ldw	r3,4(r2)
 4005a90:	00bfff04 	movi	r2,-4
 4005a94:	1884703a 	and	r2,r3,r2
 4005a98:	e0fffe17 	ldw	r3,-8(fp)
 4005a9c:	18bff436 	bltu	r3,r2,4005a70 <_free_r+0x4c4>
 4005aa0:	e0bffc17 	ldw	r2,-16(fp)
 4005aa4:	10800317 	ldw	r2,12(r2)
 4005aa8:	e0bffd15 	stw	r2,-12(fp)
 4005aac:	e0bfff17 	ldw	r2,-4(fp)
 4005ab0:	e0fffd17 	ldw	r3,-12(fp)
 4005ab4:	10c00315 	stw	r3,12(r2)
 4005ab8:	e0bfff17 	ldw	r2,-4(fp)
 4005abc:	e0fffc17 	ldw	r3,-16(fp)
 4005ac0:	10c00215 	stw	r3,8(r2)
 4005ac4:	e0bffd17 	ldw	r2,-12(fp)
 4005ac8:	e0ffff17 	ldw	r3,-4(fp)
 4005acc:	10c00215 	stw	r3,8(r2)
 4005ad0:	e0bffd17 	ldw	r2,-12(fp)
 4005ad4:	10c00217 	ldw	r3,8(r2)
 4005ad8:	e0bffc17 	ldw	r2,-16(fp)
 4005adc:	10c00315 	stw	r3,12(r2)

  MALLOC_UNLOCK;
 4005ae0:	e13ff517 	ldw	r4,-44(fp)
 4005ae4:	4010f440 	call	4010f44 <__malloc_unlock>
 4005ae8:	00000106 	br	4005af0 <_free_r+0x544>
    return;
 4005aec:	0001883a 	nop

#endif /* MALLOC_PROVIDED */
}
 4005af0:	e037883a 	mov	sp,fp
 4005af4:	dfc00117 	ldw	ra,4(sp)
 4005af8:	df000017 	ldw	fp,0(sp)
 4005afc:	dec00204 	addi	sp,sp,8
 4005b00:	f800283a 	ret

04005b04 <_malloc_trim_r>:
#if __STD_C
int malloc_trim(RARG size_t pad)
#else
int malloc_trim(RARG pad) RDECL size_t pad;
#endif
{
 4005b04:	defff704 	addi	sp,sp,-36
 4005b08:	dfc00815 	stw	ra,32(sp)
 4005b0c:	df000715 	stw	fp,28(sp)
 4005b10:	df000704 	addi	fp,sp,28
 4005b14:	e13ffa15 	stw	r4,-24(fp)
 4005b18:	e17ff915 	stw	r5,-28(fp)
  long  top_size;        /* Amount of top-most memory */
  long  extra;           /* Amount to release */
  char* current_brk;     /* address returned by pre-check sbrk call */
  char* new_brk;         /* address returned by negative sbrk call */

  unsigned long pagesz = malloc_getpagesize;
 4005b1c:	00840004 	movi	r2,4096
 4005b20:	e0bfff15 	stw	r2,-4(fp)

  MALLOC_LOCK;
 4005b24:	e13ffa17 	ldw	r4,-24(fp)
 4005b28:	4010f200 	call	4010f20 <__malloc_lock>

  top_size = chunksize(top);
 4005b2c:	00810074 	movhi	r2,1025
 4005b30:	1090cf04 	addi	r2,r2,17212
 4005b34:	10800217 	ldw	r2,8(r2)
 4005b38:	10800117 	ldw	r2,4(r2)
 4005b3c:	1007883a 	mov	r3,r2
 4005b40:	00bfff04 	movi	r2,-4
 4005b44:	1884703a 	and	r2,r3,r2
 4005b48:	e0bffe15 	stw	r2,-8(fp)
  extra = ((top_size - pad - MINSIZE + (pagesz-1)) / pagesz - 1) * pagesz;
 4005b4c:	e0fffe17 	ldw	r3,-8(fp)
 4005b50:	e0bff917 	ldw	r2,-28(fp)
 4005b54:	1887c83a 	sub	r3,r3,r2
 4005b58:	e0bfff17 	ldw	r2,-4(fp)
 4005b5c:	1885883a 	add	r2,r3,r2
 4005b60:	10bffbc4 	addi	r2,r2,-17
 4005b64:	e17fff17 	ldw	r5,-4(fp)
 4005b68:	1009883a 	mov	r4,r2
 4005b6c:	400e0d40 	call	400e0d4 <__udivsi3>
 4005b70:	10ffffc4 	addi	r3,r2,-1
 4005b74:	e0bfff17 	ldw	r2,-4(fp)
 4005b78:	1885383a 	mul	r2,r3,r2
 4005b7c:	e0bffd15 	stw	r2,-12(fp)

  if (extra < (long)pagesz)  /* Not enough memory to release */
 4005b80:	e0bfff17 	ldw	r2,-4(fp)
 4005b84:	e0fffd17 	ldw	r3,-12(fp)
 4005b88:	1880040e 	bge	r3,r2,4005b9c <_malloc_trim_r+0x98>
  {
    MALLOC_UNLOCK;
 4005b8c:	e13ffa17 	ldw	r4,-24(fp)
 4005b90:	4010f440 	call	4010f44 <__malloc_unlock>
    return 0;
 4005b94:	0005883a 	mov	r2,zero
 4005b98:	00004506 	br	4005cb0 <_malloc_trim_r+0x1ac>
  }

  else
  {
    /* Test to make sure no one else called sbrk */
    current_brk = (char*)(MORECORE (0));
 4005b9c:	000b883a 	mov	r5,zero
 4005ba0:	e13ffa17 	ldw	r4,-24(fp)
 4005ba4:	40094200 	call	4009420 <_sbrk_r>
 4005ba8:	e0bffc15 	stw	r2,-16(fp)
    if (current_brk != (char*)(top) + top_size)
 4005bac:	00810074 	movhi	r2,1025
 4005bb0:	1090cf04 	addi	r2,r2,17212
 4005bb4:	10c00217 	ldw	r3,8(r2)
 4005bb8:	e0bffe17 	ldw	r2,-8(fp)
 4005bbc:	1885883a 	add	r2,r3,r2
 4005bc0:	e0fffc17 	ldw	r3,-16(fp)
 4005bc4:	18800426 	beq	r3,r2,4005bd8 <_malloc_trim_r+0xd4>
    {
      MALLOC_UNLOCK;
 4005bc8:	e13ffa17 	ldw	r4,-24(fp)
 4005bcc:	4010f440 	call	4010f44 <__malloc_unlock>
      return 0;     /* Apparently we don't own memory; must fail */
 4005bd0:	0005883a 	mov	r2,zero
 4005bd4:	00003606 	br	4005cb0 <_malloc_trim_r+0x1ac>
    }

    else
    {
      new_brk = (char*)(MORECORE (-extra));
 4005bd8:	e0bffd17 	ldw	r2,-12(fp)
 4005bdc:	0085c83a 	sub	r2,zero,r2
 4005be0:	100b883a 	mov	r5,r2
 4005be4:	e13ffa17 	ldw	r4,-24(fp)
 4005be8:	40094200 	call	4009420 <_sbrk_r>
 4005bec:	e0bffb15 	stw	r2,-20(fp)
      
      if (new_brk == (char*)(MORECORE_FAILURE)) /* sbrk failed? */
 4005bf0:	e0bffb17 	ldw	r2,-20(fp)
 4005bf4:	10bfffd8 	cmpnei	r2,r2,-1
 4005bf8:	10001c1e 	bne	r2,zero,4005c6c <_malloc_trim_r+0x168>
      {
        /* Try to figure out what we have */
        current_brk = (char*)(MORECORE (0));
 4005bfc:	000b883a 	mov	r5,zero
 4005c00:	e13ffa17 	ldw	r4,-24(fp)
 4005c04:	40094200 	call	4009420 <_sbrk_r>
 4005c08:	e0bffc15 	stw	r2,-16(fp)
        top_size = current_brk - (char*)top;
 4005c0c:	00810074 	movhi	r2,1025
 4005c10:	1090cf04 	addi	r2,r2,17212
 4005c14:	10800217 	ldw	r2,8(r2)
 4005c18:	e0fffc17 	ldw	r3,-16(fp)
 4005c1c:	1885c83a 	sub	r2,r3,r2
 4005c20:	e0bffe15 	stw	r2,-8(fp)
        if (top_size >= (long)MINSIZE) /* if not, we are very very dead! */
 4005c24:	e0bffe17 	ldw	r2,-8(fp)
 4005c28:	10800410 	cmplti	r2,r2,16
 4005c2c:	10000b1e 	bne	r2,zero,4005c5c <_malloc_trim_r+0x158>
        {
          sbrked_mem = current_brk - sbrk_base;
 4005c30:	d0a00317 	ldw	r2,-32756(gp)
 4005c34:	e0fffc17 	ldw	r3,-16(fp)
 4005c38:	1887c83a 	sub	r3,r3,r2
 4005c3c:	00810074 	movhi	r2,1025
 4005c40:	10dd7c15 	stw	r3,30192(r2)
          set_head(top, top_size | PREV_INUSE);
 4005c44:	e0bffe17 	ldw	r2,-8(fp)
 4005c48:	10c00054 	ori	r3,r2,1
 4005c4c:	00810074 	movhi	r2,1025
 4005c50:	1090cf04 	addi	r2,r2,17212
 4005c54:	10800217 	ldw	r2,8(r2)
 4005c58:	10c00115 	stw	r3,4(r2)
        }
        check_chunk(top);
	MALLOC_UNLOCK;
 4005c5c:	e13ffa17 	ldw	r4,-24(fp)
 4005c60:	4010f440 	call	4010f44 <__malloc_unlock>
        return 0; 
 4005c64:	0005883a 	mov	r2,zero
 4005c68:	00001106 	br	4005cb0 <_malloc_trim_r+0x1ac>
      }

      else
      {
        /* Success. Adjust top accordingly. */
        set_head(top, (top_size - extra) | PREV_INUSE);
 4005c6c:	e0fffe17 	ldw	r3,-8(fp)
 4005c70:	e0bffd17 	ldw	r2,-12(fp)
 4005c74:	1885c83a 	sub	r2,r3,r2
 4005c78:	10c00054 	ori	r3,r2,1
 4005c7c:	00810074 	movhi	r2,1025
 4005c80:	1090cf04 	addi	r2,r2,17212
 4005c84:	10800217 	ldw	r2,8(r2)
 4005c88:	10c00115 	stw	r3,4(r2)
        sbrked_mem -= extra;
 4005c8c:	00810074 	movhi	r2,1025
 4005c90:	10dd7c17 	ldw	r3,30192(r2)
 4005c94:	e0bffd17 	ldw	r2,-12(fp)
 4005c98:	1887c83a 	sub	r3,r3,r2
 4005c9c:	00810074 	movhi	r2,1025
 4005ca0:	10dd7c15 	stw	r3,30192(r2)
        check_chunk(top);
	MALLOC_UNLOCK;
 4005ca4:	e13ffa17 	ldw	r4,-24(fp)
 4005ca8:	4010f440 	call	4010f44 <__malloc_unlock>
        return 1;
 4005cac:	00800044 	movi	r2,1
      }
    }
  }
}
 4005cb0:	e037883a 	mov	sp,fp
 4005cb4:	dfc00117 	ldw	ra,4(sp)
 4005cb8:	df000017 	ldw	fp,0(sp)
 4005cbc:	dec00204 	addi	sp,sp,8
 4005cc0:	f800283a 	ret

04005cc4 <_fwalk>:
#include "local.h"

int
_fwalk (struct _reent *ptr,
       register int (*function) (FILE *))
{
 4005cc4:	defff804 	addi	sp,sp,-32
 4005cc8:	dfc00715 	stw	ra,28(sp)
 4005ccc:	df000615 	stw	fp,24(sp)
 4005cd0:	dd000515 	stw	r20,20(sp)
 4005cd4:	dcc00415 	stw	r19,16(sp)
 4005cd8:	dc800315 	stw	r18,12(sp)
 4005cdc:	dc400215 	stw	r17,8(sp)
 4005ce0:	dc000115 	stw	r16,4(sp)
 4005ce4:	df000604 	addi	fp,sp,24
 4005ce8:	e13ffa15 	stw	r4,-24(fp)
 4005cec:	2829883a 	mov	r20,r5
  register FILE *fp;
  register int n, ret = 0;
 4005cf0:	0027883a 	mov	r19,zero
   * removed.
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
 4005cf4:	e0bffa17 	ldw	r2,-24(fp)
 4005cf8:	1440b804 	addi	r17,r2,736
 4005cfc:	00001b06 	br	4005d6c <_fwalk+0xa8>
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
 4005d00:	8c000217 	ldw	r16,8(r17)
 4005d04:	8c800117 	ldw	r18,4(r17)
 4005d08:	00001506 	br	4005d60 <_fwalk+0x9c>
      if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
 4005d0c:	8080030b 	ldhu	r2,12(r16)
 4005d10:	10bfffcc 	andi	r2,r2,65535
 4005d14:	10a0001c 	xori	r2,r2,32768
 4005d18:	10a00004 	addi	r2,r2,-32768
 4005d1c:	10000f26 	beq	r2,zero,4005d5c <_fwalk+0x98>
 4005d20:	8080030b 	ldhu	r2,12(r16)
 4005d24:	10bfffcc 	andi	r2,r2,65535
 4005d28:	10a0001c 	xori	r2,r2,32768
 4005d2c:	10a00004 	addi	r2,r2,-32768
 4005d30:	10800060 	cmpeqi	r2,r2,1
 4005d34:	1000091e 	bne	r2,zero,4005d5c <_fwalk+0x98>
 4005d38:	8080038b 	ldhu	r2,14(r16)
 4005d3c:	10bfffcc 	andi	r2,r2,65535
 4005d40:	10a0001c 	xori	r2,r2,32768
 4005d44:	10a00004 	addi	r2,r2,-32768
 4005d48:	10bfffe0 	cmpeqi	r2,r2,-1
 4005d4c:	1000031e 	bne	r2,zero,4005d5c <_fwalk+0x98>
	ret |= (*function) (fp);
 4005d50:	8009883a 	mov	r4,r16
 4005d54:	a03ee83a 	callr	r20
 4005d58:	98a6b03a 	or	r19,r19,r2
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
 4005d5c:	84001a04 	addi	r16,r16,104
 4005d60:	94bfffc4 	addi	r18,r18,-1
 4005d64:	903fe90e 	bge	r18,zero,4005d0c <_fwalk+0x48>
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
 4005d68:	8c400017 	ldw	r17,0(r17)
 4005d6c:	883fe41e 	bne	r17,zero,4005d00 <_fwalk+0x3c>

  return ret;
 4005d70:	9805883a 	mov	r2,r19
}
 4005d74:	e6fffb04 	addi	sp,fp,-20
 4005d78:	dfc00617 	ldw	ra,24(sp)
 4005d7c:	df000517 	ldw	fp,20(sp)
 4005d80:	dd000417 	ldw	r20,16(sp)
 4005d84:	dcc00317 	ldw	r19,12(sp)
 4005d88:	dc800217 	ldw	r18,8(sp)
 4005d8c:	dc400117 	ldw	r17,4(sp)
 4005d90:	dc000017 	ldw	r16,0(sp)
 4005d94:	dec00704 	addi	sp,sp,28
 4005d98:	f800283a 	ret

04005d9c <_fwalk_reent>:
/* Special version of __fwalk where the function pointer is a reentrant
   I/O function (e.g. _fclose_r).  */
int
_fwalk_reent (struct _reent *ptr,
       register int (*reent_function) (struct _reent *, FILE *))
{
 4005d9c:	defff804 	addi	sp,sp,-32
 4005da0:	dfc00715 	stw	ra,28(sp)
 4005da4:	df000615 	stw	fp,24(sp)
 4005da8:	dd000515 	stw	r20,20(sp)
 4005dac:	dcc00415 	stw	r19,16(sp)
 4005db0:	dc800315 	stw	r18,12(sp)
 4005db4:	dc400215 	stw	r17,8(sp)
 4005db8:	dc000115 	stw	r16,4(sp)
 4005dbc:	df000604 	addi	fp,sp,24
 4005dc0:	e13ffa15 	stw	r4,-24(fp)
 4005dc4:	2829883a 	mov	r20,r5
  register FILE *fp;
  register int n, ret = 0;
 4005dc8:	0027883a 	mov	r19,zero
   * removed.
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
 4005dcc:	e0bffa17 	ldw	r2,-24(fp)
 4005dd0:	1440b804 	addi	r17,r2,736
 4005dd4:	00001c06 	br	4005e48 <_fwalk_reent+0xac>
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
 4005dd8:	8c000217 	ldw	r16,8(r17)
 4005ddc:	8c800117 	ldw	r18,4(r17)
 4005de0:	00001606 	br	4005e3c <_fwalk_reent+0xa0>
      if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
 4005de4:	8080030b 	ldhu	r2,12(r16)
 4005de8:	10bfffcc 	andi	r2,r2,65535
 4005dec:	10a0001c 	xori	r2,r2,32768
 4005df0:	10a00004 	addi	r2,r2,-32768
 4005df4:	10001026 	beq	r2,zero,4005e38 <_fwalk_reent+0x9c>
 4005df8:	8080030b 	ldhu	r2,12(r16)
 4005dfc:	10bfffcc 	andi	r2,r2,65535
 4005e00:	10a0001c 	xori	r2,r2,32768
 4005e04:	10a00004 	addi	r2,r2,-32768
 4005e08:	10800060 	cmpeqi	r2,r2,1
 4005e0c:	10000a1e 	bne	r2,zero,4005e38 <_fwalk_reent+0x9c>
 4005e10:	8080038b 	ldhu	r2,14(r16)
 4005e14:	10bfffcc 	andi	r2,r2,65535
 4005e18:	10a0001c 	xori	r2,r2,32768
 4005e1c:	10a00004 	addi	r2,r2,-32768
 4005e20:	10bfffe0 	cmpeqi	r2,r2,-1
 4005e24:	1000041e 	bne	r2,zero,4005e38 <_fwalk_reent+0x9c>
	ret |= (*reent_function) (ptr, fp);
 4005e28:	800b883a 	mov	r5,r16
 4005e2c:	e13ffa17 	ldw	r4,-24(fp)
 4005e30:	a03ee83a 	callr	r20
 4005e34:	98a6b03a 	or	r19,r19,r2
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
 4005e38:	84001a04 	addi	r16,r16,104
 4005e3c:	94bfffc4 	addi	r18,r18,-1
 4005e40:	903fe80e 	bge	r18,zero,4005de4 <_fwalk_reent+0x48>
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
 4005e44:	8c400017 	ldw	r17,0(r17)
 4005e48:	883fe31e 	bne	r17,zero,4005dd8 <_fwalk_reent+0x3c>

  return ret;
 4005e4c:	9805883a 	mov	r2,r19
}
 4005e50:	e6fffb04 	addi	sp,fp,-20
 4005e54:	dfc00617 	ldw	ra,24(sp)
 4005e58:	df000517 	ldw	fp,20(sp)
 4005e5c:	dd000417 	ldw	r20,16(sp)
 4005e60:	dcc00317 	ldw	r19,12(sp)
 4005e64:	dc800217 	ldw	r18,8(sp)
 4005e68:	dc400117 	ldw	r17,4(sp)
 4005e6c:	dc000017 	ldw	r16,0(sp)
 4005e70:	dec00704 	addi	sp,sp,28
 4005e74:	f800283a 	ret

04005e78 <__get_global_locale>:

/* In POSIX terms the global locale is the process-wide locale.  Use this
   function to always refer to the global locale. */
_ELIDABLE_INLINE struct __locale_t *
__get_global_locale ()
{
 4005e78:	deffff04 	addi	sp,sp,-4
 4005e7c:	df000015 	stw	fp,0(sp)
 4005e80:	d839883a 	mov	fp,sp
  extern struct __locale_t __global_locale;
  return &__global_locale;
 4005e84:	00810074 	movhi	r2,1025
 4005e88:	10907404 	addi	r2,r2,16848
}
 4005e8c:	e037883a 	mov	sp,fp
 4005e90:	df000017 	ldw	fp,0(sp)
 4005e94:	dec00104 	addi	sp,sp,4
 4005e98:	f800283a 	ret

04005e9c <__get_current_locale>:
   using locale info without providing a locale as parameter (*_l functions).
   The current locale is either the locale of the current thread, if the
   thread called uselocale, or the global locale if not. */
_ELIDABLE_INLINE struct __locale_t *
__get_current_locale (void)
{
 4005e9c:	defffe04 	addi	sp,sp,-8
 4005ea0:	dfc00115 	stw	ra,4(sp)
 4005ea4:	df000015 	stw	fp,0(sp)
 4005ea8:	d839883a 	mov	fp,sp
#ifdef __HAVE_LOCALE_INFO__
  return _REENT->_locale ?: __get_global_locale ();
#else
  return __get_global_locale();
 4005eac:	4005e780 	call	4005e78 <__get_global_locale>
#endif
}
 4005eb0:	e037883a 	mov	sp,fp
 4005eb4:	dfc00117 	ldw	ra,4(sp)
 4005eb8:	df000017 	ldw	fp,0(sp)
 4005ebc:	dec00204 	addi	sp,sp,8
 4005ec0:	f800283a 	ret

04005ec4 <__get_C_locale>:

/* Only access fixed "C" locale using this function.  Fake for !_MB_CAPABLE
   targets by returning ptr to globale locale. */
_ELIDABLE_INLINE struct __locale_t *
__get_C_locale (void)
{
 4005ec4:	defffe04 	addi	sp,sp,-8
 4005ec8:	dfc00115 	stw	ra,4(sp)
 4005ecc:	df000015 	stw	fp,0(sp)
 4005ed0:	d839883a 	mov	fp,sp
#ifndef _MB_CAPABLE
  return __get_global_locale ();
 4005ed4:	4005e780 	call	4005e78 <__get_global_locale>
#else
  extern const struct __locale_t __C_locale;
  return (struct __locale_t *) &__C_locale;
#endif
}
 4005ed8:	e037883a 	mov	sp,fp
 4005edc:	dfc00117 	ldw	ra,4(sp)
 4005ee0:	df000017 	ldw	fp,0(sp)
 4005ee4:	dec00204 	addi	sp,sp,8
 4005ee8:	f800283a 	ret

04005eec <__localeconv_l>:
#include <reent.h>
#include "setlocale.h"

struct lconv *
__localeconv_l (struct __locale_t *locale)
{
 4005eec:	defffc04 	addi	sp,sp,-16
 4005ef0:	dfc00315 	stw	ra,12(sp)
 4005ef4:	df000215 	stw	fp,8(sp)
 4005ef8:	df000204 	addi	fp,sp,8
 4005efc:	e13ffe15 	stw	r4,-8(fp)
  struct lconv *lconv = &locale->lconv;
 4005f00:	e0bffe17 	ldw	r2,-8(fp)
 4005f04:	10803c04 	addi	r2,r2,240
 4005f08:	e0bfff15 	stw	r2,-4(fp)
  if (locale == __get_C_locale ())
 4005f0c:	4005ec40 	call	4005ec4 <__get_C_locale>
 4005f10:	1007883a 	mov	r3,r2
 4005f14:	e0bffe17 	ldw	r2,-8(fp)
 4005f18:	10c0021e 	bne	r2,r3,4005f24 <__localeconv_l+0x38>
    return lconv;
 4005f1c:	e0bfff17 	ldw	r2,-4(fp)
 4005f20:	00000106 	br	4005f28 <__localeconv_l+0x3c>
  lconv->int_n_sep_by_space = m->n_sep_by_space[0];
  lconv->int_n_sign_posn = m->n_sign_posn[0];
  lconv->int_p_sign_posn = m->p_sign_posn[0];
#endif /* !__HAVE_LOCALE_INFO_EXTENDED__ */
#endif /* __HAVE_LOCALE_INFO__ */
  return lconv;
 4005f24:	e0bfff17 	ldw	r2,-4(fp)
}
 4005f28:	e037883a 	mov	sp,fp
 4005f2c:	dfc00117 	ldw	ra,4(sp)
 4005f30:	df000017 	ldw	fp,0(sp)
 4005f34:	dec00204 	addi	sp,sp,8
 4005f38:	f800283a 	ret

04005f3c <_localeconv_r>:

struct lconv *
_localeconv_r (struct _reent *data)
{
 4005f3c:	defffd04 	addi	sp,sp,-12
 4005f40:	dfc00215 	stw	ra,8(sp)
 4005f44:	df000115 	stw	fp,4(sp)
 4005f48:	df000104 	addi	fp,sp,4
 4005f4c:	e13fff15 	stw	r4,-4(fp)
  /* Note that we always fall back to the global locale, even in case
     of specifying a reent.  Otherwise a call to _localeconv_r would just
     crash if the reent locale pointer is NULL. */
  return __localeconv_l (__get_current_locale ());
 4005f50:	4005e9c0 	call	4005e9c <__get_current_locale>
 4005f54:	1009883a 	mov	r4,r2
 4005f58:	4005eec0 	call	4005eec <__localeconv_l>
}
 4005f5c:	e037883a 	mov	sp,fp
 4005f60:	dfc00117 	ldw	ra,4(sp)
 4005f64:	df000017 	ldw	fp,0(sp)
 4005f68:	dec00204 	addi	sp,sp,8
 4005f6c:	f800283a 	ret

04005f70 <localeconv>:

#ifndef _REENT_ONLY
struct lconv *
localeconv (void)
{
 4005f70:	defffe04 	addi	sp,sp,-8
 4005f74:	dfc00115 	stw	ra,4(sp)
 4005f78:	df000015 	stw	fp,0(sp)
 4005f7c:	d839883a 	mov	fp,sp
  return __localeconv_l (__get_current_locale ());
 4005f80:	4005e9c0 	call	4005e9c <__get_current_locale>
 4005f84:	1009883a 	mov	r4,r2
 4005f88:	4005eec0 	call	4005eec <__localeconv_l>
}
 4005f8c:	e037883a 	mov	sp,fp
 4005f90:	dfc00117 	ldw	ra,4(sp)
 4005f94:	df000017 	ldw	fp,0(sp)
 4005f98:	dec00204 	addi	sp,sp,8
 4005f9c:	f800283a 	ret

04005fa0 <__get_global_locale>:
{
 4005fa0:	deffff04 	addi	sp,sp,-4
 4005fa4:	df000015 	stw	fp,0(sp)
 4005fa8:	d839883a 	mov	fp,sp
  return &__global_locale;
 4005fac:	00810074 	movhi	r2,1025
 4005fb0:	10907404 	addi	r2,r2,16848
}
 4005fb4:	e037883a 	mov	sp,fp
 4005fb8:	df000017 	ldw	fp,0(sp)
 4005fbc:	dec00104 	addi	sp,sp,4
 4005fc0:	f800283a 	ret

04005fc4 <__get_current_locale>:
{
 4005fc4:	defffe04 	addi	sp,sp,-8
 4005fc8:	dfc00115 	stw	ra,4(sp)
 4005fcc:	df000015 	stw	fp,0(sp)
 4005fd0:	d839883a 	mov	fp,sp
  return __get_global_locale();
 4005fd4:	4005fa00 	call	4005fa0 <__get_global_locale>
}
 4005fd8:	e037883a 	mov	sp,fp
 4005fdc:	dfc00117 	ldw	ra,4(sp)
 4005fe0:	df000017 	ldw	fp,0(sp)
 4005fe4:	dec00204 	addi	sp,sp,8
 4005fe8:	f800283a 	ret

04005fec <_setlocale_r>:

char *
_setlocale_r (struct _reent *p,
       int category,
       const char *locale)
{
 4005fec:	defffb04 	addi	sp,sp,-20
 4005ff0:	dfc00415 	stw	ra,16(sp)
 4005ff4:	df000315 	stw	fp,12(sp)
 4005ff8:	df000304 	addi	fp,sp,12
 4005ffc:	e13fff15 	stw	r4,-4(fp)
 4006000:	e17ffe15 	stw	r5,-8(fp)
 4006004:	e1bffd15 	stw	r6,-12(fp)
#ifndef _MB_CAPABLE
  if (locale)
 4006008:	e0bffd17 	ldw	r2,-12(fp)
 400600c:	10001026 	beq	r2,zero,4006050 <_setlocale_r+0x64>
    { 
      if (strcmp (locale, "POSIX") && strcmp (locale, "C")
 4006010:	01410074 	movhi	r5,1025
 4006014:	294de604 	addi	r5,r5,14232
 4006018:	e13ffd17 	ldw	r4,-12(fp)
 400601c:	40096f40 	call	40096f4 <strcmp>
 4006020:	10000b26 	beq	r2,zero,4006050 <_setlocale_r+0x64>
 4006024:	01410074 	movhi	r5,1025
 4006028:	294de804 	addi	r5,r5,14240
 400602c:	e13ffd17 	ldw	r4,-12(fp)
 4006030:	40096f40 	call	40096f4 <strcmp>
 4006034:	10000626 	beq	r2,zero,4006050 <_setlocale_r+0x64>
	  && strcmp (locale, ""))
 4006038:	e0bffd17 	ldw	r2,-12(fp)
 400603c:	10800003 	ldbu	r2,0(r2)
 4006040:	10803fcc 	andi	r2,r2,255
 4006044:	10000226 	beq	r2,zero,4006050 <_setlocale_r+0x64>
        return NULL;
 4006048:	0005883a 	mov	r2,zero
 400604c:	00000206 	br	4006058 <_setlocale_r+0x6c>
    }
  return "C";
 4006050:	00810074 	movhi	r2,1025
 4006054:	108de804 	addi	r2,r2,14240
	  return NULL;
	}
    }
  return currentlocale ();
#endif /* _MB_CAPABLE */
}
 4006058:	e037883a 	mov	sp,fp
 400605c:	dfc00117 	ldw	ra,4(sp)
 4006060:	df000017 	ldw	fp,0(sp)
 4006064:	dec00204 	addi	sp,sp,8
 4006068:	f800283a 	ret

0400606c <__locale_mb_cur_max>:
}
#endif /* _MB_CAPABLE */

int
__locale_mb_cur_max (void)
{
 400606c:	defffe04 	addi	sp,sp,-8
 4006070:	dfc00115 	stw	ra,4(sp)
 4006074:	df000015 	stw	fp,0(sp)
 4006078:	d839883a 	mov	fp,sp
#ifdef __HAVE_LOCALE_INFO__
  return __get_current_ctype_locale ()->mb_cur_max[0];
#else
  return __get_current_locale ()->mb_cur_max[0];
 400607c:	4005fc40 	call	4005fc4 <__get_current_locale>
 4006080:	10804a03 	ldbu	r2,296(r2)
 4006084:	10803fcc 	andi	r2,r2,255
 4006088:	1080201c 	xori	r2,r2,128
 400608c:	10bfe004 	addi	r2,r2,-128
#endif
}
 4006090:	e037883a 	mov	sp,fp
 4006094:	dfc00117 	ldw	ra,4(sp)
 4006098:	df000017 	ldw	fp,0(sp)
 400609c:	dec00204 	addi	sp,sp,8
 40060a0:	f800283a 	ret

040060a4 <setlocale>:
#ifndef _REENT_ONLY

char *
setlocale (int category,
	const char *locale)
{
 40060a4:	defffc04 	addi	sp,sp,-16
 40060a8:	dfc00315 	stw	ra,12(sp)
 40060ac:	df000215 	stw	fp,8(sp)
 40060b0:	df000204 	addi	fp,sp,8
 40060b4:	e13fff15 	stw	r4,-4(fp)
 40060b8:	e17ffe15 	stw	r5,-8(fp)
  return _setlocale_r (_REENT, category, locale);
 40060bc:	d0a00017 	ldw	r2,-32768(gp)
 40060c0:	e1bffe17 	ldw	r6,-8(fp)
 40060c4:	e17fff17 	ldw	r5,-4(fp)
 40060c8:	1009883a 	mov	r4,r2
 40060cc:	4005fec0 	call	4005fec <_setlocale_r>
}
 40060d0:	e037883a 	mov	sp,fp
 40060d4:	dfc00117 	ldw	ra,4(sp)
 40060d8:	df000017 	ldw	fp,0(sp)
 40060dc:	dec00204 	addi	sp,sp,8
 40060e0:	f800283a 	ret

040060e4 <__smakebuf_r>:
 */

void
__smakebuf_r (struct _reent *ptr,
       register FILE *fp)
{
 40060e4:	defff804 	addi	sp,sp,-32
 40060e8:	dfc00715 	stw	ra,28(sp)
 40060ec:	df000615 	stw	fp,24(sp)
 40060f0:	dc400515 	stw	r17,20(sp)
 40060f4:	dc000415 	stw	r16,16(sp)
 40060f8:	df000604 	addi	fp,sp,24
 40060fc:	e13ffa15 	stw	r4,-24(fp)
 4006100:	2821883a 	mov	r16,r5
  register void *p;
  int flags;
  size_t size;
  int couldbetty;

  if (fp->_flags & __SNBF)
 4006104:	8080030b 	ldhu	r2,12(r16)
 4006108:	10bfffcc 	andi	r2,r2,65535
 400610c:	1080008c 	andi	r2,r2,2
 4006110:	10000726 	beq	r2,zero,4006130 <__smakebuf_r+0x4c>
    {
      fp->_bf._base = fp->_p = fp->_nbuf;
 4006114:	808010c4 	addi	r2,r16,67
 4006118:	80800015 	stw	r2,0(r16)
 400611c:	80800017 	ldw	r2,0(r16)
 4006120:	80800415 	stw	r2,16(r16)
      fp->_bf._size = 1;
 4006124:	00800044 	movi	r2,1
 4006128:	80800515 	stw	r2,20(r16)
 400612c:	00005006 	br	4006270 <__smakebuf_r+0x18c>
      return;
    }
  flags = __swhatbuf_r (ptr, fp, &size, &couldbetty);
 4006130:	e0fffb04 	addi	r3,fp,-20
 4006134:	e0bffc04 	addi	r2,fp,-16
 4006138:	180f883a 	mov	r7,r3
 400613c:	100d883a 	mov	r6,r2
 4006140:	800b883a 	mov	r5,r16
 4006144:	e13ffa17 	ldw	r4,-24(fp)
 4006148:	400628c0 	call	400628c <__swhatbuf_r>
 400614c:	e0bffd15 	stw	r2,-12(fp)
  /* Make unbuffered by default: */                /* IntelSpecific */
  if (couldbetty && _isatty_r (ptr, fp->_file))    /* IntelSpecific */
 4006150:	e0bffb17 	ldw	r2,-20(fp)
 4006154:	10001126 	beq	r2,zero,400619c <__smakebuf_r+0xb8>
 4006158:	8080038b 	ldhu	r2,14(r16)
 400615c:	10bfffcc 	andi	r2,r2,65535
 4006160:	10a0001c 	xori	r2,r2,32768
 4006164:	10a00004 	addi	r2,r2,-32768
 4006168:	100b883a 	mov	r5,r2
 400616c:	e13ffa17 	ldw	r4,-24(fp)
 4006170:	400bd580 	call	400bd58 <_isatty_r>
 4006174:	10000926 	beq	r2,zero,400619c <__smakebuf_r+0xb8>
  {                                                /* IntelSpecific */
    fp->_flags |= __SLBF;                          /* IntelSpecific __SLBF == "line buffered */
 4006178:	8080030b 	ldhu	r2,12(r16)
 400617c:	10800054 	ori	r2,r2,1
 4006180:	8080030d 	sth	r2,12(r16)
    fp->_bf._base = fp->_p = fp->_nbuf;            /* IntelSpecific (see newlib/libc/include/stdio.h) */
 4006184:	808010c4 	addi	r2,r16,67
 4006188:	80800015 	stw	r2,0(r16)
 400618c:	80800017 	ldw	r2,0(r16)
 4006190:	80800415 	stw	r2,16(r16)
    fp->_bf._size = 1;                             /* IntelSpecific */
 4006194:	00800044 	movi	r2,1
 4006198:	80800515 	stw	r2,20(r16)
  }                                                /* IntelSpecific */
  if ((p = _malloc_r (ptr, size)) == NULL)
 400619c:	e0bffc17 	ldw	r2,-16(fp)
 40061a0:	100b883a 	mov	r5,r2
 40061a4:	e13ffa17 	ldw	r4,-24(fp)
 40061a8:	40067380 	call	4006738 <_malloc_r>
 40061ac:	1023883a 	mov	r17,r2
 40061b0:	8800101e 	bne	r17,zero,40061f4 <__smakebuf_r+0x110>
    {
      if (!(fp->_flags & __SSTR))
 40061b4:	8080030b 	ldhu	r2,12(r16)
 40061b8:	10bfffcc 	andi	r2,r2,65535
 40061bc:	1080800c 	andi	r2,r2,512
 40061c0:	10002b1e 	bne	r2,zero,4006270 <__smakebuf_r+0x18c>
	{
	  fp->_flags = (fp->_flags & ~__SLBF) | __SNBF;
 40061c4:	80c0030b 	ldhu	r3,12(r16)
 40061c8:	00bfff04 	movi	r2,-4
 40061cc:	1884703a 	and	r2,r3,r2
 40061d0:	10800094 	ori	r2,r2,2
 40061d4:	8080030d 	sth	r2,12(r16)
	  fp->_bf._base = fp->_p = fp->_nbuf;
 40061d8:	808010c4 	addi	r2,r16,67
 40061dc:	80800015 	stw	r2,0(r16)
 40061e0:	80800017 	ldw	r2,0(r16)
 40061e4:	80800415 	stw	r2,16(r16)
	  fp->_bf._size = 1;
 40061e8:	00800044 	movi	r2,1
 40061ec:	80800515 	stw	r2,20(r16)
 40061f0:	00001f06 	br	4006270 <__smakebuf_r+0x18c>
	}
    }
  else
    {
      ptr->__cleanup = _cleanup_r;
 40061f4:	e0fffa17 	ldw	r3,-24(fp)
 40061f8:	00810034 	movhi	r2,1024
 40061fc:	1094ce04 	addi	r2,r2,21304
 4006200:	18800f15 	stw	r2,60(r3)
      fp->_flags |= __SMBF;
 4006204:	8080030b 	ldhu	r2,12(r16)
 4006208:	10802014 	ori	r2,r2,128
 400620c:	8080030d 	sth	r2,12(r16)
      fp->_bf._base = fp->_p = (unsigned char *) p;
 4006210:	84400015 	stw	r17,0(r16)
 4006214:	80800017 	ldw	r2,0(r16)
 4006218:	80800415 	stw	r2,16(r16)
      fp->_bf._size = size;
 400621c:	e0bffc17 	ldw	r2,-16(fp)
 4006220:	80800515 	stw	r2,20(r16)
      if (couldbetty && _isatty_r (ptr, fp->_file))
 4006224:	e0bffb17 	ldw	r2,-20(fp)
 4006228:	10000d26 	beq	r2,zero,4006260 <__smakebuf_r+0x17c>
 400622c:	8080038b 	ldhu	r2,14(r16)
 4006230:	10bfffcc 	andi	r2,r2,65535
 4006234:	10a0001c 	xori	r2,r2,32768
 4006238:	10a00004 	addi	r2,r2,-32768
 400623c:	100b883a 	mov	r5,r2
 4006240:	e13ffa17 	ldw	r4,-24(fp)
 4006244:	400bd580 	call	400bd58 <_isatty_r>
 4006248:	10000526 	beq	r2,zero,4006260 <__smakebuf_r+0x17c>
	fp->_flags = (fp->_flags & ~__SNBF) | __SLBF;
 400624c:	80c0030b 	ldhu	r3,12(r16)
 4006250:	00bfff04 	movi	r2,-4
 4006254:	1884703a 	and	r2,r3,r2
 4006258:	10800054 	ori	r2,r2,1
 400625c:	8080030d 	sth	r2,12(r16)
      fp->_flags |= flags;
 4006260:	8080030b 	ldhu	r2,12(r16)
 4006264:	e0fffd17 	ldw	r3,-12(fp)
 4006268:	10c4b03a 	or	r2,r2,r3
 400626c:	8080030d 	sth	r2,12(r16)
    }
}
 4006270:	e6fffe04 	addi	sp,fp,-8
 4006274:	dfc00317 	ldw	ra,12(sp)
 4006278:	df000217 	ldw	fp,8(sp)
 400627c:	dc400117 	ldw	r17,4(sp)
 4006280:	dc000017 	ldw	r16,0(sp)
 4006284:	dec00404 	addi	sp,sp,16
 4006288:	f800283a 	ret

0400628c <__swhatbuf_r>:
int
__swhatbuf_r (struct _reent *ptr,
	FILE *fp,
	size_t *bufsize,
	int *couldbetty)
{
 400628c:	deffe704 	addi	sp,sp,-100
 4006290:	dfc01815 	stw	ra,96(sp)
 4006294:	df001715 	stw	fp,92(sp)
 4006298:	df001704 	addi	fp,sp,92
 400629c:	e13fec15 	stw	r4,-80(fp)
 40062a0:	e17feb15 	stw	r5,-84(fp)
 40062a4:	e1bfea15 	stw	r6,-88(fp)
 40062a8:	e1ffe915 	stw	r7,-92(fp)
#ifdef _FSEEK_OPTIMIZATION
  const int snpt = __SNPT;
 40062ac:	00820004 	movi	r2,2048
 40062b0:	e0bfff15 	stw	r2,-4(fp)

  if (fp->_file < 0 || _fstat64_r (ptr, fp->_file, &st) < 0)
#else
  struct stat st;

  if (fp->_file < 0 || _fstat_r (ptr, fp->_file, &st) < 0)
 40062b4:	e0bfeb17 	ldw	r2,-84(fp)
 40062b8:	1080038b 	ldhu	r2,14(r2)
 40062bc:	10bfffcc 	andi	r2,r2,65535
 40062c0:	10a0001c 	xori	r2,r2,32768
 40062c4:	10a00004 	addi	r2,r2,-32768
 40062c8:	10000b16 	blt	r2,zero,40062f8 <__swhatbuf_r+0x6c>
 40062cc:	e0bfeb17 	ldw	r2,-84(fp)
 40062d0:	1080038b 	ldhu	r2,14(r2)
 40062d4:	10bfffcc 	andi	r2,r2,65535
 40062d8:	10a0001c 	xori	r2,r2,32768
 40062dc:	10a00004 	addi	r2,r2,-32768
 40062e0:	e0ffed04 	addi	r3,fp,-76
 40062e4:	180d883a 	mov	r6,r3
 40062e8:	100b883a 	mov	r5,r2
 40062ec:	e13fec17 	ldw	r4,-80(fp)
 40062f0:	400b71c0 	call	400b71c <_fstat_r>
 40062f4:	1000100e 	bge	r2,zero,4006338 <__swhatbuf_r+0xac>
#endif
    {
      *couldbetty = 0;
 40062f8:	e0bfe917 	ldw	r2,-92(fp)
 40062fc:	10000015 	stw	zero,0(r2)
      /* Check if we are be called by asprintf family for initial buffer.  */
      if (fp->_flags & __SMBF)
 4006300:	e0bfeb17 	ldw	r2,-84(fp)
 4006304:	1080030b 	ldhu	r2,12(r2)
 4006308:	10bfffcc 	andi	r2,r2,65535
 400630c:	1080200c 	andi	r2,r2,128
 4006310:	10000426 	beq	r2,zero,4006324 <__swhatbuf_r+0x98>
        *bufsize = _DEFAULT_ASPRINTF_BUFSIZE;
 4006314:	e0bfea17 	ldw	r2,-88(fp)
 4006318:	00c01004 	movi	r3,64
 400631c:	10c00015 	stw	r3,0(r2)
 4006320:	00000306 	br	4006330 <__swhatbuf_r+0xa4>
      else
        *bufsize = BUFSIZ;
 4006324:	e0bfea17 	ldw	r2,-88(fp)
 4006328:	00c10004 	movi	r3,1024
 400632c:	10c00015 	stw	r3,0(r2)
      return (0);
 4006330:	0005883a 	mov	r2,zero
 4006334:	00000a06 	br	4006360 <__swhatbuf_r+0xd4>
    }

  /* could be a tty iff it is a character device */
  *couldbetty = S_ISCHR(st.st_mode);
 4006338:	e0bfee17 	ldw	r2,-72(fp)
 400633c:	10bc000c 	andi	r2,r2,61440
 4006340:	10880020 	cmpeqi	r2,r2,8192
 4006344:	10c03fcc 	andi	r3,r2,255
 4006348:	e0bfe917 	ldw	r2,-92(fp)
 400634c:	10c00015 	stw	r3,0(r2)
      *bufsize = st.st_blksize;
      fp->_blksize = st.st_blksize;
      return ((st.st_mode & S_IFMT) == S_IFREG ?  __SOPT : snpt);
    }
#endif
  *bufsize = BUFSIZ;
 4006350:	e0bfea17 	ldw	r2,-88(fp)
 4006354:	00c10004 	movi	r3,1024
 4006358:	10c00015 	stw	r3,0(r2)
  return (snpt);
 400635c:	e0bfff17 	ldw	r2,-4(fp)
}
 4006360:	e037883a 	mov	sp,fp
 4006364:	dfc00117 	ldw	ra,4(sp)
 4006368:	df000017 	ldw	fp,0(sp)
 400636c:	dec00204 	addi	sp,sp,8
 4006370:	f800283a 	ret

04006374 <malloc_extend_top>:
{
 4006374:	defff104 	addi	sp,sp,-60
 4006378:	dfc00e15 	stw	ra,56(sp)
 400637c:	df000d15 	stw	fp,52(sp)
 4006380:	df000d04 	addi	fp,sp,52
 4006384:	e13ff415 	stw	r4,-48(fp)
 4006388:	e17ff315 	stw	r5,-52(fp)
  int correction_failed = 0;      /* whether we should relax the assertion */
 400638c:	e03ffb15 	stw	zero,-20(fp)
  mchunkptr old_top     = top;  /* Record state of old top */
 4006390:	00810074 	movhi	r2,1025
 4006394:	1090cf04 	addi	r2,r2,17212
 4006398:	10800217 	ldw	r2,8(r2)
 400639c:	e0bffa15 	stw	r2,-24(fp)
  INTERNAL_SIZE_T old_top_size = chunksize(old_top);
 40063a0:	e0bffa17 	ldw	r2,-24(fp)
 40063a4:	10c00117 	ldw	r3,4(r2)
 40063a8:	00bfff04 	movi	r2,-4
 40063ac:	1884703a 	and	r2,r3,r2
 40063b0:	e0bff915 	stw	r2,-28(fp)
  char*     old_end      = (char*)(chunk_at_offset(old_top, old_top_size));
 40063b4:	e0fffa17 	ldw	r3,-24(fp)
 40063b8:	e0bff917 	ldw	r2,-28(fp)
 40063bc:	1885883a 	add	r2,r3,r2
 40063c0:	e0bff815 	stw	r2,-32(fp)
  INTERNAL_SIZE_T    sbrk_size     = nb + top_pad + MINSIZE;
 40063c4:	d0e71217 	ldw	r3,-25528(gp)
 40063c8:	e0bff317 	ldw	r2,-52(fp)
 40063cc:	1885883a 	add	r2,r3,r2
 40063d0:	10800404 	addi	r2,r2,16
 40063d4:	e0bffc15 	stw	r2,-16(fp)
  unsigned long pagesz    = malloc_getpagesize;
 40063d8:	00840004 	movi	r2,4096
 40063dc:	e0bff715 	stw	r2,-36(fp)
  if (sbrk_base != (char*)(-1))
 40063e0:	d0a00317 	ldw	r2,-32756(gp)
 40063e4:	10bfffe0 	cmpeqi	r2,r2,-1
 40063e8:	1000081e 	bne	r2,zero,400640c <malloc_extend_top+0x98>
    sbrk_size = (sbrk_size + (pagesz - 1)) & ~(pagesz - 1);
 40063ec:	e0fff717 	ldw	r3,-36(fp)
 40063f0:	e0bffc17 	ldw	r2,-16(fp)
 40063f4:	1885883a 	add	r2,r3,r2
 40063f8:	10ffffc4 	addi	r3,r2,-1
 40063fc:	e0bff717 	ldw	r2,-36(fp)
 4006400:	0085c83a 	sub	r2,zero,r2
 4006404:	1884703a 	and	r2,r3,r2
 4006408:	e0bffc15 	stw	r2,-16(fp)
  brk = (char*)(MORECORE (sbrk_size));
 400640c:	e0bffc17 	ldw	r2,-16(fp)
 4006410:	100b883a 	mov	r5,r2
 4006414:	e13ff417 	ldw	r4,-48(fp)
 4006418:	40094200 	call	4009420 <_sbrk_r>
 400641c:	e0bfff15 	stw	r2,-4(fp)
  if (brk == (char*)(MORECORE_FAILURE) || 
 4006420:	e0bfff17 	ldw	r2,-4(fp)
 4006424:	10bfffe0 	cmpeqi	r2,r2,-1
 4006428:	1000bd1e 	bne	r2,zero,4006720 <malloc_extend_top+0x3ac>
 400642c:	e0ffff17 	ldw	r3,-4(fp)
 4006430:	e0bff817 	ldw	r2,-32(fp)
 4006434:	1880042e 	bgeu	r3,r2,4006448 <malloc_extend_top+0xd4>
      (brk < old_end && old_top != initial_top))
 4006438:	00810074 	movhi	r2,1025
 400643c:	1090cf04 	addi	r2,r2,17212
 4006440:	e0fffa17 	ldw	r3,-24(fp)
 4006444:	1880b61e 	bne	r3,r2,4006720 <malloc_extend_top+0x3ac>
  sbrked_mem += sbrk_size;
 4006448:	00810074 	movhi	r2,1025
 400644c:	109d7c17 	ldw	r2,30192(r2)
 4006450:	1007883a 	mov	r3,r2
 4006454:	e0bffc17 	ldw	r2,-16(fp)
 4006458:	1885883a 	add	r2,r3,r2
 400645c:	1007883a 	mov	r3,r2
 4006460:	00810074 	movhi	r2,1025
 4006464:	10dd7c15 	stw	r3,30192(r2)
  if (brk == old_end /* can just add bytes to current top, unless
 4006468:	e0ffff17 	ldw	r3,-4(fp)
 400646c:	e0bff817 	ldw	r2,-32(fp)
 4006470:	1880101e 	bne	r3,r2,40064b4 <malloc_extend_top+0x140>
      && ((POINTER_UINT)old_end & (pagesz - 1)) == 0)
 4006474:	e0bff717 	ldw	r2,-36(fp)
 4006478:	10ffffc4 	addi	r3,r2,-1
 400647c:	e0bff817 	ldw	r2,-32(fp)
 4006480:	1884703a 	and	r2,r3,r2
 4006484:	10000b1e 	bne	r2,zero,40064b4 <malloc_extend_top+0x140>
    top_size = sbrk_size + old_top_size;
 4006488:	e0fffc17 	ldw	r3,-16(fp)
 400648c:	e0bff917 	ldw	r2,-28(fp)
 4006490:	1885883a 	add	r2,r3,r2
 4006494:	e0bff615 	stw	r2,-40(fp)
    set_head(top, top_size | PREV_INUSE);
 4006498:	00810074 	movhi	r2,1025
 400649c:	1090cf04 	addi	r2,r2,17212
 40064a0:	10800217 	ldw	r2,8(r2)
 40064a4:	e0fff617 	ldw	r3,-40(fp)
 40064a8:	18c00054 	ori	r3,r3,1
 40064ac:	10c00115 	stw	r3,4(r2)
 40064b0:	00008a06 	br	40066dc <malloc_extend_top+0x368>
    if (sbrk_base == (char*)(-1))  /* First time through. Record base */
 40064b4:	d0a00317 	ldw	r2,-32756(gp)
 40064b8:	10bfffd8 	cmpnei	r2,r2,-1
 40064bc:	1000031e 	bne	r2,zero,40064cc <malloc_extend_top+0x158>
      sbrk_base = brk;
 40064c0:	e0bfff17 	ldw	r2,-4(fp)
 40064c4:	d0a00315 	stw	r2,-32756(gp)
 40064c8:	00000806 	br	40064ec <malloc_extend_top+0x178>
      sbrked_mem += brk - (char*)old_end;
 40064cc:	00810074 	movhi	r2,1025
 40064d0:	10dd7c17 	ldw	r3,30192(r2)
 40064d4:	e13fff17 	ldw	r4,-4(fp)
 40064d8:	e0bff817 	ldw	r2,-32(fp)
 40064dc:	2085c83a 	sub	r2,r4,r2
 40064e0:	1887883a 	add	r3,r3,r2
 40064e4:	00810074 	movhi	r2,1025
 40064e8:	10dd7c15 	stw	r3,30192(r2)
    front_misalign = (POINTER_UINT)chunk2mem(brk) & MALLOC_ALIGN_MASK;
 40064ec:	e0bfff17 	ldw	r2,-4(fp)
 40064f0:	10800204 	addi	r2,r2,8
 40064f4:	108001cc 	andi	r2,r2,7
 40064f8:	e0bff515 	stw	r2,-44(fp)
    if (front_misalign > 0) 
 40064fc:	e0bff517 	ldw	r2,-44(fp)
 4006500:	10000926 	beq	r2,zero,4006528 <malloc_extend_top+0x1b4>
      correction = (MALLOC_ALIGNMENT) - front_misalign;
 4006504:	00c00204 	movi	r3,8
 4006508:	e0bff517 	ldw	r2,-44(fp)
 400650c:	1885c83a 	sub	r2,r3,r2
 4006510:	e0bffe15 	stw	r2,-8(fp)
      brk += correction;
 4006514:	e0ffff17 	ldw	r3,-4(fp)
 4006518:	e0bffe17 	ldw	r2,-8(fp)
 400651c:	1885883a 	add	r2,r3,r2
 4006520:	e0bfff15 	stw	r2,-4(fp)
 4006524:	00000106 	br	400652c <malloc_extend_top+0x1b8>
      correction = 0;
 4006528:	e03ffe15 	stw	zero,-8(fp)
    correction += pagesz - ((POINTER_UINT)(brk + sbrk_size) & (pagesz - 1));
 400652c:	e0ffff17 	ldw	r3,-4(fp)
 4006530:	e0bffc17 	ldw	r2,-16(fp)
 4006534:	1885883a 	add	r2,r3,r2
 4006538:	1007883a 	mov	r3,r2
 400653c:	e0bff717 	ldw	r2,-36(fp)
 4006540:	10bfffc4 	addi	r2,r2,-1
 4006544:	1884703a 	and	r2,r3,r2
 4006548:	e0fff717 	ldw	r3,-36(fp)
 400654c:	1885c83a 	sub	r2,r3,r2
 4006550:	e0fffe17 	ldw	r3,-8(fp)
 4006554:	1885883a 	add	r2,r3,r2
 4006558:	e0bffe15 	stw	r2,-8(fp)
    correction &= (pagesz - 1);
 400655c:	e0bff717 	ldw	r2,-36(fp)
 4006560:	10bfffc4 	addi	r2,r2,-1
 4006564:	e0fffe17 	ldw	r3,-8(fp)
 4006568:	1884703a 	and	r2,r3,r2
 400656c:	e0bffe15 	stw	r2,-8(fp)
    new_brk = (char*)(MORECORE (correction));
 4006570:	e0bffe17 	ldw	r2,-8(fp)
 4006574:	100b883a 	mov	r5,r2
 4006578:	e13ff417 	ldw	r4,-48(fp)
 400657c:	40094200 	call	4009420 <_sbrk_r>
 4006580:	e0bffd15 	stw	r2,-12(fp)
    if (new_brk == (char*)(MORECORE_FAILURE))
 4006584:	e0bffd17 	ldw	r2,-12(fp)
 4006588:	10bfffd8 	cmpnei	r2,r2,-1
 400658c:	10000e1e 	bne	r2,zero,40065c8 <malloc_extend_top+0x254>
	correction = 0;
 4006590:	e03ffe15 	stw	zero,-8(fp)
	correction_failed = 1;
 4006594:	00800044 	movi	r2,1
 4006598:	e0bffb15 	stw	r2,-20(fp)
	new_brk = brk + sbrk_size;
 400659c:	e0ffff17 	ldw	r3,-4(fp)
 40065a0:	e0bffc17 	ldw	r2,-16(fp)
 40065a4:	1885883a 	add	r2,r3,r2
 40065a8:	e0bffd15 	stw	r2,-12(fp)
	if (front_misalign > 0)
 40065ac:	e0bff517 	ldw	r2,-44(fp)
 40065b0:	10000526 	beq	r2,zero,40065c8 <malloc_extend_top+0x254>
	  new_brk -= (MALLOC_ALIGNMENT) - front_misalign;
 40065b4:	e0bff517 	ldw	r2,-44(fp)
 40065b8:	10bffe04 	addi	r2,r2,-8
 40065bc:	e0fffd17 	ldw	r3,-12(fp)
 40065c0:	1885883a 	add	r2,r3,r2
 40065c4:	e0bffd15 	stw	r2,-12(fp)
    sbrked_mem += correction;
 40065c8:	00810074 	movhi	r2,1025
 40065cc:	109d7c17 	ldw	r2,30192(r2)
 40065d0:	1007883a 	mov	r3,r2
 40065d4:	e0bffe17 	ldw	r2,-8(fp)
 40065d8:	1885883a 	add	r2,r3,r2
 40065dc:	1007883a 	mov	r3,r2
 40065e0:	00810074 	movhi	r2,1025
 40065e4:	10dd7c15 	stw	r3,30192(r2)
    top = (mchunkptr)brk;
 40065e8:	00810074 	movhi	r2,1025
 40065ec:	1090cf04 	addi	r2,r2,17212
 40065f0:	e0ffff17 	ldw	r3,-4(fp)
 40065f4:	10c00215 	stw	r3,8(r2)
    top_size = new_brk - brk + correction;
 40065f8:	e0fffd17 	ldw	r3,-12(fp)
 40065fc:	e0bfff17 	ldw	r2,-4(fp)
 4006600:	1885c83a 	sub	r2,r3,r2
 4006604:	1007883a 	mov	r3,r2
 4006608:	e0bffe17 	ldw	r2,-8(fp)
 400660c:	10c5883a 	add	r2,r2,r3
 4006610:	e0bff615 	stw	r2,-40(fp)
    set_head(top, top_size | PREV_INUSE);
 4006614:	00810074 	movhi	r2,1025
 4006618:	1090cf04 	addi	r2,r2,17212
 400661c:	10800217 	ldw	r2,8(r2)
 4006620:	e0fff617 	ldw	r3,-40(fp)
 4006624:	18c00054 	ori	r3,r3,1
 4006628:	10c00115 	stw	r3,4(r2)
    if (old_top != initial_top)
 400662c:	00810074 	movhi	r2,1025
 4006630:	1090cf04 	addi	r2,r2,17212
 4006634:	e0fffa17 	ldw	r3,-24(fp)
 4006638:	18802826 	beq	r3,r2,40066dc <malloc_extend_top+0x368>
      if (old_top_size < MINSIZE) 
 400663c:	e0bff917 	ldw	r2,-28(fp)
 4006640:	10800428 	cmpgeui	r2,r2,16
 4006644:	1000061e 	bne	r2,zero,4006660 <malloc_extend_top+0x2ec>
        set_head(top, PREV_INUSE); /* will force null return from malloc */
 4006648:	00810074 	movhi	r2,1025
 400664c:	1090cf04 	addi	r2,r2,17212
 4006650:	10800217 	ldw	r2,8(r2)
 4006654:	00c00044 	movi	r3,1
 4006658:	10c00115 	stw	r3,4(r2)
        return;
 400665c:	00003106 	br	4006724 <malloc_extend_top+0x3b0>
      old_top_size = (old_top_size - 3*SIZE_SZ) & ~MALLOC_ALIGN_MASK;
 4006660:	e0bff917 	ldw	r2,-28(fp)
 4006664:	10fffd04 	addi	r3,r2,-12
 4006668:	00bffe04 	movi	r2,-8
 400666c:	1884703a 	and	r2,r3,r2
 4006670:	e0bff915 	stw	r2,-28(fp)
      set_head_size(old_top, old_top_size);
 4006674:	e0bffa17 	ldw	r2,-24(fp)
 4006678:	10800117 	ldw	r2,4(r2)
 400667c:	10c0004c 	andi	r3,r2,1
 4006680:	e0bff917 	ldw	r2,-28(fp)
 4006684:	1886b03a 	or	r3,r3,r2
 4006688:	e0bffa17 	ldw	r2,-24(fp)
 400668c:	10c00115 	stw	r3,4(r2)
      chunk_at_offset(old_top, old_top_size          )->size =
 4006690:	e0fffa17 	ldw	r3,-24(fp)
 4006694:	e0bff917 	ldw	r2,-28(fp)
 4006698:	1885883a 	add	r2,r3,r2
 400669c:	00c00144 	movi	r3,5
 40066a0:	10c00115 	stw	r3,4(r2)
      chunk_at_offset(old_top, old_top_size + SIZE_SZ)->size =
 40066a4:	e0bff917 	ldw	r2,-28(fp)
 40066a8:	10800104 	addi	r2,r2,4
 40066ac:	e0fffa17 	ldw	r3,-24(fp)
 40066b0:	1885883a 	add	r2,r3,r2
 40066b4:	00c00144 	movi	r3,5
 40066b8:	10c00115 	stw	r3,4(r2)
      if (old_top_size >= MINSIZE) 
 40066bc:	e0bff917 	ldw	r2,-28(fp)
 40066c0:	10800430 	cmpltui	r2,r2,16
 40066c4:	1000051e 	bne	r2,zero,40066dc <malloc_extend_top+0x368>
        fREe(RCALL chunk2mem(old_top));
 40066c8:	e0bffa17 	ldw	r2,-24(fp)
 40066cc:	10800204 	addi	r2,r2,8
 40066d0:	100b883a 	mov	r5,r2
 40066d4:	e13ff417 	ldw	r4,-48(fp)
 40066d8:	40055ac0 	call	40055ac <_free_r>
  if ((unsigned long)sbrked_mem > (unsigned long)max_sbrked_mem) 
 40066dc:	00810074 	movhi	r2,1025
 40066e0:	109d7c17 	ldw	r2,30192(r2)
 40066e4:	1007883a 	mov	r3,r2
 40066e8:	d0a71317 	ldw	r2,-25524(gp)
 40066ec:	10c0032e 	bgeu	r2,r3,40066fc <malloc_extend_top+0x388>
    max_sbrked_mem = sbrked_mem;
 40066f0:	00810074 	movhi	r2,1025
 40066f4:	109d7c17 	ldw	r2,30192(r2)
 40066f8:	d0a71315 	stw	r2,-25524(gp)
  if ((unsigned long)(sbrked_mem) > (unsigned long)max_total_mem) 
 40066fc:	00810074 	movhi	r2,1025
 4006700:	109d7c17 	ldw	r2,30192(r2)
 4006704:	1007883a 	mov	r3,r2
 4006708:	d0a71417 	ldw	r2,-25520(gp)
 400670c:	10c0052e 	bgeu	r2,r3,4006724 <malloc_extend_top+0x3b0>
    max_total_mem = sbrked_mem;
 4006710:	00810074 	movhi	r2,1025
 4006714:	109d7c17 	ldw	r2,30192(r2)
 4006718:	d0a71415 	stw	r2,-25520(gp)
 400671c:	00000106 	br	4006724 <malloc_extend_top+0x3b0>
    return;
 4006720:	0001883a 	nop
}
 4006724:	e037883a 	mov	sp,fp
 4006728:	dfc00117 	ldw	ra,4(sp)
 400672c:	df000017 	ldw	fp,0(sp)
 4006730:	dec00204 	addi	sp,sp,8
 4006734:	f800283a 	ret

04006738 <_malloc_r>:
{
 4006738:	deffef04 	addi	sp,sp,-68
 400673c:	dfc01015 	stw	ra,64(sp)
 4006740:	df000f15 	stw	fp,60(sp)
 4006744:	df000f04 	addi	fp,sp,60
 4006748:	e13ff215 	stw	r4,-56(fp)
 400674c:	e17ff115 	stw	r5,-60(fp)
  INTERNAL_SIZE_T nb  = request2size(bytes);  /* padded request size; */
 4006750:	e0bff117 	ldw	r2,-60(fp)
 4006754:	108002c4 	addi	r2,r2,11
 4006758:	108005f0 	cmpltui	r2,r2,23
 400675c:	1000051e 	bne	r2,zero,4006774 <_malloc_r+0x3c>
 4006760:	e0bff117 	ldw	r2,-60(fp)
 4006764:	10c002c4 	addi	r3,r2,11
 4006768:	00bffe04 	movi	r2,-8
 400676c:	1884703a 	and	r2,r3,r2
 4006770:	00000106 	br	4006778 <_malloc_r+0x40>
 4006774:	00800404 	movi	r2,16
 4006778:	e0bff615 	stw	r2,-40(fp)
  if (nb > INT_MAX || nb < bytes)
 400677c:	e0bff617 	ldw	r2,-40(fp)
 4006780:	10000316 	blt	r2,zero,4006790 <_malloc_r+0x58>
 4006784:	e0fff617 	ldw	r3,-40(fp)
 4006788:	e0bff117 	ldw	r2,-60(fp)
 400678c:	1880052e 	bgeu	r3,r2,40067a4 <_malloc_r+0x6c>
    RERRNO = ENOMEM;
 4006790:	e0bff217 	ldw	r2,-56(fp)
 4006794:	00c00304 	movi	r3,12
 4006798:	10c00015 	stw	r3,0(r2)
    return 0;
 400679c:	0005883a 	mov	r2,zero
 40067a0:	0002ba06 	br	400728c <_malloc_r+0xb54>
  MALLOC_LOCK;
 40067a4:	e13ff217 	ldw	r4,-56(fp)
 40067a8:	4010f200 	call	4010f20 <__malloc_lock>
  if (is_small_request(nb))  /* Faster version for small requests */
 40067ac:	e0bff617 	ldw	r2,-40(fp)
 40067b0:	10807e28 	cmpgeui	r2,r2,504
 40067b4:	10003e1e 	bne	r2,zero,40068b0 <_malloc_r+0x178>
    idx = smallbin_index(nb); 
 40067b8:	e0bff617 	ldw	r2,-40(fp)
 40067bc:	1004d0fa 	srli	r2,r2,3
 40067c0:	e0bffe15 	stw	r2,-8(fp)
    q = bin_at(idx);
 40067c4:	e0bffe17 	ldw	r2,-8(fp)
 40067c8:	10800044 	addi	r2,r2,1
 40067cc:	1085883a 	add	r2,r2,r2
 40067d0:	100690ba 	slli	r3,r2,2
 40067d4:	00810074 	movhi	r2,1025
 40067d8:	1090cf04 	addi	r2,r2,17212
 40067dc:	1885883a 	add	r2,r3,r2
 40067e0:	10bffe04 	addi	r2,r2,-8
 40067e4:	e0bff715 	stw	r2,-36(fp)
    victim = last(q);
 40067e8:	e0bff717 	ldw	r2,-36(fp)
 40067ec:	10800317 	ldw	r2,12(r2)
 40067f0:	e0bfff15 	stw	r2,-4(fp)
    if (victim == q)
 40067f4:	e0ffff17 	ldw	r3,-4(fp)
 40067f8:	e0bff717 	ldw	r2,-36(fp)
 40067fc:	1880061e 	bne	r3,r2,4006818 <_malloc_r+0xe0>
      q = next_bin(q);
 4006800:	e0bff717 	ldw	r2,-36(fp)
 4006804:	10800204 	addi	r2,r2,8
 4006808:	e0bff715 	stw	r2,-36(fp)
      victim = last(q);
 400680c:	e0bff717 	ldw	r2,-36(fp)
 4006810:	10800317 	ldw	r2,12(r2)
 4006814:	e0bfff15 	stw	r2,-4(fp)
    if (victim != q)
 4006818:	e0ffff17 	ldw	r3,-4(fp)
 400681c:	e0bff717 	ldw	r2,-36(fp)
 4006820:	18801f26 	beq	r3,r2,40068a0 <_malloc_r+0x168>
      victim_size = chunksize(victim);
 4006824:	e0bfff17 	ldw	r2,-4(fp)
 4006828:	10c00117 	ldw	r3,4(r2)
 400682c:	00bfff04 	movi	r2,-4
 4006830:	1884703a 	and	r2,r3,r2
 4006834:	e0bff515 	stw	r2,-44(fp)
      unlink(victim, bck, fwd);
 4006838:	e0bfff17 	ldw	r2,-4(fp)
 400683c:	10800317 	ldw	r2,12(r2)
 4006840:	e0bff815 	stw	r2,-32(fp)
 4006844:	e0bfff17 	ldw	r2,-4(fp)
 4006848:	10800217 	ldw	r2,8(r2)
 400684c:	e0bff915 	stw	r2,-28(fp)
 4006850:	e0bff917 	ldw	r2,-28(fp)
 4006854:	e0fff817 	ldw	r3,-32(fp)
 4006858:	10c00315 	stw	r3,12(r2)
 400685c:	e0bff817 	ldw	r2,-32(fp)
 4006860:	e0fff917 	ldw	r3,-28(fp)
 4006864:	10c00215 	stw	r3,8(r2)
      set_inuse_bit_at_offset(victim, victim_size);
 4006868:	e0ffff17 	ldw	r3,-4(fp)
 400686c:	e0bff517 	ldw	r2,-44(fp)
 4006870:	1885883a 	add	r2,r3,r2
 4006874:	10c00117 	ldw	r3,4(r2)
 4006878:	e13fff17 	ldw	r4,-4(fp)
 400687c:	e0bff517 	ldw	r2,-44(fp)
 4006880:	2085883a 	add	r2,r4,r2
 4006884:	18c00054 	ori	r3,r3,1
 4006888:	10c00115 	stw	r3,4(r2)
      MALLOC_UNLOCK;
 400688c:	e13ff217 	ldw	r4,-56(fp)
 4006890:	4010f440 	call	4010f44 <__malloc_unlock>
      return chunk2mem(victim);
 4006894:	e0bfff17 	ldw	r2,-4(fp)
 4006898:	10800204 	addi	r2,r2,8
 400689c:	00027b06 	br	400728c <_malloc_r+0xb54>
    idx += 2; /* Set for bin scan below. We've already scanned 2 bins. */
 40068a0:	e0bffe17 	ldw	r2,-8(fp)
 40068a4:	10800084 	addi	r2,r2,2
 40068a8:	e0bffe15 	stw	r2,-8(fp)
 40068ac:	00007206 	br	4006a78 <_malloc_r+0x340>
    idx = bin_index(nb);
 40068b0:	e0bff617 	ldw	r2,-40(fp)
 40068b4:	1004d27a 	srli	r2,r2,9
 40068b8:	1000031e 	bne	r2,zero,40068c8 <_malloc_r+0x190>
 40068bc:	e0bff617 	ldw	r2,-40(fp)
 40068c0:	1004d0fa 	srli	r2,r2,3
 40068c4:	00002906 	br	400696c <_malloc_r+0x234>
 40068c8:	e0bff617 	ldw	r2,-40(fp)
 40068cc:	1004d27a 	srli	r2,r2,9
 40068d0:	10800168 	cmpgeui	r2,r2,5
 40068d4:	1000041e 	bne	r2,zero,40068e8 <_malloc_r+0x1b0>
 40068d8:	e0bff617 	ldw	r2,-40(fp)
 40068dc:	1004d1ba 	srli	r2,r2,6
 40068e0:	10800e04 	addi	r2,r2,56
 40068e4:	00002106 	br	400696c <_malloc_r+0x234>
 40068e8:	e0bff617 	ldw	r2,-40(fp)
 40068ec:	1004d27a 	srli	r2,r2,9
 40068f0:	10800568 	cmpgeui	r2,r2,21
 40068f4:	1000041e 	bne	r2,zero,4006908 <_malloc_r+0x1d0>
 40068f8:	e0bff617 	ldw	r2,-40(fp)
 40068fc:	1004d27a 	srli	r2,r2,9
 4006900:	108016c4 	addi	r2,r2,91
 4006904:	00001906 	br	400696c <_malloc_r+0x234>
 4006908:	e0bff617 	ldw	r2,-40(fp)
 400690c:	1004d27a 	srli	r2,r2,9
 4006910:	10801568 	cmpgeui	r2,r2,85
 4006914:	1000041e 	bne	r2,zero,4006928 <_malloc_r+0x1f0>
 4006918:	e0bff617 	ldw	r2,-40(fp)
 400691c:	1004d33a 	srli	r2,r2,12
 4006920:	10801b84 	addi	r2,r2,110
 4006924:	00001106 	br	400696c <_malloc_r+0x234>
 4006928:	e0bff617 	ldw	r2,-40(fp)
 400692c:	1004d27a 	srli	r2,r2,9
 4006930:	10805568 	cmpgeui	r2,r2,341
 4006934:	1000041e 	bne	r2,zero,4006948 <_malloc_r+0x210>
 4006938:	e0bff617 	ldw	r2,-40(fp)
 400693c:	1004d3fa 	srli	r2,r2,15
 4006940:	10801dc4 	addi	r2,r2,119
 4006944:	00000906 	br	400696c <_malloc_r+0x234>
 4006948:	e0bff617 	ldw	r2,-40(fp)
 400694c:	1004d27a 	srli	r2,r2,9
 4006950:	10815568 	cmpgeui	r2,r2,1365
 4006954:	1000041e 	bne	r2,zero,4006968 <_malloc_r+0x230>
 4006958:	e0bff617 	ldw	r2,-40(fp)
 400695c:	1004d4ba 	srli	r2,r2,18
 4006960:	10801f04 	addi	r2,r2,124
 4006964:	00000106 	br	400696c <_malloc_r+0x234>
 4006968:	00801f84 	movi	r2,126
 400696c:	e0bffe15 	stw	r2,-8(fp)
    bin = bin_at(idx);
 4006970:	e0bffe17 	ldw	r2,-8(fp)
 4006974:	10800044 	addi	r2,r2,1
 4006978:	1085883a 	add	r2,r2,r2
 400697c:	100690ba 	slli	r3,r2,2
 4006980:	00810074 	movhi	r2,1025
 4006984:	1090cf04 	addi	r2,r2,17212
 4006988:	1885883a 	add	r2,r3,r2
 400698c:	10bffe04 	addi	r2,r2,-8
 4006990:	e0bffd15 	stw	r2,-12(fp)
    for (victim = last(bin); victim != bin; victim = victim->bk)
 4006994:	e0bffd17 	ldw	r2,-12(fp)
 4006998:	10800317 	ldw	r2,12(r2)
 400699c:	e0bfff15 	stw	r2,-4(fp)
 40069a0:	00002f06 	br	4006a60 <_malloc_r+0x328>
      victim_size = chunksize(victim);
 40069a4:	e0bfff17 	ldw	r2,-4(fp)
 40069a8:	10c00117 	ldw	r3,4(r2)
 40069ac:	00bfff04 	movi	r2,-4
 40069b0:	1884703a 	and	r2,r3,r2
 40069b4:	e0bff515 	stw	r2,-44(fp)
      remainder_size = long_sub_size_t(victim_size, nb);
 40069b8:	e0fff517 	ldw	r3,-44(fp)
 40069bc:	e0bff617 	ldw	r2,-40(fp)
 40069c0:	1885c83a 	sub	r2,r3,r2
 40069c4:	e0bffc15 	stw	r2,-16(fp)
      if (remainder_size >= (long)MINSIZE) /* too big */
 40069c8:	e0bffc17 	ldw	r2,-16(fp)
 40069cc:	10800410 	cmplti	r2,r2,16
 40069d0:	1000041e 	bne	r2,zero,40069e4 <_malloc_r+0x2ac>
        --idx; /* adjust to rescan below after checking last remainder */
 40069d4:	e0bffe17 	ldw	r2,-8(fp)
 40069d8:	10bfffc4 	addi	r2,r2,-1
 40069dc:	e0bffe15 	stw	r2,-8(fp)
        break;   
 40069e0:	00002206 	br	4006a6c <_malloc_r+0x334>
      else if (remainder_size >= 0) /* exact fit */
 40069e4:	e0bffc17 	ldw	r2,-16(fp)
 40069e8:	10001a16 	blt	r2,zero,4006a54 <_malloc_r+0x31c>
        unlink(victim, bck, fwd);
 40069ec:	e0bfff17 	ldw	r2,-4(fp)
 40069f0:	10800317 	ldw	r2,12(r2)
 40069f4:	e0bff815 	stw	r2,-32(fp)
 40069f8:	e0bfff17 	ldw	r2,-4(fp)
 40069fc:	10800217 	ldw	r2,8(r2)
 4006a00:	e0bff915 	stw	r2,-28(fp)
 4006a04:	e0bff917 	ldw	r2,-28(fp)
 4006a08:	e0fff817 	ldw	r3,-32(fp)
 4006a0c:	10c00315 	stw	r3,12(r2)
 4006a10:	e0bff817 	ldw	r2,-32(fp)
 4006a14:	e0fff917 	ldw	r3,-28(fp)
 4006a18:	10c00215 	stw	r3,8(r2)
        set_inuse_bit_at_offset(victim, victim_size);
 4006a1c:	e0ffff17 	ldw	r3,-4(fp)
 4006a20:	e0bff517 	ldw	r2,-44(fp)
 4006a24:	1885883a 	add	r2,r3,r2
 4006a28:	10c00117 	ldw	r3,4(r2)
 4006a2c:	e13fff17 	ldw	r4,-4(fp)
 4006a30:	e0bff517 	ldw	r2,-44(fp)
 4006a34:	2085883a 	add	r2,r4,r2
 4006a38:	18c00054 	ori	r3,r3,1
 4006a3c:	10c00115 	stw	r3,4(r2)
	MALLOC_UNLOCK;
 4006a40:	e13ff217 	ldw	r4,-56(fp)
 4006a44:	4010f440 	call	4010f44 <__malloc_unlock>
        return chunk2mem(victim);
 4006a48:	e0bfff17 	ldw	r2,-4(fp)
 4006a4c:	10800204 	addi	r2,r2,8
 4006a50:	00020e06 	br	400728c <_malloc_r+0xb54>
    for (victim = last(bin); victim != bin; victim = victim->bk)
 4006a54:	e0bfff17 	ldw	r2,-4(fp)
 4006a58:	10800317 	ldw	r2,12(r2)
 4006a5c:	e0bfff15 	stw	r2,-4(fp)
 4006a60:	e0ffff17 	ldw	r3,-4(fp)
 4006a64:	e0bffd17 	ldw	r2,-12(fp)
 4006a68:	18bfce1e 	bne	r3,r2,40069a4 <_malloc_r+0x26c>
    ++idx; 
 4006a6c:	e0bffe17 	ldw	r2,-8(fp)
 4006a70:	10800044 	addi	r2,r2,1
 4006a74:	e0bffe15 	stw	r2,-8(fp)
  if ( (victim = last_remainder->fd) != last_remainder)
 4006a78:	00810074 	movhi	r2,1025
 4006a7c:	1090d104 	addi	r2,r2,17220
 4006a80:	10800217 	ldw	r2,8(r2)
 4006a84:	e0bfff15 	stw	r2,-4(fp)
 4006a88:	00810074 	movhi	r2,1025
 4006a8c:	1090d104 	addi	r2,r2,17220
 4006a90:	e0ffff17 	ldw	r3,-4(fp)
 4006a94:	1880e426 	beq	r3,r2,4006e28 <_malloc_r+0x6f0>
    victim_size = chunksize(victim);
 4006a98:	e0bfff17 	ldw	r2,-4(fp)
 4006a9c:	10c00117 	ldw	r3,4(r2)
 4006aa0:	00bfff04 	movi	r2,-4
 4006aa4:	1884703a 	and	r2,r3,r2
 4006aa8:	e0bff515 	stw	r2,-44(fp)
    remainder_size = long_sub_size_t(victim_size, nb);
 4006aac:	e0fff517 	ldw	r3,-44(fp)
 4006ab0:	e0bff617 	ldw	r2,-40(fp)
 4006ab4:	1885c83a 	sub	r2,r3,r2
 4006ab8:	e0bffc15 	stw	r2,-16(fp)
    if (remainder_size >= (long)MINSIZE) /* re-split */
 4006abc:	e0bffc17 	ldw	r2,-16(fp)
 4006ac0:	10800410 	cmplti	r2,r2,16
 4006ac4:	1000271e 	bne	r2,zero,4006b64 <_malloc_r+0x42c>
      remainder = chunk_at_offset(victim, nb);
 4006ac8:	e0ffff17 	ldw	r3,-4(fp)
 4006acc:	e0bff617 	ldw	r2,-40(fp)
 4006ad0:	1885883a 	add	r2,r3,r2
 4006ad4:	e0bff315 	stw	r2,-52(fp)
      set_head(victim, nb | PREV_INUSE);
 4006ad8:	e0bff617 	ldw	r2,-40(fp)
 4006adc:	10c00054 	ori	r3,r2,1
 4006ae0:	e0bfff17 	ldw	r2,-4(fp)
 4006ae4:	10c00115 	stw	r3,4(r2)
      link_last_remainder(remainder);
 4006ae8:	00810074 	movhi	r2,1025
 4006aec:	1090d104 	addi	r2,r2,17220
 4006af0:	e0fff317 	ldw	r3,-52(fp)
 4006af4:	10c00315 	stw	r3,12(r2)
 4006af8:	00c10074 	movhi	r3,1025
 4006afc:	18d0d104 	addi	r3,r3,17220
 4006b00:	10800317 	ldw	r2,12(r2)
 4006b04:	18800215 	stw	r2,8(r3)
 4006b08:	00810074 	movhi	r2,1025
 4006b0c:	1090d104 	addi	r2,r2,17220
 4006b10:	e0fff317 	ldw	r3,-52(fp)
 4006b14:	18800315 	stw	r2,12(r3)
 4006b18:	e0bff317 	ldw	r2,-52(fp)
 4006b1c:	10c00317 	ldw	r3,12(r2)
 4006b20:	e0bff317 	ldw	r2,-52(fp)
 4006b24:	10c00215 	stw	r3,8(r2)
      set_head(remainder, remainder_size | PREV_INUSE);
 4006b28:	e0bffc17 	ldw	r2,-16(fp)
 4006b2c:	10800054 	ori	r2,r2,1
 4006b30:	1007883a 	mov	r3,r2
 4006b34:	e0bff317 	ldw	r2,-52(fp)
 4006b38:	10c00115 	stw	r3,4(r2)
      set_foot(remainder, remainder_size);
 4006b3c:	e0bffc17 	ldw	r2,-16(fp)
 4006b40:	e0fff317 	ldw	r3,-52(fp)
 4006b44:	1885883a 	add	r2,r3,r2
 4006b48:	e0fffc17 	ldw	r3,-16(fp)
 4006b4c:	10c00015 	stw	r3,0(r2)
      MALLOC_UNLOCK;
 4006b50:	e13ff217 	ldw	r4,-56(fp)
 4006b54:	4010f440 	call	4010f44 <__malloc_unlock>
      return chunk2mem(victim);
 4006b58:	e0bfff17 	ldw	r2,-4(fp)
 4006b5c:	10800204 	addi	r2,r2,8
 4006b60:	0001ca06 	br	400728c <_malloc_r+0xb54>
    clear_last_remainder;
 4006b64:	00810074 	movhi	r2,1025
 4006b68:	1090d104 	addi	r2,r2,17220
 4006b6c:	00c10074 	movhi	r3,1025
 4006b70:	18d0d104 	addi	r3,r3,17220
 4006b74:	10c00315 	stw	r3,12(r2)
 4006b78:	00c10074 	movhi	r3,1025
 4006b7c:	18d0d104 	addi	r3,r3,17220
 4006b80:	10800317 	ldw	r2,12(r2)
 4006b84:	18800215 	stw	r2,8(r3)
    if (remainder_size >= 0)  /* exhaust */
 4006b88:	e0bffc17 	ldw	r2,-16(fp)
 4006b8c:	10000e16 	blt	r2,zero,4006bc8 <_malloc_r+0x490>
      set_inuse_bit_at_offset(victim, victim_size);
 4006b90:	e0ffff17 	ldw	r3,-4(fp)
 4006b94:	e0bff517 	ldw	r2,-44(fp)
 4006b98:	1885883a 	add	r2,r3,r2
 4006b9c:	10c00117 	ldw	r3,4(r2)
 4006ba0:	e13fff17 	ldw	r4,-4(fp)
 4006ba4:	e0bff517 	ldw	r2,-44(fp)
 4006ba8:	2085883a 	add	r2,r4,r2
 4006bac:	18c00054 	ori	r3,r3,1
 4006bb0:	10c00115 	stw	r3,4(r2)
      MALLOC_UNLOCK;
 4006bb4:	e13ff217 	ldw	r4,-56(fp)
 4006bb8:	4010f440 	call	4010f44 <__malloc_unlock>
      return chunk2mem(victim);
 4006bbc:	e0bfff17 	ldw	r2,-4(fp)
 4006bc0:	10800204 	addi	r2,r2,8
 4006bc4:	0001b106 	br	400728c <_malloc_r+0xb54>
    frontlink(victim, victim_size, remainder_index, bck, fwd);
 4006bc8:	e0bff517 	ldw	r2,-44(fp)
 4006bcc:	10808028 	cmpgeui	r2,r2,512
 4006bd0:	10002b1e 	bne	r2,zero,4006c80 <_malloc_r+0x548>
 4006bd4:	e0bff517 	ldw	r2,-44(fp)
 4006bd8:	1004d0fa 	srli	r2,r2,3
 4006bdc:	e0bff415 	stw	r2,-48(fp)
 4006be0:	00810074 	movhi	r2,1025
 4006be4:	1090cf04 	addi	r2,r2,17212
 4006be8:	11000117 	ldw	r4,4(r2)
 4006bec:	e0bff417 	ldw	r2,-48(fp)
 4006bf0:	1000010e 	bge	r2,zero,4006bf8 <_malloc_r+0x4c0>
 4006bf4:	108000c4 	addi	r2,r2,3
 4006bf8:	1005d0ba 	srai	r2,r2,2
 4006bfc:	1007883a 	mov	r3,r2
 4006c00:	00800044 	movi	r2,1
 4006c04:	10c6983a 	sll	r3,r2,r3
 4006c08:	00810074 	movhi	r2,1025
 4006c0c:	1090cf04 	addi	r2,r2,17212
 4006c10:	20c6b03a 	or	r3,r4,r3
 4006c14:	10c00115 	stw	r3,4(r2)
 4006c18:	e0bff417 	ldw	r2,-48(fp)
 4006c1c:	10800044 	addi	r2,r2,1
 4006c20:	1085883a 	add	r2,r2,r2
 4006c24:	100690ba 	slli	r3,r2,2
 4006c28:	00810074 	movhi	r2,1025
 4006c2c:	1090cf04 	addi	r2,r2,17212
 4006c30:	1885883a 	add	r2,r3,r2
 4006c34:	10bffe04 	addi	r2,r2,-8
 4006c38:	e0bff815 	stw	r2,-32(fp)
 4006c3c:	e0bff817 	ldw	r2,-32(fp)
 4006c40:	10800217 	ldw	r2,8(r2)
 4006c44:	e0bff915 	stw	r2,-28(fp)
 4006c48:	e0bfff17 	ldw	r2,-4(fp)
 4006c4c:	e0fff817 	ldw	r3,-32(fp)
 4006c50:	10c00315 	stw	r3,12(r2)
 4006c54:	e0bfff17 	ldw	r2,-4(fp)
 4006c58:	e0fff917 	ldw	r3,-28(fp)
 4006c5c:	10c00215 	stw	r3,8(r2)
 4006c60:	e0bff817 	ldw	r2,-32(fp)
 4006c64:	e0ffff17 	ldw	r3,-4(fp)
 4006c68:	10c00215 	stw	r3,8(r2)
 4006c6c:	e0bff817 	ldw	r2,-32(fp)
 4006c70:	10c00217 	ldw	r3,8(r2)
 4006c74:	e0bff917 	ldw	r2,-28(fp)
 4006c78:	10c00315 	stw	r3,12(r2)
 4006c7c:	00006a06 	br	4006e28 <_malloc_r+0x6f0>
 4006c80:	e0bff517 	ldw	r2,-44(fp)
 4006c84:	1004d27a 	srli	r2,r2,9
 4006c88:	1000031e 	bne	r2,zero,4006c98 <_malloc_r+0x560>
 4006c8c:	e0bff517 	ldw	r2,-44(fp)
 4006c90:	1004d0fa 	srli	r2,r2,3
 4006c94:	00002906 	br	4006d3c <_malloc_r+0x604>
 4006c98:	e0bff517 	ldw	r2,-44(fp)
 4006c9c:	1004d27a 	srli	r2,r2,9
 4006ca0:	10800168 	cmpgeui	r2,r2,5
 4006ca4:	1000041e 	bne	r2,zero,4006cb8 <_malloc_r+0x580>
 4006ca8:	e0bff517 	ldw	r2,-44(fp)
 4006cac:	1004d1ba 	srli	r2,r2,6
 4006cb0:	10800e04 	addi	r2,r2,56
 4006cb4:	00002106 	br	4006d3c <_malloc_r+0x604>
 4006cb8:	e0bff517 	ldw	r2,-44(fp)
 4006cbc:	1004d27a 	srli	r2,r2,9
 4006cc0:	10800568 	cmpgeui	r2,r2,21
 4006cc4:	1000041e 	bne	r2,zero,4006cd8 <_malloc_r+0x5a0>
 4006cc8:	e0bff517 	ldw	r2,-44(fp)
 4006ccc:	1004d27a 	srli	r2,r2,9
 4006cd0:	108016c4 	addi	r2,r2,91
 4006cd4:	00001906 	br	4006d3c <_malloc_r+0x604>
 4006cd8:	e0bff517 	ldw	r2,-44(fp)
 4006cdc:	1004d27a 	srli	r2,r2,9
 4006ce0:	10801568 	cmpgeui	r2,r2,85
 4006ce4:	1000041e 	bne	r2,zero,4006cf8 <_malloc_r+0x5c0>
 4006ce8:	e0bff517 	ldw	r2,-44(fp)
 4006cec:	1004d33a 	srli	r2,r2,12
 4006cf0:	10801b84 	addi	r2,r2,110
 4006cf4:	00001106 	br	4006d3c <_malloc_r+0x604>
 4006cf8:	e0bff517 	ldw	r2,-44(fp)
 4006cfc:	1004d27a 	srli	r2,r2,9
 4006d00:	10805568 	cmpgeui	r2,r2,341
 4006d04:	1000041e 	bne	r2,zero,4006d18 <_malloc_r+0x5e0>
 4006d08:	e0bff517 	ldw	r2,-44(fp)
 4006d0c:	1004d3fa 	srli	r2,r2,15
 4006d10:	10801dc4 	addi	r2,r2,119
 4006d14:	00000906 	br	4006d3c <_malloc_r+0x604>
 4006d18:	e0bff517 	ldw	r2,-44(fp)
 4006d1c:	1004d27a 	srli	r2,r2,9
 4006d20:	10815568 	cmpgeui	r2,r2,1365
 4006d24:	1000041e 	bne	r2,zero,4006d38 <_malloc_r+0x600>
 4006d28:	e0bff517 	ldw	r2,-44(fp)
 4006d2c:	1004d4ba 	srli	r2,r2,18
 4006d30:	10801f04 	addi	r2,r2,124
 4006d34:	00000106 	br	4006d3c <_malloc_r+0x604>
 4006d38:	00801f84 	movi	r2,126
 4006d3c:	e0bff415 	stw	r2,-48(fp)
 4006d40:	e0bff417 	ldw	r2,-48(fp)
 4006d44:	10800044 	addi	r2,r2,1
 4006d48:	1085883a 	add	r2,r2,r2
 4006d4c:	100690ba 	slli	r3,r2,2
 4006d50:	00810074 	movhi	r2,1025
 4006d54:	1090cf04 	addi	r2,r2,17212
 4006d58:	1885883a 	add	r2,r3,r2
 4006d5c:	10bffe04 	addi	r2,r2,-8
 4006d60:	e0bff815 	stw	r2,-32(fp)
 4006d64:	e0bff817 	ldw	r2,-32(fp)
 4006d68:	10800217 	ldw	r2,8(r2)
 4006d6c:	e0bff915 	stw	r2,-28(fp)
 4006d70:	e0fff917 	ldw	r3,-28(fp)
 4006d74:	e0bff817 	ldw	r2,-32(fp)
 4006d78:	1880121e 	bne	r3,r2,4006dc4 <_malloc_r+0x68c>
 4006d7c:	00810074 	movhi	r2,1025
 4006d80:	1090cf04 	addi	r2,r2,17212
 4006d84:	11000117 	ldw	r4,4(r2)
 4006d88:	e0bff417 	ldw	r2,-48(fp)
 4006d8c:	1000010e 	bge	r2,zero,4006d94 <_malloc_r+0x65c>
 4006d90:	108000c4 	addi	r2,r2,3
 4006d94:	1005d0ba 	srai	r2,r2,2
 4006d98:	1007883a 	mov	r3,r2
 4006d9c:	00800044 	movi	r2,1
 4006da0:	10c6983a 	sll	r3,r2,r3
 4006da4:	00810074 	movhi	r2,1025
 4006da8:	1090cf04 	addi	r2,r2,17212
 4006dac:	20c6b03a 	or	r3,r4,r3
 4006db0:	10c00115 	stw	r3,4(r2)
 4006db4:	00000f06 	br	4006df4 <_malloc_r+0x6bc>
 4006db8:	e0bff917 	ldw	r2,-28(fp)
 4006dbc:	10800217 	ldw	r2,8(r2)
 4006dc0:	e0bff915 	stw	r2,-28(fp)
 4006dc4:	e0fff917 	ldw	r3,-28(fp)
 4006dc8:	e0bff817 	ldw	r2,-32(fp)
 4006dcc:	18800626 	beq	r3,r2,4006de8 <_malloc_r+0x6b0>
 4006dd0:	e0bff917 	ldw	r2,-28(fp)
 4006dd4:	10c00117 	ldw	r3,4(r2)
 4006dd8:	00bfff04 	movi	r2,-4
 4006ddc:	1884703a 	and	r2,r3,r2
 4006de0:	e0fff517 	ldw	r3,-44(fp)
 4006de4:	18bff436 	bltu	r3,r2,4006db8 <_malloc_r+0x680>
 4006de8:	e0bff917 	ldw	r2,-28(fp)
 4006dec:	10800317 	ldw	r2,12(r2)
 4006df0:	e0bff815 	stw	r2,-32(fp)
 4006df4:	e0bfff17 	ldw	r2,-4(fp)
 4006df8:	e0fff817 	ldw	r3,-32(fp)
 4006dfc:	10c00315 	stw	r3,12(r2)
 4006e00:	e0bfff17 	ldw	r2,-4(fp)
 4006e04:	e0fff917 	ldw	r3,-28(fp)
 4006e08:	10c00215 	stw	r3,8(r2)
 4006e0c:	e0bff817 	ldw	r2,-32(fp)
 4006e10:	e0ffff17 	ldw	r3,-4(fp)
 4006e14:	10c00215 	stw	r3,8(r2)
 4006e18:	e0bff817 	ldw	r2,-32(fp)
 4006e1c:	10c00217 	ldw	r3,8(r2)
 4006e20:	e0bff917 	ldw	r2,-28(fp)
 4006e24:	10c00315 	stw	r3,12(r2)
  if ( (block = idx2binblock(idx)) <= binblocks)  
 4006e28:	e0bffe17 	ldw	r2,-8(fp)
 4006e2c:	1000010e 	bge	r2,zero,4006e34 <_malloc_r+0x6fc>
 4006e30:	108000c4 	addi	r2,r2,3
 4006e34:	1005d0ba 	srai	r2,r2,2
 4006e38:	1007883a 	mov	r3,r2
 4006e3c:	00800044 	movi	r2,1
 4006e40:	10c4983a 	sll	r2,r2,r3
 4006e44:	e0bffb15 	stw	r2,-20(fp)
 4006e48:	00810074 	movhi	r2,1025
 4006e4c:	1090cf04 	addi	r2,r2,17212
 4006e50:	10c00117 	ldw	r3,4(r2)
 4006e54:	e0bffb17 	ldw	r2,-20(fp)
 4006e58:	1880c536 	bltu	r3,r2,4007170 <_malloc_r+0xa38>
    if ( (block & binblocks) == 0) 
 4006e5c:	00810074 	movhi	r2,1025
 4006e60:	1090cf04 	addi	r2,r2,17212
 4006e64:	10c00117 	ldw	r3,4(r2)
 4006e68:	e0bffb17 	ldw	r2,-20(fp)
 4006e6c:	1884703a 	and	r2,r3,r2
 4006e70:	1000151e 	bne	r2,zero,4006ec8 <_malloc_r+0x790>
      idx = (idx & ~(BINBLOCKWIDTH - 1)) + BINBLOCKWIDTH;
 4006e74:	e0fffe17 	ldw	r3,-8(fp)
 4006e78:	00bfff04 	movi	r2,-4
 4006e7c:	1884703a 	and	r2,r3,r2
 4006e80:	10800104 	addi	r2,r2,4
 4006e84:	e0bffe15 	stw	r2,-8(fp)
      block <<= 1;
 4006e88:	e0bffb17 	ldw	r2,-20(fp)
 4006e8c:	1085883a 	add	r2,r2,r2
 4006e90:	e0bffb15 	stw	r2,-20(fp)
      while ((block & binblocks) == 0)
 4006e94:	00000606 	br	4006eb0 <_malloc_r+0x778>
        idx += BINBLOCKWIDTH;
 4006e98:	e0bffe17 	ldw	r2,-8(fp)
 4006e9c:	10800104 	addi	r2,r2,4
 4006ea0:	e0bffe15 	stw	r2,-8(fp)
        block <<= 1;
 4006ea4:	e0bffb17 	ldw	r2,-20(fp)
 4006ea8:	1085883a 	add	r2,r2,r2
 4006eac:	e0bffb15 	stw	r2,-20(fp)
      while ((block & binblocks) == 0)
 4006eb0:	00810074 	movhi	r2,1025
 4006eb4:	1090cf04 	addi	r2,r2,17212
 4006eb8:	10c00117 	ldw	r3,4(r2)
 4006ebc:	e0bffb17 	ldw	r2,-20(fp)
 4006ec0:	1884703a 	and	r2,r3,r2
 4006ec4:	103ff426 	beq	r2,zero,4006e98 <_malloc_r+0x760>
      startidx = idx;          /* (track incomplete blocks) */
 4006ec8:	e0bffe17 	ldw	r2,-8(fp)
 4006ecc:	e0bffa15 	stw	r2,-24(fp)
      q = bin = bin_at(idx);
 4006ed0:	e0bffe17 	ldw	r2,-8(fp)
 4006ed4:	10800044 	addi	r2,r2,1
 4006ed8:	1085883a 	add	r2,r2,r2
 4006edc:	100690ba 	slli	r3,r2,2
 4006ee0:	00810074 	movhi	r2,1025
 4006ee4:	1090cf04 	addi	r2,r2,17212
 4006ee8:	1885883a 	add	r2,r3,r2
 4006eec:	10bffe04 	addi	r2,r2,-8
 4006ef0:	e0bffd15 	stw	r2,-12(fp)
 4006ef4:	e0bffd17 	ldw	r2,-12(fp)
 4006ef8:	e0bff715 	stw	r2,-36(fp)
        for (victim = last(bin); victim != bin; victim = victim->bk)
 4006efc:	e0bffd17 	ldw	r2,-12(fp)
 4006f00:	10800317 	ldw	r2,12(r2)
 4006f04:	e0bfff15 	stw	r2,-4(fp)
 4006f08:	00005e06 	br	4007084 <_malloc_r+0x94c>
          victim_size = chunksize(victim);
 4006f0c:	e0bfff17 	ldw	r2,-4(fp)
 4006f10:	10c00117 	ldw	r3,4(r2)
 4006f14:	00bfff04 	movi	r2,-4
 4006f18:	1884703a 	and	r2,r3,r2
 4006f1c:	e0bff515 	stw	r2,-44(fp)
          remainder_size = long_sub_size_t(victim_size, nb);
 4006f20:	e0fff517 	ldw	r3,-44(fp)
 4006f24:	e0bff617 	ldw	r2,-40(fp)
 4006f28:	1885c83a 	sub	r2,r3,r2
 4006f2c:	e0bffc15 	stw	r2,-16(fp)
          if (remainder_size >= (long)MINSIZE) /* split */
 4006f30:	e0bffc17 	ldw	r2,-16(fp)
 4006f34:	10800410 	cmplti	r2,r2,16
 4006f38:	1000331e 	bne	r2,zero,4007008 <_malloc_r+0x8d0>
            remainder = chunk_at_offset(victim, nb);
 4006f3c:	e0ffff17 	ldw	r3,-4(fp)
 4006f40:	e0bff617 	ldw	r2,-40(fp)
 4006f44:	1885883a 	add	r2,r3,r2
 4006f48:	e0bff315 	stw	r2,-52(fp)
            set_head(victim, nb | PREV_INUSE);
 4006f4c:	e0bff617 	ldw	r2,-40(fp)
 4006f50:	10c00054 	ori	r3,r2,1
 4006f54:	e0bfff17 	ldw	r2,-4(fp)
 4006f58:	10c00115 	stw	r3,4(r2)
            unlink(victim, bck, fwd);
 4006f5c:	e0bfff17 	ldw	r2,-4(fp)
 4006f60:	10800317 	ldw	r2,12(r2)
 4006f64:	e0bff815 	stw	r2,-32(fp)
 4006f68:	e0bfff17 	ldw	r2,-4(fp)
 4006f6c:	10800217 	ldw	r2,8(r2)
 4006f70:	e0bff915 	stw	r2,-28(fp)
 4006f74:	e0bff917 	ldw	r2,-28(fp)
 4006f78:	e0fff817 	ldw	r3,-32(fp)
 4006f7c:	10c00315 	stw	r3,12(r2)
 4006f80:	e0bff817 	ldw	r2,-32(fp)
 4006f84:	e0fff917 	ldw	r3,-28(fp)
 4006f88:	10c00215 	stw	r3,8(r2)
            link_last_remainder(remainder);
 4006f8c:	00810074 	movhi	r2,1025
 4006f90:	1090d104 	addi	r2,r2,17220
 4006f94:	e0fff317 	ldw	r3,-52(fp)
 4006f98:	10c00315 	stw	r3,12(r2)
 4006f9c:	00c10074 	movhi	r3,1025
 4006fa0:	18d0d104 	addi	r3,r3,17220
 4006fa4:	10800317 	ldw	r2,12(r2)
 4006fa8:	18800215 	stw	r2,8(r3)
 4006fac:	00810074 	movhi	r2,1025
 4006fb0:	1090d104 	addi	r2,r2,17220
 4006fb4:	e0fff317 	ldw	r3,-52(fp)
 4006fb8:	18800315 	stw	r2,12(r3)
 4006fbc:	e0bff317 	ldw	r2,-52(fp)
 4006fc0:	10c00317 	ldw	r3,12(r2)
 4006fc4:	e0bff317 	ldw	r2,-52(fp)
 4006fc8:	10c00215 	stw	r3,8(r2)
            set_head(remainder, remainder_size | PREV_INUSE);
 4006fcc:	e0bffc17 	ldw	r2,-16(fp)
 4006fd0:	10800054 	ori	r2,r2,1
 4006fd4:	1007883a 	mov	r3,r2
 4006fd8:	e0bff317 	ldw	r2,-52(fp)
 4006fdc:	10c00115 	stw	r3,4(r2)
            set_foot(remainder, remainder_size);
 4006fe0:	e0bffc17 	ldw	r2,-16(fp)
 4006fe4:	e0fff317 	ldw	r3,-52(fp)
 4006fe8:	1885883a 	add	r2,r3,r2
 4006fec:	e0fffc17 	ldw	r3,-16(fp)
 4006ff0:	10c00015 	stw	r3,0(r2)
	    MALLOC_UNLOCK;
 4006ff4:	e13ff217 	ldw	r4,-56(fp)
 4006ff8:	4010f440 	call	4010f44 <__malloc_unlock>
            return chunk2mem(victim);
 4006ffc:	e0bfff17 	ldw	r2,-4(fp)
 4007000:	10800204 	addi	r2,r2,8
 4007004:	0000a106 	br	400728c <_malloc_r+0xb54>
          else if (remainder_size >= 0)  /* take */
 4007008:	e0bffc17 	ldw	r2,-16(fp)
 400700c:	10001a16 	blt	r2,zero,4007078 <_malloc_r+0x940>
            set_inuse_bit_at_offset(victim, victim_size);
 4007010:	e0ffff17 	ldw	r3,-4(fp)
 4007014:	e0bff517 	ldw	r2,-44(fp)
 4007018:	1885883a 	add	r2,r3,r2
 400701c:	10c00117 	ldw	r3,4(r2)
 4007020:	e13fff17 	ldw	r4,-4(fp)
 4007024:	e0bff517 	ldw	r2,-44(fp)
 4007028:	2085883a 	add	r2,r4,r2
 400702c:	18c00054 	ori	r3,r3,1
 4007030:	10c00115 	stw	r3,4(r2)
            unlink(victim, bck, fwd);
 4007034:	e0bfff17 	ldw	r2,-4(fp)
 4007038:	10800317 	ldw	r2,12(r2)
 400703c:	e0bff815 	stw	r2,-32(fp)
 4007040:	e0bfff17 	ldw	r2,-4(fp)
 4007044:	10800217 	ldw	r2,8(r2)
 4007048:	e0bff915 	stw	r2,-28(fp)
 400704c:	e0bff917 	ldw	r2,-28(fp)
 4007050:	e0fff817 	ldw	r3,-32(fp)
 4007054:	10c00315 	stw	r3,12(r2)
 4007058:	e0bff817 	ldw	r2,-32(fp)
 400705c:	e0fff917 	ldw	r3,-28(fp)
 4007060:	10c00215 	stw	r3,8(r2)
	    MALLOC_UNLOCK;
 4007064:	e13ff217 	ldw	r4,-56(fp)
 4007068:	4010f440 	call	4010f44 <__malloc_unlock>
            return chunk2mem(victim);
 400706c:	e0bfff17 	ldw	r2,-4(fp)
 4007070:	10800204 	addi	r2,r2,8
 4007074:	00008506 	br	400728c <_malloc_r+0xb54>
        for (victim = last(bin); victim != bin; victim = victim->bk)
 4007078:	e0bfff17 	ldw	r2,-4(fp)
 400707c:	10800317 	ldw	r2,12(r2)
 4007080:	e0bfff15 	stw	r2,-4(fp)
 4007084:	e0ffff17 	ldw	r3,-4(fp)
 4007088:	e0bffd17 	ldw	r2,-12(fp)
 400708c:	18bf9f1e 	bne	r3,r2,4006f0c <_malloc_r+0x7d4>
       bin = next_bin(bin);
 4007090:	e0bffd17 	ldw	r2,-12(fp)
 4007094:	10800204 	addi	r2,r2,8
 4007098:	e0bffd15 	stw	r2,-12(fp)
      } while ((++idx & (BINBLOCKWIDTH - 1)) != 0);
 400709c:	e0bffe17 	ldw	r2,-8(fp)
 40070a0:	10800044 	addi	r2,r2,1
 40070a4:	e0bffe15 	stw	r2,-8(fp)
 40070a8:	e0bffe17 	ldw	r2,-8(fp)
 40070ac:	108000cc 	andi	r2,r2,3
 40070b0:	103f921e 	bne	r2,zero,4006efc <_malloc_r+0x7c4>
        if ((startidx & (BINBLOCKWIDTH - 1)) == 0)
 40070b4:	e0bffa17 	ldw	r2,-24(fp)
 40070b8:	108000cc 	andi	r2,r2,3
 40070bc:	10000a1e 	bne	r2,zero,40070e8 <_malloc_r+0x9b0>
          binblocks &= ~block;
 40070c0:	00810074 	movhi	r2,1025
 40070c4:	1090cf04 	addi	r2,r2,17212
 40070c8:	11000117 	ldw	r4,4(r2)
 40070cc:	e0bffb17 	ldw	r2,-20(fp)
 40070d0:	0086303a 	nor	r3,zero,r2
 40070d4:	00810074 	movhi	r2,1025
 40070d8:	1090cf04 	addi	r2,r2,17212
 40070dc:	20c6703a 	and	r3,r4,r3
 40070e0:	10c00115 	stw	r3,4(r2)
          break;
 40070e4:	00000a06 	br	4007110 <_malloc_r+0x9d8>
        --startidx;
 40070e8:	e0bffa17 	ldw	r2,-24(fp)
 40070ec:	10bfffc4 	addi	r2,r2,-1
 40070f0:	e0bffa15 	stw	r2,-24(fp)
       q = prev_bin(q);
 40070f4:	e0bff717 	ldw	r2,-36(fp)
 40070f8:	10bffe04 	addi	r2,r2,-8
 40070fc:	e0bff715 	stw	r2,-36(fp)
      } while (first(q) == q);
 4007100:	e0bff717 	ldw	r2,-36(fp)
 4007104:	10800217 	ldw	r2,8(r2)
 4007108:	e0fff717 	ldw	r3,-36(fp)
 400710c:	18bfe926 	beq	r3,r2,40070b4 <_malloc_r+0x97c>
      if ( (block <<= 1) <= binblocks && (block != 0) ) 
 4007110:	e0bffb17 	ldw	r2,-20(fp)
 4007114:	1085883a 	add	r2,r2,r2
 4007118:	e0bffb15 	stw	r2,-20(fp)
 400711c:	00810074 	movhi	r2,1025
 4007120:	1090cf04 	addi	r2,r2,17212
 4007124:	10c00117 	ldw	r3,4(r2)
 4007128:	e0bffb17 	ldw	r2,-20(fp)
 400712c:	18801036 	bltu	r3,r2,4007170 <_malloc_r+0xa38>
 4007130:	e0bffb17 	ldw	r2,-20(fp)
 4007134:	10000e26 	beq	r2,zero,4007170 <_malloc_r+0xa38>
        while ((block & binblocks) == 0)
 4007138:	00000606 	br	4007154 <_malloc_r+0xa1c>
          idx += BINBLOCKWIDTH;
 400713c:	e0bffe17 	ldw	r2,-8(fp)
 4007140:	10800104 	addi	r2,r2,4
 4007144:	e0bffe15 	stw	r2,-8(fp)
          block <<= 1;
 4007148:	e0bffb17 	ldw	r2,-20(fp)
 400714c:	1085883a 	add	r2,r2,r2
 4007150:	e0bffb15 	stw	r2,-20(fp)
        while ((block & binblocks) == 0)
 4007154:	00810074 	movhi	r2,1025
 4007158:	1090cf04 	addi	r2,r2,17212
 400715c:	10c00117 	ldw	r3,4(r2)
 4007160:	e0bffb17 	ldw	r2,-20(fp)
 4007164:	1884703a 	and	r2,r3,r2
 4007168:	103ff426 	beq	r2,zero,400713c <_malloc_r+0xa04>
      startidx = idx;          /* (track incomplete blocks) */
 400716c:	003f5606 	br	4006ec8 <_malloc_r+0x790>
  remainder_size = long_sub_size_t(chunksize(top), nb);
 4007170:	00810074 	movhi	r2,1025
 4007174:	1090cf04 	addi	r2,r2,17212
 4007178:	10800217 	ldw	r2,8(r2)
 400717c:	10c00117 	ldw	r3,4(r2)
 4007180:	00bfff04 	movi	r2,-4
 4007184:	1886703a 	and	r3,r3,r2
 4007188:	e0bff617 	ldw	r2,-40(fp)
 400718c:	1885c83a 	sub	r2,r3,r2
 4007190:	e0bffc15 	stw	r2,-16(fp)
  if (chunksize(top) < nb || remainder_size < (long)MINSIZE)
 4007194:	00810074 	movhi	r2,1025
 4007198:	1090cf04 	addi	r2,r2,17212
 400719c:	10800217 	ldw	r2,8(r2)
 40071a0:	10c00117 	ldw	r3,4(r2)
 40071a4:	00bfff04 	movi	r2,-4
 40071a8:	1886703a 	and	r3,r3,r2
 40071ac:	e0bff617 	ldw	r2,-40(fp)
 40071b0:	18800336 	bltu	r3,r2,40071c0 <_malloc_r+0xa88>
 40071b4:	e0bffc17 	ldw	r2,-16(fp)
 40071b8:	10800408 	cmpgei	r2,r2,16
 40071bc:	10001b1e 	bne	r2,zero,400722c <_malloc_r+0xaf4>
    malloc_extend_top(RCALL nb);
 40071c0:	e17ff617 	ldw	r5,-40(fp)
 40071c4:	e13ff217 	ldw	r4,-56(fp)
 40071c8:	40063740 	call	4006374 <malloc_extend_top>
    remainder_size = long_sub_size_t(chunksize(top), nb);
 40071cc:	00810074 	movhi	r2,1025
 40071d0:	1090cf04 	addi	r2,r2,17212
 40071d4:	10800217 	ldw	r2,8(r2)
 40071d8:	10c00117 	ldw	r3,4(r2)
 40071dc:	00bfff04 	movi	r2,-4
 40071e0:	1886703a 	and	r3,r3,r2
 40071e4:	e0bff617 	ldw	r2,-40(fp)
 40071e8:	1885c83a 	sub	r2,r3,r2
 40071ec:	e0bffc15 	stw	r2,-16(fp)
    if (chunksize(top) < nb || remainder_size < (long)MINSIZE)
 40071f0:	00810074 	movhi	r2,1025
 40071f4:	1090cf04 	addi	r2,r2,17212
 40071f8:	10800217 	ldw	r2,8(r2)
 40071fc:	10c00117 	ldw	r3,4(r2)
 4007200:	00bfff04 	movi	r2,-4
 4007204:	1886703a 	and	r3,r3,r2
 4007208:	e0bff617 	ldw	r2,-40(fp)
 400720c:	18800336 	bltu	r3,r2,400721c <_malloc_r+0xae4>
 4007210:	e0bffc17 	ldw	r2,-16(fp)
 4007214:	10800408 	cmpgei	r2,r2,16
 4007218:	1000041e 	bne	r2,zero,400722c <_malloc_r+0xaf4>
      MALLOC_UNLOCK;
 400721c:	e13ff217 	ldw	r4,-56(fp)
 4007220:	4010f440 	call	4010f44 <__malloc_unlock>
      return 0; /* propagate failure */
 4007224:	0005883a 	mov	r2,zero
 4007228:	00001806 	br	400728c <_malloc_r+0xb54>
  victim = top;
 400722c:	00810074 	movhi	r2,1025
 4007230:	1090cf04 	addi	r2,r2,17212
 4007234:	10800217 	ldw	r2,8(r2)
 4007238:	e0bfff15 	stw	r2,-4(fp)
  set_head(victim, nb | PREV_INUSE);
 400723c:	e0bff617 	ldw	r2,-40(fp)
 4007240:	10c00054 	ori	r3,r2,1
 4007244:	e0bfff17 	ldw	r2,-4(fp)
 4007248:	10c00115 	stw	r3,4(r2)
  top = chunk_at_offset(victim, nb);
 400724c:	00810074 	movhi	r2,1025
 4007250:	1090cf04 	addi	r2,r2,17212
 4007254:	e13fff17 	ldw	r4,-4(fp)
 4007258:	e0fff617 	ldw	r3,-40(fp)
 400725c:	20c7883a 	add	r3,r4,r3
 4007260:	10c00215 	stw	r3,8(r2)
  set_head(top, remainder_size | PREV_INUSE);
 4007264:	e0bffc17 	ldw	r2,-16(fp)
 4007268:	10c00054 	ori	r3,r2,1
 400726c:	00810074 	movhi	r2,1025
 4007270:	1090cf04 	addi	r2,r2,17212
 4007274:	10800217 	ldw	r2,8(r2)
 4007278:	10c00115 	stw	r3,4(r2)
  MALLOC_UNLOCK;
 400727c:	e13ff217 	ldw	r4,-56(fp)
 4007280:	4010f440 	call	4010f44 <__malloc_unlock>
  return chunk2mem(victim);
 4007284:	e0bfff17 	ldw	r2,-4(fp)
 4007288:	10800204 	addi	r2,r2,8
}
 400728c:	e037883a 	mov	sp,fp
 4007290:	dfc00117 	ldw	ra,4(sp)
 4007294:	df000017 	ldw	fp,0(sp)
 4007298:	dec00204 	addi	sp,sp,8
 400729c:	f800283a 	ret

040072a0 <__get_global_locale>:

/* In POSIX terms the global locale is the process-wide locale.  Use this
   function to always refer to the global locale. */
_ELIDABLE_INLINE struct __locale_t *
__get_global_locale ()
{
 40072a0:	deffff04 	addi	sp,sp,-4
 40072a4:	df000015 	stw	fp,0(sp)
 40072a8:	d839883a 	mov	fp,sp
  extern struct __locale_t __global_locale;
  return &__global_locale;
 40072ac:	00810074 	movhi	r2,1025
 40072b0:	10907404 	addi	r2,r2,16848
}
 40072b4:	e037883a 	mov	sp,fp
 40072b8:	df000017 	ldw	fp,0(sp)
 40072bc:	dec00104 	addi	sp,sp,4
 40072c0:	f800283a 	ret

040072c4 <__get_current_locale>:
   using locale info without providing a locale as parameter (*_l functions).
   The current locale is either the locale of the current thread, if the
   thread called uselocale, or the global locale if not. */
_ELIDABLE_INLINE struct __locale_t *
__get_current_locale (void)
{
 40072c4:	defffe04 	addi	sp,sp,-8
 40072c8:	dfc00115 	stw	ra,4(sp)
 40072cc:	df000015 	stw	fp,0(sp)
 40072d0:	d839883a 	mov	fp,sp
#ifdef __HAVE_LOCALE_INFO__
  return _REENT->_locale ?: __get_global_locale ();
#else
  return __get_global_locale();
 40072d4:	40072a00 	call	40072a0 <__get_global_locale>
#endif
}
 40072d8:	e037883a 	mov	sp,fp
 40072dc:	dfc00117 	ldw	ra,4(sp)
 40072e0:	df000017 	ldw	fp,0(sp)
 40072e4:	dec00204 	addi	sp,sp,8
 40072e8:	f800283a 	ret

040072ec <_mbtowc_r>:
_mbtowc_r (struct _reent *r,
        wchar_t       *__restrict pwc,
        const char    *__restrict s,
        size_t         n,
        mbstate_t      *state)
{
 40072ec:	defff904 	addi	sp,sp,-28
 40072f0:	dfc00615 	stw	ra,24(sp)
 40072f4:	df000515 	stw	fp,20(sp)
 40072f8:	df000504 	addi	fp,sp,20
 40072fc:	e13fff15 	stw	r4,-4(fp)
 4007300:	e17ffe15 	stw	r5,-8(fp)
 4007304:	e1bffd15 	stw	r6,-12(fp)
 4007308:	e1fffc15 	stw	r7,-16(fp)
  return __MBTOWC (r, pwc, s, n, state);
 400730c:	40072c40 	call	40072c4 <__get_current_locale>
 4007310:	10803917 	ldw	r2,228(r2)
 4007314:	e0c00217 	ldw	r3,8(fp)
 4007318:	d8c00015 	stw	r3,0(sp)
 400731c:	e1fffc17 	ldw	r7,-16(fp)
 4007320:	e1bffd17 	ldw	r6,-12(fp)
 4007324:	e17ffe17 	ldw	r5,-8(fp)
 4007328:	e13fff17 	ldw	r4,-4(fp)
 400732c:	103ee83a 	callr	r2
}
 4007330:	e037883a 	mov	sp,fp
 4007334:	dfc00117 	ldw	ra,4(sp)
 4007338:	df000017 	ldw	fp,0(sp)
 400733c:	dec00204 	addi	sp,sp,8
 4007340:	f800283a 	ret

04007344 <__ascii_mbtowc>:
__ascii_mbtowc (struct _reent *r,
        wchar_t       *pwc,
        const char    *s,
        size_t         n,
        mbstate_t      *state)
{
 4007344:	defff904 	addi	sp,sp,-28
 4007348:	df000615 	stw	fp,24(sp)
 400734c:	df000604 	addi	fp,sp,24
 4007350:	e13ffd15 	stw	r4,-12(fp)
 4007354:	e17ffc15 	stw	r5,-16(fp)
 4007358:	e1bffb15 	stw	r6,-20(fp)
 400735c:	e1fffa15 	stw	r7,-24(fp)
  wchar_t dummy;
  unsigned char *t = (unsigned char *)s;
 4007360:	e0bffb17 	ldw	r2,-20(fp)
 4007364:	e0bfff15 	stw	r2,-4(fp)

  if (pwc == NULL)
 4007368:	e0bffc17 	ldw	r2,-16(fp)
 400736c:	1000021e 	bne	r2,zero,4007378 <__ascii_mbtowc+0x34>
    pwc = &dummy;
 4007370:	e0bffe04 	addi	r2,fp,-8
 4007374:	e0bffc15 	stw	r2,-16(fp)

  if (s == NULL)
 4007378:	e0bffb17 	ldw	r2,-20(fp)
 400737c:	1000021e 	bne	r2,zero,4007388 <__ascii_mbtowc+0x44>
    return 0;
 4007380:	0005883a 	mov	r2,zero
 4007384:	00001006 	br	40073c8 <__ascii_mbtowc+0x84>

  if (n == 0)
 4007388:	e0bffa17 	ldw	r2,-24(fp)
 400738c:	1000021e 	bne	r2,zero,4007398 <__ascii_mbtowc+0x54>
    return -2;
 4007390:	00bfff84 	movi	r2,-2
 4007394:	00000c06 	br	40073c8 <__ascii_mbtowc+0x84>
      r->_errno = EILSEQ;
      return -1;
    }
#endif

  *pwc = (wchar_t)*t;
 4007398:	e0bfff17 	ldw	r2,-4(fp)
 400739c:	10800003 	ldbu	r2,0(r2)
 40073a0:	10c03fcc 	andi	r3,r2,255
 40073a4:	e0bffc17 	ldw	r2,-16(fp)
 40073a8:	10c00015 	stw	r3,0(r2)
  
  if (*t == '\0')
 40073ac:	e0bfff17 	ldw	r2,-4(fp)
 40073b0:	10800003 	ldbu	r2,0(r2)
 40073b4:	10803fcc 	andi	r2,r2,255
 40073b8:	1000021e 	bne	r2,zero,40073c4 <__ascii_mbtowc+0x80>
    return 0;
 40073bc:	0005883a 	mov	r2,zero
 40073c0:	00000106 	br	40073c8 <__ascii_mbtowc+0x84>

  return 1;
 40073c4:	00800044 	movi	r2,1
}
 40073c8:	e037883a 	mov	sp,fp
 40073cc:	df000017 	ldw	fp,0(sp)
 40073d0:	dec00104 	addi	sp,sp,4
 40073d4:	f800283a 	ret

040073d8 <memchr>:

void *
memchr (const void *src_void,
	int c,
	size_t length)
{
 40073d8:	defff704 	addi	sp,sp,-36
 40073dc:	df000815 	stw	fp,32(sp)
 40073e0:	df000804 	addi	fp,sp,32
 40073e4:	e13ffa15 	stw	r4,-24(fp)
 40073e8:	e17ff915 	stw	r5,-28(fp)
 40073ec:	e1bff815 	stw	r6,-32(fp)
  const unsigned char *src = (const unsigned char *) src_void;
 40073f0:	e0bffa17 	ldw	r2,-24(fp)
 40073f4:	e0bfff15 	stw	r2,-4(fp)
  unsigned char d = c;
 40073f8:	e0bff917 	ldw	r2,-28(fp)
 40073fc:	e0bffbc5 	stb	r2,-17(fp)
#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  unsigned long *asrc;
  unsigned long  mask;
  unsigned int i;

  while (UNALIGNED (src))
 4007400:	00001006 	br	4007444 <memchr+0x6c>
    {
      if (!length--)
 4007404:	e0bff817 	ldw	r2,-32(fp)
 4007408:	10ffffc4 	addi	r3,r2,-1
 400740c:	e0fff815 	stw	r3,-32(fp)
 4007410:	1000021e 	bne	r2,zero,400741c <memchr+0x44>
        return NULL;
 4007414:	0005883a 	mov	r2,zero
 4007418:	00005a06 	br	4007584 <memchr+0x1ac>
      if (*src == d)
 400741c:	e0bfff17 	ldw	r2,-4(fp)
 4007420:	10800003 	ldbu	r2,0(r2)
 4007424:	e0fffbc3 	ldbu	r3,-17(fp)
 4007428:	10803fcc 	andi	r2,r2,255
 400742c:	1880021e 	bne	r3,r2,4007438 <memchr+0x60>
        return (void *) src;
 4007430:	e0bfff17 	ldw	r2,-4(fp)
 4007434:	00005306 	br	4007584 <memchr+0x1ac>
      src++;
 4007438:	e0bfff17 	ldw	r2,-4(fp)
 400743c:	10800044 	addi	r2,r2,1
 4007440:	e0bfff15 	stw	r2,-4(fp)
  while (UNALIGNED (src))
 4007444:	e0bfff17 	ldw	r2,-4(fp)
 4007448:	108000cc 	andi	r2,r2,3
 400744c:	103fed1e 	bne	r2,zero,4007404 <memchr+0x2c>
    }

  if (!TOO_SMALL (length))
 4007450:	e0bff817 	ldw	r2,-32(fp)
 4007454:	10800130 	cmpltui	r2,r2,4
 4007458:	1000451e 	bne	r2,zero,4007570 <memchr+0x198>
         performs the bytewise search on word-sized segments if they
         contain the search character, which is detected by XORing
         the word-sized segment with a word-sized block of the search
         character and then detecting for the presence of NUL in the
         result.  */
      asrc = (unsigned long *) src;
 400745c:	e0bfff17 	ldw	r2,-4(fp)
 4007460:	e0bffe15 	stw	r2,-8(fp)
      mask = d << 8 | d;
 4007464:	e0bffbc3 	ldbu	r2,-17(fp)
 4007468:	1006923a 	slli	r3,r2,8
 400746c:	e0bffbc3 	ldbu	r2,-17(fp)
 4007470:	1884b03a 	or	r2,r3,r2
 4007474:	e0bffd15 	stw	r2,-12(fp)
      mask = mask << 16 | mask;
 4007478:	e0bffd17 	ldw	r2,-12(fp)
 400747c:	1004943a 	slli	r2,r2,16
 4007480:	e0fffd17 	ldw	r3,-12(fp)
 4007484:	1884b03a 	or	r2,r3,r2
 4007488:	e0bffd15 	stw	r2,-12(fp)
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
 400748c:	00800804 	movi	r2,32
 4007490:	e0bffc15 	stw	r2,-16(fp)
 4007494:	00000906 	br	40074bc <memchr+0xe4>
        mask = (mask << i) | mask;
 4007498:	e0fffd17 	ldw	r3,-12(fp)
 400749c:	e0bffc17 	ldw	r2,-16(fp)
 40074a0:	1884983a 	sll	r2,r3,r2
 40074a4:	e0fffd17 	ldw	r3,-12(fp)
 40074a8:	1884b03a 	or	r2,r3,r2
 40074ac:	e0bffd15 	stw	r2,-12(fp)
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
 40074b0:	e0bffc17 	ldw	r2,-16(fp)
 40074b4:	1085883a 	add	r2,r2,r2
 40074b8:	e0bffc15 	stw	r2,-16(fp)
 40074bc:	e0bffc17 	ldw	r2,-16(fp)
 40074c0:	10800830 	cmpltui	r2,r2,32
 40074c4:	103ff41e 	bne	r2,zero,4007498 <memchr+0xc0>

      while (length >= LBLOCKSIZE)
 40074c8:	00001706 	br	4007528 <memchr+0x150>
        {
          if (DETECTCHAR (*asrc, mask))
 40074cc:	e0bffe17 	ldw	r2,-8(fp)
 40074d0:	10c00017 	ldw	r3,0(r2)
 40074d4:	e0bffd17 	ldw	r2,-12(fp)
 40074d8:	1886f03a 	xor	r3,r3,r2
 40074dc:	00bfbff4 	movhi	r2,65279
 40074e0:	10bfbfc4 	addi	r2,r2,-257
 40074e4:	1887883a 	add	r3,r3,r2
 40074e8:	e0bffe17 	ldw	r2,-8(fp)
 40074ec:	11000017 	ldw	r4,0(r2)
 40074f0:	e0bffd17 	ldw	r2,-12(fp)
 40074f4:	2084f03a 	xor	r2,r4,r2
 40074f8:	0084303a 	nor	r2,zero,r2
 40074fc:	1886703a 	and	r3,r3,r2
 4007500:	00a02074 	movhi	r2,32897
 4007504:	10a02004 	addi	r2,r2,-32640
 4007508:	1884703a 	and	r2,r3,r2
 400750c:	10000a1e 	bne	r2,zero,4007538 <memchr+0x160>
            break;
          length -= LBLOCKSIZE;
 4007510:	e0bff817 	ldw	r2,-32(fp)
 4007514:	10bfff04 	addi	r2,r2,-4
 4007518:	e0bff815 	stw	r2,-32(fp)
          asrc++;
 400751c:	e0bffe17 	ldw	r2,-8(fp)
 4007520:	10800104 	addi	r2,r2,4
 4007524:	e0bffe15 	stw	r2,-8(fp)
      while (length >= LBLOCKSIZE)
 4007528:	e0bff817 	ldw	r2,-32(fp)
 400752c:	10800128 	cmpgeui	r2,r2,4
 4007530:	103fe61e 	bne	r2,zero,40074cc <memchr+0xf4>
 4007534:	00000106 	br	400753c <memchr+0x164>
            break;
 4007538:	0001883a 	nop
        }

      /* If there are fewer than LBLOCKSIZE characters left,
         then we resort to the bytewise loop.  */

      src = (unsigned char *) asrc;
 400753c:	e0bffe17 	ldw	r2,-8(fp)
 4007540:	e0bfff15 	stw	r2,-4(fp)
    }

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (length--)
 4007544:	00000a06 	br	4007570 <memchr+0x198>
    {
      if (*src == d)
 4007548:	e0bfff17 	ldw	r2,-4(fp)
 400754c:	10800003 	ldbu	r2,0(r2)
 4007550:	e0fffbc3 	ldbu	r3,-17(fp)
 4007554:	10803fcc 	andi	r2,r2,255
 4007558:	1880021e 	bne	r3,r2,4007564 <memchr+0x18c>
        return (void *) src;
 400755c:	e0bfff17 	ldw	r2,-4(fp)
 4007560:	00000806 	br	4007584 <memchr+0x1ac>
      src++;
 4007564:	e0bfff17 	ldw	r2,-4(fp)
 4007568:	10800044 	addi	r2,r2,1
 400756c:	e0bfff15 	stw	r2,-4(fp)
  while (length--)
 4007570:	e0bff817 	ldw	r2,-32(fp)
 4007574:	10ffffc4 	addi	r3,r2,-1
 4007578:	e0fff815 	stw	r3,-32(fp)
 400757c:	103ff21e 	bne	r2,zero,4007548 <memchr+0x170>
    }

  return NULL;
 4007580:	0005883a 	mov	r2,zero
}
 4007584:	e037883a 	mov	sp,fp
 4007588:	df000017 	ldw	fp,0(sp)
 400758c:	dec00104 	addi	sp,sp,4
 4007590:	f800283a 	ret

04007594 <memcpy>:
void *
__inhibit_loop_to_libcall
memcpy (void *__restrict dst0,
	const void *__restrict src0,
	size_t len0)
{
 4007594:	defff804 	addi	sp,sp,-32
 4007598:	df000715 	stw	fp,28(sp)
 400759c:	df000704 	addi	fp,sp,28
 40075a0:	e13ffb15 	stw	r4,-20(fp)
 40075a4:	e17ffa15 	stw	r5,-24(fp)
 40075a8:	e1bff915 	stw	r6,-28(fp)
      *dst++ = *src++;
    }

  return save;
#else
  char *dst = dst0;
 40075ac:	e0bffb17 	ldw	r2,-20(fp)
 40075b0:	e0bfff15 	stw	r2,-4(fp)
  const char *src = src0;
 40075b4:	e0bffa17 	ldw	r2,-24(fp)
 40075b8:	e0bffe15 	stw	r2,-8(fp)
  long *aligned_dst;
  const long *aligned_src;

  /* If the size is small, or either SRC or DST is unaligned,
     then punt into the byte copy loop.  This should be rare.  */
  if (!TOO_SMALL(len0) && !UNALIGNED (src, dst))
 40075bc:	e0bff917 	ldw	r2,-28(fp)
 40075c0:	10800430 	cmpltui	r2,r2,16
 40075c4:	10004c1e 	bne	r2,zero,40076f8 <memcpy+0x164>
 40075c8:	e0fffe17 	ldw	r3,-8(fp)
 40075cc:	e0bfff17 	ldw	r2,-4(fp)
 40075d0:	1884b03a 	or	r2,r3,r2
 40075d4:	108000cc 	andi	r2,r2,3
 40075d8:	1000471e 	bne	r2,zero,40076f8 <memcpy+0x164>
    {
      aligned_dst = (long*)dst;
 40075dc:	e0bfff17 	ldw	r2,-4(fp)
 40075e0:	e0bffd15 	stw	r2,-12(fp)
      aligned_src = (long*)src;
 40075e4:	e0bffe17 	ldw	r2,-8(fp)
 40075e8:	e0bffc15 	stw	r2,-16(fp)

      /* Copy 4X long words at a time if possible.  */
      while (len0 >= BIGBLOCKSIZE)
 40075ec:	00002306 	br	400767c <memcpy+0xe8>
        {
          *aligned_dst++ = *aligned_src++;
 40075f0:	e0fffc17 	ldw	r3,-16(fp)
 40075f4:	18800104 	addi	r2,r3,4
 40075f8:	e0bffc15 	stw	r2,-16(fp)
 40075fc:	e0bffd17 	ldw	r2,-12(fp)
 4007600:	11000104 	addi	r4,r2,4
 4007604:	e13ffd15 	stw	r4,-12(fp)
 4007608:	18c00017 	ldw	r3,0(r3)
 400760c:	10c00015 	stw	r3,0(r2)
          *aligned_dst++ = *aligned_src++;
 4007610:	e0fffc17 	ldw	r3,-16(fp)
 4007614:	18800104 	addi	r2,r3,4
 4007618:	e0bffc15 	stw	r2,-16(fp)
 400761c:	e0bffd17 	ldw	r2,-12(fp)
 4007620:	11000104 	addi	r4,r2,4
 4007624:	e13ffd15 	stw	r4,-12(fp)
 4007628:	18c00017 	ldw	r3,0(r3)
 400762c:	10c00015 	stw	r3,0(r2)
          *aligned_dst++ = *aligned_src++;
 4007630:	e0fffc17 	ldw	r3,-16(fp)
 4007634:	18800104 	addi	r2,r3,4
 4007638:	e0bffc15 	stw	r2,-16(fp)
 400763c:	e0bffd17 	ldw	r2,-12(fp)
 4007640:	11000104 	addi	r4,r2,4
 4007644:	e13ffd15 	stw	r4,-12(fp)
 4007648:	18c00017 	ldw	r3,0(r3)
 400764c:	10c00015 	stw	r3,0(r2)
          *aligned_dst++ = *aligned_src++;
 4007650:	e0fffc17 	ldw	r3,-16(fp)
 4007654:	18800104 	addi	r2,r3,4
 4007658:	e0bffc15 	stw	r2,-16(fp)
 400765c:	e0bffd17 	ldw	r2,-12(fp)
 4007660:	11000104 	addi	r4,r2,4
 4007664:	e13ffd15 	stw	r4,-12(fp)
 4007668:	18c00017 	ldw	r3,0(r3)
 400766c:	10c00015 	stw	r3,0(r2)
          len0 -= BIGBLOCKSIZE;
 4007670:	e0bff917 	ldw	r2,-28(fp)
 4007674:	10bffc04 	addi	r2,r2,-16
 4007678:	e0bff915 	stw	r2,-28(fp)
      while (len0 >= BIGBLOCKSIZE)
 400767c:	e0bff917 	ldw	r2,-28(fp)
 4007680:	10800428 	cmpgeui	r2,r2,16
 4007684:	103fda1e 	bne	r2,zero,40075f0 <memcpy+0x5c>
        }

      /* Copy one long word at a time if possible.  */
      while (len0 >= LITTLEBLOCKSIZE)
 4007688:	00000b06 	br	40076b8 <memcpy+0x124>
        {
          *aligned_dst++ = *aligned_src++;
 400768c:	e0fffc17 	ldw	r3,-16(fp)
 4007690:	18800104 	addi	r2,r3,4
 4007694:	e0bffc15 	stw	r2,-16(fp)
 4007698:	e0bffd17 	ldw	r2,-12(fp)
 400769c:	11000104 	addi	r4,r2,4
 40076a0:	e13ffd15 	stw	r4,-12(fp)
 40076a4:	18c00017 	ldw	r3,0(r3)
 40076a8:	10c00015 	stw	r3,0(r2)
          len0 -= LITTLEBLOCKSIZE;
 40076ac:	e0bff917 	ldw	r2,-28(fp)
 40076b0:	10bfff04 	addi	r2,r2,-4
 40076b4:	e0bff915 	stw	r2,-28(fp)
      while (len0 >= LITTLEBLOCKSIZE)
 40076b8:	e0bff917 	ldw	r2,-28(fp)
 40076bc:	10800128 	cmpgeui	r2,r2,4
 40076c0:	103ff21e 	bne	r2,zero,400768c <memcpy+0xf8>
        }

       /* Pick up any residual with a byte copier.  */
      dst = (char*)aligned_dst;
 40076c4:	e0bffd17 	ldw	r2,-12(fp)
 40076c8:	e0bfff15 	stw	r2,-4(fp)
      src = (char*)aligned_src;
 40076cc:	e0bffc17 	ldw	r2,-16(fp)
 40076d0:	e0bffe15 	stw	r2,-8(fp)
    }

  while (len0--)
 40076d4:	00000806 	br	40076f8 <memcpy+0x164>
    *dst++ = *src++;
 40076d8:	e0fffe17 	ldw	r3,-8(fp)
 40076dc:	18800044 	addi	r2,r3,1
 40076e0:	e0bffe15 	stw	r2,-8(fp)
 40076e4:	e0bfff17 	ldw	r2,-4(fp)
 40076e8:	11000044 	addi	r4,r2,1
 40076ec:	e13fff15 	stw	r4,-4(fp)
 40076f0:	18c00003 	ldbu	r3,0(r3)
 40076f4:	10c00005 	stb	r3,0(r2)
  while (len0--)
 40076f8:	e0bff917 	ldw	r2,-28(fp)
 40076fc:	10ffffc4 	addi	r3,r2,-1
 4007700:	e0fff915 	stw	r3,-28(fp)
 4007704:	103ff41e 	bne	r2,zero,40076d8 <memcpy+0x144>

  return dst0;
 4007708:	e0bffb17 	ldw	r2,-20(fp)
#endif /* not PREFER_SIZE_OVER_SPEED */
}
 400770c:	e037883a 	mov	sp,fp
 4007710:	df000017 	ldw	fp,0(sp)
 4007714:	dec00104 	addi	sp,sp,4
 4007718:	f800283a 	ret

0400771c <memset>:
void *
__inhibit_loop_to_libcall
memset (void *m,
	int c,
	size_t n)
{
 400771c:	defff704 	addi	sp,sp,-36
 4007720:	df000815 	stw	fp,32(sp)
 4007724:	df000804 	addi	fp,sp,32
 4007728:	e13ffa15 	stw	r4,-24(fp)
 400772c:	e17ff915 	stw	r5,-28(fp)
 4007730:	e1bff815 	stw	r6,-32(fp)
  char *s = (char *) m;
 4007734:	e0bffa17 	ldw	r2,-24(fp)
 4007738:	e0bfff15 	stw	r2,-4(fp)

#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  unsigned int i;
  unsigned long buffer;
  unsigned long *aligned_addr;
  unsigned int d = c & 0xff;	/* To avoid sign extension, copy C to an
 400773c:	e0bff917 	ldw	r2,-28(fp)
 4007740:	10803fcc 	andi	r2,r2,255
 4007744:	e0bffb15 	stw	r2,-20(fp)
				   unsigned variable.  */

  while (UNALIGNED (s))
 4007748:	00000c06 	br	400777c <memset+0x60>
    {
      if (n--)
 400774c:	e0bff817 	ldw	r2,-32(fp)
 4007750:	10ffffc4 	addi	r3,r2,-1
 4007754:	e0fff815 	stw	r3,-32(fp)
 4007758:	10000626 	beq	r2,zero,4007774 <memset+0x58>
        *s++ = (char) c;
 400775c:	e0bfff17 	ldw	r2,-4(fp)
 4007760:	10c00044 	addi	r3,r2,1
 4007764:	e0ffff15 	stw	r3,-4(fp)
 4007768:	e0fff917 	ldw	r3,-28(fp)
 400776c:	10c00005 	stb	r3,0(r2)
 4007770:	00000206 	br	400777c <memset+0x60>
      else
        return m;
 4007774:	e0bffa17 	ldw	r2,-24(fp)
 4007778:	00005506 	br	40078d0 <memset+0x1b4>
  while (UNALIGNED (s))
 400777c:	e0bfff17 	ldw	r2,-4(fp)
 4007780:	108000cc 	andi	r2,r2,3
 4007784:	103ff11e 	bne	r2,zero,400774c <memset+0x30>
    }

  if (!TOO_SMALL (n))
 4007788:	e0bff817 	ldw	r2,-32(fp)
 400778c:	10800130 	cmpltui	r2,r2,4
 4007790:	10004a1e 	bne	r2,zero,40078bc <memset+0x1a0>
    {
      /* If we get this far, we know that n is large and s is word-aligned. */
      aligned_addr = (unsigned long *) s;
 4007794:	e0bfff17 	ldw	r2,-4(fp)
 4007798:	e0bffc15 	stw	r2,-16(fp)

      /* Store D into each char sized location in BUFFER so that
         we can set large blocks quickly.  */
      buffer = (d << 8) | d;
 400779c:	e0bffb17 	ldw	r2,-20(fp)
 40077a0:	1004923a 	slli	r2,r2,8
 40077a4:	e0fffb17 	ldw	r3,-20(fp)
 40077a8:	1884b03a 	or	r2,r3,r2
 40077ac:	e0bffd15 	stw	r2,-12(fp)
      buffer |= (buffer << 16);
 40077b0:	e0bffd17 	ldw	r2,-12(fp)
 40077b4:	1004943a 	slli	r2,r2,16
 40077b8:	e0fffd17 	ldw	r3,-12(fp)
 40077bc:	1884b03a 	or	r2,r3,r2
 40077c0:	e0bffd15 	stw	r2,-12(fp)
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
 40077c4:	00800804 	movi	r2,32
 40077c8:	e0bffe15 	stw	r2,-8(fp)
 40077cc:	00000906 	br	40077f4 <memset+0xd8>
        buffer = (buffer << i) | buffer;
 40077d0:	e0fffd17 	ldw	r3,-12(fp)
 40077d4:	e0bffe17 	ldw	r2,-8(fp)
 40077d8:	1884983a 	sll	r2,r3,r2
 40077dc:	e0fffd17 	ldw	r3,-12(fp)
 40077e0:	1884b03a 	or	r2,r3,r2
 40077e4:	e0bffd15 	stw	r2,-12(fp)
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
 40077e8:	e0bffe17 	ldw	r2,-8(fp)
 40077ec:	1085883a 	add	r2,r2,r2
 40077f0:	e0bffe15 	stw	r2,-8(fp)
 40077f4:	e0bffe17 	ldw	r2,-8(fp)
 40077f8:	10800830 	cmpltui	r2,r2,32
 40077fc:	103ff41e 	bne	r2,zero,40077d0 <memset+0xb4>

      /* Unroll the loop.  */
      while (n >= LBLOCKSIZE*4)
 4007800:	00001706 	br	4007860 <memset+0x144>
        {
          *aligned_addr++ = buffer;
 4007804:	e0bffc17 	ldw	r2,-16(fp)
 4007808:	10c00104 	addi	r3,r2,4
 400780c:	e0fffc15 	stw	r3,-16(fp)
 4007810:	e0fffd17 	ldw	r3,-12(fp)
 4007814:	10c00015 	stw	r3,0(r2)
          *aligned_addr++ = buffer;
 4007818:	e0bffc17 	ldw	r2,-16(fp)
 400781c:	10c00104 	addi	r3,r2,4
 4007820:	e0fffc15 	stw	r3,-16(fp)
 4007824:	e0fffd17 	ldw	r3,-12(fp)
 4007828:	10c00015 	stw	r3,0(r2)
          *aligned_addr++ = buffer;
 400782c:	e0bffc17 	ldw	r2,-16(fp)
 4007830:	10c00104 	addi	r3,r2,4
 4007834:	e0fffc15 	stw	r3,-16(fp)
 4007838:	e0fffd17 	ldw	r3,-12(fp)
 400783c:	10c00015 	stw	r3,0(r2)
          *aligned_addr++ = buffer;
 4007840:	e0bffc17 	ldw	r2,-16(fp)
 4007844:	10c00104 	addi	r3,r2,4
 4007848:	e0fffc15 	stw	r3,-16(fp)
 400784c:	e0fffd17 	ldw	r3,-12(fp)
 4007850:	10c00015 	stw	r3,0(r2)
          n -= 4*LBLOCKSIZE;
 4007854:	e0bff817 	ldw	r2,-32(fp)
 4007858:	10bffc04 	addi	r2,r2,-16
 400785c:	e0bff815 	stw	r2,-32(fp)
      while (n >= LBLOCKSIZE*4)
 4007860:	e0bff817 	ldw	r2,-32(fp)
 4007864:	10800428 	cmpgeui	r2,r2,16
 4007868:	103fe61e 	bne	r2,zero,4007804 <memset+0xe8>
        }

      while (n >= LBLOCKSIZE)
 400786c:	00000806 	br	4007890 <memset+0x174>
        {
          *aligned_addr++ = buffer;
 4007870:	e0bffc17 	ldw	r2,-16(fp)
 4007874:	10c00104 	addi	r3,r2,4
 4007878:	e0fffc15 	stw	r3,-16(fp)
 400787c:	e0fffd17 	ldw	r3,-12(fp)
 4007880:	10c00015 	stw	r3,0(r2)
          n -= LBLOCKSIZE;
 4007884:	e0bff817 	ldw	r2,-32(fp)
 4007888:	10bfff04 	addi	r2,r2,-4
 400788c:	e0bff815 	stw	r2,-32(fp)
      while (n >= LBLOCKSIZE)
 4007890:	e0bff817 	ldw	r2,-32(fp)
 4007894:	10800128 	cmpgeui	r2,r2,4
 4007898:	103ff51e 	bne	r2,zero,4007870 <memset+0x154>
        }
      /* Pick up the remainder with a bytewise loop.  */
      s = (char*)aligned_addr;
 400789c:	e0bffc17 	ldw	r2,-16(fp)
 40078a0:	e0bfff15 	stw	r2,-4(fp)
    }

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (n--)
 40078a4:	00000506 	br	40078bc <memset+0x1a0>
    *s++ = (char) c;
 40078a8:	e0bfff17 	ldw	r2,-4(fp)
 40078ac:	10c00044 	addi	r3,r2,1
 40078b0:	e0ffff15 	stw	r3,-4(fp)
 40078b4:	e0fff917 	ldw	r3,-28(fp)
 40078b8:	10c00005 	stb	r3,0(r2)
  while (n--)
 40078bc:	e0bff817 	ldw	r2,-32(fp)
 40078c0:	10ffffc4 	addi	r3,r2,-1
 40078c4:	e0fff815 	stw	r3,-32(fp)
 40078c8:	103ff71e 	bne	r2,zero,40078a8 <memset+0x18c>

  return m;
 40078cc:	e0bffa17 	ldw	r2,-24(fp)
}
 40078d0:	e037883a 	mov	sp,fp
 40078d4:	df000017 	ldw	fp,0(sp)
 40078d8:	dec00104 	addi	sp,sp,4
 40078dc:	f800283a 	ret

040078e0 <_Balloc>:
#define _Kmax 15
*/

_Bigint *
Balloc (struct _reent *ptr, int k)
{
 40078e0:	defffa04 	addi	sp,sp,-24
 40078e4:	dfc00515 	stw	ra,20(sp)
 40078e8:	df000415 	stw	fp,16(sp)
 40078ec:	df000404 	addi	fp,sp,16
 40078f0:	e13ffd15 	stw	r4,-12(fp)
 40078f4:	e17ffc15 	stw	r5,-16(fp)
  int x;
  _Bigint *rv ;

  _REENT_CHECK_MP(ptr);
  if (_REENT_MP_FREELIST(ptr) == NULL)
 40078f8:	e0bffd17 	ldw	r2,-12(fp)
 40078fc:	10801317 	ldw	r2,76(r2)
 4007900:	10000c1e 	bne	r2,zero,4007934 <_Balloc+0x54>
    {
      /* Allocate a list of pointers to the mprec objects */
      _REENT_MP_FREELIST(ptr) = (struct _Bigint **) _calloc_r (ptr, 
 4007904:	01800844 	movi	r6,33
 4007908:	01400104 	movi	r5,4
 400790c:	e13ffd17 	ldw	r4,-12(fp)
 4007910:	400b0d00 	call	400b0d0 <_calloc_r>
 4007914:	1007883a 	mov	r3,r2
 4007918:	e0bffd17 	ldw	r2,-12(fp)
 400791c:	10c01315 	stw	r3,76(r2)
						      sizeof (struct _Bigint *),
						      _Kmax + 1);
      if (_REENT_MP_FREELIST(ptr) == NULL)
 4007920:	e0bffd17 	ldw	r2,-12(fp)
 4007924:	10801317 	ldw	r2,76(r2)
 4007928:	1000021e 	bne	r2,zero,4007934 <_Balloc+0x54>
	{
	  return NULL;
 400792c:	0005883a 	mov	r2,zero
 4007930:	00002f06 	br	40079f0 <_Balloc+0x110>
	}
    }

  if ((rv = _REENT_MP_FREELIST(ptr)[k]) != 0)
 4007934:	e0bffd17 	ldw	r2,-12(fp)
 4007938:	10c01317 	ldw	r3,76(r2)
 400793c:	e0bffc17 	ldw	r2,-16(fp)
 4007940:	100490ba 	slli	r2,r2,2
 4007944:	1885883a 	add	r2,r3,r2
 4007948:	10800017 	ldw	r2,0(r2)
 400794c:	e0bfff15 	stw	r2,-4(fp)
 4007950:	e0bfff17 	ldw	r2,-4(fp)
 4007954:	10000926 	beq	r2,zero,400797c <_Balloc+0x9c>
    {
      _REENT_MP_FREELIST(ptr)[k] = rv->_next;
 4007958:	e0bffd17 	ldw	r2,-12(fp)
 400795c:	10c01317 	ldw	r3,76(r2)
 4007960:	e0bffc17 	ldw	r2,-16(fp)
 4007964:	100490ba 	slli	r2,r2,2
 4007968:	1885883a 	add	r2,r3,r2
 400796c:	e0ffff17 	ldw	r3,-4(fp)
 4007970:	18c00017 	ldw	r3,0(r3)
 4007974:	10c00015 	stw	r3,0(r2)
 4007978:	00001606 	br	40079d4 <_Balloc+0xf4>
    }
  else
    {
      x = 1 << k;
 400797c:	00c00044 	movi	r3,1
 4007980:	e0bffc17 	ldw	r2,-16(fp)
 4007984:	1884983a 	sll	r2,r3,r2
 4007988:	e0bffe15 	stw	r2,-8(fp)
      /* Allocate an mprec Bigint and stick in in the freelist */
      rv = (_Bigint *) _calloc_r (ptr,
				  1,
				  sizeof (_Bigint) +
 400798c:	e0bffe17 	ldw	r2,-8(fp)
 4007990:	10800144 	addi	r2,r2,5
      rv = (_Bigint *) _calloc_r (ptr,
 4007994:	100490ba 	slli	r2,r2,2
 4007998:	100d883a 	mov	r6,r2
 400799c:	01400044 	movi	r5,1
 40079a0:	e13ffd17 	ldw	r4,-12(fp)
 40079a4:	400b0d00 	call	400b0d0 <_calloc_r>
 40079a8:	e0bfff15 	stw	r2,-4(fp)
				  (x-1) * sizeof(rv->_x));
      if (rv == NULL) return NULL;
 40079ac:	e0bfff17 	ldw	r2,-4(fp)
 40079b0:	1000021e 	bne	r2,zero,40079bc <_Balloc+0xdc>
 40079b4:	0005883a 	mov	r2,zero
 40079b8:	00000d06 	br	40079f0 <_Balloc+0x110>
      rv->_k = k;
 40079bc:	e0bfff17 	ldw	r2,-4(fp)
 40079c0:	e0fffc17 	ldw	r3,-16(fp)
 40079c4:	10c00115 	stw	r3,4(r2)
      rv->_maxwds = x;
 40079c8:	e0bfff17 	ldw	r2,-4(fp)
 40079cc:	e0fffe17 	ldw	r3,-8(fp)
 40079d0:	10c00215 	stw	r3,8(r2)
    }
  rv->_sign = rv->_wds = 0;
 40079d4:	e0bfff17 	ldw	r2,-4(fp)
 40079d8:	10000415 	stw	zero,16(r2)
 40079dc:	e0bfff17 	ldw	r2,-4(fp)
 40079e0:	10c00417 	ldw	r3,16(r2)
 40079e4:	e0bfff17 	ldw	r2,-4(fp)
 40079e8:	10c00315 	stw	r3,12(r2)
  return rv;
 40079ec:	e0bfff17 	ldw	r2,-4(fp)
}
 40079f0:	e037883a 	mov	sp,fp
 40079f4:	dfc00117 	ldw	ra,4(sp)
 40079f8:	df000017 	ldw	fp,0(sp)
 40079fc:	dec00204 	addi	sp,sp,8
 4007a00:	f800283a 	ret

04007a04 <_Bfree>:

void
Bfree (struct _reent *ptr, _Bigint * v)
{
 4007a04:	defffd04 	addi	sp,sp,-12
 4007a08:	df000215 	stw	fp,8(sp)
 4007a0c:	df000204 	addi	fp,sp,8
 4007a10:	e13fff15 	stw	r4,-4(fp)
 4007a14:	e17ffe15 	stw	r5,-8(fp)
  _REENT_CHECK_MP(ptr);
  if (v)
 4007a18:	e0bffe17 	ldw	r2,-8(fp)
 4007a1c:	10001126 	beq	r2,zero,4007a64 <_Bfree+0x60>
    {
      v->_next = _REENT_MP_FREELIST(ptr)[v->_k];
 4007a20:	e0bfff17 	ldw	r2,-4(fp)
 4007a24:	10c01317 	ldw	r3,76(r2)
 4007a28:	e0bffe17 	ldw	r2,-8(fp)
 4007a2c:	10800117 	ldw	r2,4(r2)
 4007a30:	100490ba 	slli	r2,r2,2
 4007a34:	1885883a 	add	r2,r3,r2
 4007a38:	10c00017 	ldw	r3,0(r2)
 4007a3c:	e0bffe17 	ldw	r2,-8(fp)
 4007a40:	10c00015 	stw	r3,0(r2)
      _REENT_MP_FREELIST(ptr)[v->_k] = v;
 4007a44:	e0bfff17 	ldw	r2,-4(fp)
 4007a48:	10c01317 	ldw	r3,76(r2)
 4007a4c:	e0bffe17 	ldw	r2,-8(fp)
 4007a50:	10800117 	ldw	r2,4(r2)
 4007a54:	100490ba 	slli	r2,r2,2
 4007a58:	1885883a 	add	r2,r3,r2
 4007a5c:	e0fffe17 	ldw	r3,-8(fp)
 4007a60:	10c00015 	stw	r3,0(r2)
    }
}
 4007a64:	0001883a 	nop
 4007a68:	e037883a 	mov	sp,fp
 4007a6c:	df000017 	ldw	fp,0(sp)
 4007a70:	dec00104 	addi	sp,sp,4
 4007a74:	f800283a 	ret

04007a78 <__multadd>:
_Bigint *
multadd (struct _reent *ptr,
	_Bigint * b,
	int m,
	int a)
{
 4007a78:	defff204 	addi	sp,sp,-56
 4007a7c:	dfc00d15 	stw	ra,52(sp)
 4007a80:	df000c15 	stw	fp,48(sp)
 4007a84:	df000c04 	addi	fp,sp,48
 4007a88:	e13ff715 	stw	r4,-36(fp)
 4007a8c:	e17ff615 	stw	r5,-40(fp)
 4007a90:	e1bff515 	stw	r6,-44(fp)
 4007a94:	e1fff415 	stw	r7,-48(fp)
#ifdef Pack_32
  __ULong xi, z;
#endif
  _Bigint *b1;

  wds = b->_wds;
 4007a98:	e0bff617 	ldw	r2,-40(fp)
 4007a9c:	10800417 	ldw	r2,16(r2)
 4007aa0:	e0bffd15 	stw	r2,-12(fp)
  x = b->_x;
 4007aa4:	e0bff617 	ldw	r2,-40(fp)
 4007aa8:	10800504 	addi	r2,r2,20
 4007aac:	e0bffe15 	stw	r2,-8(fp)
  i = 0;
 4007ab0:	e03fff15 	stw	zero,-4(fp)
  do
    {
#ifdef Pack_32
      xi = *x;
 4007ab4:	e0bffe17 	ldw	r2,-8(fp)
 4007ab8:	10800017 	ldw	r2,0(r2)
 4007abc:	e0bffc15 	stw	r2,-16(fp)
      y = (xi & 0xffff) * m + a;
 4007ac0:	e0bffc17 	ldw	r2,-16(fp)
 4007ac4:	10ffffcc 	andi	r3,r2,65535
 4007ac8:	e0bff517 	ldw	r2,-44(fp)
 4007acc:	1887383a 	mul	r3,r3,r2
 4007ad0:	e0bff417 	ldw	r2,-48(fp)
 4007ad4:	1885883a 	add	r2,r3,r2
 4007ad8:	e0bffb15 	stw	r2,-20(fp)
      z = (xi >> 16) * m + (y >> 16);
 4007adc:	e0bffc17 	ldw	r2,-16(fp)
 4007ae0:	1006d43a 	srli	r3,r2,16
 4007ae4:	e0bff517 	ldw	r2,-44(fp)
 4007ae8:	1887383a 	mul	r3,r3,r2
 4007aec:	e0bffb17 	ldw	r2,-20(fp)
 4007af0:	1004d43a 	srli	r2,r2,16
 4007af4:	1885883a 	add	r2,r3,r2
 4007af8:	e0bffa15 	stw	r2,-24(fp)
      a = (int) (z >> 16);
 4007afc:	e0bffa17 	ldw	r2,-24(fp)
 4007b00:	1004d43a 	srli	r2,r2,16
 4007b04:	e0bff415 	stw	r2,-48(fp)
      *x++ = (z << 16) + (y & 0xffff);
 4007b08:	e0bffa17 	ldw	r2,-24(fp)
 4007b0c:	1008943a 	slli	r4,r2,16
 4007b10:	e0bffb17 	ldw	r2,-20(fp)
 4007b14:	10ffffcc 	andi	r3,r2,65535
 4007b18:	e0bffe17 	ldw	r2,-8(fp)
 4007b1c:	11400104 	addi	r5,r2,4
 4007b20:	e17ffe15 	stw	r5,-8(fp)
 4007b24:	20c7883a 	add	r3,r4,r3
 4007b28:	10c00015 	stw	r3,0(r2)
      y = *x * m + a;
      a = (int) (y >> 16);
      *x++ = y & 0xffff;
#endif
    }
  while (++i < wds);
 4007b2c:	e0bfff17 	ldw	r2,-4(fp)
 4007b30:	10800044 	addi	r2,r2,1
 4007b34:	e0bfff15 	stw	r2,-4(fp)
 4007b38:	e0ffff17 	ldw	r3,-4(fp)
 4007b3c:	e0bffd17 	ldw	r2,-12(fp)
 4007b40:	18bfdc16 	blt	r3,r2,4007ab4 <__multadd+0x3c>
  if (a)
 4007b44:	e0bff417 	ldw	r2,-48(fp)
 4007b48:	10003326 	beq	r2,zero,4007c18 <__multadd+0x1a0>
    {
      if (wds >= b->_maxwds)
 4007b4c:	e0bff617 	ldw	r2,-40(fp)
 4007b50:	10800217 	ldw	r2,8(r2)
 4007b54:	e0fffd17 	ldw	r3,-12(fp)
 4007b58:	18802316 	blt	r3,r2,4007be8 <__multadd+0x170>
	{
	  b1 = eBalloc (ptr, b->_k + 1);
 4007b5c:	e0bff617 	ldw	r2,-40(fp)
 4007b60:	10800117 	ldw	r2,4(r2)
 4007b64:	10800044 	addi	r2,r2,1
 4007b68:	100b883a 	mov	r5,r2
 4007b6c:	e13ff717 	ldw	r4,-36(fp)
 4007b70:	40078e00 	call	40078e0 <_Balloc>
 4007b74:	e0bff915 	stw	r2,-28(fp)
 4007b78:	e0bff917 	ldw	r2,-28(fp)
 4007b7c:	1000071e 	bne	r2,zero,4007b9c <__multadd+0x124>
 4007b80:	01c10074 	movhi	r7,1025
 4007b84:	39cde904 	addi	r7,r7,14244
 4007b88:	000d883a 	mov	r6,zero
 4007b8c:	01402d44 	movi	r5,181
 4007b90:	01010074 	movhi	r4,1025
 4007b94:	210dee04 	addi	r4,r4,14264
 4007b98:	400b01c0 	call	400b01c <__assert_func>
 4007b9c:	e0bff917 	ldw	r2,-28(fp)
 4007ba0:	e0bff815 	stw	r2,-32(fp)
	  Bcopy (b1, b);
 4007ba4:	e0bff817 	ldw	r2,-32(fp)
 4007ba8:	10c00304 	addi	r3,r2,12
 4007bac:	e0bff617 	ldw	r2,-40(fp)
 4007bb0:	11000304 	addi	r4,r2,12
 4007bb4:	e0bff617 	ldw	r2,-40(fp)
 4007bb8:	10800417 	ldw	r2,16(r2)
 4007bbc:	10800084 	addi	r2,r2,2
 4007bc0:	100490ba 	slli	r2,r2,2
 4007bc4:	100d883a 	mov	r6,r2
 4007bc8:	200b883a 	mov	r5,r4
 4007bcc:	1809883a 	mov	r4,r3
 4007bd0:	40075940 	call	4007594 <memcpy>
	  Bfree (ptr, b);
 4007bd4:	e17ff617 	ldw	r5,-40(fp)
 4007bd8:	e13ff717 	ldw	r4,-36(fp)
 4007bdc:	4007a040 	call	4007a04 <_Bfree>
	  b = b1;
 4007be0:	e0bff817 	ldw	r2,-32(fp)
 4007be4:	e0bff615 	stw	r2,-40(fp)
	}
      b->_x[wds++] = a;
 4007be8:	e0bffd17 	ldw	r2,-12(fp)
 4007bec:	10c00044 	addi	r3,r2,1
 4007bf0:	e0fffd15 	stw	r3,-12(fp)
 4007bf4:	e0fff417 	ldw	r3,-48(fp)
 4007bf8:	e13ff617 	ldw	r4,-40(fp)
 4007bfc:	10800144 	addi	r2,r2,5
 4007c00:	100490ba 	slli	r2,r2,2
 4007c04:	2085883a 	add	r2,r4,r2
 4007c08:	10c00015 	stw	r3,0(r2)
      b->_wds = wds;
 4007c0c:	e0bff617 	ldw	r2,-40(fp)
 4007c10:	e0fffd17 	ldw	r3,-12(fp)
 4007c14:	10c00415 	stw	r3,16(r2)
    }
  return b;
 4007c18:	e0bff617 	ldw	r2,-40(fp)
}
 4007c1c:	e037883a 	mov	sp,fp
 4007c20:	dfc00117 	ldw	ra,4(sp)
 4007c24:	df000017 	ldw	fp,0(sp)
 4007c28:	dec00204 	addi	sp,sp,8
 4007c2c:	f800283a 	ret

04007c30 <__s2b>:
s2b (struct _reent * ptr,
	const char *s,
	int nd0,
	int nd,
	__ULong y9)
{
 4007c30:	defff404 	addi	sp,sp,-48
 4007c34:	dfc00b15 	stw	ra,44(sp)
 4007c38:	df000a15 	stw	fp,40(sp)
 4007c3c:	df000a04 	addi	fp,sp,40
 4007c40:	e13ff915 	stw	r4,-28(fp)
 4007c44:	e17ff815 	stw	r5,-32(fp)
 4007c48:	e1bff715 	stw	r6,-36(fp)
 4007c4c:	e1fff615 	stw	r7,-40(fp)
  _Bigint *b;
  int i, k;
  __Long x, y;

  x = (nd + 8) / 9;
 4007c50:	e0bff617 	ldw	r2,-40(fp)
 4007c54:	10800204 	addi	r2,r2,8
 4007c58:	01400244 	movi	r5,9
 4007c5c:	1009883a 	mov	r4,r2
 4007c60:	400dfe00 	call	400dfe0 <__divsi3>
 4007c64:	e0bffb15 	stw	r2,-20(fp)
  for (k = 0, y = 1; x > y; y <<= 1, k++);
 4007c68:	e03ffd15 	stw	zero,-12(fp)
 4007c6c:	00800044 	movi	r2,1
 4007c70:	e0bffc15 	stw	r2,-16(fp)
 4007c74:	00000606 	br	4007c90 <__s2b+0x60>
 4007c78:	e0bffc17 	ldw	r2,-16(fp)
 4007c7c:	1085883a 	add	r2,r2,r2
 4007c80:	e0bffc15 	stw	r2,-16(fp)
 4007c84:	e0bffd17 	ldw	r2,-12(fp)
 4007c88:	10800044 	addi	r2,r2,1
 4007c8c:	e0bffd15 	stw	r2,-12(fp)
 4007c90:	e0bffb17 	ldw	r2,-20(fp)
 4007c94:	e0fffc17 	ldw	r3,-16(fp)
 4007c98:	18bff716 	blt	r3,r2,4007c78 <__s2b+0x48>
#ifdef Pack_32
  b = eBalloc (ptr, k);
 4007c9c:	e17ffd17 	ldw	r5,-12(fp)
 4007ca0:	e13ff917 	ldw	r4,-28(fp)
 4007ca4:	40078e00 	call	40078e0 <_Balloc>
 4007ca8:	e0bffa15 	stw	r2,-24(fp)
 4007cac:	e0bffa17 	ldw	r2,-24(fp)
 4007cb0:	1000071e 	bne	r2,zero,4007cd0 <__s2b+0xa0>
 4007cb4:	01c10074 	movhi	r7,1025
 4007cb8:	39cde904 	addi	r7,r7,14244
 4007cbc:	000d883a 	mov	r6,zero
 4007cc0:	01403384 	movi	r5,206
 4007cc4:	01010074 	movhi	r4,1025
 4007cc8:	210dee04 	addi	r4,r4,14264
 4007ccc:	400b01c0 	call	400b01c <__assert_func>
 4007cd0:	e0bffa17 	ldw	r2,-24(fp)
 4007cd4:	e0bfff15 	stw	r2,-4(fp)
  b->_x[0] = y9;
 4007cd8:	e0bfff17 	ldw	r2,-4(fp)
 4007cdc:	e0c00217 	ldw	r3,8(fp)
 4007ce0:	10c00515 	stw	r3,20(r2)
  b->_wds = 1;
 4007ce4:	e0bfff17 	ldw	r2,-4(fp)
 4007ce8:	00c00044 	movi	r3,1
 4007cec:	10c00415 	stw	r3,16(r2)
  b = eBalloc (ptr, k + 1);
  b->_x[0] = y9 & 0xffff;
  b->_wds = (b->_x[1] = y9 >> 16) ? 2 : 1;
#endif

  i = 9;
 4007cf0:	00800244 	movi	r2,9
 4007cf4:	e0bffe15 	stw	r2,-8(fp)
  if (9 < nd0)
 4007cf8:	e0bff717 	ldw	r2,-36(fp)
 4007cfc:	10800290 	cmplti	r2,r2,10
 4007d00:	10001b1e 	bne	r2,zero,4007d70 <__s2b+0x140>
    {
      s += 9;
 4007d04:	e0bff817 	ldw	r2,-32(fp)
 4007d08:	10800244 	addi	r2,r2,9
 4007d0c:	e0bff815 	stw	r2,-32(fp)
      do
	b = multadd (ptr, b, 10, *s++ - '0');
 4007d10:	e0bff817 	ldw	r2,-32(fp)
 4007d14:	10c00044 	addi	r3,r2,1
 4007d18:	e0fff815 	stw	r3,-32(fp)
 4007d1c:	10800003 	ldbu	r2,0(r2)
 4007d20:	10803fcc 	andi	r2,r2,255
 4007d24:	1080201c 	xori	r2,r2,128
 4007d28:	10bfe004 	addi	r2,r2,-128
 4007d2c:	10bff404 	addi	r2,r2,-48
 4007d30:	100f883a 	mov	r7,r2
 4007d34:	01800284 	movi	r6,10
 4007d38:	e17fff17 	ldw	r5,-4(fp)
 4007d3c:	e13ff917 	ldw	r4,-28(fp)
 4007d40:	4007a780 	call	4007a78 <__multadd>
 4007d44:	e0bfff15 	stw	r2,-4(fp)
      while (++i < nd0);
 4007d48:	e0bffe17 	ldw	r2,-8(fp)
 4007d4c:	10800044 	addi	r2,r2,1
 4007d50:	e0bffe15 	stw	r2,-8(fp)
 4007d54:	e0fffe17 	ldw	r3,-8(fp)
 4007d58:	e0bff717 	ldw	r2,-36(fp)
 4007d5c:	18bfec16 	blt	r3,r2,4007d10 <__s2b+0xe0>
      s++;
 4007d60:	e0bff817 	ldw	r2,-32(fp)
 4007d64:	10800044 	addi	r2,r2,1
 4007d68:	e0bff815 	stw	r2,-32(fp)
 4007d6c:	00001506 	br	4007dc4 <__s2b+0x194>
    }
  else
    s += 10;
 4007d70:	e0bff817 	ldw	r2,-32(fp)
 4007d74:	10800284 	addi	r2,r2,10
 4007d78:	e0bff815 	stw	r2,-32(fp)
  for (; i < nd; i++)
 4007d7c:	00001106 	br	4007dc4 <__s2b+0x194>
    b = multadd (ptr, b, 10, *s++ - '0');
 4007d80:	e0bff817 	ldw	r2,-32(fp)
 4007d84:	10c00044 	addi	r3,r2,1
 4007d88:	e0fff815 	stw	r3,-32(fp)
 4007d8c:	10800003 	ldbu	r2,0(r2)
 4007d90:	10803fcc 	andi	r2,r2,255
 4007d94:	1080201c 	xori	r2,r2,128
 4007d98:	10bfe004 	addi	r2,r2,-128
 4007d9c:	10bff404 	addi	r2,r2,-48
 4007da0:	100f883a 	mov	r7,r2
 4007da4:	01800284 	movi	r6,10
 4007da8:	e17fff17 	ldw	r5,-4(fp)
 4007dac:	e13ff917 	ldw	r4,-28(fp)
 4007db0:	4007a780 	call	4007a78 <__multadd>
 4007db4:	e0bfff15 	stw	r2,-4(fp)
  for (; i < nd; i++)
 4007db8:	e0bffe17 	ldw	r2,-8(fp)
 4007dbc:	10800044 	addi	r2,r2,1
 4007dc0:	e0bffe15 	stw	r2,-8(fp)
 4007dc4:	e0fffe17 	ldw	r3,-8(fp)
 4007dc8:	e0bff617 	ldw	r2,-40(fp)
 4007dcc:	18bfec16 	blt	r3,r2,4007d80 <__s2b+0x150>
  return b;
 4007dd0:	e0bfff17 	ldw	r2,-4(fp)
}
 4007dd4:	e037883a 	mov	sp,fp
 4007dd8:	dfc00117 	ldw	ra,4(sp)
 4007ddc:	df000017 	ldw	fp,0(sp)
 4007de0:	dec00204 	addi	sp,sp,8
 4007de4:	f800283a 	ret

04007de8 <__hi0bits>:

int
hi0bits (register __ULong x)
{
 4007de8:	defffe04 	addi	sp,sp,-8
 4007dec:	df000115 	stw	fp,4(sp)
 4007df0:	dc000015 	stw	r16,0(sp)
 4007df4:	df000104 	addi	fp,sp,4
 4007df8:	2005883a 	mov	r2,r4
  register int k = 0;
 4007dfc:	0021883a 	mov	r16,zero

  if (!(x & 0xffff0000))
 4007e00:	10ffffec 	andhi	r3,r2,65535
 4007e04:	1800021e 	bne	r3,zero,4007e10 <__hi0bits+0x28>
    {
      k = 16;
 4007e08:	04000404 	movi	r16,16
      x <<= 16;
 4007e0c:	1004943a 	slli	r2,r2,16
    }
  if (!(x & 0xff000000))
 4007e10:	10ffc02c 	andhi	r3,r2,65280
 4007e14:	1800021e 	bne	r3,zero,4007e20 <__hi0bits+0x38>
    {
      k += 8;
 4007e18:	84000204 	addi	r16,r16,8
      x <<= 8;
 4007e1c:	1004923a 	slli	r2,r2,8
    }
  if (!(x & 0xf0000000))
 4007e20:	10fc002c 	andhi	r3,r2,61440
 4007e24:	1800021e 	bne	r3,zero,4007e30 <__hi0bits+0x48>
    {
      k += 4;
 4007e28:	84000104 	addi	r16,r16,4
      x <<= 4;
 4007e2c:	1004913a 	slli	r2,r2,4
    }
  if (!(x & 0xc0000000))
 4007e30:	10f0002c 	andhi	r3,r2,49152
 4007e34:	1800021e 	bne	r3,zero,4007e40 <__hi0bits+0x58>
    {
      k += 2;
 4007e38:	84000084 	addi	r16,r16,2
      x <<= 2;
 4007e3c:	100490ba 	slli	r2,r2,2
    }
  if (!(x & 0x80000000))
 4007e40:	1007883a 	mov	r3,r2
 4007e44:	18000516 	blt	r3,zero,4007e5c <__hi0bits+0x74>
    {
      k++;
 4007e48:	84000044 	addi	r16,r16,1
      if (!(x & 0x40000000))
 4007e4c:	1090002c 	andhi	r2,r2,16384
 4007e50:	1000021e 	bne	r2,zero,4007e5c <__hi0bits+0x74>
	return 32;
 4007e54:	00800804 	movi	r2,32
 4007e58:	00000106 	br	4007e60 <__hi0bits+0x78>
    }
  return k;
 4007e5c:	8005883a 	mov	r2,r16
}
 4007e60:	e6ffff04 	addi	sp,fp,-4
 4007e64:	df000117 	ldw	fp,4(sp)
 4007e68:	dc000017 	ldw	r16,0(sp)
 4007e6c:	dec00204 	addi	sp,sp,8
 4007e70:	f800283a 	ret

04007e74 <__lo0bits>:

int
lo0bits (__ULong *y)
{
 4007e74:	defffc04 	addi	sp,sp,-16
 4007e78:	df000315 	stw	fp,12(sp)
 4007e7c:	dc400215 	stw	r17,8(sp)
 4007e80:	dc000115 	stw	r16,4(sp)
 4007e84:	df000304 	addi	fp,sp,12
 4007e88:	e13ffd15 	stw	r4,-12(fp)
  register int k;
  register __ULong x = *y;
 4007e8c:	e0bffd17 	ldw	r2,-12(fp)
 4007e90:	14000017 	ldw	r16,0(r2)

  if (x & 7)
 4007e94:	808001cc 	andi	r2,r16,7
 4007e98:	10001026 	beq	r2,zero,4007edc <__lo0bits+0x68>
    {
      if (x & 1)
 4007e9c:	8080004c 	andi	r2,r16,1
 4007ea0:	10000226 	beq	r2,zero,4007eac <__lo0bits+0x38>
	return 0;
 4007ea4:	0005883a 	mov	r2,zero
 4007ea8:	00002706 	br	4007f48 <__lo0bits+0xd4>
      if (x & 2)
 4007eac:	8080008c 	andi	r2,r16,2
 4007eb0:	10000526 	beq	r2,zero,4007ec8 <__lo0bits+0x54>
	{
	  *y = x >> 1;
 4007eb4:	8006d07a 	srli	r3,r16,1
 4007eb8:	e0bffd17 	ldw	r2,-12(fp)
 4007ebc:	10c00015 	stw	r3,0(r2)
	  return 1;
 4007ec0:	00800044 	movi	r2,1
 4007ec4:	00002006 	br	4007f48 <__lo0bits+0xd4>
	}
      *y = x >> 2;
 4007ec8:	8006d0ba 	srli	r3,r16,2
 4007ecc:	e0bffd17 	ldw	r2,-12(fp)
 4007ed0:	10c00015 	stw	r3,0(r2)
      return 2;
 4007ed4:	00800084 	movi	r2,2
 4007ed8:	00001b06 	br	4007f48 <__lo0bits+0xd4>
    }
  k = 0;
 4007edc:	0023883a 	mov	r17,zero
  if (!(x & 0xffff))
 4007ee0:	80bfffcc 	andi	r2,r16,65535
 4007ee4:	1000021e 	bne	r2,zero,4007ef0 <__lo0bits+0x7c>
    {
      k = 16;
 4007ee8:	04400404 	movi	r17,16
      x >>= 16;
 4007eec:	8020d43a 	srli	r16,r16,16
    }
  if (!(x & 0xff))
 4007ef0:	80803fcc 	andi	r2,r16,255
 4007ef4:	1000021e 	bne	r2,zero,4007f00 <__lo0bits+0x8c>
    {
      k += 8;
 4007ef8:	8c400204 	addi	r17,r17,8
      x >>= 8;
 4007efc:	8020d23a 	srli	r16,r16,8
    }
  if (!(x & 0xf))
 4007f00:	808003cc 	andi	r2,r16,15
 4007f04:	1000021e 	bne	r2,zero,4007f10 <__lo0bits+0x9c>
    {
      k += 4;
 4007f08:	8c400104 	addi	r17,r17,4
      x >>= 4;
 4007f0c:	8020d13a 	srli	r16,r16,4
    }
  if (!(x & 0x3))
 4007f10:	808000cc 	andi	r2,r16,3
 4007f14:	1000021e 	bne	r2,zero,4007f20 <__lo0bits+0xac>
    {
      k += 2;
 4007f18:	8c400084 	addi	r17,r17,2
      x >>= 2;
 4007f1c:	8020d0ba 	srli	r16,r16,2
    }
  if (!(x & 1))
 4007f20:	8080004c 	andi	r2,r16,1
 4007f24:	1000051e 	bne	r2,zero,4007f3c <__lo0bits+0xc8>
    {
      k++;
 4007f28:	8c400044 	addi	r17,r17,1
      x >>= 1;
 4007f2c:	8020d07a 	srli	r16,r16,1
      if (!x & 1)
 4007f30:	8000021e 	bne	r16,zero,4007f3c <__lo0bits+0xc8>
	return 32;
 4007f34:	00800804 	movi	r2,32
 4007f38:	00000306 	br	4007f48 <__lo0bits+0xd4>
    }
  *y = x;
 4007f3c:	e0bffd17 	ldw	r2,-12(fp)
 4007f40:	14000015 	stw	r16,0(r2)
  return k;
 4007f44:	8805883a 	mov	r2,r17
}
 4007f48:	e6fffe04 	addi	sp,fp,-8
 4007f4c:	df000217 	ldw	fp,8(sp)
 4007f50:	dc400117 	ldw	r17,4(sp)
 4007f54:	dc000017 	ldw	r16,0(sp)
 4007f58:	dec00304 	addi	sp,sp,12
 4007f5c:	f800283a 	ret

04007f60 <__i2b>:

_Bigint *
i2b (struct _reent * ptr, int i)
{
 4007f60:	defffa04 	addi	sp,sp,-24
 4007f64:	dfc00515 	stw	ra,20(sp)
 4007f68:	df000415 	stw	fp,16(sp)
 4007f6c:	df000404 	addi	fp,sp,16
 4007f70:	e13ffd15 	stw	r4,-12(fp)
 4007f74:	e17ffc15 	stw	r5,-16(fp)
  _Bigint *b;

  b = eBalloc (ptr, 1);
 4007f78:	01400044 	movi	r5,1
 4007f7c:	e13ffd17 	ldw	r4,-12(fp)
 4007f80:	40078e00 	call	40078e0 <_Balloc>
 4007f84:	e0bfff15 	stw	r2,-4(fp)
 4007f88:	e0bfff17 	ldw	r2,-4(fp)
 4007f8c:	1000071e 	bne	r2,zero,4007fac <__i2b+0x4c>
 4007f90:	01c10074 	movhi	r7,1025
 4007f94:	39cde904 	addi	r7,r7,14244
 4007f98:	000d883a 	mov	r6,zero
 4007f9c:	01405004 	movi	r5,320
 4007fa0:	01010074 	movhi	r4,1025
 4007fa4:	210dee04 	addi	r4,r4,14264
 4007fa8:	400b01c0 	call	400b01c <__assert_func>
 4007fac:	e0bfff17 	ldw	r2,-4(fp)
 4007fb0:	e0bffe15 	stw	r2,-8(fp)
  b->_x[0] = i;
 4007fb4:	e0fffc17 	ldw	r3,-16(fp)
 4007fb8:	e0bffe17 	ldw	r2,-8(fp)
 4007fbc:	10c00515 	stw	r3,20(r2)
  b->_wds = 1;
 4007fc0:	e0bffe17 	ldw	r2,-8(fp)
 4007fc4:	00c00044 	movi	r3,1
 4007fc8:	10c00415 	stw	r3,16(r2)
  return b;
 4007fcc:	e0bffe17 	ldw	r2,-8(fp)
}
 4007fd0:	e037883a 	mov	sp,fp
 4007fd4:	dfc00117 	ldw	ra,4(sp)
 4007fd8:	df000017 	ldw	fp,0(sp)
 4007fdc:	dec00204 	addi	sp,sp,8
 4007fe0:	f800283a 	ret

04007fe4 <__multiply>:

_Bigint *
mult (struct _reent * ptr, _Bigint * a, _Bigint * b)
{
 4007fe4:	deffea04 	addi	sp,sp,-88
 4007fe8:	dfc01515 	stw	ra,84(sp)
 4007fec:	df001415 	stw	fp,80(sp)
 4007ff0:	df001404 	addi	fp,sp,80
 4007ff4:	e13fee15 	stw	r4,-72(fp)
 4007ff8:	e17fed15 	stw	r5,-76(fp)
 4007ffc:	e1bfec15 	stw	r6,-80(fp)
  __ULong *x, *xa, *xae, *xb, *xbe, *xc, *xc0;
#ifdef Pack_32
  __ULong z2;
#endif

  if (a->_wds < b->_wds)
 4008000:	e0bfed17 	ldw	r2,-76(fp)
 4008004:	10c00417 	ldw	r3,16(r2)
 4008008:	e0bfec17 	ldw	r2,-80(fp)
 400800c:	10800417 	ldw	r2,16(r2)
 4008010:	1880060e 	bge	r3,r2,400802c <__multiply+0x48>
    {
      c = a;
 4008014:	e0bfed17 	ldw	r2,-76(fp)
 4008018:	e0bff715 	stw	r2,-36(fp)
      a = b;
 400801c:	e0bfec17 	ldw	r2,-80(fp)
 4008020:	e0bfed15 	stw	r2,-76(fp)
      b = c;
 4008024:	e0bff717 	ldw	r2,-36(fp)
 4008028:	e0bfec15 	stw	r2,-80(fp)
    }
  k = a->_k;
 400802c:	e0bfed17 	ldw	r2,-76(fp)
 4008030:	10800117 	ldw	r2,4(r2)
 4008034:	e0bfff15 	stw	r2,-4(fp)
  wa = a->_wds;
 4008038:	e0bfed17 	ldw	r2,-76(fp)
 400803c:	10800417 	ldw	r2,16(r2)
 4008040:	e0bff615 	stw	r2,-40(fp)
  wb = b->_wds;
 4008044:	e0bfec17 	ldw	r2,-80(fp)
 4008048:	10800417 	ldw	r2,16(r2)
 400804c:	e0bff515 	stw	r2,-44(fp)
  wc = wa + wb;
 4008050:	e0fff617 	ldw	r3,-40(fp)
 4008054:	e0bff517 	ldw	r2,-44(fp)
 4008058:	1885883a 	add	r2,r3,r2
 400805c:	e0bffe15 	stw	r2,-8(fp)
  if (wc > a->_maxwds)
 4008060:	e0bfed17 	ldw	r2,-76(fp)
 4008064:	10c00217 	ldw	r3,8(r2)
 4008068:	e0bffe17 	ldw	r2,-8(fp)
 400806c:	1880030e 	bge	r3,r2,400807c <__multiply+0x98>
    k++;
 4008070:	e0bfff17 	ldw	r2,-4(fp)
 4008074:	10800044 	addi	r2,r2,1
 4008078:	e0bfff15 	stw	r2,-4(fp)
  c = eBalloc (ptr, k);
 400807c:	e17fff17 	ldw	r5,-4(fp)
 4008080:	e13fee17 	ldw	r4,-72(fp)
 4008084:	40078e00 	call	40078e0 <_Balloc>
 4008088:	e0bff415 	stw	r2,-48(fp)
 400808c:	e0bff417 	ldw	r2,-48(fp)
 4008090:	1000071e 	bne	r2,zero,40080b0 <__multiply+0xcc>
 4008094:	01c10074 	movhi	r7,1025
 4008098:	39cde904 	addi	r7,r7,14244
 400809c:	000d883a 	mov	r6,zero
 40080a0:	01405744 	movi	r5,349
 40080a4:	01010074 	movhi	r4,1025
 40080a8:	210dee04 	addi	r4,r4,14264
 40080ac:	400b01c0 	call	400b01c <__assert_func>
 40080b0:	e0bff417 	ldw	r2,-48(fp)
 40080b4:	e0bff715 	stw	r2,-36(fp)
  for (x = c->_x, xa = x + wc; x < xa; x++)
 40080b8:	e0bff717 	ldw	r2,-36(fp)
 40080bc:	10800504 	addi	r2,r2,20
 40080c0:	e0bffc15 	stw	r2,-16(fp)
 40080c4:	e0bffe17 	ldw	r2,-8(fp)
 40080c8:	100490ba 	slli	r2,r2,2
 40080cc:	e0fffc17 	ldw	r3,-16(fp)
 40080d0:	1885883a 	add	r2,r3,r2
 40080d4:	e0bff315 	stw	r2,-52(fp)
 40080d8:	00000506 	br	40080f0 <__multiply+0x10c>
    *x = 0;
 40080dc:	e0bffc17 	ldw	r2,-16(fp)
 40080e0:	10000015 	stw	zero,0(r2)
  for (x = c->_x, xa = x + wc; x < xa; x++)
 40080e4:	e0bffc17 	ldw	r2,-16(fp)
 40080e8:	10800104 	addi	r2,r2,4
 40080ec:	e0bffc15 	stw	r2,-16(fp)
 40080f0:	e0fffc17 	ldw	r3,-16(fp)
 40080f4:	e0bff317 	ldw	r2,-52(fp)
 40080f8:	18bff836 	bltu	r3,r2,40080dc <__multiply+0xf8>
  xa = a->_x;
 40080fc:	e0bfed17 	ldw	r2,-76(fp)
 4008100:	10800504 	addi	r2,r2,20
 4008104:	e0bff315 	stw	r2,-52(fp)
  xae = xa + wa;
 4008108:	e0bff617 	ldw	r2,-40(fp)
 400810c:	100490ba 	slli	r2,r2,2
 4008110:	e0fff317 	ldw	r3,-52(fp)
 4008114:	1885883a 	add	r2,r3,r2
 4008118:	e0bff215 	stw	r2,-56(fp)
  xb = b->_x;
 400811c:	e0bfec17 	ldw	r2,-80(fp)
 4008120:	10800504 	addi	r2,r2,20
 4008124:	e0bffb15 	stw	r2,-20(fp)
  xbe = xb + wb;
 4008128:	e0bff517 	ldw	r2,-44(fp)
 400812c:	100490ba 	slli	r2,r2,2
 4008130:	e0fffb17 	ldw	r3,-20(fp)
 4008134:	1885883a 	add	r2,r3,r2
 4008138:	e0bff115 	stw	r2,-60(fp)
  xc0 = c->_x;
 400813c:	e0bff717 	ldw	r2,-36(fp)
 4008140:	10800504 	addi	r2,r2,20
 4008144:	e0bff915 	stw	r2,-28(fp)
#ifdef Pack_32
  for (; xb < xbe; xb++, xc0++)
 4008148:	00007d06 	br	4008340 <__multiply+0x35c>
    {
      if ((y = *xb & 0xffff) != 0)
 400814c:	e0bffb17 	ldw	r2,-20(fp)
 4008150:	10800017 	ldw	r2,0(r2)
 4008154:	10bfffcc 	andi	r2,r2,65535
 4008158:	e0bff015 	stw	r2,-64(fp)
 400815c:	e0bff017 	ldw	r2,-64(fp)
 4008160:	10003426 	beq	r2,zero,4008234 <__multiply+0x250>
	{
	  x = xa;
 4008164:	e0bff317 	ldw	r2,-52(fp)
 4008168:	e0bffc15 	stw	r2,-16(fp)
	  xc = xc0;
 400816c:	e0bff917 	ldw	r2,-28(fp)
 4008170:	e0bffa15 	stw	r2,-24(fp)
	  carry = 0;
 4008174:	e03ffd15 	stw	zero,-12(fp)
	  do
	    {
	      z = (*x & 0xffff) * y + (*xc & 0xffff) + carry;
 4008178:	e0bffc17 	ldw	r2,-16(fp)
 400817c:	10800017 	ldw	r2,0(r2)
 4008180:	10ffffcc 	andi	r3,r2,65535
 4008184:	e0bff017 	ldw	r2,-64(fp)
 4008188:	1887383a 	mul	r3,r3,r2
 400818c:	e0bffa17 	ldw	r2,-24(fp)
 4008190:	10800017 	ldw	r2,0(r2)
 4008194:	10bfffcc 	andi	r2,r2,65535
 4008198:	1885883a 	add	r2,r3,r2
 400819c:	e0fffd17 	ldw	r3,-12(fp)
 40081a0:	1885883a 	add	r2,r3,r2
 40081a4:	e0bfef15 	stw	r2,-68(fp)
	      carry = z >> 16;
 40081a8:	e0bfef17 	ldw	r2,-68(fp)
 40081ac:	1004d43a 	srli	r2,r2,16
 40081b0:	e0bffd15 	stw	r2,-12(fp)
	      z2 = (*x++ >> 16) * y + (*xc >> 16) + carry;
 40081b4:	e0bffc17 	ldw	r2,-16(fp)
 40081b8:	10c00104 	addi	r3,r2,4
 40081bc:	e0fffc15 	stw	r3,-16(fp)
 40081c0:	10800017 	ldw	r2,0(r2)
 40081c4:	1006d43a 	srli	r3,r2,16
 40081c8:	e0bff017 	ldw	r2,-64(fp)
 40081cc:	1887383a 	mul	r3,r3,r2
 40081d0:	e0bffa17 	ldw	r2,-24(fp)
 40081d4:	10800017 	ldw	r2,0(r2)
 40081d8:	1004d43a 	srli	r2,r2,16
 40081dc:	1885883a 	add	r2,r3,r2
 40081e0:	e0fffd17 	ldw	r3,-12(fp)
 40081e4:	1885883a 	add	r2,r3,r2
 40081e8:	e0bff815 	stw	r2,-32(fp)
	      carry = z2 >> 16;
 40081ec:	e0bff817 	ldw	r2,-32(fp)
 40081f0:	1004d43a 	srli	r2,r2,16
 40081f4:	e0bffd15 	stw	r2,-12(fp)
	      Storeinc (xc, z2, z);
 40081f8:	e0bff817 	ldw	r2,-32(fp)
 40081fc:	1008943a 	slli	r4,r2,16
 4008200:	e0bfef17 	ldw	r2,-68(fp)
 4008204:	10ffffcc 	andi	r3,r2,65535
 4008208:	e0bffa17 	ldw	r2,-24(fp)
 400820c:	11400104 	addi	r5,r2,4
 4008210:	e17ffa15 	stw	r5,-24(fp)
 4008214:	20c6b03a 	or	r3,r4,r3
 4008218:	10c00015 	stw	r3,0(r2)
	    }
	  while (x < xae);
 400821c:	e0fffc17 	ldw	r3,-16(fp)
 4008220:	e0bff217 	ldw	r2,-56(fp)
 4008224:	18bfd436 	bltu	r3,r2,4008178 <__multiply+0x194>
	  *xc = carry;
 4008228:	e0bffa17 	ldw	r2,-24(fp)
 400822c:	e0fffd17 	ldw	r3,-12(fp)
 4008230:	10c00015 	stw	r3,0(r2)
	}
      if ((y = *xb >> 16) != 0)
 4008234:	e0bffb17 	ldw	r2,-20(fp)
 4008238:	10800017 	ldw	r2,0(r2)
 400823c:	1004d43a 	srli	r2,r2,16
 4008240:	e0bff015 	stw	r2,-64(fp)
 4008244:	e0bff017 	ldw	r2,-64(fp)
 4008248:	10003726 	beq	r2,zero,4008328 <__multiply+0x344>
	{
	  x = xa;
 400824c:	e0bff317 	ldw	r2,-52(fp)
 4008250:	e0bffc15 	stw	r2,-16(fp)
	  xc = xc0;
 4008254:	e0bff917 	ldw	r2,-28(fp)
 4008258:	e0bffa15 	stw	r2,-24(fp)
	  carry = 0;
 400825c:	e03ffd15 	stw	zero,-12(fp)
	  z2 = *xc;
 4008260:	e0bffa17 	ldw	r2,-24(fp)
 4008264:	10800017 	ldw	r2,0(r2)
 4008268:	e0bff815 	stw	r2,-32(fp)
	  do
	    {
	      z = (*x & 0xffff) * y + (*xc >> 16) + carry;
 400826c:	e0bffc17 	ldw	r2,-16(fp)
 4008270:	10800017 	ldw	r2,0(r2)
 4008274:	10ffffcc 	andi	r3,r2,65535
 4008278:	e0bff017 	ldw	r2,-64(fp)
 400827c:	1887383a 	mul	r3,r3,r2
 4008280:	e0bffa17 	ldw	r2,-24(fp)
 4008284:	10800017 	ldw	r2,0(r2)
 4008288:	1004d43a 	srli	r2,r2,16
 400828c:	1885883a 	add	r2,r3,r2
 4008290:	e0fffd17 	ldw	r3,-12(fp)
 4008294:	1885883a 	add	r2,r3,r2
 4008298:	e0bfef15 	stw	r2,-68(fp)
	      carry = z >> 16;
 400829c:	e0bfef17 	ldw	r2,-68(fp)
 40082a0:	1004d43a 	srli	r2,r2,16
 40082a4:	e0bffd15 	stw	r2,-12(fp)
	      Storeinc (xc, z, z2);
 40082a8:	e0bfef17 	ldw	r2,-68(fp)
 40082ac:	1008943a 	slli	r4,r2,16
 40082b0:	e0bff817 	ldw	r2,-32(fp)
 40082b4:	10ffffcc 	andi	r3,r2,65535
 40082b8:	e0bffa17 	ldw	r2,-24(fp)
 40082bc:	11400104 	addi	r5,r2,4
 40082c0:	e17ffa15 	stw	r5,-24(fp)
 40082c4:	20c6b03a 	or	r3,r4,r3
 40082c8:	10c00015 	stw	r3,0(r2)
	      z2 = (*x++ >> 16) * y + (*xc & 0xffff) + carry;
 40082cc:	e0bffc17 	ldw	r2,-16(fp)
 40082d0:	10c00104 	addi	r3,r2,4
 40082d4:	e0fffc15 	stw	r3,-16(fp)
 40082d8:	10800017 	ldw	r2,0(r2)
 40082dc:	1006d43a 	srli	r3,r2,16
 40082e0:	e0bff017 	ldw	r2,-64(fp)
 40082e4:	1887383a 	mul	r3,r3,r2
 40082e8:	e0bffa17 	ldw	r2,-24(fp)
 40082ec:	10800017 	ldw	r2,0(r2)
 40082f0:	10bfffcc 	andi	r2,r2,65535
 40082f4:	1885883a 	add	r2,r3,r2
 40082f8:	e0fffd17 	ldw	r3,-12(fp)
 40082fc:	1885883a 	add	r2,r3,r2
 4008300:	e0bff815 	stw	r2,-32(fp)
	      carry = z2 >> 16;
 4008304:	e0bff817 	ldw	r2,-32(fp)
 4008308:	1004d43a 	srli	r2,r2,16
 400830c:	e0bffd15 	stw	r2,-12(fp)
	    }
	  while (x < xae);
 4008310:	e0fffc17 	ldw	r3,-16(fp)
 4008314:	e0bff217 	ldw	r2,-56(fp)
 4008318:	18bfd436 	bltu	r3,r2,400826c <__multiply+0x288>
	  *xc = z2;
 400831c:	e0bffa17 	ldw	r2,-24(fp)
 4008320:	e0fff817 	ldw	r3,-32(fp)
 4008324:	10c00015 	stw	r3,0(r2)
  for (; xb < xbe; xb++, xc0++)
 4008328:	e0bffb17 	ldw	r2,-20(fp)
 400832c:	10800104 	addi	r2,r2,4
 4008330:	e0bffb15 	stw	r2,-20(fp)
 4008334:	e0bff917 	ldw	r2,-28(fp)
 4008338:	10800104 	addi	r2,r2,4
 400833c:	e0bff915 	stw	r2,-28(fp)
 4008340:	e0fffb17 	ldw	r3,-20(fp)
 4008344:	e0bff117 	ldw	r2,-60(fp)
 4008348:	18bf8036 	bltu	r3,r2,400814c <__multiply+0x168>
	  while (x < xae);
	  *xc = carry;
	}
    }
#endif
  for (xc0 = c->_x, xc = xc0 + wc; wc > 0 && !*--xc; --wc);
 400834c:	e0bff717 	ldw	r2,-36(fp)
 4008350:	10800504 	addi	r2,r2,20
 4008354:	e0bff915 	stw	r2,-28(fp)
 4008358:	e0bffe17 	ldw	r2,-8(fp)
 400835c:	100490ba 	slli	r2,r2,2
 4008360:	e0fff917 	ldw	r3,-28(fp)
 4008364:	1885883a 	add	r2,r3,r2
 4008368:	e0bffa15 	stw	r2,-24(fp)
 400836c:	00000306 	br	400837c <__multiply+0x398>
 4008370:	e0bffe17 	ldw	r2,-8(fp)
 4008374:	10bfffc4 	addi	r2,r2,-1
 4008378:	e0bffe15 	stw	r2,-8(fp)
 400837c:	e0bffe17 	ldw	r2,-8(fp)
 4008380:	0080060e 	bge	zero,r2,400839c <__multiply+0x3b8>
 4008384:	e0bffa17 	ldw	r2,-24(fp)
 4008388:	10bfff04 	addi	r2,r2,-4
 400838c:	e0bffa15 	stw	r2,-24(fp)
 4008390:	e0bffa17 	ldw	r2,-24(fp)
 4008394:	10800017 	ldw	r2,0(r2)
 4008398:	103ff526 	beq	r2,zero,4008370 <__multiply+0x38c>
  c->_wds = wc;
 400839c:	e0bff717 	ldw	r2,-36(fp)
 40083a0:	e0fffe17 	ldw	r3,-8(fp)
 40083a4:	10c00415 	stw	r3,16(r2)
  return c;
 40083a8:	e0bff717 	ldw	r2,-36(fp)
}
 40083ac:	e037883a 	mov	sp,fp
 40083b0:	dfc00117 	ldw	ra,4(sp)
 40083b4:	df000017 	ldw	fp,0(sp)
 40083b8:	dec00204 	addi	sp,sp,8
 40083bc:	f800283a 	ret

040083c0 <__pow5mult>:

_Bigint *
pow5mult (struct _reent * ptr, _Bigint * b, int k)
{
 40083c0:	defff704 	addi	sp,sp,-36
 40083c4:	dfc00815 	stw	ra,32(sp)
 40083c8:	df000715 	stw	fp,28(sp)
 40083cc:	df000704 	addi	fp,sp,28
 40083d0:	e13ffb15 	stw	r4,-20(fp)
 40083d4:	e17ffa15 	stw	r5,-24(fp)
 40083d8:	e1bff915 	stw	r6,-28(fp)
  _Bigint *b1, *p5, *p51;
  int i;
  static const int p05[3] = {5, 25, 125};

  if ((i = k & 3) != 0)
 40083dc:	e0bff917 	ldw	r2,-28(fp)
 40083e0:	108000cc 	andi	r2,r2,3
 40083e4:	e0bffd15 	stw	r2,-12(fp)
 40083e8:	e0bffd17 	ldw	r2,-12(fp)
 40083ec:	10000c26 	beq	r2,zero,4008420 <__pow5mult+0x60>
    b = multadd (ptr, b, p05[i - 1], 0);
 40083f0:	e0bffd17 	ldw	r2,-12(fp)
 40083f4:	10bfffc4 	addi	r2,r2,-1
 40083f8:	100690ba 	slli	r3,r2,2
 40083fc:	00810074 	movhi	r2,1025
 4008400:	1885883a 	add	r2,r3,r2
 4008404:	108e4d17 	ldw	r2,14644(r2)
 4008408:	000f883a 	mov	r7,zero
 400840c:	100d883a 	mov	r6,r2
 4008410:	e17ffa17 	ldw	r5,-24(fp)
 4008414:	e13ffb17 	ldw	r4,-20(fp)
 4008418:	4007a780 	call	4007a78 <__multadd>
 400841c:	e0bffa15 	stw	r2,-24(fp)

  if (!(k >>= 2))
 4008420:	e0bff917 	ldw	r2,-28(fp)
 4008424:	1005d0ba 	srai	r2,r2,2
 4008428:	e0bff915 	stw	r2,-28(fp)
 400842c:	e0bff917 	ldw	r2,-28(fp)
 4008430:	1000021e 	bne	r2,zero,400843c <__pow5mult+0x7c>
    return b;
 4008434:	e0bffa17 	ldw	r2,-24(fp)
 4008438:	00003806 	br	400851c <__pow5mult+0x15c>
  _REENT_CHECK_MP(ptr);
  if (!(p5 = _REENT_MP_P5S(ptr)))
 400843c:	e0bffb17 	ldw	r2,-20(fp)
 4008440:	10801217 	ldw	r2,72(r2)
 4008444:	e0bfff15 	stw	r2,-4(fp)
 4008448:	e0bfff17 	ldw	r2,-4(fp)
 400844c:	10000b1e 	bne	r2,zero,400847c <__pow5mult+0xbc>
    {
      /* first time */
      p5 = _REENT_MP_P5S(ptr) = i2b (ptr, 625);
 4008450:	01409c44 	movi	r5,625
 4008454:	e13ffb17 	ldw	r4,-20(fp)
 4008458:	4007f600 	call	4007f60 <__i2b>
 400845c:	1007883a 	mov	r3,r2
 4008460:	e0bffb17 	ldw	r2,-20(fp)
 4008464:	10c01215 	stw	r3,72(r2)
 4008468:	e0bffb17 	ldw	r2,-20(fp)
 400846c:	10801217 	ldw	r2,72(r2)
 4008470:	e0bfff15 	stw	r2,-4(fp)
      p5->_next = 0;
 4008474:	e0bfff17 	ldw	r2,-4(fp)
 4008478:	10000015 	stw	zero,0(r2)
    }
  for (;;)
    {
      if (k & 1)
 400847c:	e0bff917 	ldw	r2,-28(fp)
 4008480:	1080004c 	andi	r2,r2,1
 4008484:	10000a26 	beq	r2,zero,40084b0 <__pow5mult+0xf0>
	{
	  b1 = mult (ptr, b, p5);
 4008488:	e1bfff17 	ldw	r6,-4(fp)
 400848c:	e17ffa17 	ldw	r5,-24(fp)
 4008490:	e13ffb17 	ldw	r4,-20(fp)
 4008494:	4007fe40 	call	4007fe4 <__multiply>
 4008498:	e0bffc15 	stw	r2,-16(fp)
	  Bfree (ptr, b);
 400849c:	e17ffa17 	ldw	r5,-24(fp)
 40084a0:	e13ffb17 	ldw	r4,-20(fp)
 40084a4:	4007a040 	call	4007a04 <_Bfree>
	  b = b1;
 40084a8:	e0bffc17 	ldw	r2,-16(fp)
 40084ac:	e0bffa15 	stw	r2,-24(fp)
	}
      if (!(k >>= 1))
 40084b0:	e0bff917 	ldw	r2,-28(fp)
 40084b4:	1005d07a 	srai	r2,r2,1
 40084b8:	e0bff915 	stw	r2,-28(fp)
 40084bc:	e0bff917 	ldw	r2,-28(fp)
 40084c0:	10001426 	beq	r2,zero,4008514 <__pow5mult+0x154>
	break;
      if (!(p51 = p5->_next))
 40084c4:	e0bfff17 	ldw	r2,-4(fp)
 40084c8:	10800017 	ldw	r2,0(r2)
 40084cc:	e0bffe15 	stw	r2,-8(fp)
 40084d0:	e0bffe17 	ldw	r2,-8(fp)
 40084d4:	10000c1e 	bne	r2,zero,4008508 <__pow5mult+0x148>
	{
	  p51 = p5->_next = mult (ptr, p5, p5);
 40084d8:	e1bfff17 	ldw	r6,-4(fp)
 40084dc:	e17fff17 	ldw	r5,-4(fp)
 40084e0:	e13ffb17 	ldw	r4,-20(fp)
 40084e4:	4007fe40 	call	4007fe4 <__multiply>
 40084e8:	1007883a 	mov	r3,r2
 40084ec:	e0bfff17 	ldw	r2,-4(fp)
 40084f0:	10c00015 	stw	r3,0(r2)
 40084f4:	e0bfff17 	ldw	r2,-4(fp)
 40084f8:	10800017 	ldw	r2,0(r2)
 40084fc:	e0bffe15 	stw	r2,-8(fp)
	  p51->_next = 0;
 4008500:	e0bffe17 	ldw	r2,-8(fp)
 4008504:	10000015 	stw	zero,0(r2)
	}
      p5 = p51;
 4008508:	e0bffe17 	ldw	r2,-8(fp)
 400850c:	e0bfff15 	stw	r2,-4(fp)
      if (k & 1)
 4008510:	003fda06 	br	400847c <__pow5mult+0xbc>
	break;
 4008514:	0001883a 	nop
    }
  return b;
 4008518:	e0bffa17 	ldw	r2,-24(fp)
}
 400851c:	e037883a 	mov	sp,fp
 4008520:	dfc00117 	ldw	ra,4(sp)
 4008524:	df000017 	ldw	fp,0(sp)
 4008528:	dec00204 	addi	sp,sp,8
 400852c:	f800283a 	ret

04008530 <__lshift>:

_Bigint *
lshift (struct _reent * ptr, _Bigint * b, int k)
{
 4008530:	defff104 	addi	sp,sp,-60
 4008534:	dfc00e15 	stw	ra,56(sp)
 4008538:	df000d15 	stw	fp,52(sp)
 400853c:	df000d04 	addi	fp,sp,52
 4008540:	e13ff515 	stw	r4,-44(fp)
 4008544:	e17ff415 	stw	r5,-48(fp)
 4008548:	e1bff315 	stw	r6,-52(fp)
  int i, k1, n, n1;
  _Bigint *b1;
  __ULong *x, *x1, *xe, z;

#ifdef Pack_32
  n = k >> 5;
 400854c:	e0bff317 	ldw	r2,-52(fp)
 4008550:	1005d17a 	srai	r2,r2,5
 4008554:	e0bff915 	stw	r2,-28(fp)
#else
  n = k >> 4;
#endif
  k1 = b->_k;
 4008558:	e0bff417 	ldw	r2,-48(fp)
 400855c:	10800117 	ldw	r2,4(r2)
 4008560:	e0bffe15 	stw	r2,-8(fp)
  n1 = n + b->_wds + 1;
 4008564:	e0bff417 	ldw	r2,-48(fp)
 4008568:	10c00417 	ldw	r3,16(r2)
 400856c:	e0bff917 	ldw	r2,-28(fp)
 4008570:	1885883a 	add	r2,r3,r2
 4008574:	10800044 	addi	r2,r2,1
 4008578:	e0bffd15 	stw	r2,-12(fp)
  for (i = b->_maxwds; n1 > i; i <<= 1)
 400857c:	e0bff417 	ldw	r2,-48(fp)
 4008580:	10800217 	ldw	r2,8(r2)
 4008584:	e0bfff15 	stw	r2,-4(fp)
 4008588:	00000606 	br	40085a4 <__lshift+0x74>
    k1++;
 400858c:	e0bffe17 	ldw	r2,-8(fp)
 4008590:	10800044 	addi	r2,r2,1
 4008594:	e0bffe15 	stw	r2,-8(fp)
  for (i = b->_maxwds; n1 > i; i <<= 1)
 4008598:	e0bfff17 	ldw	r2,-4(fp)
 400859c:	1085883a 	add	r2,r2,r2
 40085a0:	e0bfff15 	stw	r2,-4(fp)
 40085a4:	e0bffd17 	ldw	r2,-12(fp)
 40085a8:	e0ffff17 	ldw	r3,-4(fp)
 40085ac:	18bff716 	blt	r3,r2,400858c <__lshift+0x5c>
  b1 = eBalloc (ptr, k1);
 40085b0:	e17ffe17 	ldw	r5,-8(fp)
 40085b4:	e13ff517 	ldw	r4,-44(fp)
 40085b8:	40078e00 	call	40078e0 <_Balloc>
 40085bc:	e0bff815 	stw	r2,-32(fp)
 40085c0:	e0bff817 	ldw	r2,-32(fp)
 40085c4:	1000071e 	bne	r2,zero,40085e4 <__lshift+0xb4>
 40085c8:	01c10074 	movhi	r7,1025
 40085cc:	39cde904 	addi	r7,r7,14244
 40085d0:	000d883a 	mov	r6,zero
 40085d4:	01407644 	movi	r5,473
 40085d8:	01010074 	movhi	r4,1025
 40085dc:	210dee04 	addi	r4,r4,14264
 40085e0:	400b01c0 	call	400b01c <__assert_func>
 40085e4:	e0bff817 	ldw	r2,-32(fp)
 40085e8:	e0bff715 	stw	r2,-36(fp)
  x1 = b1->_x;
 40085ec:	e0bff717 	ldw	r2,-36(fp)
 40085f0:	10800504 	addi	r2,r2,20
 40085f4:	e0bffb15 	stw	r2,-20(fp)
  for (i = 0; i < n; i++)
 40085f8:	e03fff15 	stw	zero,-4(fp)
 40085fc:	00000706 	br	400861c <__lshift+0xec>
    *x1++ = 0;
 4008600:	e0bffb17 	ldw	r2,-20(fp)
 4008604:	10c00104 	addi	r3,r2,4
 4008608:	e0fffb15 	stw	r3,-20(fp)
 400860c:	10000015 	stw	zero,0(r2)
  for (i = 0; i < n; i++)
 4008610:	e0bfff17 	ldw	r2,-4(fp)
 4008614:	10800044 	addi	r2,r2,1
 4008618:	e0bfff15 	stw	r2,-4(fp)
 400861c:	e0ffff17 	ldw	r3,-4(fp)
 4008620:	e0bff917 	ldw	r2,-28(fp)
 4008624:	18bff616 	blt	r3,r2,4008600 <__lshift+0xd0>
  x = b->_x;
 4008628:	e0bff417 	ldw	r2,-48(fp)
 400862c:	10800504 	addi	r2,r2,20
 4008630:	e0bffc15 	stw	r2,-16(fp)
  xe = x + b->_wds;
 4008634:	e0bff417 	ldw	r2,-48(fp)
 4008638:	10800417 	ldw	r2,16(r2)
 400863c:	100490ba 	slli	r2,r2,2
 4008640:	e0fffc17 	ldw	r3,-16(fp)
 4008644:	1885883a 	add	r2,r3,r2
 4008648:	e0bff615 	stw	r2,-40(fp)
#ifdef Pack_32
  if (k &= 0x1f)
 400864c:	e0bff317 	ldw	r2,-52(fp)
 4008650:	108007cc 	andi	r2,r2,31
 4008654:	e0bff315 	stw	r2,-52(fp)
 4008658:	e0bff317 	ldw	r2,-52(fp)
 400865c:	10002326 	beq	r2,zero,40086ec <__lshift+0x1bc>
    {
      k1 = 32 - k;
 4008660:	00c00804 	movi	r3,32
 4008664:	e0bff317 	ldw	r2,-52(fp)
 4008668:	1885c83a 	sub	r2,r3,r2
 400866c:	e0bffe15 	stw	r2,-8(fp)
      z = 0;
 4008670:	e03ffa15 	stw	zero,-24(fp)
      do
	{
	  *x1++ = *x << k | z;
 4008674:	e0bffc17 	ldw	r2,-16(fp)
 4008678:	10c00017 	ldw	r3,0(r2)
 400867c:	e0bff317 	ldw	r2,-52(fp)
 4008680:	1888983a 	sll	r4,r3,r2
 4008684:	e0bffb17 	ldw	r2,-20(fp)
 4008688:	10c00104 	addi	r3,r2,4
 400868c:	e0fffb15 	stw	r3,-20(fp)
 4008690:	e0fffa17 	ldw	r3,-24(fp)
 4008694:	20c6b03a 	or	r3,r4,r3
 4008698:	10c00015 	stw	r3,0(r2)
	  z = *x++ >> k1;
 400869c:	e0bffc17 	ldw	r2,-16(fp)
 40086a0:	10c00104 	addi	r3,r2,4
 40086a4:	e0fffc15 	stw	r3,-16(fp)
 40086a8:	10c00017 	ldw	r3,0(r2)
 40086ac:	e0bffe17 	ldw	r2,-8(fp)
 40086b0:	1884d83a 	srl	r2,r3,r2
 40086b4:	e0bffa15 	stw	r2,-24(fp)
	}
      while (x < xe);
 40086b8:	e0fffc17 	ldw	r3,-16(fp)
 40086bc:	e0bff617 	ldw	r2,-40(fp)
 40086c0:	18bfec36 	bltu	r3,r2,4008674 <__lshift+0x144>
      if ((*x1 = z) != 0)
 40086c4:	e0bffb17 	ldw	r2,-20(fp)
 40086c8:	e0fffa17 	ldw	r3,-24(fp)
 40086cc:	10c00015 	stw	r3,0(r2)
 40086d0:	e0bffb17 	ldw	r2,-20(fp)
 40086d4:	10800017 	ldw	r2,0(r2)
 40086d8:	10000f26 	beq	r2,zero,4008718 <__lshift+0x1e8>
	++n1;
 40086dc:	e0bffd17 	ldw	r2,-12(fp)
 40086e0:	10800044 	addi	r2,r2,1
 40086e4:	e0bffd15 	stw	r2,-12(fp)
 40086e8:	00000b06 	br	4008718 <__lshift+0x1e8>
	++n1;
    }
#endif
  else
    do
      *x1++ = *x++;
 40086ec:	e0fffc17 	ldw	r3,-16(fp)
 40086f0:	18800104 	addi	r2,r3,4
 40086f4:	e0bffc15 	stw	r2,-16(fp)
 40086f8:	e0bffb17 	ldw	r2,-20(fp)
 40086fc:	11000104 	addi	r4,r2,4
 4008700:	e13ffb15 	stw	r4,-20(fp)
 4008704:	18c00017 	ldw	r3,0(r3)
 4008708:	10c00015 	stw	r3,0(r2)
    while (x < xe);
 400870c:	e0fffc17 	ldw	r3,-16(fp)
 4008710:	e0bff617 	ldw	r2,-40(fp)
 4008714:	18bff536 	bltu	r3,r2,40086ec <__lshift+0x1bc>
  b1->_wds = n1 - 1;
 4008718:	e0bffd17 	ldw	r2,-12(fp)
 400871c:	10ffffc4 	addi	r3,r2,-1
 4008720:	e0bff717 	ldw	r2,-36(fp)
 4008724:	10c00415 	stw	r3,16(r2)
  Bfree (ptr, b);
 4008728:	e17ff417 	ldw	r5,-48(fp)
 400872c:	e13ff517 	ldw	r4,-44(fp)
 4008730:	4007a040 	call	4007a04 <_Bfree>
  return b1;
 4008734:	e0bff717 	ldw	r2,-36(fp)
}
 4008738:	e037883a 	mov	sp,fp
 400873c:	dfc00117 	ldw	ra,4(sp)
 4008740:	df000017 	ldw	fp,0(sp)
 4008744:	dec00204 	addi	sp,sp,8
 4008748:	f800283a 	ret

0400874c <__mcmp>:

int
cmp (_Bigint * a, _Bigint * b)
{
 400874c:	defff704 	addi	sp,sp,-36
 4008750:	df000815 	stw	fp,32(sp)
 4008754:	df000804 	addi	fp,sp,32
 4008758:	e13ff915 	stw	r4,-28(fp)
 400875c:	e17ff815 	stw	r5,-32(fp)
  __ULong *xa, *xa0, *xb, *xb0;
  int i, j;

  i = a->_wds;
 4008760:	e0bff917 	ldw	r2,-28(fp)
 4008764:	10800417 	ldw	r2,16(r2)
 4008768:	e0bffd15 	stw	r2,-12(fp)
  j = b->_wds;
 400876c:	e0bff817 	ldw	r2,-32(fp)
 4008770:	10800417 	ldw	r2,16(r2)
 4008774:	e0bffc15 	stw	r2,-16(fp)
  if (i > 1 && !a->_x[i - 1])
    Bug ("cmp called with a->_x[a->_wds-1] == 0");
  if (j > 1 && !b->_x[j - 1])
    Bug ("cmp called with b->_x[b->_wds-1] == 0");
#endif
  if (i -= j)
 4008778:	e0fffd17 	ldw	r3,-12(fp)
 400877c:	e0bffc17 	ldw	r2,-16(fp)
 4008780:	1885c83a 	sub	r2,r3,r2
 4008784:	e0bffd15 	stw	r2,-12(fp)
 4008788:	e0bffd17 	ldw	r2,-12(fp)
 400878c:	10000226 	beq	r2,zero,4008798 <__mcmp+0x4c>
    return i;
 4008790:	e0bffd17 	ldw	r2,-12(fp)
 4008794:	00002a06 	br	4008840 <__mcmp+0xf4>
  xa0 = a->_x;
 4008798:	e0bff917 	ldw	r2,-28(fp)
 400879c:	10800504 	addi	r2,r2,20
 40087a0:	e0bffb15 	stw	r2,-20(fp)
  xa = xa0 + j;
 40087a4:	e0bffc17 	ldw	r2,-16(fp)
 40087a8:	100490ba 	slli	r2,r2,2
 40087ac:	e0fffb17 	ldw	r3,-20(fp)
 40087b0:	1885883a 	add	r2,r3,r2
 40087b4:	e0bfff15 	stw	r2,-4(fp)
  xb0 = b->_x;
 40087b8:	e0bff817 	ldw	r2,-32(fp)
 40087bc:	10800504 	addi	r2,r2,20
 40087c0:	e0bffa15 	stw	r2,-24(fp)
  xb = xb0 + j;
 40087c4:	e0bffc17 	ldw	r2,-16(fp)
 40087c8:	100490ba 	slli	r2,r2,2
 40087cc:	e0fffa17 	ldw	r3,-24(fp)
 40087d0:	1885883a 	add	r2,r3,r2
 40087d4:	e0bffe15 	stw	r2,-8(fp)
  for (;;)
    {
      if (*--xa != *--xb)
 40087d8:	e0bfff17 	ldw	r2,-4(fp)
 40087dc:	10bfff04 	addi	r2,r2,-4
 40087e0:	e0bfff15 	stw	r2,-4(fp)
 40087e4:	e0bfff17 	ldw	r2,-4(fp)
 40087e8:	10c00017 	ldw	r3,0(r2)
 40087ec:	e0bffe17 	ldw	r2,-8(fp)
 40087f0:	10bfff04 	addi	r2,r2,-4
 40087f4:	e0bffe15 	stw	r2,-8(fp)
 40087f8:	e0bffe17 	ldw	r2,-8(fp)
 40087fc:	10800017 	ldw	r2,0(r2)
 4008800:	18800926 	beq	r3,r2,4008828 <__mcmp+0xdc>
	return *xa < *xb ? -1 : 1;
 4008804:	e0bfff17 	ldw	r2,-4(fp)
 4008808:	10c00017 	ldw	r3,0(r2)
 400880c:	e0bffe17 	ldw	r2,-8(fp)
 4008810:	10800017 	ldw	r2,0(r2)
 4008814:	1880022e 	bgeu	r3,r2,4008820 <__mcmp+0xd4>
 4008818:	00bfffc4 	movi	r2,-1
 400881c:	00000806 	br	4008840 <__mcmp+0xf4>
 4008820:	00800044 	movi	r2,1
 4008824:	00000606 	br	4008840 <__mcmp+0xf4>
      if (xa <= xa0)
 4008828:	e0bfff17 	ldw	r2,-4(fp)
 400882c:	e0fffb17 	ldw	r3,-20(fp)
 4008830:	1880012e 	bgeu	r3,r2,4008838 <__mcmp+0xec>
      if (*--xa != *--xb)
 4008834:	003fe806 	br	40087d8 <__mcmp+0x8c>
	break;
 4008838:	0001883a 	nop
    }
  return 0;
 400883c:	0005883a 	mov	r2,zero
}
 4008840:	e037883a 	mov	sp,fp
 4008844:	df000017 	ldw	fp,0(sp)
 4008848:	dec00104 	addi	sp,sp,4
 400884c:	f800283a 	ret

04008850 <__mdiff>:

_Bigint *
diff (struct _reent * ptr,
	_Bigint * a, _Bigint * b)
{
 4008850:	deffed04 	addi	sp,sp,-76
 4008854:	dfc01215 	stw	ra,72(sp)
 4008858:	df001115 	stw	fp,68(sp)
 400885c:	df001104 	addi	fp,sp,68
 4008860:	e13ff115 	stw	r4,-60(fp)
 4008864:	e17ff015 	stw	r5,-64(fp)
 4008868:	e1bfef15 	stw	r6,-68(fp)
  __ULong *xa, *xae, *xb, *xbe, *xc;
#ifdef Pack_32
  __Long z;
#endif

  i = cmp (a, b);
 400886c:	e17fef17 	ldw	r5,-68(fp)
 4008870:	e13ff017 	ldw	r4,-64(fp)
 4008874:	400874c0 	call	400874c <__mcmp>
 4008878:	e0bfff15 	stw	r2,-4(fp)
  if (!i)
 400887c:	e0bfff17 	ldw	r2,-4(fp)
 4008880:	1000161e 	bne	r2,zero,40088dc <__mdiff+0x8c>
    {
      c = eBalloc (ptr, 0);
 4008884:	000b883a 	mov	r5,zero
 4008888:	e13ff117 	ldw	r4,-60(fp)
 400888c:	40078e00 	call	40078e0 <_Balloc>
 4008890:	e0bff215 	stw	r2,-56(fp)
 4008894:	e0bff217 	ldw	r2,-56(fp)
 4008898:	1000071e 	bne	r2,zero,40088b8 <__mdiff+0x68>
 400889c:	01c10074 	movhi	r7,1025
 40088a0:	39cde904 	addi	r7,r7,14244
 40088a4:	000d883a 	mov	r6,zero
 40088a8:	01408c84 	movi	r5,562
 40088ac:	01010074 	movhi	r4,1025
 40088b0:	210dee04 	addi	r4,r4,14264
 40088b4:	400b01c0 	call	400b01c <__assert_func>
 40088b8:	e0bff217 	ldw	r2,-56(fp)
 40088bc:	e0bff915 	stw	r2,-28(fp)
      c->_wds = 1;
 40088c0:	e0bff917 	ldw	r2,-28(fp)
 40088c4:	00c00044 	movi	r3,1
 40088c8:	10c00415 	stw	r3,16(r2)
      c->_x[0] = 0;
 40088cc:	e0bff917 	ldw	r2,-28(fp)
 40088d0:	10000515 	stw	zero,20(r2)
      return c;
 40088d4:	e0bff917 	ldw	r2,-28(fp)
 40088d8:	00009506 	br	4008b30 <__mdiff+0x2e0>
    }
  if (i < 0)
 40088dc:	e0bfff17 	ldw	r2,-4(fp)
 40088e0:	1000090e 	bge	r2,zero,4008908 <__mdiff+0xb8>
    {
      c = a;
 40088e4:	e0bff017 	ldw	r2,-64(fp)
 40088e8:	e0bff915 	stw	r2,-28(fp)
      a = b;
 40088ec:	e0bfef17 	ldw	r2,-68(fp)
 40088f0:	e0bff015 	stw	r2,-64(fp)
      b = c;
 40088f4:	e0bff917 	ldw	r2,-28(fp)
 40088f8:	e0bfef15 	stw	r2,-68(fp)
      i = 1;
 40088fc:	00800044 	movi	r2,1
 4008900:	e0bfff15 	stw	r2,-4(fp)
 4008904:	00000106 	br	400890c <__mdiff+0xbc>
    }
  else
    i = 0;
 4008908:	e03fff15 	stw	zero,-4(fp)
  c = eBalloc (ptr, a->_k);
 400890c:	e0bff017 	ldw	r2,-64(fp)
 4008910:	10800117 	ldw	r2,4(r2)
 4008914:	100b883a 	mov	r5,r2
 4008918:	e13ff117 	ldw	r4,-60(fp)
 400891c:	40078e00 	call	40078e0 <_Balloc>
 4008920:	e0bff815 	stw	r2,-32(fp)
 4008924:	e0bff817 	ldw	r2,-32(fp)
 4008928:	1000071e 	bne	r2,zero,4008948 <__mdiff+0xf8>
 400892c:	01c10074 	movhi	r7,1025
 4008930:	39cde904 	addi	r7,r7,14244
 4008934:	000d883a 	mov	r6,zero
 4008938:	01409004 	movi	r5,576
 400893c:	01010074 	movhi	r4,1025
 4008940:	210dee04 	addi	r4,r4,14264
 4008944:	400b01c0 	call	400b01c <__assert_func>
 4008948:	e0bff817 	ldw	r2,-32(fp)
 400894c:	e0bff915 	stw	r2,-28(fp)
  c->_sign = i;
 4008950:	e0bff917 	ldw	r2,-28(fp)
 4008954:	e0ffff17 	ldw	r3,-4(fp)
 4008958:	10c00315 	stw	r3,12(r2)
  wa = a->_wds;
 400895c:	e0bff017 	ldw	r2,-64(fp)
 4008960:	10800417 	ldw	r2,16(r2)
 4008964:	e0bffe15 	stw	r2,-8(fp)
  xa = a->_x;
 4008968:	e0bff017 	ldw	r2,-64(fp)
 400896c:	10800504 	addi	r2,r2,20
 4008970:	e0bffc15 	stw	r2,-16(fp)
  xae = xa + wa;
 4008974:	e0bffe17 	ldw	r2,-8(fp)
 4008978:	100490ba 	slli	r2,r2,2
 400897c:	e0fffc17 	ldw	r3,-16(fp)
 4008980:	1885883a 	add	r2,r3,r2
 4008984:	e0bff715 	stw	r2,-36(fp)
  wb = b->_wds;
 4008988:	e0bfef17 	ldw	r2,-68(fp)
 400898c:	10800417 	ldw	r2,16(r2)
 4008990:	e0bff615 	stw	r2,-40(fp)
  xb = b->_x;
 4008994:	e0bfef17 	ldw	r2,-68(fp)
 4008998:	10800504 	addi	r2,r2,20
 400899c:	e0bffb15 	stw	r2,-20(fp)
  xbe = xb + wb;
 40089a0:	e0bff617 	ldw	r2,-40(fp)
 40089a4:	100490ba 	slli	r2,r2,2
 40089a8:	e0fffb17 	ldw	r3,-20(fp)
 40089ac:	1885883a 	add	r2,r3,r2
 40089b0:	e0bff515 	stw	r2,-44(fp)
  xc = c->_x;
 40089b4:	e0bff917 	ldw	r2,-28(fp)
 40089b8:	10800504 	addi	r2,r2,20
 40089bc:	e0bffa15 	stw	r2,-24(fp)
  borrow = 0;
 40089c0:	e03ffd15 	stw	zero,-12(fp)
#ifdef Pack_32
  do
    {
      y = (*xa & 0xffff) - (*xb & 0xffff) + borrow;
 40089c4:	e0bffc17 	ldw	r2,-16(fp)
 40089c8:	10800017 	ldw	r2,0(r2)
 40089cc:	10ffffcc 	andi	r3,r2,65535
 40089d0:	e0bffb17 	ldw	r2,-20(fp)
 40089d4:	10800017 	ldw	r2,0(r2)
 40089d8:	10bfffcc 	andi	r2,r2,65535
 40089dc:	1887c83a 	sub	r3,r3,r2
 40089e0:	e0bffd17 	ldw	r2,-12(fp)
 40089e4:	1885883a 	add	r2,r3,r2
 40089e8:	e0bff415 	stw	r2,-48(fp)
      borrow = y >> 16;
 40089ec:	e0bff417 	ldw	r2,-48(fp)
 40089f0:	1005d43a 	srai	r2,r2,16
 40089f4:	e0bffd15 	stw	r2,-12(fp)
      Sign_Extend (borrow, y);
      z = (*xa++ >> 16) - (*xb++ >> 16) + borrow;
 40089f8:	e0bffc17 	ldw	r2,-16(fp)
 40089fc:	10c00104 	addi	r3,r2,4
 4008a00:	e0fffc15 	stw	r3,-16(fp)
 4008a04:	10800017 	ldw	r2,0(r2)
 4008a08:	1006d43a 	srli	r3,r2,16
 4008a0c:	e0bffb17 	ldw	r2,-20(fp)
 4008a10:	11000104 	addi	r4,r2,4
 4008a14:	e13ffb15 	stw	r4,-20(fp)
 4008a18:	10800017 	ldw	r2,0(r2)
 4008a1c:	1004d43a 	srli	r2,r2,16
 4008a20:	1887c83a 	sub	r3,r3,r2
 4008a24:	e0bffd17 	ldw	r2,-12(fp)
 4008a28:	1885883a 	add	r2,r3,r2
 4008a2c:	e0bff315 	stw	r2,-52(fp)
      borrow = z >> 16;
 4008a30:	e0bff317 	ldw	r2,-52(fp)
 4008a34:	1005d43a 	srai	r2,r2,16
 4008a38:	e0bffd15 	stw	r2,-12(fp)
      Sign_Extend (borrow, z);
      Storeinc (xc, z, y);
 4008a3c:	e0bff317 	ldw	r2,-52(fp)
 4008a40:	1006943a 	slli	r3,r2,16
 4008a44:	e0bff417 	ldw	r2,-48(fp)
 4008a48:	10bfffcc 	andi	r2,r2,65535
 4008a4c:	1888b03a 	or	r4,r3,r2
 4008a50:	e0bffa17 	ldw	r2,-24(fp)
 4008a54:	10c00104 	addi	r3,r2,4
 4008a58:	e0fffa15 	stw	r3,-24(fp)
 4008a5c:	2007883a 	mov	r3,r4
 4008a60:	10c00015 	stw	r3,0(r2)
    }
  while (xb < xbe);
 4008a64:	e0fffb17 	ldw	r3,-20(fp)
 4008a68:	e0bff517 	ldw	r2,-44(fp)
 4008a6c:	18bfd536 	bltu	r3,r2,40089c4 <__mdiff+0x174>
  while (xa < xae)
 4008a70:	00001e06 	br	4008aec <__mdiff+0x29c>
    {
      y = (*xa & 0xffff) + borrow;
 4008a74:	e0bffc17 	ldw	r2,-16(fp)
 4008a78:	10800017 	ldw	r2,0(r2)
 4008a7c:	10ffffcc 	andi	r3,r2,65535
 4008a80:	e0bffd17 	ldw	r2,-12(fp)
 4008a84:	1885883a 	add	r2,r3,r2
 4008a88:	e0bff415 	stw	r2,-48(fp)
      borrow = y >> 16;
 4008a8c:	e0bff417 	ldw	r2,-48(fp)
 4008a90:	1005d43a 	srai	r2,r2,16
 4008a94:	e0bffd15 	stw	r2,-12(fp)
      Sign_Extend (borrow, y);
      z = (*xa++ >> 16) + borrow;
 4008a98:	e0bffc17 	ldw	r2,-16(fp)
 4008a9c:	10c00104 	addi	r3,r2,4
 4008aa0:	e0fffc15 	stw	r3,-16(fp)
 4008aa4:	10800017 	ldw	r2,0(r2)
 4008aa8:	1006d43a 	srli	r3,r2,16
 4008aac:	e0bffd17 	ldw	r2,-12(fp)
 4008ab0:	1885883a 	add	r2,r3,r2
 4008ab4:	e0bff315 	stw	r2,-52(fp)
      borrow = z >> 16;
 4008ab8:	e0bff317 	ldw	r2,-52(fp)
 4008abc:	1005d43a 	srai	r2,r2,16
 4008ac0:	e0bffd15 	stw	r2,-12(fp)
      Sign_Extend (borrow, z);
      Storeinc (xc, z, y);
 4008ac4:	e0bff317 	ldw	r2,-52(fp)
 4008ac8:	1006943a 	slli	r3,r2,16
 4008acc:	e0bff417 	ldw	r2,-48(fp)
 4008ad0:	10bfffcc 	andi	r2,r2,65535
 4008ad4:	1888b03a 	or	r4,r3,r2
 4008ad8:	e0bffa17 	ldw	r2,-24(fp)
 4008adc:	10c00104 	addi	r3,r2,4
 4008ae0:	e0fffa15 	stw	r3,-24(fp)
 4008ae4:	2007883a 	mov	r3,r4
 4008ae8:	10c00015 	stw	r3,0(r2)
  while (xa < xae)
 4008aec:	e0fffc17 	ldw	r3,-16(fp)
 4008af0:	e0bff717 	ldw	r2,-36(fp)
 4008af4:	18bfdf36 	bltu	r3,r2,4008a74 <__mdiff+0x224>
      borrow = y >> 16;
      Sign_Extend (borrow, y);
      *xc++ = y & 0xffff;
    }
#endif
  while (!*--xc)
 4008af8:	00000306 	br	4008b08 <__mdiff+0x2b8>
    wa--;
 4008afc:	e0bffe17 	ldw	r2,-8(fp)
 4008b00:	10bfffc4 	addi	r2,r2,-1
 4008b04:	e0bffe15 	stw	r2,-8(fp)
  while (!*--xc)
 4008b08:	e0bffa17 	ldw	r2,-24(fp)
 4008b0c:	10bfff04 	addi	r2,r2,-4
 4008b10:	e0bffa15 	stw	r2,-24(fp)
 4008b14:	e0bffa17 	ldw	r2,-24(fp)
 4008b18:	10800017 	ldw	r2,0(r2)
 4008b1c:	103ff726 	beq	r2,zero,4008afc <__mdiff+0x2ac>
  c->_wds = wa;
 4008b20:	e0bff917 	ldw	r2,-28(fp)
 4008b24:	e0fffe17 	ldw	r3,-8(fp)
 4008b28:	10c00415 	stw	r3,16(r2)
  return c;
 4008b2c:	e0bff917 	ldw	r2,-28(fp)
}
 4008b30:	e037883a 	mov	sp,fp
 4008b34:	dfc00117 	ldw	ra,4(sp)
 4008b38:	df000017 	ldw	fp,0(sp)
 4008b3c:	dec00204 	addi	sp,sp,8
 4008b40:	f800283a 	ret

04008b44 <__ulp>:

double
ulp (double _x)
{
 4008b44:	defff804 	addi	sp,sp,-32
 4008b48:	df000715 	stw	fp,28(sp)
 4008b4c:	dc000615 	stw	r16,24(sp)
 4008b50:	df000704 	addi	fp,sp,28
 4008b54:	e13ff915 	stw	r4,-28(fp)
 4008b58:	e17ffa15 	stw	r5,-24(fp)
  union double_union x, a;
  register __Long L;

  x.d = _x;
 4008b5c:	e0bff917 	ldw	r2,-28(fp)
 4008b60:	e0bffd15 	stw	r2,-12(fp)
 4008b64:	e0bffa17 	ldw	r2,-24(fp)
 4008b68:	e0bffe15 	stw	r2,-8(fp)

  L = (word0 (x) & Exp_mask) - (P - 1) * Exp_msk1;
 4008b6c:	e0bffe17 	ldw	r2,-8(fp)
 4008b70:	10dffc2c 	andhi	r3,r2,32752
 4008b74:	00bf3034 	movhi	r2,64704
 4008b78:	1885883a 	add	r2,r3,r2
 4008b7c:	1021883a 	mov	r16,r2
#ifndef Sudden_Underflow
  if (L > 0)
 4008b80:	0400040e 	bge	zero,r16,4008b94 <__ulp+0x50>
    {
#endif
#ifdef IBM
      L |= Exp_msk1 >> 4;
#endif
      word0 (a) = L;
 4008b84:	8005883a 	mov	r2,r16
 4008b88:	e0bffc15 	stw	r2,-16(fp)
#ifndef _DOUBLE_IS_32BITS
      word1 (a) = 0;
 4008b8c:	e03ffb15 	stw	zero,-20(fp)
 4008b90:	00001206 	br	4008bdc <__ulp+0x98>

#ifndef Sudden_Underflow
    }
  else
    {
      L = -L >> Exp_shift;
 4008b94:	0405c83a 	sub	r2,zero,r16
 4008b98:	1021d53a 	srai	r16,r2,20
      if (L < Exp_shift)
 4008b9c:	80800508 	cmpgei	r2,r16,20
 4008ba0:	1000051e 	bne	r2,zero,4008bb8 <__ulp+0x74>
	{
	  word0 (a) = 0x80000 >> L;
 4008ba4:	00800234 	movhi	r2,8
 4008ba8:	1405d83a 	sra	r2,r2,r16
 4008bac:	e0bffc15 	stw	r2,-16(fp)
#ifndef _DOUBLE_IS_32BITS
	  word1 (a) = 0;
 4008bb0:	e03ffb15 	stw	zero,-20(fp)
 4008bb4:	00000906 	br	4008bdc <__ulp+0x98>
#endif
	}
      else
	{
	  word0 (a) = 0;
 4008bb8:	e03ffc15 	stw	zero,-16(fp)
	  L -= Exp_shift;
 4008bbc:	843ffb04 	addi	r16,r16,-20
#ifndef _DOUBLE_IS_32BITS
         word1 (a) = L >= 31 ? 1 : 1 << (31 - L);
 4008bc0:	808007c8 	cmpgei	r2,r16,31
 4008bc4:	1000031e 	bne	r2,zero,4008bd4 <__ulp+0x90>
 4008bc8:	00a00034 	movhi	r2,32768
 4008bcc:	1404d83a 	srl	r2,r2,r16
 4008bd0:	00000106 	br	4008bd8 <__ulp+0x94>
 4008bd4:	00800044 	movi	r2,1
 4008bd8:	e0bffb15 	stw	r2,-20(fp)
#endif
	}
    }
#endif
  return a.d;
 4008bdc:	e0bffb17 	ldw	r2,-20(fp)
 4008be0:	e0fffc17 	ldw	r3,-16(fp)
 4008be4:	1009883a 	mov	r4,r2
 4008be8:	180b883a 	mov	r5,r3
}
 4008bec:	2005883a 	mov	r2,r4
 4008bf0:	2807883a 	mov	r3,r5
 4008bf4:	e6ffff04 	addi	sp,fp,-4
 4008bf8:	df000117 	ldw	fp,4(sp)
 4008bfc:	dc000017 	ldw	r16,0(sp)
 4008c00:	dec00204 	addi	sp,sp,8
 4008c04:	f800283a 	ret

04008c08 <__b2d>:

double
b2d (_Bigint * a, int *e)
{
 4008c08:	defff404 	addi	sp,sp,-48
 4008c0c:	dfc00b15 	stw	ra,44(sp)
 4008c10:	df000a15 	stw	fp,40(sp)
 4008c14:	df000a04 	addi	fp,sp,40
 4008c18:	e13ff715 	stw	r4,-36(fp)
 4008c1c:	e17ff615 	stw	r5,-40(fp)
#else
#define d0 word0(d)
#define d1 word1(d)
#endif

  xa0 = a->_x;
 4008c20:	e0bff717 	ldw	r2,-36(fp)
 4008c24:	10800504 	addi	r2,r2,20
 4008c28:	e0bffe15 	stw	r2,-8(fp)
  xa = xa0 + a->_wds;
 4008c2c:	e0bff717 	ldw	r2,-36(fp)
 4008c30:	10800417 	ldw	r2,16(r2)
 4008c34:	100490ba 	slli	r2,r2,2
 4008c38:	e0fffe17 	ldw	r3,-8(fp)
 4008c3c:	1885883a 	add	r2,r3,r2
 4008c40:	e0bfff15 	stw	r2,-4(fp)
  y = *--xa;
 4008c44:	e0bfff17 	ldw	r2,-4(fp)
 4008c48:	10bfff04 	addi	r2,r2,-4
 4008c4c:	e0bfff15 	stw	r2,-4(fp)
 4008c50:	e0bfff17 	ldw	r2,-4(fp)
 4008c54:	10800017 	ldw	r2,0(r2)
 4008c58:	e0bffd15 	stw	r2,-12(fp)
#ifdef DEBUG
  if (!y)
    Bug ("zero y in b2d");
#endif
  k = hi0bits (y);
 4008c5c:	e13ffd17 	ldw	r4,-12(fp)
 4008c60:	4007de80 	call	4007de8 <__hi0bits>
 4008c64:	e0bffc15 	stw	r2,-16(fp)
  *e = 32 - k;
 4008c68:	00c00804 	movi	r3,32
 4008c6c:	e0bffc17 	ldw	r2,-16(fp)
 4008c70:	1887c83a 	sub	r3,r3,r2
 4008c74:	e0bff617 	ldw	r2,-40(fp)
 4008c78:	10c00015 	stw	r3,0(r2)
#ifdef Pack_32
  if (k < Ebits)
 4008c7c:	e0bffc17 	ldw	r2,-16(fp)
 4008c80:	108002c8 	cmpgei	r2,r2,11
 4008c84:	10001e1e 	bne	r2,zero,4008d00 <__b2d+0xf8>
    {
      d0 = Exp_1 | y >> (Ebits - k);
 4008c88:	00c002c4 	movi	r3,11
 4008c8c:	e0bffc17 	ldw	r2,-16(fp)
 4008c90:	1885c83a 	sub	r2,r3,r2
 4008c94:	e0fffd17 	ldw	r3,-12(fp)
 4008c98:	1884d83a 	srl	r2,r3,r2
 4008c9c:	108ffc34 	orhi	r2,r2,16368
 4008ca0:	e0bff915 	stw	r2,-28(fp)
      w = xa > xa0 ? *--xa : 0;
 4008ca4:	e0bfff17 	ldw	r2,-4(fp)
 4008ca8:	e0fffe17 	ldw	r3,-8(fp)
 4008cac:	1880062e 	bgeu	r3,r2,4008cc8 <__b2d+0xc0>
 4008cb0:	e0bfff17 	ldw	r2,-4(fp)
 4008cb4:	10bfff04 	addi	r2,r2,-4
 4008cb8:	e0bfff15 	stw	r2,-4(fp)
 4008cbc:	e0bfff17 	ldw	r2,-4(fp)
 4008cc0:	10800017 	ldw	r2,0(r2)
 4008cc4:	00000106 	br	4008ccc <__b2d+0xc4>
 4008cc8:	0005883a 	mov	r2,zero
 4008ccc:	e0bffa15 	stw	r2,-24(fp)
#ifndef _DOUBLE_IS_32BITS
      d1 = y << ((32 - Ebits) + k) | w >> (Ebits - k);
 4008cd0:	e0bffc17 	ldw	r2,-16(fp)
 4008cd4:	10800544 	addi	r2,r2,21
 4008cd8:	e0fffd17 	ldw	r3,-12(fp)
 4008cdc:	1886983a 	sll	r3,r3,r2
 4008ce0:	010002c4 	movi	r4,11
 4008ce4:	e0bffc17 	ldw	r2,-16(fp)
 4008ce8:	2085c83a 	sub	r2,r4,r2
 4008cec:	e13ffa17 	ldw	r4,-24(fp)
 4008cf0:	2084d83a 	srl	r2,r4,r2
 4008cf4:	1884b03a 	or	r2,r3,r2
 4008cf8:	e0bff815 	stw	r2,-32(fp)
#endif
      goto ret_d;
 4008cfc:	00003606 	br	4008dd8 <__b2d+0x1d0>
    }
  z = xa > xa0 ? *--xa : 0;
 4008d00:	e0bfff17 	ldw	r2,-4(fp)
 4008d04:	e0fffe17 	ldw	r3,-8(fp)
 4008d08:	1880062e 	bgeu	r3,r2,4008d24 <__b2d+0x11c>
 4008d0c:	e0bfff17 	ldw	r2,-4(fp)
 4008d10:	10bfff04 	addi	r2,r2,-4
 4008d14:	e0bfff15 	stw	r2,-4(fp)
 4008d18:	e0bfff17 	ldw	r2,-4(fp)
 4008d1c:	10800017 	ldw	r2,0(r2)
 4008d20:	00000106 	br	4008d28 <__b2d+0x120>
 4008d24:	0005883a 	mov	r2,zero
 4008d28:	e0bffb15 	stw	r2,-20(fp)
  if (k -= Ebits)
 4008d2c:	e0bffc17 	ldw	r2,-16(fp)
 4008d30:	10bffd44 	addi	r2,r2,-11
 4008d34:	e0bffc15 	stw	r2,-16(fp)
 4008d38:	e0bffc17 	ldw	r2,-16(fp)
 4008d3c:	10002126 	beq	r2,zero,4008dc4 <__b2d+0x1bc>
    {
      d0 = Exp_1 | y << k | z >> (32 - k);
 4008d40:	e0fffd17 	ldw	r3,-12(fp)
 4008d44:	e0bffc17 	ldw	r2,-16(fp)
 4008d48:	1886983a 	sll	r3,r3,r2
 4008d4c:	01000804 	movi	r4,32
 4008d50:	e0bffc17 	ldw	r2,-16(fp)
 4008d54:	2085c83a 	sub	r2,r4,r2
 4008d58:	e13ffb17 	ldw	r4,-20(fp)
 4008d5c:	2084d83a 	srl	r2,r4,r2
 4008d60:	1884b03a 	or	r2,r3,r2
 4008d64:	108ffc34 	orhi	r2,r2,16368
 4008d68:	e0bff915 	stw	r2,-28(fp)
      y = xa > xa0 ? *--xa : 0;
 4008d6c:	e0bfff17 	ldw	r2,-4(fp)
 4008d70:	e0fffe17 	ldw	r3,-8(fp)
 4008d74:	1880062e 	bgeu	r3,r2,4008d90 <__b2d+0x188>
 4008d78:	e0bfff17 	ldw	r2,-4(fp)
 4008d7c:	10bfff04 	addi	r2,r2,-4
 4008d80:	e0bfff15 	stw	r2,-4(fp)
 4008d84:	e0bfff17 	ldw	r2,-4(fp)
 4008d88:	10800017 	ldw	r2,0(r2)
 4008d8c:	00000106 	br	4008d94 <__b2d+0x18c>
 4008d90:	0005883a 	mov	r2,zero
 4008d94:	e0bffd15 	stw	r2,-12(fp)
#ifndef _DOUBLE_IS_32BITS
      d1 = z << k | y >> (32 - k);
 4008d98:	e0fffb17 	ldw	r3,-20(fp)
 4008d9c:	e0bffc17 	ldw	r2,-16(fp)
 4008da0:	1886983a 	sll	r3,r3,r2
 4008da4:	01000804 	movi	r4,32
 4008da8:	e0bffc17 	ldw	r2,-16(fp)
 4008dac:	2085c83a 	sub	r2,r4,r2
 4008db0:	e13ffd17 	ldw	r4,-12(fp)
 4008db4:	2084d83a 	srl	r2,r4,r2
 4008db8:	1884b03a 	or	r2,r3,r2
 4008dbc:	e0bff815 	stw	r2,-32(fp)
 4008dc0:	00000506 	br	4008dd8 <__b2d+0x1d0>
#endif
    }
  else
    {
      d0 = Exp_1 | y;
 4008dc4:	e0bffd17 	ldw	r2,-12(fp)
 4008dc8:	108ffc34 	orhi	r2,r2,16368
 4008dcc:	e0bff915 	stw	r2,-28(fp)
#ifndef _DOUBLE_IS_32BITS
      d1 = z;
 4008dd0:	e0bffb17 	ldw	r2,-20(fp)
 4008dd4:	e0bff815 	stw	r2,-32(fp)
  word1 (d) = d1 >> 16 | d1 << 16;
#else
#undef d0
#undef d1
#endif
  return d.d;
 4008dd8:	e0bff817 	ldw	r2,-32(fp)
 4008ddc:	e0fff917 	ldw	r3,-28(fp)
 4008de0:	1009883a 	mov	r4,r2
 4008de4:	180b883a 	mov	r5,r3
}
 4008de8:	2005883a 	mov	r2,r4
 4008dec:	2807883a 	mov	r3,r5
 4008df0:	e037883a 	mov	sp,fp
 4008df4:	dfc00117 	ldw	ra,4(sp)
 4008df8:	df000017 	ldw	fp,0(sp)
 4008dfc:	dec00204 	addi	sp,sp,8
 4008e00:	f800283a 	ret

04008e04 <__d2b>:
d2b (struct _reent * ptr,
	double _d,
	int *e,
	int *bits)

{
 4008e04:	deffef04 	addi	sp,sp,-68
 4008e08:	dfc01015 	stw	ra,64(sp)
 4008e0c:	df000f15 	stw	fp,60(sp)
 4008e10:	dc000e15 	stw	r16,56(sp)
 4008e14:	df000f04 	addi	fp,sp,60
 4008e18:	e13ff415 	stw	r4,-48(fp)
 4008e1c:	e17ff215 	stw	r5,-56(fp)
 4008e20:	e1bff315 	stw	r6,-52(fp)
 4008e24:	e1fff115 	stw	r7,-60(fp)
  int de, i, k;
  __ULong *x, y, z;
#ifdef VAX
  __ULong d0, d1;
#endif
  d.d = _d;
 4008e28:	e0bff217 	ldw	r2,-56(fp)
 4008e2c:	e0bff715 	stw	r2,-36(fp)
 4008e30:	e0bff317 	ldw	r2,-52(fp)
 4008e34:	e0bff815 	stw	r2,-32(fp)
  d0 = word0 (d) >> 16 | word0 (d) << 16;
  d1 = word1 (d) >> 16 | word1 (d) << 16;
#else
#define d0 word0(d)
#define d1 word1(d)
  d.d = _d;
 4008e38:	e0bff217 	ldw	r2,-56(fp)
 4008e3c:	e0bff715 	stw	r2,-36(fp)
 4008e40:	e0bff317 	ldw	r2,-52(fp)
 4008e44:	e0bff815 	stw	r2,-32(fp)
#endif

#ifdef Pack_32
  b = eBalloc (ptr, 1);
 4008e48:	01400044 	movi	r5,1
 4008e4c:	e13ff417 	ldw	r4,-48(fp)
 4008e50:	40078e00 	call	40078e0 <_Balloc>
 4008e54:	e0bffc15 	stw	r2,-16(fp)
 4008e58:	e0bffc17 	ldw	r2,-16(fp)
 4008e5c:	1000071e 	bne	r2,zero,4008e7c <__d2b+0x78>
 4008e60:	01c10074 	movhi	r7,1025
 4008e64:	39cde904 	addi	r7,r7,14244
 4008e68:	000d883a 	mov	r6,zero
 4008e6c:	0140c284 	movi	r5,778
 4008e70:	01010074 	movhi	r4,1025
 4008e74:	210dee04 	addi	r4,r4,14264
 4008e78:	400b01c0 	call	400b01c <__assert_func>
 4008e7c:	e0bffc17 	ldw	r2,-16(fp)
 4008e80:	e0bffb15 	stw	r2,-20(fp)
#else
  b = eBalloc (ptr, 2);
#endif
  x = b->_x;
 4008e84:	e0bffb17 	ldw	r2,-20(fp)
 4008e88:	10800504 	addi	r2,r2,20
 4008e8c:	e0bffa15 	stw	r2,-24(fp)

  z = d0 & Frac_mask;
 4008e90:	e0fff817 	ldw	r3,-32(fp)
 4008e94:	00800434 	movhi	r2,16
 4008e98:	10bfffc4 	addi	r2,r2,-1
 4008e9c:	1884703a 	and	r2,r3,r2
 4008ea0:	e0bff515 	stw	r2,-44(fp)
  d0 &= 0x7fffffff;		/* clear sign bit, which we ignore */
 4008ea4:	e0fff817 	ldw	r3,-32(fp)
 4008ea8:	00a00034 	movhi	r2,32768
 4008eac:	10bfffc4 	addi	r2,r2,-1
 4008eb0:	1884703a 	and	r2,r3,r2
 4008eb4:	e0bff815 	stw	r2,-32(fp)
  de = (int) (d0 >> Exp_shift);
#ifndef IBM
  z |= Exp_msk11;
#endif
#else
  if ((de = (int) (d0 >> Exp_shift)) != 0)
 4008eb8:	e0bff817 	ldw	r2,-32(fp)
 4008ebc:	1004d53a 	srli	r2,r2,20
 4008ec0:	e0bff915 	stw	r2,-28(fp)
 4008ec4:	e0bff917 	ldw	r2,-28(fp)
 4008ec8:	10000326 	beq	r2,zero,4008ed8 <__d2b+0xd4>
    z |= Exp_msk1;
 4008ecc:	e0bff517 	ldw	r2,-44(fp)
 4008ed0:	10800434 	orhi	r2,r2,16
 4008ed4:	e0bff515 	stw	r2,-44(fp)
#endif
#ifdef Pack_32
#ifndef _DOUBLE_IS_32BITS
  if (d1)
 4008ed8:	e0bff717 	ldw	r2,-36(fp)
 4008edc:	10002826 	beq	r2,zero,4008f80 <__d2b+0x17c>
    {
      y = d1;
 4008ee0:	e0bff717 	ldw	r2,-36(fp)
 4008ee4:	e0bff615 	stw	r2,-40(fp)
      k = lo0bits (&y);
 4008ee8:	e0bff604 	addi	r2,fp,-40
 4008eec:	1009883a 	mov	r4,r2
 4008ef0:	4007e740 	call	4007e74 <__lo0bits>
 4008ef4:	e0bffd15 	stw	r2,-12(fp)
      if (k)
 4008ef8:	e0bffd17 	ldw	r2,-12(fp)
 4008efc:	10000e26 	beq	r2,zero,4008f38 <__d2b+0x134>
	{
         x[0] = y | z << (32 - k);
 4008f00:	e0fff517 	ldw	r3,-44(fp)
 4008f04:	01000804 	movi	r4,32
 4008f08:	e0bffd17 	ldw	r2,-12(fp)
 4008f0c:	2085c83a 	sub	r2,r4,r2
 4008f10:	1886983a 	sll	r3,r3,r2
 4008f14:	e0bff617 	ldw	r2,-40(fp)
 4008f18:	1886b03a 	or	r3,r3,r2
 4008f1c:	e0bffa17 	ldw	r2,-24(fp)
 4008f20:	10c00015 	stw	r3,0(r2)
	  z >>= k;
 4008f24:	e0fff517 	ldw	r3,-44(fp)
 4008f28:	e0bffd17 	ldw	r2,-12(fp)
 4008f2c:	1884d83a 	srl	r2,r3,r2
 4008f30:	e0bff515 	stw	r2,-44(fp)
 4008f34:	00000306 	br	4008f44 <__d2b+0x140>
	}
      else
	x[0] = y;
 4008f38:	e0fff617 	ldw	r3,-40(fp)
 4008f3c:	e0bffa17 	ldw	r2,-24(fp)
 4008f40:	10c00015 	stw	r3,0(r2)
      i = b->_wds = (x[1] = z) ? 2 : 1;
 4008f44:	e0bffa17 	ldw	r2,-24(fp)
 4008f48:	10800104 	addi	r2,r2,4
 4008f4c:	e0fff517 	ldw	r3,-44(fp)
 4008f50:	10c00015 	stw	r3,0(r2)
 4008f54:	10800017 	ldw	r2,0(r2)
 4008f58:	10000226 	beq	r2,zero,4008f64 <__d2b+0x160>
 4008f5c:	00800084 	movi	r2,2
 4008f60:	00000106 	br	4008f68 <__d2b+0x164>
 4008f64:	00800044 	movi	r2,1
 4008f68:	e0fffb17 	ldw	r3,-20(fp)
 4008f6c:	18800415 	stw	r2,16(r3)
 4008f70:	e0bffb17 	ldw	r2,-20(fp)
 4008f74:	10800417 	ldw	r2,16(r2)
 4008f78:	e0bffe15 	stw	r2,-8(fp)
 4008f7c:	00001006 	br	4008fc0 <__d2b+0x1bc>
    {
#ifdef DEBUG
      if (!z)
	Bug ("Zero passed to d2b");
#endif
      k = lo0bits (&z);
 4008f80:	e0bff504 	addi	r2,fp,-44
 4008f84:	1009883a 	mov	r4,r2
 4008f88:	4007e740 	call	4007e74 <__lo0bits>
 4008f8c:	e0bffd15 	stw	r2,-12(fp)
      x[0] = z;
 4008f90:	e0fff517 	ldw	r3,-44(fp)
 4008f94:	e0bffa17 	ldw	r2,-24(fp)
 4008f98:	10c00015 	stw	r3,0(r2)
      i = b->_wds = 1;
 4008f9c:	e0bffb17 	ldw	r2,-20(fp)
 4008fa0:	00c00044 	movi	r3,1
 4008fa4:	10c00415 	stw	r3,16(r2)
 4008fa8:	e0bffb17 	ldw	r2,-20(fp)
 4008fac:	10800417 	ldw	r2,16(r2)
 4008fb0:	e0bffe15 	stw	r2,-8(fp)
#ifndef _DOUBLE_IS_32BITS
      k += 32;
 4008fb4:	e0bffd17 	ldw	r2,-12(fp)
 4008fb8:	10800804 	addi	r2,r2,32
 4008fbc:	e0bffd15 	stw	r2,-12(fp)
  while (!x[i])
    --i;
  b->_wds = i + 1;
#endif
#ifndef Sudden_Underflow
  if (de)
 4008fc0:	e0bff917 	ldw	r2,-28(fp)
 4008fc4:	10000c26 	beq	r2,zero,4008ff8 <__d2b+0x1f4>
#endif
#ifdef IBM
      *e = (de - Bias - (P - 1) << 2) + k;
      *bits = 4 * P + 8 - k - hi0bits (word0 (d) & Frac_mask);
#else
      *e = de - Bias - (P - 1) + k;
 4008fc8:	e0bff917 	ldw	r2,-28(fp)
 4008fcc:	10fef344 	addi	r3,r2,-1075
 4008fd0:	e0bffd17 	ldw	r2,-12(fp)
 4008fd4:	1887883a 	add	r3,r3,r2
 4008fd8:	e0bff117 	ldw	r2,-60(fp)
 4008fdc:	10c00015 	stw	r3,0(r2)
      *bits = P - k;
 4008fe0:	00c00d44 	movi	r3,53
 4008fe4:	e0bffd17 	ldw	r2,-12(fp)
 4008fe8:	1887c83a 	sub	r3,r3,r2
 4008fec:	e0800217 	ldw	r2,8(fp)
 4008ff0:	10c00015 	stw	r3,0(r2)
 4008ff4:	00001506 	br	400904c <__d2b+0x248>
#endif
#ifndef Sudden_Underflow
    }
  else
    {
      *e = de - Bias - (P - 1) + 1 + k;
 4008ff8:	e0bff917 	ldw	r2,-28(fp)
 4008ffc:	10fef384 	addi	r3,r2,-1074
 4009000:	e0bffd17 	ldw	r2,-12(fp)
 4009004:	1887883a 	add	r3,r3,r2
 4009008:	e0bff117 	ldw	r2,-60(fp)
 400900c:	10c00015 	stw	r3,0(r2)
#ifdef Pack_32
      *bits = 32 * i - hi0bits (x[i - 1]);
 4009010:	e0bffe17 	ldw	r2,-8(fp)
 4009014:	1020917a 	slli	r16,r2,5
 4009018:	e0fffe17 	ldw	r3,-8(fp)
 400901c:	00900034 	movhi	r2,16384
 4009020:	10bfffc4 	addi	r2,r2,-1
 4009024:	1885883a 	add	r2,r3,r2
 4009028:	100490ba 	slli	r2,r2,2
 400902c:	e0fffa17 	ldw	r3,-24(fp)
 4009030:	1885883a 	add	r2,r3,r2
 4009034:	10800017 	ldw	r2,0(r2)
 4009038:	1009883a 	mov	r4,r2
 400903c:	4007de80 	call	4007de8 <__hi0bits>
 4009040:	8087c83a 	sub	r3,r16,r2
 4009044:	e0800217 	ldw	r2,8(fp)
 4009048:	10c00015 	stw	r3,0(r2)
#else
      *bits = (i + 2) * 16 - hi0bits (x[i]);
#endif
    }
#endif
  return b;
 400904c:	e0bffb17 	ldw	r2,-20(fp)
}
 4009050:	e6ffff04 	addi	sp,fp,-4
 4009054:	dfc00217 	ldw	ra,8(sp)
 4009058:	df000117 	ldw	fp,4(sp)
 400905c:	dc000017 	ldw	r16,0(sp)
 4009060:	dec00304 	addi	sp,sp,12
 4009064:	f800283a 	ret

04009068 <__ratio>:
#undef d1

double
ratio (_Bigint * a, _Bigint * b)

{
 4009068:	defff504 	addi	sp,sp,-44
 400906c:	dfc00a15 	stw	ra,40(sp)
 4009070:	df000915 	stw	fp,36(sp)
 4009074:	df000904 	addi	fp,sp,36
 4009078:	e13ff815 	stw	r4,-32(fp)
 400907c:	e17ff715 	stw	r5,-36(fp)
  union double_union da, db;
  int k, ka, kb;

  da.d = b2d (a, &ka);
 4009080:	e0bffa04 	addi	r2,fp,-24
 4009084:	100b883a 	mov	r5,r2
 4009088:	e13ff817 	ldw	r4,-32(fp)
 400908c:	4008c080 	call	4008c08 <__b2d>
 4009090:	1009883a 	mov	r4,r2
 4009094:	180b883a 	mov	r5,r3
 4009098:	e13ffd15 	stw	r4,-12(fp)
 400909c:	e17ffe15 	stw	r5,-8(fp)
  db.d = b2d (b, &kb);
 40090a0:	e0bff904 	addi	r2,fp,-28
 40090a4:	100b883a 	mov	r5,r2
 40090a8:	e13ff717 	ldw	r4,-36(fp)
 40090ac:	4008c080 	call	4008c08 <__b2d>
 40090b0:	1009883a 	mov	r4,r2
 40090b4:	180b883a 	mov	r5,r3
 40090b8:	e13ffb15 	stw	r4,-20(fp)
 40090bc:	e17ffc15 	stw	r5,-16(fp)
#ifdef Pack_32
  k = ka - kb + 32 * (a->_wds - b->_wds);
 40090c0:	e0fffa17 	ldw	r3,-24(fp)
 40090c4:	e0bff917 	ldw	r2,-28(fp)
 40090c8:	1887c83a 	sub	r3,r3,r2
 40090cc:	e0bff817 	ldw	r2,-32(fp)
 40090d0:	11000417 	ldw	r4,16(r2)
 40090d4:	e0bff717 	ldw	r2,-36(fp)
 40090d8:	10800417 	ldw	r2,16(r2)
 40090dc:	2085c83a 	sub	r2,r4,r2
 40090e0:	1004917a 	slli	r2,r2,5
 40090e4:	1885883a 	add	r2,r3,r2
 40090e8:	e0bfff15 	stw	r2,-4(fp)
      word0 (db) += (k >> 2) * Exp_msk1;
      if (k &= 3)
	db.d *= 1 << k;
    }
#else
  if (k > 0)
 40090ec:	e0bfff17 	ldw	r2,-4(fp)
 40090f0:	0080060e 	bge	zero,r2,400910c <__ratio+0xa4>
    word0 (da) += k * Exp_msk1;
 40090f4:	e0fffe17 	ldw	r3,-8(fp)
 40090f8:	e0bfff17 	ldw	r2,-4(fp)
 40090fc:	1004953a 	slli	r2,r2,20
 4009100:	1885883a 	add	r2,r3,r2
 4009104:	e0bffe15 	stw	r2,-8(fp)
 4009108:	00000806 	br	400912c <__ratio+0xc4>
  else
    {
      k = -k;
 400910c:	e0bfff17 	ldw	r2,-4(fp)
 4009110:	0085c83a 	sub	r2,zero,r2
 4009114:	e0bfff15 	stw	r2,-4(fp)
      word0 (db) += k * Exp_msk1;
 4009118:	e0fffc17 	ldw	r3,-16(fp)
 400911c:	e0bfff17 	ldw	r2,-4(fp)
 4009120:	1004953a 	slli	r2,r2,20
 4009124:	1885883a 	add	r2,r3,r2
 4009128:	e0bffc15 	stw	r2,-16(fp)
    }
#endif
  return da.d / db.d;
 400912c:	e0bffd17 	ldw	r2,-12(fp)
 4009130:	e0fffe17 	ldw	r3,-8(fp)
 4009134:	e13ffb17 	ldw	r4,-20(fp)
 4009138:	e17ffc17 	ldw	r5,-16(fp)
 400913c:	200d883a 	mov	r6,r4
 4009140:	280f883a 	mov	r7,r5
 4009144:	1009883a 	mov	r4,r2
 4009148:	180b883a 	mov	r5,r3
 400914c:	400eb0c0 	call	400eb0c <__divdf3>
 4009150:	1009883a 	mov	r4,r2
 4009154:	180b883a 	mov	r5,r3
 4009158:	2005883a 	mov	r2,r4
 400915c:	2807883a 	mov	r3,r5
 4009160:	1009883a 	mov	r4,r2
 4009164:	180b883a 	mov	r5,r3
}
 4009168:	2005883a 	mov	r2,r4
 400916c:	2807883a 	mov	r3,r5
 4009170:	e037883a 	mov	sp,fp
 4009174:	dfc00117 	ldw	ra,4(sp)
 4009178:	df000017 	ldw	fp,0(sp)
 400917c:	dec00204 	addi	sp,sp,8
 4009180:	f800283a 	ret

04009184 <_mprec_log10>:
#endif


double
_mprec_log10 (int dig)
{
 4009184:	defffb04 	addi	sp,sp,-20
 4009188:	dfc00415 	stw	ra,16(sp)
 400918c:	df000315 	stw	fp,12(sp)
 4009190:	df000304 	addi	fp,sp,12
 4009194:	e13ffd15 	stw	r4,-12(fp)
  double v = 1.0;
 4009198:	e03ffe15 	stw	zero,-8(fp)
 400919c:	008ffc34 	movhi	r2,16368
 40091a0:	e0bfff15 	stw	r2,-4(fp)
  if (dig < 24)
 40091a4:	e0bffd17 	ldw	r2,-12(fp)
 40091a8:	10800608 	cmpgei	r2,r2,24
 40091ac:	1000151e 	bne	r2,zero,4009204 <_mprec_log10+0x80>
    return tens[dig];
 40091b0:	e0bffd17 	ldw	r2,-12(fp)
 40091b4:	100a90fa 	slli	r5,r2,3
 40091b8:	01010074 	movhi	r4,1025
 40091bc:	2909883a 	add	r4,r5,r4
 40091c0:	208e0717 	ldw	r2,14364(r4)
 40091c4:	01010074 	movhi	r4,1025
 40091c8:	2909883a 	add	r4,r5,r4
 40091cc:	20ce0817 	ldw	r3,14368(r4)
 40091d0:	00001006 	br	4009214 <_mprec_log10+0x90>
  while (dig > 0)
    {
      v *= 10;
 40091d4:	000d883a 	mov	r6,zero
 40091d8:	01d00934 	movhi	r7,16420
 40091dc:	e13ffe17 	ldw	r4,-8(fp)
 40091e0:	e17fff17 	ldw	r5,-4(fp)
 40091e4:	400f5cc0 	call	400f5cc <__muldf3>
 40091e8:	1009883a 	mov	r4,r2
 40091ec:	180b883a 	mov	r5,r3
 40091f0:	e13ffe15 	stw	r4,-8(fp)
 40091f4:	e17fff15 	stw	r5,-4(fp)
      dig--;
 40091f8:	e0bffd17 	ldw	r2,-12(fp)
 40091fc:	10bfffc4 	addi	r2,r2,-1
 4009200:	e0bffd15 	stw	r2,-12(fp)
  while (dig > 0)
 4009204:	e0bffd17 	ldw	r2,-12(fp)
 4009208:	00bff216 	blt	zero,r2,40091d4 <_mprec_log10+0x50>
    }
  return v;
 400920c:	e0bffe17 	ldw	r2,-8(fp)
 4009210:	e0ffff17 	ldw	r3,-4(fp)
 4009214:	1009883a 	mov	r4,r2
 4009218:	180b883a 	mov	r5,r3
}
 400921c:	2005883a 	mov	r2,r4
 4009220:	2807883a 	mov	r3,r5
 4009224:	e037883a 	mov	sp,fp
 4009228:	dfc00117 	ldw	ra,4(sp)
 400922c:	df000017 	ldw	fp,0(sp)
 4009230:	dec00204 	addi	sp,sp,8
 4009234:	f800283a 	ret

04009238 <__copybits>:

void
copybits (__ULong *c,
	int n,
	_Bigint *b)
{
 4009238:	defff904 	addi	sp,sp,-28
 400923c:	df000615 	stw	fp,24(sp)
 4009240:	df000604 	addi	fp,sp,24
 4009244:	e13ffc15 	stw	r4,-16(fp)
 4009248:	e17ffb15 	stw	r5,-20(fp)
 400924c:	e1bffa15 	stw	r6,-24(fp)
	__ULong *ce, *x, *xe;
#ifdef Pack_16
	int nw, nw1;
#endif

	ce = c + ((n-1) >> kshift) + 1;
 4009250:	e0bffb17 	ldw	r2,-20(fp)
 4009254:	10bfffc4 	addi	r2,r2,-1
 4009258:	1005d17a 	srai	r2,r2,5
 400925c:	10800044 	addi	r2,r2,1
 4009260:	100490ba 	slli	r2,r2,2
 4009264:	e0fffc17 	ldw	r3,-16(fp)
 4009268:	1885883a 	add	r2,r3,r2
 400926c:	e0bffe15 	stw	r2,-8(fp)
	x = b->_x;
 4009270:	e0bffa17 	ldw	r2,-24(fp)
 4009274:	10800504 	addi	r2,r2,20
 4009278:	e0bfff15 	stw	r2,-4(fp)
#ifdef Pack_32
	xe = x + b->_wds;
 400927c:	e0bffa17 	ldw	r2,-24(fp)
 4009280:	10800417 	ldw	r2,16(r2)
 4009284:	100490ba 	slli	r2,r2,2
 4009288:	e0ffff17 	ldw	r3,-4(fp)
 400928c:	1885883a 	add	r2,r3,r2
 4009290:	e0bffd15 	stw	r2,-12(fp)
	while(x < xe)
 4009294:	00000806 	br	40092b8 <__copybits+0x80>
		*c++ = *x++;
 4009298:	e0ffff17 	ldw	r3,-4(fp)
 400929c:	18800104 	addi	r2,r3,4
 40092a0:	e0bfff15 	stw	r2,-4(fp)
 40092a4:	e0bffc17 	ldw	r2,-16(fp)
 40092a8:	11000104 	addi	r4,r2,4
 40092ac:	e13ffc15 	stw	r4,-16(fp)
 40092b0:	18c00017 	ldw	r3,0(r3)
 40092b4:	10c00015 	stw	r3,0(r2)
	while(x < xe)
 40092b8:	e0ffff17 	ldw	r3,-4(fp)
 40092bc:	e0bffd17 	ldw	r2,-12(fp)
 40092c0:	18bff536 	bltu	r3,r2,4009298 <__copybits+0x60>
	for(xe = x + (nw - nw1); x < xe; x += 2)
		Storeinc(c, x[1], x[0]);
	if (nw1)
		*c++ = *x;
#endif
	while(c < ce)
 40092c4:	00000406 	br	40092d8 <__copybits+0xa0>
		*c++ = 0;
 40092c8:	e0bffc17 	ldw	r2,-16(fp)
 40092cc:	10c00104 	addi	r3,r2,4
 40092d0:	e0fffc15 	stw	r3,-16(fp)
 40092d4:	10000015 	stw	zero,0(r2)
	while(c < ce)
 40092d8:	e0fffc17 	ldw	r3,-16(fp)
 40092dc:	e0bffe17 	ldw	r2,-8(fp)
 40092e0:	18bff936 	bltu	r3,r2,40092c8 <__copybits+0x90>
}
 40092e4:	0001883a 	nop
 40092e8:	0001883a 	nop
 40092ec:	e037883a 	mov	sp,fp
 40092f0:	df000017 	ldw	fp,0(sp)
 40092f4:	dec00104 	addi	sp,sp,4
 40092f8:	f800283a 	ret

040092fc <__any_on>:

__ULong
any_on (_Bigint *b,
	int k)
{
 40092fc:	defff704 	addi	sp,sp,-36
 4009300:	df000815 	stw	fp,32(sp)
 4009304:	df000804 	addi	fp,sp,32
 4009308:	e13ff915 	stw	r4,-28(fp)
 400930c:	e17ff815 	stw	r5,-32(fp)
	int n, nwds;
	__ULong *x, *x0, x1, x2;

	x = b->_x;
 4009310:	e0bff917 	ldw	r2,-28(fp)
 4009314:	10800504 	addi	r2,r2,20
 4009318:	e0bffe15 	stw	r2,-8(fp)
	nwds = b->_wds;
 400931c:	e0bff917 	ldw	r2,-28(fp)
 4009320:	10800417 	ldw	r2,16(r2)
 4009324:	e0bffd15 	stw	r2,-12(fp)
	n = k >> kshift;
 4009328:	e0bff817 	ldw	r2,-32(fp)
 400932c:	1005d17a 	srai	r2,r2,5
 4009330:	e0bfff15 	stw	r2,-4(fp)
	if (n > nwds)
 4009334:	e0bfff17 	ldw	r2,-4(fp)
 4009338:	e0fffd17 	ldw	r3,-12(fp)
 400933c:	1880030e 	bge	r3,r2,400934c <__any_on+0x50>
		n = nwds;
 4009340:	e0bffd17 	ldw	r2,-12(fp)
 4009344:	e0bfff15 	stw	r2,-4(fp)
 4009348:	00001d06 	br	40093c0 <__any_on+0xc4>
	else if (n < nwds && (k &= kmask)) {
 400934c:	e0ffff17 	ldw	r3,-4(fp)
 4009350:	e0bffd17 	ldw	r2,-12(fp)
 4009354:	18801a0e 	bge	r3,r2,40093c0 <__any_on+0xc4>
 4009358:	e0bff817 	ldw	r2,-32(fp)
 400935c:	108007cc 	andi	r2,r2,31
 4009360:	e0bff815 	stw	r2,-32(fp)
 4009364:	e0bff817 	ldw	r2,-32(fp)
 4009368:	10001526 	beq	r2,zero,40093c0 <__any_on+0xc4>
		x1 = x2 = x[n];
 400936c:	e0bfff17 	ldw	r2,-4(fp)
 4009370:	100490ba 	slli	r2,r2,2
 4009374:	e0fffe17 	ldw	r3,-8(fp)
 4009378:	1885883a 	add	r2,r3,r2
 400937c:	10800017 	ldw	r2,0(r2)
 4009380:	e0bffc15 	stw	r2,-16(fp)
 4009384:	e0bffc17 	ldw	r2,-16(fp)
 4009388:	e0bffb15 	stw	r2,-20(fp)
		x1 >>= k;
 400938c:	e0fffb17 	ldw	r3,-20(fp)
 4009390:	e0bff817 	ldw	r2,-32(fp)
 4009394:	1884d83a 	srl	r2,r3,r2
 4009398:	e0bffb15 	stw	r2,-20(fp)
		x1 <<= k;
 400939c:	e0fffb17 	ldw	r3,-20(fp)
 40093a0:	e0bff817 	ldw	r2,-32(fp)
 40093a4:	1884983a 	sll	r2,r3,r2
 40093a8:	e0bffb15 	stw	r2,-20(fp)
		if (x1 != x2)
 40093ac:	e0fffb17 	ldw	r3,-20(fp)
 40093b0:	e0bffc17 	ldw	r2,-16(fp)
 40093b4:	18800226 	beq	r3,r2,40093c0 <__any_on+0xc4>
			return 1;
 40093b8:	00800044 	movi	r2,1
 40093bc:	00001406 	br	4009410 <__any_on+0x114>
		}
	x0 = x;
 40093c0:	e0bffe17 	ldw	r2,-8(fp)
 40093c4:	e0bffa15 	stw	r2,-24(fp)
	x += n;
 40093c8:	e0bfff17 	ldw	r2,-4(fp)
 40093cc:	100490ba 	slli	r2,r2,2
 40093d0:	e0fffe17 	ldw	r3,-8(fp)
 40093d4:	1885883a 	add	r2,r3,r2
 40093d8:	e0bffe15 	stw	r2,-8(fp)
	while(x > x0)
 40093dc:	00000806 	br	4009400 <__any_on+0x104>
		if (*--x)
 40093e0:	e0bffe17 	ldw	r2,-8(fp)
 40093e4:	10bfff04 	addi	r2,r2,-4
 40093e8:	e0bffe15 	stw	r2,-8(fp)
 40093ec:	e0bffe17 	ldw	r2,-8(fp)
 40093f0:	10800017 	ldw	r2,0(r2)
 40093f4:	10000226 	beq	r2,zero,4009400 <__any_on+0x104>
			return 1;
 40093f8:	00800044 	movi	r2,1
 40093fc:	00000406 	br	4009410 <__any_on+0x114>
	while(x > x0)
 4009400:	e0bffe17 	ldw	r2,-8(fp)
 4009404:	e0fffa17 	ldw	r3,-24(fp)
 4009408:	18bff536 	bltu	r3,r2,40093e0 <__any_on+0xe4>
	return 0;
 400940c:	0005883a 	mov	r2,zero
}
 4009410:	e037883a 	mov	sp,fp
 4009414:	df000017 	ldw	fp,0(sp)
 4009418:	dec00104 	addi	sp,sp,4
 400941c:	f800283a 	ret

04009420 <_sbrk_r>:
*/

void *
_sbrk_r (struct _reent *ptr,
     ptrdiff_t incr)
{
 4009420:	defffb04 	addi	sp,sp,-20
 4009424:	dfc00415 	stw	ra,16(sp)
 4009428:	df000315 	stw	fp,12(sp)
 400942c:	df000304 	addi	fp,sp,12
 4009430:	e13ffe15 	stw	r4,-8(fp)
 4009434:	e17ffd15 	stw	r5,-12(fp)
  char *ret;
  void *_sbrk(ptrdiff_t);

  errno = 0;
 4009438:	d0271515 	stw	zero,-25516(gp)
  if ((ret = (char *)(_sbrk (incr))) == (void *) -1 && errno != 0)
 400943c:	e13ffd17 	ldw	r4,-12(fp)
 4009440:	40110f80 	call	40110f8 <sbrk>
 4009444:	e0bfff15 	stw	r2,-4(fp)
 4009448:	e0bfff17 	ldw	r2,-4(fp)
 400944c:	10bfffd8 	cmpnei	r2,r2,-1
 4009450:	1000051e 	bne	r2,zero,4009468 <_sbrk_r+0x48>
 4009454:	d0a71517 	ldw	r2,-25516(gp)
 4009458:	10000326 	beq	r2,zero,4009468 <_sbrk_r+0x48>
    ptr->_errno = errno;
 400945c:	d0e71517 	ldw	r3,-25516(gp)
 4009460:	e0bffe17 	ldw	r2,-8(fp)
 4009464:	10c00015 	stw	r3,0(r2)
  return ret;
 4009468:	e0bfff17 	ldw	r2,-4(fp)
}
 400946c:	e037883a 	mov	sp,fp
 4009470:	dfc00117 	ldw	ra,4(sp)
 4009474:	df000017 	ldw	fp,0(sp)
 4009478:	dec00204 	addi	sp,sp,8
 400947c:	f800283a 	ret

04009480 <__sread>:
_READ_WRITE_RETURN_TYPE
__sread (struct _reent *ptr,
       void *cookie,
       char *buf,
       _READ_WRITE_BUFSIZE_TYPE n)
{
 4009480:	defff804 	addi	sp,sp,-32
 4009484:	dfc00715 	stw	ra,28(sp)
 4009488:	df000615 	stw	fp,24(sp)
 400948c:	dc400515 	stw	r17,20(sp)
 4009490:	dc000415 	stw	r16,16(sp)
 4009494:	df000604 	addi	fp,sp,24
 4009498:	e13ffd15 	stw	r4,-12(fp)
 400949c:	e17ffc15 	stw	r5,-16(fp)
 40094a0:	e1bffb15 	stw	r6,-20(fp)
 40094a4:	e1fffa15 	stw	r7,-24(fp)
  register FILE *fp = (FILE *) cookie;
 40094a8:	e43ffc17 	ldw	r16,-16(fp)
  int oldmode = 0;
  if (fp->_flags & __SCLE)
    oldmode = setmode (fp->_file, O_BINARY);
#endif

  ret = _read_r (ptr, fp->_file, buf, n);
 40094ac:	8080038b 	ldhu	r2,14(r16)
 40094b0:	10bfffcc 	andi	r2,r2,65535
 40094b4:	10a0001c 	xori	r2,r2,32768
 40094b8:	10a00004 	addi	r2,r2,-32768
 40094bc:	e0fffa17 	ldw	r3,-24(fp)
 40094c0:	180f883a 	mov	r7,r3
 40094c4:	e1bffb17 	ldw	r6,-20(fp)
 40094c8:	100b883a 	mov	r5,r2
 40094cc:	e13ffd17 	ldw	r4,-12(fp)
 40094d0:	400c0300 	call	400c030 <_read_r>
 40094d4:	1023883a 	mov	r17,r2
    setmode (fp->_file, oldmode);
#endif

  /* If the read succeeded, update the current offset.  */

  if (ret >= 0)
 40094d8:	88000416 	blt	r17,zero,40094ec <__sread+0x6c>
    fp->_offset += ret;
 40094dc:	80801417 	ldw	r2,80(r16)
 40094e0:	8885883a 	add	r2,r17,r2
 40094e4:	80801415 	stw	r2,80(r16)
 40094e8:	00000406 	br	40094fc <__sread+0x7c>
  else
    fp->_flags &= ~__SOFF;	/* paranoia */
 40094ec:	80c0030b 	ldhu	r3,12(r16)
 40094f0:	00bbffc4 	movi	r2,-4097
 40094f4:	1884703a 	and	r2,r3,r2
 40094f8:	8080030d 	sth	r2,12(r16)
  return ret;
 40094fc:	8805883a 	mov	r2,r17
}
 4009500:	e6fffe04 	addi	sp,fp,-8
 4009504:	dfc00317 	ldw	ra,12(sp)
 4009508:	df000217 	ldw	fp,8(sp)
 400950c:	dc400117 	ldw	r17,4(sp)
 4009510:	dc000017 	ldw	r16,0(sp)
 4009514:	dec00404 	addi	sp,sp,16
 4009518:	f800283a 	ret

0400951c <__seofread>:
_READ_WRITE_RETURN_TYPE
__seofread (struct _reent *_ptr,
       void *cookie,
       char *buf,
       _READ_WRITE_BUFSIZE_TYPE len)
{
 400951c:	defffb04 	addi	sp,sp,-20
 4009520:	df000415 	stw	fp,16(sp)
 4009524:	df000404 	addi	fp,sp,16
 4009528:	e13fff15 	stw	r4,-4(fp)
 400952c:	e17ffe15 	stw	r5,-8(fp)
 4009530:	e1bffd15 	stw	r6,-12(fp)
 4009534:	e1fffc15 	stw	r7,-16(fp)
  return 0;
 4009538:	0005883a 	mov	r2,zero
}
 400953c:	e037883a 	mov	sp,fp
 4009540:	df000017 	ldw	fp,0(sp)
 4009544:	dec00104 	addi	sp,sp,4
 4009548:	f800283a 	ret

0400954c <__swrite>:
_READ_WRITE_RETURN_TYPE
__swrite (struct _reent *ptr,
       void *cookie,
       char const *buf,
       _READ_WRITE_BUFSIZE_TYPE n)
{
 400954c:	defff804 	addi	sp,sp,-32
 4009550:	dfc00715 	stw	ra,28(sp)
 4009554:	df000615 	stw	fp,24(sp)
 4009558:	dc000515 	stw	r16,20(sp)
 400955c:	df000604 	addi	fp,sp,24
 4009560:	e13ffd15 	stw	r4,-12(fp)
 4009564:	e17ffc15 	stw	r5,-16(fp)
 4009568:	e1bffb15 	stw	r6,-20(fp)
 400956c:	e1fffa15 	stw	r7,-24(fp)
  register FILE *fp = (FILE *) cookie;
 4009570:	e43ffc17 	ldw	r16,-16(fp)
  ssize_t w;
#ifdef __SCLE
  int oldmode=0;
#endif

  if (fp->_flags & __SAPP)
 4009574:	8080030b 	ldhu	r2,12(r16)
 4009578:	10bfffcc 	andi	r2,r2,65535
 400957c:	1080400c 	andi	r2,r2,256
 4009580:	10000926 	beq	r2,zero,40095a8 <__swrite+0x5c>
    _lseek_r (ptr, fp->_file, (_off_t) 0, SEEK_END);
 4009584:	8080038b 	ldhu	r2,14(r16)
 4009588:	10bfffcc 	andi	r2,r2,65535
 400958c:	10a0001c 	xori	r2,r2,32768
 4009590:	10a00004 	addi	r2,r2,-32768
 4009594:	01c00084 	movi	r7,2
 4009598:	000d883a 	mov	r6,zero
 400959c:	100b883a 	mov	r5,r2
 40095a0:	e13ffd17 	ldw	r4,-12(fp)
 40095a4:	400bdb80 	call	400bdb8 <_lseek_r>
  fp->_flags &= ~__SOFF;	/* in case O_APPEND mode is set */
 40095a8:	80c0030b 	ldhu	r3,12(r16)
 40095ac:	00bbffc4 	movi	r2,-4097
 40095b0:	1884703a 	and	r2,r3,r2
 40095b4:	8080030d 	sth	r2,12(r16)
#ifdef __SCLE
  if (fp->_flags & __SCLE)
    oldmode = setmode (fp->_file, O_BINARY);
#endif

  w = _write_r (ptr, fp->_file, buf, n);
 40095b8:	8080038b 	ldhu	r2,14(r16)
 40095bc:	10bfffcc 	andi	r2,r2,65535
 40095c0:	10a0001c 	xori	r2,r2,32768
 40095c4:	10a00004 	addi	r2,r2,-32768
 40095c8:	e0fffa17 	ldw	r3,-24(fp)
 40095cc:	180f883a 	mov	r7,r3
 40095d0:	e1bffb17 	ldw	r6,-20(fp)
 40095d4:	100b883a 	mov	r5,r2
 40095d8:	e13ffd17 	ldw	r4,-12(fp)
 40095dc:	400af4c0 	call	400af4c <_write_r>
 40095e0:	e0bffe15 	stw	r2,-8(fp)
#ifdef __SCLE
  if (oldmode)
    setmode (fp->_file, oldmode);
#endif

  return w;
 40095e4:	e0bffe17 	ldw	r2,-8(fp)
}
 40095e8:	e6ffff04 	addi	sp,fp,-4
 40095ec:	dfc00217 	ldw	ra,8(sp)
 40095f0:	df000117 	ldw	fp,4(sp)
 40095f4:	dc000017 	ldw	r16,0(sp)
 40095f8:	dec00304 	addi	sp,sp,12
 40095fc:	f800283a 	ret

04009600 <__sseek>:
_fpos_t
__sseek (struct _reent *ptr,
       void *cookie,
       _fpos_t offset,
       int whence)
{
 4009600:	defff804 	addi	sp,sp,-32
 4009604:	dfc00715 	stw	ra,28(sp)
 4009608:	df000615 	stw	fp,24(sp)
 400960c:	dc400515 	stw	r17,20(sp)
 4009610:	dc000415 	stw	r16,16(sp)
 4009614:	df000604 	addi	fp,sp,24
 4009618:	e13ffd15 	stw	r4,-12(fp)
 400961c:	e17ffc15 	stw	r5,-16(fp)
 4009620:	e1bffb15 	stw	r6,-20(fp)
 4009624:	e1fffa15 	stw	r7,-24(fp)
  register FILE *fp = (FILE *) cookie;
 4009628:	e43ffc17 	ldw	r16,-16(fp)
  register _off_t ret;

  ret = _lseek_r (ptr, fp->_file, (_off_t) offset, whence);
 400962c:	8080038b 	ldhu	r2,14(r16)
 4009630:	10bfffcc 	andi	r2,r2,65535
 4009634:	10a0001c 	xori	r2,r2,32768
 4009638:	10a00004 	addi	r2,r2,-32768
 400963c:	e1fffa17 	ldw	r7,-24(fp)
 4009640:	e1bffb17 	ldw	r6,-20(fp)
 4009644:	100b883a 	mov	r5,r2
 4009648:	e13ffd17 	ldw	r4,-12(fp)
 400964c:	400bdb80 	call	400bdb8 <_lseek_r>
 4009650:	1023883a 	mov	r17,r2
  if (ret == -1L)
 4009654:	88bfffd8 	cmpnei	r2,r17,-1
 4009658:	1000051e 	bne	r2,zero,4009670 <__sseek+0x70>
    fp->_flags &= ~__SOFF;
 400965c:	80c0030b 	ldhu	r3,12(r16)
 4009660:	00bbffc4 	movi	r2,-4097
 4009664:	1884703a 	and	r2,r3,r2
 4009668:	8080030d 	sth	r2,12(r16)
 400966c:	00000406 	br	4009680 <__sseek+0x80>
  else
    {
      fp->_flags |= __SOFF;
 4009670:	8080030b 	ldhu	r2,12(r16)
 4009674:	10840014 	ori	r2,r2,4096
 4009678:	8080030d 	sth	r2,12(r16)
      fp->_offset = ret;
 400967c:	84401415 	stw	r17,80(r16)
    }
  return ret;
 4009680:	8805883a 	mov	r2,r17
}
 4009684:	e6fffe04 	addi	sp,fp,-8
 4009688:	dfc00317 	ldw	ra,12(sp)
 400968c:	df000217 	ldw	fp,8(sp)
 4009690:	dc400117 	ldw	r17,4(sp)
 4009694:	dc000017 	ldw	r16,0(sp)
 4009698:	dec00404 	addi	sp,sp,16
 400969c:	f800283a 	ret

040096a0 <__sclose>:

int
__sclose (struct _reent *ptr,
       void *cookie)
{
 40096a0:	defffb04 	addi	sp,sp,-20
 40096a4:	dfc00415 	stw	ra,16(sp)
 40096a8:	df000315 	stw	fp,12(sp)
 40096ac:	df000304 	addi	fp,sp,12
 40096b0:	e13ffe15 	stw	r4,-8(fp)
 40096b4:	e17ffd15 	stw	r5,-12(fp)
  FILE *fp = (FILE *) cookie;
 40096b8:	e0bffd17 	ldw	r2,-12(fp)
 40096bc:	e0bfff15 	stw	r2,-4(fp)

  return _close_r (ptr, fp->_file);
 40096c0:	e0bfff17 	ldw	r2,-4(fp)
 40096c4:	1080038b 	ldhu	r2,14(r2)
 40096c8:	10bfffcc 	andi	r2,r2,65535
 40096cc:	10a0001c 	xori	r2,r2,32768
 40096d0:	10a00004 	addi	r2,r2,-32768
 40096d4:	100b883a 	mov	r5,r2
 40096d8:	e13ffe17 	ldw	r4,-8(fp)
 40096dc:	400afbc0 	call	400afbc <_close_r>
}
 40096e0:	e037883a 	mov	sp,fp
 40096e4:	dfc00117 	ldw	ra,4(sp)
 40096e8:	df000017 	ldw	fp,0(sp)
 40096ec:	dec00204 	addi	sp,sp,8
 40096f0:	f800283a 	ret

040096f4 <strcmp>:
#endif

int
strcmp (const char *s1,
	const char *s2)
{ 
 40096f4:	defffb04 	addi	sp,sp,-20
 40096f8:	df000415 	stw	fp,16(sp)
 40096fc:	df000404 	addi	fp,sp,16
 4009700:	e13ffd15 	stw	r4,-12(fp)
 4009704:	e17ffc15 	stw	r5,-16(fp)
#else
  unsigned long *a1;
  unsigned long *a2;

  /* If s1 or s2 are unaligned, then compare bytes. */
  if (!UNALIGNED (s1, s2))
 4009708:	e0fffd17 	ldw	r3,-12(fp)
 400970c:	e0bffc17 	ldw	r2,-16(fp)
 4009710:	1884b03a 	or	r2,r3,r2
 4009714:	108000cc 	andi	r2,r2,3
 4009718:	10002a1e 	bne	r2,zero,40097c4 <strcmp+0xd0>
    {  
      /* If s1 and s2 are word-aligned, compare them a word at a time. */
      a1 = (unsigned long*)s1;
 400971c:	e0bffd17 	ldw	r2,-12(fp)
 4009720:	e0bfff15 	stw	r2,-4(fp)
      a2 = (unsigned long*)s2;
 4009724:	e0bffc17 	ldw	r2,-16(fp)
 4009728:	e0bffe15 	stw	r2,-8(fp)
      while (*a1 == *a2)
 400972c:	00001506 	br	4009784 <strcmp+0x90>
        {
          /* To get here, *a1 == *a2, thus if we find a null in *a1,
	     then the strings must be equal, so return zero.  */
          if (DETECTNULL (*a1))
 4009730:	e0bfff17 	ldw	r2,-4(fp)
 4009734:	10c00017 	ldw	r3,0(r2)
 4009738:	00bfbff4 	movhi	r2,65279
 400973c:	10bfbfc4 	addi	r2,r2,-257
 4009740:	1887883a 	add	r3,r3,r2
 4009744:	e0bfff17 	ldw	r2,-4(fp)
 4009748:	10800017 	ldw	r2,0(r2)
 400974c:	0084303a 	nor	r2,zero,r2
 4009750:	1886703a 	and	r3,r3,r2
 4009754:	00a02074 	movhi	r2,32897
 4009758:	10a02004 	addi	r2,r2,-32640
 400975c:	1884703a 	and	r2,r3,r2
 4009760:	10000226 	beq	r2,zero,400976c <strcmp+0x78>
	    return 0;
 4009764:	0005883a 	mov	r2,zero
 4009768:	00002e06 	br	4009824 <strcmp+0x130>

          a1++;
 400976c:	e0bfff17 	ldw	r2,-4(fp)
 4009770:	10800104 	addi	r2,r2,4
 4009774:	e0bfff15 	stw	r2,-4(fp)
          a2++;
 4009778:	e0bffe17 	ldw	r2,-8(fp)
 400977c:	10800104 	addi	r2,r2,4
 4009780:	e0bffe15 	stw	r2,-8(fp)
      while (*a1 == *a2)
 4009784:	e0bfff17 	ldw	r2,-4(fp)
 4009788:	10c00017 	ldw	r3,0(r2)
 400978c:	e0bffe17 	ldw	r2,-8(fp)
 4009790:	10800017 	ldw	r2,0(r2)
 4009794:	18bfe626 	beq	r3,r2,4009730 <strcmp+0x3c>
        }

      /* A difference was detected in last few bytes of s1, so search bytewise */
      s1 = (char*)a1;
 4009798:	e0bfff17 	ldw	r2,-4(fp)
 400979c:	e0bffd15 	stw	r2,-12(fp)
      s2 = (char*)a2;
 40097a0:	e0bffe17 	ldw	r2,-8(fp)
 40097a4:	e0bffc15 	stw	r2,-16(fp)
    }

  while (*s1 != '\0' && *s1 == *s2)
 40097a8:	00000606 	br	40097c4 <strcmp+0xd0>
    {
      s1++;
 40097ac:	e0bffd17 	ldw	r2,-12(fp)
 40097b0:	10800044 	addi	r2,r2,1
 40097b4:	e0bffd15 	stw	r2,-12(fp)
      s2++;
 40097b8:	e0bffc17 	ldw	r2,-16(fp)
 40097bc:	10800044 	addi	r2,r2,1
 40097c0:	e0bffc15 	stw	r2,-16(fp)
  while (*s1 != '\0' && *s1 == *s2)
 40097c4:	e0bffd17 	ldw	r2,-12(fp)
 40097c8:	10800003 	ldbu	r2,0(r2)
 40097cc:	10803fcc 	andi	r2,r2,255
 40097d0:	1080201c 	xori	r2,r2,128
 40097d4:	10bfe004 	addi	r2,r2,-128
 40097d8:	10000b26 	beq	r2,zero,4009808 <strcmp+0x114>
 40097dc:	e0bffd17 	ldw	r2,-12(fp)
 40097e0:	10c00003 	ldbu	r3,0(r2)
 40097e4:	e0bffc17 	ldw	r2,-16(fp)
 40097e8:	10800003 	ldbu	r2,0(r2)
 40097ec:	18c03fcc 	andi	r3,r3,255
 40097f0:	18c0201c 	xori	r3,r3,128
 40097f4:	18ffe004 	addi	r3,r3,-128
 40097f8:	10803fcc 	andi	r2,r2,255
 40097fc:	1080201c 	xori	r2,r2,128
 4009800:	10bfe004 	addi	r2,r2,-128
 4009804:	18bfe926 	beq	r3,r2,40097ac <strcmp+0xb8>
    }
  return (*(unsigned char *) s1) - (*(unsigned char *) s2);
 4009808:	e0bffd17 	ldw	r2,-12(fp)
 400980c:	10800003 	ldbu	r2,0(r2)
 4009810:	10c03fcc 	andi	r3,r2,255
 4009814:	e0bffc17 	ldw	r2,-16(fp)
 4009818:	10800003 	ldbu	r2,0(r2)
 400981c:	10803fcc 	andi	r2,r2,255
 4009820:	1885c83a 	sub	r2,r3,r2
#endif /* not PREFER_SIZE_OVER_SPEED */
}
 4009824:	e037883a 	mov	sp,fp
 4009828:	df000017 	ldw	fp,0(sp)
 400982c:	dec00104 	addi	sp,sp,4
 4009830:	f800283a 	ret

04009834 <strlen>:
#error long int is not a 32bit or 64bit byte
#endif

size_t
strlen (const char *str)
{
 4009834:	defffc04 	addi	sp,sp,-16
 4009838:	df000315 	stw	fp,12(sp)
 400983c:	df000304 	addi	fp,sp,12
 4009840:	e13ffd15 	stw	r4,-12(fp)
  const char *start = str;
 4009844:	e0bffd17 	ldw	r2,-12(fp)
 4009848:	e0bffe15 	stw	r2,-8(fp)

#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  unsigned long *aligned_addr;

  /* Align the pointer, so we can search a word at a time.  */
  while (UNALIGNED (str))
 400984c:	00000d06 	br	4009884 <strlen+0x50>
    {
      if (!*str)
 4009850:	e0bffd17 	ldw	r2,-12(fp)
 4009854:	10800003 	ldbu	r2,0(r2)
 4009858:	10803fcc 	andi	r2,r2,255
 400985c:	1080201c 	xori	r2,r2,128
 4009860:	10bfe004 	addi	r2,r2,-128
 4009864:	1000041e 	bne	r2,zero,4009878 <strlen+0x44>
	return str - start;
 4009868:	e0fffd17 	ldw	r3,-12(fp)
 400986c:	e0bffe17 	ldw	r2,-8(fp)
 4009870:	1885c83a 	sub	r2,r3,r2
 4009874:	00002806 	br	4009918 <strlen+0xe4>
      str++;
 4009878:	e0bffd17 	ldw	r2,-12(fp)
 400987c:	10800044 	addi	r2,r2,1
 4009880:	e0bffd15 	stw	r2,-12(fp)
  while (UNALIGNED (str))
 4009884:	e0bffd17 	ldw	r2,-12(fp)
 4009888:	108000cc 	andi	r2,r2,3
 400988c:	103ff01e 	bne	r2,zero,4009850 <strlen+0x1c>
    }

  /* If the string is word-aligned, we can check for the presence of
     a null in each word-sized block.  */
  aligned_addr = (unsigned long *)str;
 4009890:	e0bffd17 	ldw	r2,-12(fp)
 4009894:	e0bfff15 	stw	r2,-4(fp)
  while (!DETECTNULL (*aligned_addr))
 4009898:	00000306 	br	40098a8 <strlen+0x74>
    aligned_addr++;
 400989c:	e0bfff17 	ldw	r2,-4(fp)
 40098a0:	10800104 	addi	r2,r2,4
 40098a4:	e0bfff15 	stw	r2,-4(fp)
  while (!DETECTNULL (*aligned_addr))
 40098a8:	e0bfff17 	ldw	r2,-4(fp)
 40098ac:	10c00017 	ldw	r3,0(r2)
 40098b0:	00bfbff4 	movhi	r2,65279
 40098b4:	10bfbfc4 	addi	r2,r2,-257
 40098b8:	1887883a 	add	r3,r3,r2
 40098bc:	e0bfff17 	ldw	r2,-4(fp)
 40098c0:	10800017 	ldw	r2,0(r2)
 40098c4:	0084303a 	nor	r2,zero,r2
 40098c8:	1886703a 	and	r3,r3,r2
 40098cc:	00a02074 	movhi	r2,32897
 40098d0:	10a02004 	addi	r2,r2,-32640
 40098d4:	1884703a 	and	r2,r3,r2
 40098d8:	103ff026 	beq	r2,zero,400989c <strlen+0x68>

  /* Once a null is detected, we check each byte in that block for a
     precise position of the null.  */
  str = (char *) aligned_addr;
 40098dc:	e0bfff17 	ldw	r2,-4(fp)
 40098e0:	e0bffd15 	stw	r2,-12(fp)

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (*str)
 40098e4:	00000306 	br	40098f4 <strlen+0xc0>
    str++;
 40098e8:	e0bffd17 	ldw	r2,-12(fp)
 40098ec:	10800044 	addi	r2,r2,1
 40098f0:	e0bffd15 	stw	r2,-12(fp)
  while (*str)
 40098f4:	e0bffd17 	ldw	r2,-12(fp)
 40098f8:	10800003 	ldbu	r2,0(r2)
 40098fc:	10803fcc 	andi	r2,r2,255
 4009900:	1080201c 	xori	r2,r2,128
 4009904:	10bfe004 	addi	r2,r2,-128
 4009908:	103ff71e 	bne	r2,zero,40098e8 <strlen+0xb4>
  return str - start;
 400990c:	e0fffd17 	ldw	r3,-12(fp)
 4009910:	e0bffe17 	ldw	r2,-8(fp)
 4009914:	1885c83a 	sub	r2,r3,r2
}
 4009918:	e037883a 	mov	sp,fp
 400991c:	df000017 	ldw	fp,0(sp)
 4009920:	dec00104 	addi	sp,sp,4
 4009924:	f800283a 	ret

04009928 <__sprint_r>:
{
 4009928:	defff604 	addi	sp,sp,-40
 400992c:	dfc00915 	stw	ra,36(sp)
 4009930:	df000815 	stw	fp,32(sp)
 4009934:	dc400715 	stw	r17,28(sp)
 4009938:	dc000615 	stw	r16,24(sp)
 400993c:	df000804 	addi	fp,sp,32
 4009940:	e13ff915 	stw	r4,-28(fp)
 4009944:	e17ff815 	stw	r5,-32(fp)
 4009948:	3021883a 	mov	r16,r6
	register int err = 0;
 400994c:	0023883a 	mov	r17,zero
	if (uio->uio_resid == 0) {
 4009950:	80800217 	ldw	r2,8(r16)
 4009954:	1000031e 	bne	r2,zero,4009964 <__sprint_r+0x3c>
		uio->uio_iovcnt = 0;
 4009958:	80000115 	stw	zero,4(r16)
		return (0);
 400995c:	0005883a 	mov	r2,zero
 4009960:	00003606 	br	4009a3c <__sprint_r+0x114>
	if (fp->_flags2 & __SWID) {
 4009964:	e0bff817 	ldw	r2,-32(fp)
 4009968:	10801917 	ldw	r2,100(r2)
 400996c:	1088000c 	andi	r2,r2,8192
 4009970:	10002a26 	beq	r2,zero,4009a1c <__sprint_r+0xf4>
		iov = uio->uio_iov;
 4009974:	80800017 	ldw	r2,0(r16)
 4009978:	e0bffd15 	stw	r2,-12(fp)
		for (; uio->uio_resid != 0;
 400997c:	00002406 	br	4009a10 <__sprint_r+0xe8>
			p = (wchar_t *) iov->iov_base;
 4009980:	e0bffd17 	ldw	r2,-12(fp)
 4009984:	10800017 	ldw	r2,0(r2)
 4009988:	e0bffb15 	stw	r2,-20(fp)
			len = iov->iov_len / sizeof (wchar_t);
 400998c:	e0bffd17 	ldw	r2,-12(fp)
 4009990:	10800117 	ldw	r2,4(r2)
 4009994:	1004d0ba 	srli	r2,r2,2
 4009998:	e0bffa15 	stw	r2,-24(fp)
			for (i = 0; i < len; i++) {
 400999c:	e03ffc15 	stw	zero,-16(fp)
 40099a0:	00001006 	br	40099e4 <__sprint_r+0xbc>
				if (_fputwc_r (ptr, p[i], fp) == WEOF) {
 40099a4:	e0bffc17 	ldw	r2,-16(fp)
 40099a8:	100490ba 	slli	r2,r2,2
 40099ac:	e0fffb17 	ldw	r3,-20(fp)
 40099b0:	1885883a 	add	r2,r3,r2
 40099b4:	10800017 	ldw	r2,0(r2)
 40099b8:	e1bff817 	ldw	r6,-32(fp)
 40099bc:	100b883a 	mov	r5,r2
 40099c0:	e13ff917 	ldw	r4,-28(fp)
 40099c4:	400b62c0 	call	400b62c <_fputwc_r>
 40099c8:	10bfffd8 	cmpnei	r2,r2,-1
 40099cc:	1000021e 	bne	r2,zero,40099d8 <__sprint_r+0xb0>
					err = -1;
 40099d0:	047fffc4 	movi	r17,-1
					goto out;
 40099d4:	00001606 	br	4009a30 <__sprint_r+0x108>
			for (i = 0; i < len; i++) {
 40099d8:	e0bffc17 	ldw	r2,-16(fp)
 40099dc:	10800044 	addi	r2,r2,1
 40099e0:	e0bffc15 	stw	r2,-16(fp)
 40099e4:	e0fffc17 	ldw	r3,-16(fp)
 40099e8:	e0bffa17 	ldw	r2,-24(fp)
 40099ec:	18bfed16 	blt	r3,r2,40099a4 <__sprint_r+0x7c>
		     uio->uio_resid -= len * sizeof (wchar_t), iov++) {
 40099f0:	80c00217 	ldw	r3,8(r16)
 40099f4:	e0bffa17 	ldw	r2,-24(fp)
 40099f8:	100490ba 	slli	r2,r2,2
 40099fc:	1885c83a 	sub	r2,r3,r2
 4009a00:	80800215 	stw	r2,8(r16)
 4009a04:	e0bffd17 	ldw	r2,-12(fp)
 4009a08:	10800204 	addi	r2,r2,8
 4009a0c:	e0bffd15 	stw	r2,-12(fp)
		for (; uio->uio_resid != 0;
 4009a10:	80800217 	ldw	r2,8(r16)
 4009a14:	103fda1e 	bne	r2,zero,4009980 <__sprint_r+0x58>
 4009a18:	00000506 	br	4009a30 <__sprint_r+0x108>
		err = __sfvwrite_r(ptr, fp, uio);
 4009a1c:	800d883a 	mov	r6,r16
 4009a20:	e17ff817 	ldw	r5,-32(fp)
 4009a24:	e13ff917 	ldw	r4,-28(fp)
 4009a28:	400b7840 	call	400b784 <__sfvwrite_r>
 4009a2c:	1023883a 	mov	r17,r2
	uio->uio_resid = 0;
 4009a30:	80000215 	stw	zero,8(r16)
	uio->uio_iovcnt = 0;
 4009a34:	80000115 	stw	zero,4(r16)
	return (err);
 4009a38:	8805883a 	mov	r2,r17
}
 4009a3c:	e6fffe04 	addi	sp,fp,-8
 4009a40:	dfc00317 	ldw	ra,12(sp)
 4009a44:	df000217 	ldw	fp,8(sp)
 4009a48:	dc400117 	ldw	r17,4(sp)
 4009a4c:	dc000017 	ldw	r16,0(sp)
 4009a50:	dec00404 	addi	sp,sp,16
 4009a54:	f800283a 	ret

04009a58 <__sbprintf>:
{
 4009a58:	defedf04 	addi	sp,sp,-1156
 4009a5c:	dfc12015 	stw	ra,1152(sp)
 4009a60:	df011f15 	stw	fp,1148(sp)
 4009a64:	dc011e15 	stw	r16,1144(sp)
 4009a68:	df011f04 	addi	fp,sp,1148
 4009a6c:	e13ee315 	stw	r4,-1140(fp)
 4009a70:	2821883a 	mov	r16,r5
 4009a74:	e1bee215 	stw	r6,-1144(fp)
 4009a78:	e1fee115 	stw	r7,-1148(fp)
	fake._flags = fp->_flags & ~__SNBF;
 4009a7c:	80c0030b 	ldhu	r3,12(r16)
 4009a80:	00bfff44 	movi	r2,-3
 4009a84:	1884703a 	and	r2,r3,r2
 4009a88:	e0bfe70d 	sth	r2,-100(fp)
	fake._flags2 = fp->_flags2;
 4009a8c:	80801917 	ldw	r2,100(r16)
 4009a90:	e0bffd15 	stw	r2,-12(fp)
	fake._file = fp->_file;
 4009a94:	8080038b 	ldhu	r2,14(r16)
 4009a98:	e0bfe78d 	sth	r2,-98(fp)
	fake._cookie = fp->_cookie;
 4009a9c:	80800717 	ldw	r2,28(r16)
 4009aa0:	e0bfeb15 	stw	r2,-84(fp)
	fake._write = fp->_write;
 4009aa4:	80800917 	ldw	r2,36(r16)
 4009aa8:	e0bfed15 	stw	r2,-76(fp)
	fake._bf._base = fake._p = buf;
 4009aac:	e0bee404 	addi	r2,fp,-1136
 4009ab0:	e0bfe415 	stw	r2,-112(fp)
 4009ab4:	e0bfe417 	ldw	r2,-112(fp)
 4009ab8:	e0bfe815 	stw	r2,-96(fp)
	fake._bf._size = fake._w = sizeof (buf);
 4009abc:	00810004 	movi	r2,1024
 4009ac0:	e0bfe615 	stw	r2,-104(fp)
 4009ac4:	e0bfe617 	ldw	r2,-104(fp)
 4009ac8:	e0bfe915 	stw	r2,-92(fp)
	fake._lbfsize = 0;	/* not actually used, but Just In Case */
 4009acc:	e03fea15 	stw	zero,-88(fp)
	ret = _VFPRINTF_R (rptr, &fake, fmt, ap);
 4009ad0:	e0bfe404 	addi	r2,fp,-112
 4009ad4:	e1fee117 	ldw	r7,-1148(fp)
 4009ad8:	e1bee217 	ldw	r6,-1144(fp)
 4009adc:	100b883a 	mov	r5,r2
 4009ae0:	e13ee317 	ldw	r4,-1140(fp)
 4009ae4:	4009b980 	call	4009b98 <___vfiprintf_internal_r>
 4009ae8:	e0bffe15 	stw	r2,-8(fp)
	if (ret >= 0 && _fflush_r (rptr, &fake))
 4009aec:	e0bffe17 	ldw	r2,-8(fp)
 4009af0:	10000716 	blt	r2,zero,4009b10 <__sbprintf+0xb8>
 4009af4:	e0bfe404 	addi	r2,fp,-112
 4009af8:	100b883a 	mov	r5,r2
 4009afc:	e13ee317 	ldw	r4,-1140(fp)
 4009b00:	4004e800 	call	4004e80 <_fflush_r>
 4009b04:	10000226 	beq	r2,zero,4009b10 <__sbprintf+0xb8>
		ret = EOF;
 4009b08:	00bfffc4 	movi	r2,-1
 4009b0c:	e0bffe15 	stw	r2,-8(fp)
	if (fake._flags & __SERR)
 4009b10:	e0bfe70b 	ldhu	r2,-100(fp)
 4009b14:	10bfffcc 	andi	r2,r2,65535
 4009b18:	1080100c 	andi	r2,r2,64
 4009b1c:	10000326 	beq	r2,zero,4009b2c <__sbprintf+0xd4>
		fp->_flags |= __SERR;
 4009b20:	8080030b 	ldhu	r2,12(r16)
 4009b24:	10801014 	ori	r2,r2,64
 4009b28:	8080030d 	sth	r2,12(r16)
	return (ret);
 4009b2c:	e0bffe17 	ldw	r2,-8(fp)
}
 4009b30:	e6ffff04 	addi	sp,fp,-4
 4009b34:	dfc00217 	ldw	ra,8(sp)
 4009b38:	df000117 	ldw	fp,4(sp)
 4009b3c:	dc000017 	ldw	r16,0(sp)
 4009b40:	dec00304 	addi	sp,sp,12
 4009b44:	f800283a 	ret

04009b48 <__vfiprintf_internal>:
{
 4009b48:	defffa04 	addi	sp,sp,-24
 4009b4c:	dfc00515 	stw	ra,20(sp)
 4009b50:	df000415 	stw	fp,16(sp)
 4009b54:	df000404 	addi	fp,sp,16
 4009b58:	e13ffe15 	stw	r4,-8(fp)
 4009b5c:	e17ffd15 	stw	r5,-12(fp)
 4009b60:	e1bffc15 	stw	r6,-16(fp)
  result = _VFPRINTF_R (_REENT, fp, fmt0, ap);
 4009b64:	d0a00017 	ldw	r2,-32768(gp)
 4009b68:	e1fffc17 	ldw	r7,-16(fp)
 4009b6c:	e1bffd17 	ldw	r6,-12(fp)
 4009b70:	e17ffe17 	ldw	r5,-8(fp)
 4009b74:	1009883a 	mov	r4,r2
 4009b78:	4009b980 	call	4009b98 <___vfiprintf_internal_r>
 4009b7c:	e0bfff15 	stw	r2,-4(fp)
  return result;
 4009b80:	e0bfff17 	ldw	r2,-4(fp)
}
 4009b84:	e037883a 	mov	sp,fp
 4009b88:	dfc00117 	ldw	ra,4(sp)
 4009b8c:	df000017 	ldw	fp,0(sp)
 4009b90:	dec00204 	addi	sp,sp,8
 4009b94:	f800283a 	ret

04009b98 <___vfiprintf_internal_r>:
{
 4009b98:	deffbd04 	addi	sp,sp,-268
 4009b9c:	dfc04215 	stw	ra,264(sp)
 4009ba0:	df004115 	stw	fp,260(sp)
 4009ba4:	ddc04015 	stw	r23,256(sp)
 4009ba8:	dd803f15 	stw	r22,252(sp)
 4009bac:	dd403e15 	stw	r21,248(sp)
 4009bb0:	dd003d15 	stw	r20,244(sp)
 4009bb4:	dcc03c15 	stw	r19,240(sp)
 4009bb8:	dc803b15 	stw	r18,236(sp)
 4009bbc:	dc403a15 	stw	r17,232(sp)
 4009bc0:	dc003915 	stw	r16,228(sp)
 4009bc4:	df004104 	addi	fp,sp,260
 4009bc8:	e13fca15 	stw	r4,-216(fp)
 4009bcc:	e17fc915 	stw	r5,-220(fp)
 4009bd0:	e1bfc815 	stw	r6,-224(fp)
 4009bd4:	e1ffc715 	stw	r7,-228(fp)
	char *xdigs = NULL;	/* digits for [xX] conversion */
 4009bd8:	e03fee15 	stw	zero,-72(fp)
	char *malloc_buf = NULL;/* handy pointer for malloced buffers */
 4009bdc:	e03fed15 	stw	zero,-76(fp)
	CHECK_INIT (data, fp);
 4009be0:	e0bfca17 	ldw	r2,-216(fp)
 4009be4:	e0bfec15 	stw	r2,-80(fp)
 4009be8:	e0bfec17 	ldw	r2,-80(fp)
 4009bec:	10000526 	beq	r2,zero,4009c04 <___vfiprintf_internal_r+0x6c>
 4009bf0:	e0bfec17 	ldw	r2,-80(fp)
 4009bf4:	10800e17 	ldw	r2,56(r2)
 4009bf8:	1000021e 	bne	r2,zero,4009c04 <___vfiprintf_internal_r+0x6c>
 4009bfc:	e13fec17 	ldw	r4,-80(fp)
 4009c00:	40053b00 	call	40053b0 <__sinit>
	ORIENT(fp, -1);
 4009c04:	e0bfc917 	ldw	r2,-220(fp)
 4009c08:	1080030b 	ldhu	r2,12(r2)
 4009c0c:	10bfffcc 	andi	r2,r2,65535
 4009c10:	1088000c 	andi	r2,r2,8192
 4009c14:	10000c1e 	bne	r2,zero,4009c48 <___vfiprintf_internal_r+0xb0>
 4009c18:	e0bfc917 	ldw	r2,-220(fp)
 4009c1c:	1080030b 	ldhu	r2,12(r2)
 4009c20:	10880014 	ori	r2,r2,8192
 4009c24:	1007883a 	mov	r3,r2
 4009c28:	e0bfc917 	ldw	r2,-220(fp)
 4009c2c:	10c0030d 	sth	r3,12(r2)
 4009c30:	e0bfc917 	ldw	r2,-220(fp)
 4009c34:	10c01917 	ldw	r3,100(r2)
 4009c38:	00b7ffc4 	movi	r2,-8193
 4009c3c:	1886703a 	and	r3,r3,r2
 4009c40:	e0bfc917 	ldw	r2,-220(fp)
 4009c44:	10c01915 	stw	r3,100(r2)
	if (cantwrite (data, fp)) {
 4009c48:	e0bfc917 	ldw	r2,-220(fp)
 4009c4c:	1080030b 	ldhu	r2,12(r2)
 4009c50:	10bfffcc 	andi	r2,r2,65535
 4009c54:	1080020c 	andi	r2,r2,8
 4009c58:	10000326 	beq	r2,zero,4009c68 <___vfiprintf_internal_r+0xd0>
 4009c5c:	e0bfc917 	ldw	r2,-220(fp)
 4009c60:	10800417 	ldw	r2,16(r2)
 4009c64:	1000061e 	bne	r2,zero,4009c80 <___vfiprintf_internal_r+0xe8>
 4009c68:	e17fc917 	ldw	r5,-220(fp)
 4009c6c:	e13fca17 	ldw	r4,-216(fp)
 4009c70:	4002a140 	call	4002a14 <__swsetup_r>
 4009c74:	10000226 	beq	r2,zero,4009c80 <___vfiprintf_internal_r+0xe8>
		return (EOF);
 4009c78:	00bfffc4 	movi	r2,-1
 4009c7c:	00046106 	br	400ae04 <___vfiprintf_internal_r+0x126c>
	if ((fp->_flags & (__SNBF|__SWR|__SRW)) == (__SNBF|__SWR) &&
 4009c80:	e0bfc917 	ldw	r2,-220(fp)
 4009c84:	1080030b 	ldhu	r2,12(r2)
 4009c88:	10bfffcc 	andi	r2,r2,65535
 4009c8c:	1080068c 	andi	r2,r2,26
 4009c90:	10800298 	cmpnei	r2,r2,10
 4009c94:	10000d1e 	bne	r2,zero,4009ccc <___vfiprintf_internal_r+0x134>
	    fp->_file >= 0) {
 4009c98:	e0bfc917 	ldw	r2,-220(fp)
 4009c9c:	1080038b 	ldhu	r2,14(r2)
	if ((fp->_flags & (__SNBF|__SWR|__SRW)) == (__SNBF|__SWR) &&
 4009ca0:	10bfffcc 	andi	r2,r2,65535
 4009ca4:	10a0001c 	xori	r2,r2,32768
 4009ca8:	10a00004 	addi	r2,r2,-32768
 4009cac:	10000716 	blt	r2,zero,4009ccc <___vfiprintf_internal_r+0x134>
		return (__sbprintf (data, fp, fmt0, ap));
 4009cb0:	e0bfc717 	ldw	r2,-228(fp)
 4009cb4:	100f883a 	mov	r7,r2
 4009cb8:	e1bfc817 	ldw	r6,-224(fp)
 4009cbc:	e17fc917 	ldw	r5,-220(fp)
 4009cc0:	e13fca17 	ldw	r4,-216(fp)
 4009cc4:	4009a580 	call	4009a58 <__sbprintf>
 4009cc8:	00044e06 	br	400ae04 <___vfiprintf_internal_r+0x126c>
	fmt = (char *)fmt0;
 4009ccc:	e53fc817 	ldw	r20,-224(fp)
	uio.uio_iov = iovp = iov;
 4009cd0:	e43fd604 	addi	r16,fp,-168
 4009cd4:	e43fe615 	stw	r16,-104(fp)
	uio.uio_resid = 0;
 4009cd8:	e03fe815 	stw	zero,-96(fp)
	uio.uio_iovcnt = 0;
 4009cdc:	e03fe715 	stw	zero,-100(fp)
	ret = 0;
 4009ce0:	e03ff715 	stw	zero,-36(fp)
	        cp = fmt;
 4009ce4:	a025883a 	mov	r18,r20
                while (*fmt != '\0' && *fmt != '%')
 4009ce8:	00000106 	br	4009cf0 <___vfiprintf_internal_r+0x158>
                    fmt += 1;
 4009cec:	a5000044 	addi	r20,r20,1
                while (*fmt != '\0' && *fmt != '%')
 4009cf0:	a0800003 	ldbu	r2,0(r20)
 4009cf4:	10803fcc 	andi	r2,r2,255
 4009cf8:	1080201c 	xori	r2,r2,128
 4009cfc:	10bfe004 	addi	r2,r2,-128
 4009d00:	10000626 	beq	r2,zero,4009d1c <___vfiprintf_internal_r+0x184>
 4009d04:	a0800003 	ldbu	r2,0(r20)
 4009d08:	10803fcc 	andi	r2,r2,255
 4009d0c:	1080201c 	xori	r2,r2,128
 4009d10:	10bfe004 	addi	r2,r2,-128
 4009d14:	10800958 	cmpnei	r2,r2,37
 4009d18:	103ff41e 	bne	r2,zero,4009cec <___vfiprintf_internal_r+0x154>
		if ((m = fmt - cp) != 0) {
 4009d1c:	a4a3c83a 	sub	r17,r20,r18
 4009d20:	88001826 	beq	r17,zero,4009d84 <___vfiprintf_internal_r+0x1ec>
			PRINT (cp, m);
 4009d24:	84800015 	stw	r18,0(r16)
 4009d28:	8805883a 	mov	r2,r17
 4009d2c:	80800115 	stw	r2,4(r16)
 4009d30:	e0bfe817 	ldw	r2,-96(fp)
 4009d34:	8807883a 	mov	r3,r17
 4009d38:	10c5883a 	add	r2,r2,r3
 4009d3c:	e0bfe815 	stw	r2,-96(fp)
 4009d40:	84000204 	addi	r16,r16,8
 4009d44:	e0bfe717 	ldw	r2,-100(fp)
 4009d48:	10800044 	addi	r2,r2,1
 4009d4c:	e0bfe715 	stw	r2,-100(fp)
 4009d50:	e0bfe717 	ldw	r2,-100(fp)
 4009d54:	10800210 	cmplti	r2,r2,8
 4009d58:	1000071e 	bne	r2,zero,4009d78 <___vfiprintf_internal_r+0x1e0>
 4009d5c:	e0bfe604 	addi	r2,fp,-104
 4009d60:	100d883a 	mov	r6,r2
 4009d64:	e17fc917 	ldw	r5,-220(fp)
 4009d68:	e13fca17 	ldw	r4,-216(fp)
 4009d6c:	40099280 	call	4009928 <__sprint_r>
 4009d70:	1003fc1e 	bne	r2,zero,400ad64 <___vfiprintf_internal_r+0x11cc>
 4009d74:	e43fd604 	addi	r16,fp,-168
			ret += m;
 4009d78:	e0bff717 	ldw	r2,-36(fp)
 4009d7c:	1445883a 	add	r2,r2,r17
 4009d80:	e0bff715 	stw	r2,-36(fp)
                if (*fmt == '\0')
 4009d84:	a0800003 	ldbu	r2,0(r20)
 4009d88:	10803fcc 	andi	r2,r2,255
 4009d8c:	1080201c 	xori	r2,r2,128
 4009d90:	10bfe004 	addi	r2,r2,-128
 4009d94:	1003e526 	beq	r2,zero,400ad2c <___vfiprintf_internal_r+0x1194>
		fmt_anchor = fmt;
 4009d98:	e53feb15 	stw	r20,-84(fp)
		fmt++;		/* skip over '%' */
 4009d9c:	a5000044 	addi	r20,r20,1
		flags = 0;
 4009da0:	0023883a 	mov	r17,zero
		dprec = 0;
 4009da4:	e03ff115 	stw	zero,-60(fp)
		width = 0;
 4009da8:	e03ff615 	stw	zero,-40(fp)
		prec = -1;
 4009dac:	00bfffc4 	movi	r2,-1
 4009db0:	e0bff515 	stw	r2,-44(fp)
		sign = '\0';
 4009db4:	e03fe9c5 	stb	zero,-89(fp)
rflag:		ch = *fmt++;
 4009db8:	a005883a 	mov	r2,r20
 4009dbc:	15000044 	addi	r20,r2,1
 4009dc0:	10800003 	ldbu	r2,0(r2)
 4009dc4:	15403fcc 	andi	r21,r2,255
 4009dc8:	ad40201c 	xori	r21,r21,128
 4009dcc:	ad7fe004 	addi	r21,r21,-128
 4009dd0:	a8bff804 	addi	r2,r21,-32
 4009dd4:	10c01668 	cmpgeui	r3,r2,89
 4009dd8:	1802811e 	bne	r3,zero,400a7e0 <___vfiprintf_internal_r+0xc48>
 4009ddc:	100690ba 	slli	r3,r2,2
 4009de0:	00810074 	movhi	r2,1025
 4009de4:	1885883a 	add	r2,r3,r2
 4009de8:	10a77c17 	ldw	r2,-25104(r2)
 4009dec:	1000683a 	jmp	r2
 4009df0:	04009f54 	movui	r16,637
 4009df4:	0400a7e0 	cmpeqi	r16,zero,671
 4009df8:	0400a7e0 	cmpeqi	r16,zero,671
 4009dfc:	04009f74 	movhi	r16,637
 4009e00:	0400a7e0 	cmpeqi	r16,zero,671
 4009e04:	0400a7e0 	cmpeqi	r16,zero,671
 4009e08:	0400a7e0 	cmpeqi	r16,zero,671
 4009e0c:	0400a7e0 	cmpeqi	r16,zero,671
 4009e10:	0400a7e0 	cmpeqi	r16,zero,671
 4009e14:	0400a7e0 	cmpeqi	r16,zero,671
 4009e18:	04009f7c 	xorhi	r16,zero,637
 4009e1c:	04009fb0 	cmpltui	r16,zero,638
 4009e20:	0400a7e0 	cmpeqi	r16,zero,671
 4009e24:	04009fa8 	cmpgeui	r16,zero,638
 4009e28:	04009fbc 	xorhi	r16,zero,638
 4009e2c:	0400a7e0 	cmpeqi	r16,zero,671
 4009e30:	0400a050 	cmplti	r16,zero,641
 4009e34:	0400a058 	cmpnei	r16,zero,641
 4009e38:	0400a058 	cmpnei	r16,zero,641
 4009e3c:	0400a058 	cmpnei	r16,zero,641
 4009e40:	0400a058 	cmpnei	r16,zero,641
 4009e44:	0400a058 	cmpnei	r16,zero,641
 4009e48:	0400a058 	cmpnei	r16,zero,641
 4009e4c:	0400a058 	cmpnei	r16,zero,641
 4009e50:	0400a058 	cmpnei	r16,zero,641
 4009e54:	0400a058 	cmpnei	r16,zero,641
 4009e58:	0400a7e0 	cmpeqi	r16,zero,671
 4009e5c:	0400a7e0 	cmpeqi	r16,zero,671
 4009e60:	0400a7e0 	cmpeqi	r16,zero,671
 4009e64:	0400a7e0 	cmpeqi	r16,zero,671
 4009e68:	0400a7e0 	cmpeqi	r16,zero,671
 4009e6c:	0400a7e0 	cmpeqi	r16,zero,671
 4009e70:	0400a7e0 	cmpeqi	r16,zero,671
 4009e74:	0400a7e0 	cmpeqi	r16,zero,671
 4009e78:	0400a7e0 	cmpeqi	r16,zero,671
 4009e7c:	0400a7e0 	cmpeqi	r16,zero,671
 4009e80:	0400a0f8 	rdprs	r16,zero,643
 4009e84:	0400a7e0 	cmpeqi	r16,zero,671
 4009e88:	0400a7e0 	cmpeqi	r16,zero,671
 4009e8c:	0400a7e0 	cmpeqi	r16,zero,671
 4009e90:	0400a7e0 	cmpeqi	r16,zero,671
 4009e94:	0400a7e0 	cmpeqi	r16,zero,671
 4009e98:	0400a7e0 	cmpeqi	r16,zero,671
 4009e9c:	0400a7e0 	cmpeqi	r16,zero,671
 4009ea0:	0400a7e0 	cmpeqi	r16,zero,671
 4009ea4:	0400a7e0 	cmpeqi	r16,zero,671
 4009ea8:	0400a7e0 	cmpeqi	r16,zero,671
 4009eac:	0400a298 	cmpnei	r16,zero,650
 4009eb0:	0400a7e0 	cmpeqi	r16,zero,671
 4009eb4:	0400a7e0 	cmpeqi	r16,zero,671
 4009eb8:	0400a7e0 	cmpeqi	r16,zero,671
 4009ebc:	0400a7e0 	cmpeqi	r16,zero,671
 4009ec0:	0400a7e0 	cmpeqi	r16,zero,671
 4009ec4:	0400a404 	movi	r16,656
 4009ec8:	0400a7e0 	cmpeqi	r16,zero,671
 4009ecc:	0400a7e0 	cmpeqi	r16,zero,671
 4009ed0:	0400a4b0 	cmpltui	r16,zero,658
 4009ed4:	0400a7e0 	cmpeqi	r16,zero,671
 4009ed8:	0400a7e0 	cmpeqi	r16,zero,671
 4009edc:	0400a7e0 	cmpeqi	r16,zero,671
 4009ee0:	0400a7e0 	cmpeqi	r16,zero,671
 4009ee4:	0400a7e0 	cmpeqi	r16,zero,671
 4009ee8:	0400a7e0 	cmpeqi	r16,zero,671
 4009eec:	0400a7e0 	cmpeqi	r16,zero,671
 4009ef0:	0400a7e0 	cmpeqi	r16,zero,671
 4009ef4:	0400a7e0 	cmpeqi	r16,zero,671
 4009ef8:	0400a7e0 	cmpeqi	r16,zero,671
 4009efc:	0400a0d0 	cmplti	r16,zero,643
 4009f00:	0400a0fc 	xorhi	r16,zero,643
 4009f04:	0400a7e0 	cmpeqi	r16,zero,671
 4009f08:	0400a7e0 	cmpeqi	r16,zero,671
 4009f0c:	0400a7e0 	cmpeqi	r16,zero,671
 4009f10:	0400a094 	movui	r16,642
 4009f14:	0400a0fc 	xorhi	r16,zero,643
 4009f18:	0400a7e0 	cmpeqi	r16,zero,671
 4009f1c:	0400a7e0 	cmpeqi	r16,zero,671
 4009f20:	0400a09c 	xori	r16,zero,642
 4009f24:	0400a7e0 	cmpeqi	r16,zero,671
 4009f28:	0400a1f8 	rdprs	r16,zero,647
 4009f2c:	0400a29c 	xori	r16,zero,650
 4009f30:	0400a330 	cmpltui	r16,zero,652
 4009f34:	0400a0c8 	cmpgei	r16,zero,643
 4009f38:	0400a7e0 	cmpeqi	r16,zero,671
 4009f3c:	0400a378 	rdprs	r16,zero,653
 4009f40:	0400a7e0 	cmpeqi	r16,zero,671
 4009f44:	0400a408 	cmpgei	r16,zero,656
 4009f48:	0400a7e0 	cmpeqi	r16,zero,671
 4009f4c:	0400a7e0 	cmpeqi	r16,zero,671
 4009f50:	0400a4c0 	call	400a4c <__alt_mem_dram_controller-0x3bff5b4>
			if (!sign)
 4009f54:	e0bfe9c3 	ldbu	r2,-89(fp)
 4009f58:	10803fcc 	andi	r2,r2,255
 4009f5c:	1080201c 	xori	r2,r2,128
 4009f60:	10bfe004 	addi	r2,r2,-128
 4009f64:	103f941e 	bne	r2,zero,4009db8 <___vfiprintf_internal_r+0x220>
				sign = ' ';
 4009f68:	00800804 	movi	r2,32
 4009f6c:	e0bfe9c5 	stb	r2,-89(fp)
			goto rflag;
 4009f70:	003f9106 	br	4009db8 <___vfiprintf_internal_r+0x220>
			flags |= ALT;
 4009f74:	8c400054 	ori	r17,r17,1
			goto rflag;
 4009f78:	003f8f06 	br	4009db8 <___vfiprintf_internal_r+0x220>
			width = GET_ARG (n, ap, int);
 4009f7c:	e0bfc717 	ldw	r2,-228(fp)
 4009f80:	10c00104 	addi	r3,r2,4
 4009f84:	e0ffc715 	stw	r3,-228(fp)
 4009f88:	10800017 	ldw	r2,0(r2)
 4009f8c:	e0bff615 	stw	r2,-40(fp)
			if (width >= 0)
 4009f90:	e0bff617 	ldw	r2,-40(fp)
 4009f94:	10000116 	blt	r2,zero,4009f9c <___vfiprintf_internal_r+0x404>
				goto rflag;
 4009f98:	003f8706 	br	4009db8 <___vfiprintf_internal_r+0x220>
			width = -width;
 4009f9c:	e0bff617 	ldw	r2,-40(fp)
 4009fa0:	0085c83a 	sub	r2,zero,r2
 4009fa4:	e0bff615 	stw	r2,-40(fp)
			flags |= LADJUST;
 4009fa8:	8c400114 	ori	r17,r17,4
			goto rflag;
 4009fac:	003f8206 	br	4009db8 <___vfiprintf_internal_r+0x220>
			sign = '+';
 4009fb0:	00800ac4 	movi	r2,43
 4009fb4:	e0bfe9c5 	stb	r2,-89(fp)
			goto rflag;
 4009fb8:	003f7f06 	br	4009db8 <___vfiprintf_internal_r+0x220>
			if ((ch = *fmt++) == '*') {
 4009fbc:	a005883a 	mov	r2,r20
 4009fc0:	15000044 	addi	r20,r2,1
 4009fc4:	10800003 	ldbu	r2,0(r2)
 4009fc8:	15403fcc 	andi	r21,r2,255
 4009fcc:	ad40201c 	xori	r21,r21,128
 4009fd0:	ad7fe004 	addi	r21,r21,-128
 4009fd4:	a8800a98 	cmpnei	r2,r21,42
 4009fd8:	10000a1e 	bne	r2,zero,400a004 <___vfiprintf_internal_r+0x46c>
				prec = GET_ARG (n, ap, int);
 4009fdc:	e0bfc717 	ldw	r2,-228(fp)
 4009fe0:	10c00104 	addi	r3,r2,4
 4009fe4:	e0ffc715 	stw	r3,-228(fp)
 4009fe8:	10800017 	ldw	r2,0(r2)
 4009fec:	e0bff515 	stw	r2,-44(fp)
				if (prec < 0)
 4009ff0:	e0bff517 	ldw	r2,-44(fp)
 4009ff4:	103f700e 	bge	r2,zero,4009db8 <___vfiprintf_internal_r+0x220>
					prec = -1;
 4009ff8:	00bfffc4 	movi	r2,-1
 4009ffc:	e0bff515 	stw	r2,-44(fp)
				goto rflag;
 400a000:	003f6d06 	br	4009db8 <___vfiprintf_internal_r+0x220>
			n = 0;
 400a004:	0027883a 	mov	r19,zero
			while (is_digit (ch)) {
 400a008:	00000906 	br	400a030 <___vfiprintf_internal_r+0x498>
				n = 10 * n + to_digit (ch);
 400a00c:	98c002a4 	muli	r3,r19,10
 400a010:	a8bff404 	addi	r2,r21,-48
 400a014:	18a7883a 	add	r19,r3,r2
				ch = *fmt++;
 400a018:	a005883a 	mov	r2,r20
 400a01c:	15000044 	addi	r20,r2,1
 400a020:	10800003 	ldbu	r2,0(r2)
 400a024:	15403fcc 	andi	r21,r2,255
 400a028:	ad40201c 	xori	r21,r21,128
 400a02c:	ad7fe004 	addi	r21,r21,-128
			while (is_digit (ch)) {
 400a030:	a8bff404 	addi	r2,r21,-48
 400a034:	108002b0 	cmpltui	r2,r2,10
 400a038:	103ff41e 	bne	r2,zero,400a00c <___vfiprintf_internal_r+0x474>
			prec = n < 0 ? -1 : n;
 400a03c:	9805883a 	mov	r2,r19
 400a040:	1000010e 	bge	r2,zero,400a048 <___vfiprintf_internal_r+0x4b0>
 400a044:	00bfffc4 	movi	r2,-1
 400a048:	e0bff515 	stw	r2,-44(fp)
			goto reswitch;
 400a04c:	003f6006 	br	4009dd0 <___vfiprintf_internal_r+0x238>
			flags |= ZEROPAD;
 400a050:	8c402014 	ori	r17,r17,128
			goto rflag;
 400a054:	003f5806 	br	4009db8 <___vfiprintf_internal_r+0x220>
			n = 0;
 400a058:	0027883a 	mov	r19,zero
				n = 10 * n + to_digit (ch);
 400a05c:	98c002a4 	muli	r3,r19,10
 400a060:	a8bff404 	addi	r2,r21,-48
 400a064:	18a7883a 	add	r19,r3,r2
				ch = *fmt++;
 400a068:	a005883a 	mov	r2,r20
 400a06c:	15000044 	addi	r20,r2,1
 400a070:	10800003 	ldbu	r2,0(r2)
 400a074:	15403fcc 	andi	r21,r2,255
 400a078:	ad40201c 	xori	r21,r21,128
 400a07c:	ad7fe004 	addi	r21,r21,-128
			} while (is_digit (ch));
 400a080:	a8bff404 	addi	r2,r21,-48
 400a084:	108002b0 	cmpltui	r2,r2,10
 400a088:	103ff41e 	bne	r2,zero,400a05c <___vfiprintf_internal_r+0x4c4>
			width = n;
 400a08c:	e4fff615 	stw	r19,-40(fp)
			goto reswitch;
 400a090:	003f4f06 	br	4009dd0 <___vfiprintf_internal_r+0x238>
				flags |= SHORTINT;
 400a094:	8c401014 	ori	r17,r17,64
			goto rflag;
 400a098:	003f4706 	br	4009db8 <___vfiprintf_internal_r+0x220>
			if (*fmt == 'l') {
 400a09c:	a0800003 	ldbu	r2,0(r20)
 400a0a0:	10803fcc 	andi	r2,r2,255
 400a0a4:	1080201c 	xori	r2,r2,128
 400a0a8:	10bfe004 	addi	r2,r2,-128
 400a0ac:	10801b18 	cmpnei	r2,r2,108
 400a0b0:	1000031e 	bne	r2,zero,400a0c0 <___vfiprintf_internal_r+0x528>
				fmt++;
 400a0b4:	a5000044 	addi	r20,r20,1
				flags |= QUADINT;
 400a0b8:	8c400814 	ori	r17,r17,32
 400a0bc:	003f3e06 	br	4009db8 <___vfiprintf_internal_r+0x220>
				flags |= LONGINT;
 400a0c0:	8c400414 	ori	r17,r17,16
			goto rflag;
 400a0c4:	003f3c06 	br	4009db8 <___vfiprintf_internal_r+0x220>
			flags |= QUADINT;
 400a0c8:	8c400814 	ori	r17,r17,32
			goto rflag;
 400a0cc:	003f3a06 	br	4009db8 <___vfiprintf_internal_r+0x220>
			cp = buf;
 400a0d0:	e4bfcc04 	addi	r18,fp,-208
				*cp = GET_ARG (N, ap, int);
 400a0d4:	e0bfc717 	ldw	r2,-228(fp)
 400a0d8:	10c00104 	addi	r3,r2,4
 400a0dc:	e0ffc715 	stw	r3,-228(fp)
 400a0e0:	10800017 	ldw	r2,0(r2)
 400a0e4:	90800005 	stb	r2,0(r18)
				size = 1;
 400a0e8:	00800044 	movi	r2,1
 400a0ec:	e0bfef15 	stw	r2,-68(fp)
			sign = '\0';
 400a0f0:	e03fe9c5 	stb	zero,-89(fp)
			break;
 400a0f4:	0001c206 	br	400a800 <___vfiprintf_internal_r+0xc68>
			flags |= LONGINT;
 400a0f8:	8c400414 	ori	r17,r17,16
			_uquad = SARG ();
 400a0fc:	8880080c 	andi	r2,r17,32
 400a100:	10000826 	beq	r2,zero,400a124 <___vfiprintf_internal_r+0x58c>
 400a104:	e13fc717 	ldw	r4,-228(fp)
 400a108:	20800204 	addi	r2,r4,8
 400a10c:	e0bfc715 	stw	r2,-228(fp)
 400a110:	20800017 	ldw	r2,0(r4)
 400a114:	20c00117 	ldw	r3,4(r4)
 400a118:	e0bfc515 	stw	r2,-236(fp)
 400a11c:	e0ffc615 	stw	r3,-232(fp)
 400a120:	00001e06 	br	400a19c <___vfiprintf_internal_r+0x604>
 400a124:	8880040c 	andi	r2,r17,16
 400a128:	10000826 	beq	r2,zero,400a14c <___vfiprintf_internal_r+0x5b4>
 400a12c:	e0bfc717 	ldw	r2,-228(fp)
 400a130:	10c00104 	addi	r3,r2,4
 400a134:	e0ffc715 	stw	r3,-228(fp)
 400a138:	10800017 	ldw	r2,0(r2)
 400a13c:	e0bfc515 	stw	r2,-236(fp)
 400a140:	1005d7fa 	srai	r2,r2,31
 400a144:	e0bfc615 	stw	r2,-232(fp)
 400a148:	00001406 	br	400a19c <___vfiprintf_internal_r+0x604>
 400a14c:	8880100c 	andi	r2,r17,64
 400a150:	10000b26 	beq	r2,zero,400a180 <___vfiprintf_internal_r+0x5e8>
 400a154:	e0bfc717 	ldw	r2,-228(fp)
 400a158:	10c00104 	addi	r3,r2,4
 400a15c:	e0ffc715 	stw	r3,-228(fp)
 400a160:	10800017 	ldw	r2,0(r2)
 400a164:	10bfffcc 	andi	r2,r2,65535
 400a168:	10a0001c 	xori	r2,r2,32768
 400a16c:	10a00004 	addi	r2,r2,-32768
 400a170:	e0bfc515 	stw	r2,-236(fp)
 400a174:	1005d7fa 	srai	r2,r2,31
 400a178:	e0bfc615 	stw	r2,-232(fp)
 400a17c:	00000706 	br	400a19c <___vfiprintf_internal_r+0x604>
 400a180:	e0bfc717 	ldw	r2,-228(fp)
 400a184:	10c00104 	addi	r3,r2,4
 400a188:	e0ffc715 	stw	r3,-228(fp)
 400a18c:	10800017 	ldw	r2,0(r2)
 400a190:	e0bfc515 	stw	r2,-236(fp)
 400a194:	1005d7fa 	srai	r2,r2,31
 400a198:	e0bfc615 	stw	r2,-232(fp)
 400a19c:	e0bfc517 	ldw	r2,-236(fp)
 400a1a0:	e0bff315 	stw	r2,-52(fp)
 400a1a4:	e0bfc617 	ldw	r2,-232(fp)
 400a1a8:	e0bff415 	stw	r2,-48(fp)
			if ((quad_t)_uquad < 0)
 400a1ac:	e0bff317 	ldw	r2,-52(fp)
 400a1b0:	e0fff417 	ldw	r3,-48(fp)
 400a1b4:	18000d0e 	bge	r3,zero,400a1ec <___vfiprintf_internal_r+0x654>
				_uquad = -_uquad;
 400a1b8:	000d883a 	mov	r6,zero
 400a1bc:	000f883a 	mov	r7,zero
 400a1c0:	e13ff317 	ldw	r4,-52(fp)
 400a1c4:	e17ff417 	ldw	r5,-48(fp)
 400a1c8:	3105c83a 	sub	r2,r6,r4
 400a1cc:	3091803a 	cmpltu	r8,r6,r2
 400a1d0:	3947c83a 	sub	r3,r7,r5
 400a1d4:	1a09c83a 	sub	r4,r3,r8
 400a1d8:	2007883a 	mov	r3,r4
 400a1dc:	e0bff315 	stw	r2,-52(fp)
 400a1e0:	e0fff415 	stw	r3,-48(fp)
				sign = '-';
 400a1e4:	00800b44 	movi	r2,45
 400a1e8:	e0bfe9c5 	stb	r2,-89(fp)
			base = DEC;
 400a1ec:	00800044 	movi	r2,1
 400a1f0:	e0bff215 	stw	r2,-56(fp)
			goto number;
 400a1f4:	0000ec06 	br	400a5a8 <___vfiprintf_internal_r+0xa10>
			if (flags & QUADINT)
 400a1f8:	8880080c 	andi	r2,r17,32
 400a1fc:	10000d26 	beq	r2,zero,400a234 <___vfiprintf_internal_r+0x69c>
				*GET_ARG (N, ap, quad_ptr_t) = ret;
 400a200:	e0bfc717 	ldw	r2,-228(fp)
 400a204:	10c00104 	addi	r3,r2,4
 400a208:	e0ffc715 	stw	r3,-228(fp)
 400a20c:	10800017 	ldw	r2,0(r2)
 400a210:	e0fff717 	ldw	r3,-36(fp)
 400a214:	e0ffbf15 	stw	r3,-260(fp)
 400a218:	1807d7fa 	srai	r3,r3,31
 400a21c:	e0ffc015 	stw	r3,-256(fp)
 400a220:	e0ffbf17 	ldw	r3,-260(fp)
 400a224:	10c00015 	stw	r3,0(r2)
 400a228:	e0ffc017 	ldw	r3,-256(fp)
 400a22c:	10c00115 	stw	r3,4(r2)
			continue;	/* no output */
 400a230:	0002bd06 	br	400ad28 <___vfiprintf_internal_r+0x1190>
			if (flags & LONGINT)
 400a234:	8880040c 	andi	r2,r17,16
 400a238:	10000726 	beq	r2,zero,400a258 <___vfiprintf_internal_r+0x6c0>
				*GET_ARG (N, ap, long_ptr_t) = ret;
 400a23c:	e0bfc717 	ldw	r2,-228(fp)
 400a240:	10c00104 	addi	r3,r2,4
 400a244:	e0ffc715 	stw	r3,-228(fp)
 400a248:	10800017 	ldw	r2,0(r2)
 400a24c:	e0fff717 	ldw	r3,-36(fp)
 400a250:	10c00015 	stw	r3,0(r2)
			continue;	/* no output */
 400a254:	0002b406 	br	400ad28 <___vfiprintf_internal_r+0x1190>
			else if (flags & SHORTINT)
 400a258:	8880100c 	andi	r2,r17,64
 400a25c:	10000726 	beq	r2,zero,400a27c <___vfiprintf_internal_r+0x6e4>
				*GET_ARG (N, ap, short_ptr_t) = ret;
 400a260:	e0bfc717 	ldw	r2,-228(fp)
 400a264:	10c00104 	addi	r3,r2,4
 400a268:	e0ffc715 	stw	r3,-228(fp)
 400a26c:	10800017 	ldw	r2,0(r2)
 400a270:	e0fff717 	ldw	r3,-36(fp)
 400a274:	10c0000d 	sth	r3,0(r2)
			continue;	/* no output */
 400a278:	0002ab06 	br	400ad28 <___vfiprintf_internal_r+0x1190>
				*GET_ARG (N, ap, int_ptr_t) = ret;
 400a27c:	e0bfc717 	ldw	r2,-228(fp)
 400a280:	10c00104 	addi	r3,r2,4
 400a284:	e0ffc715 	stw	r3,-228(fp)
 400a288:	10800017 	ldw	r2,0(r2)
 400a28c:	e0fff717 	ldw	r3,-36(fp)
 400a290:	10c00015 	stw	r3,0(r2)
			continue;	/* no output */
 400a294:	0002a406 	br	400ad28 <___vfiprintf_internal_r+0x1190>
			flags |= LONGINT;
 400a298:	8c400414 	ori	r17,r17,16
			_uquad = UARG ();
 400a29c:	8880080c 	andi	r2,r17,32
 400a2a0:	10000626 	beq	r2,zero,400a2bc <___vfiprintf_internal_r+0x724>
 400a2a4:	e0bfc717 	ldw	r2,-228(fp)
 400a2a8:	10c00204 	addi	r3,r2,8
 400a2ac:	e0ffc715 	stw	r3,-228(fp)
 400a2b0:	15800017 	ldw	r22,0(r2)
 400a2b4:	15c00117 	ldw	r23,4(r2)
 400a2b8:	00001906 	br	400a320 <___vfiprintf_internal_r+0x788>
 400a2bc:	8880040c 	andi	r2,r17,16
 400a2c0:	10000726 	beq	r2,zero,400a2e0 <___vfiprintf_internal_r+0x748>
 400a2c4:	e0bfc717 	ldw	r2,-228(fp)
 400a2c8:	10c00104 	addi	r3,r2,4
 400a2cc:	e0ffc715 	stw	r3,-228(fp)
 400a2d0:	10800017 	ldw	r2,0(r2)
 400a2d4:	102d883a 	mov	r22,r2
 400a2d8:	002f883a 	mov	r23,zero
 400a2dc:	00001006 	br	400a320 <___vfiprintf_internal_r+0x788>
 400a2e0:	8880100c 	andi	r2,r17,64
 400a2e4:	10000826 	beq	r2,zero,400a308 <___vfiprintf_internal_r+0x770>
 400a2e8:	e0bfc717 	ldw	r2,-228(fp)
 400a2ec:	10c00104 	addi	r3,r2,4
 400a2f0:	e0ffc715 	stw	r3,-228(fp)
 400a2f4:	10800017 	ldw	r2,0(r2)
 400a2f8:	10bfffcc 	andi	r2,r2,65535
 400a2fc:	102d883a 	mov	r22,r2
 400a300:	002f883a 	mov	r23,zero
 400a304:	00000606 	br	400a320 <___vfiprintf_internal_r+0x788>
 400a308:	e0bfc717 	ldw	r2,-228(fp)
 400a30c:	10c00104 	addi	r3,r2,4
 400a310:	e0ffc715 	stw	r3,-228(fp)
 400a314:	10800017 	ldw	r2,0(r2)
 400a318:	102d883a 	mov	r22,r2
 400a31c:	002f883a 	mov	r23,zero
 400a320:	e5bff315 	stw	r22,-52(fp)
 400a324:	e5fff415 	stw	r23,-48(fp)
			base = OCT;
 400a328:	e03ff215 	stw	zero,-56(fp)
			goto nosign;
 400a32c:	00009d06 	br	400a5a4 <___vfiprintf_internal_r+0xa0c>
			_uquad = (uintptr_t) GET_ARG (N, ap, void_ptr_t);
 400a330:	e0bfc717 	ldw	r2,-228(fp)
 400a334:	10c00104 	addi	r3,r2,4
 400a338:	e0ffc715 	stw	r3,-228(fp)
 400a33c:	10800017 	ldw	r2,0(r2)
 400a340:	e0bff315 	stw	r2,-52(fp)
 400a344:	e03ff415 	stw	zero,-48(fp)
			base = HEX;
 400a348:	00800084 	movi	r2,2
 400a34c:	e0bff215 	stw	r2,-56(fp)
			xdigs = "0123456789abcdef";
 400a350:	00810074 	movhi	r2,1025
 400a354:	108e5004 	addi	r2,r2,14656
 400a358:	e0bfee15 	stw	r2,-72(fp)
			flags |= HEXPREFIX;
 400a35c:	8c400094 	ori	r17,r17,2
			ox[0] = '0';
 400a360:	00800c04 	movi	r2,48
 400a364:	e0bfcb85 	stb	r2,-210(fp)
			ox[1] = ch = 'x';
 400a368:	05401e04 	movi	r21,120
 400a36c:	00801e04 	movi	r2,120
 400a370:	e0bfcbc5 	stb	r2,-209(fp)
			goto nosign;
 400a374:	00008b06 	br	400a5a4 <___vfiprintf_internal_r+0xa0c>
			cp = GET_ARG (N, ap, char_ptr_t);
 400a378:	e0bfc717 	ldw	r2,-228(fp)
 400a37c:	10c00104 	addi	r3,r2,4
 400a380:	e0ffc715 	stw	r3,-228(fp)
 400a384:	14800017 	ldw	r18,0(r2)
			sign = '\0';
 400a388:	e03fe9c5 	stb	zero,-89(fp)
			if (cp == NULL) {
 400a38c:	9000081e 	bne	r18,zero,400a3b0 <___vfiprintf_internal_r+0x818>
				cp = "(null)";
 400a390:	04810074 	movhi	r18,1025
 400a394:	948e5504 	addi	r18,r18,14676
				size = ((unsigned) prec > 6U) ? 6 : prec;
 400a398:	e0bff517 	ldw	r2,-44(fp)
 400a39c:	10c001f0 	cmpltui	r3,r2,7
 400a3a0:	1800011e 	bne	r3,zero,400a3a8 <___vfiprintf_internal_r+0x810>
 400a3a4:	00800184 	movi	r2,6
 400a3a8:	e0bfef15 	stw	r2,-68(fp)
			break;
 400a3ac:	00011406 	br	400a800 <___vfiprintf_internal_r+0xc68>
			if (prec >= 0) {
 400a3b0:	e0bff517 	ldw	r2,-44(fp)
 400a3b4:	10000f16 	blt	r2,zero,400a3f4 <___vfiprintf_internal_r+0x85c>
				char *p = memchr (cp, 0, prec);
 400a3b8:	e0bff517 	ldw	r2,-44(fp)
 400a3bc:	100d883a 	mov	r6,r2
 400a3c0:	000b883a 	mov	r5,zero
 400a3c4:	9009883a 	mov	r4,r18
 400a3c8:	40073d80 	call	40073d8 <memchr>
 400a3cc:	e0bfea15 	stw	r2,-88(fp)
				if (p != NULL)
 400a3d0:	e0bfea17 	ldw	r2,-88(fp)
 400a3d4:	10000426 	beq	r2,zero,400a3e8 <___vfiprintf_internal_r+0x850>
					size = p - cp;
 400a3d8:	e0bfea17 	ldw	r2,-88(fp)
 400a3dc:	1485c83a 	sub	r2,r2,r18
 400a3e0:	e0bfef15 	stw	r2,-68(fp)
			break;
 400a3e4:	00010606 	br	400a800 <___vfiprintf_internal_r+0xc68>
					size = prec;
 400a3e8:	e0bff517 	ldw	r2,-44(fp)
 400a3ec:	e0bfef15 	stw	r2,-68(fp)
			break;
 400a3f0:	00010306 	br	400a800 <___vfiprintf_internal_r+0xc68>
				size = strlen (cp);
 400a3f4:	9009883a 	mov	r4,r18
 400a3f8:	40098340 	call	4009834 <strlen>
 400a3fc:	e0bfef15 	stw	r2,-68(fp)
			break;
 400a400:	0000ff06 	br	400a800 <___vfiprintf_internal_r+0xc68>
			flags |= LONGINT;
 400a404:	8c400414 	ori	r17,r17,16
			_uquad = UARG ();
 400a408:	8880080c 	andi	r2,r17,32
 400a40c:	10000826 	beq	r2,zero,400a430 <___vfiprintf_internal_r+0x898>
 400a410:	e0bfc717 	ldw	r2,-228(fp)
 400a414:	10c00204 	addi	r3,r2,8
 400a418:	e0ffc715 	stw	r3,-228(fp)
 400a41c:	10c00017 	ldw	r3,0(r2)
 400a420:	e0ffc315 	stw	r3,-244(fp)
 400a424:	10800117 	ldw	r2,4(r2)
 400a428:	e0bfc415 	stw	r2,-240(fp)
 400a42c:	00001906 	br	400a494 <___vfiprintf_internal_r+0x8fc>
 400a430:	8880040c 	andi	r2,r17,16
 400a434:	10000726 	beq	r2,zero,400a454 <___vfiprintf_internal_r+0x8bc>
 400a438:	e0bfc717 	ldw	r2,-228(fp)
 400a43c:	10c00104 	addi	r3,r2,4
 400a440:	e0ffc715 	stw	r3,-228(fp)
 400a444:	10800017 	ldw	r2,0(r2)
 400a448:	e0bfc315 	stw	r2,-244(fp)
 400a44c:	e03fc415 	stw	zero,-240(fp)
 400a450:	00001006 	br	400a494 <___vfiprintf_internal_r+0x8fc>
 400a454:	8880100c 	andi	r2,r17,64
 400a458:	10000826 	beq	r2,zero,400a47c <___vfiprintf_internal_r+0x8e4>
 400a45c:	e0bfc717 	ldw	r2,-228(fp)
 400a460:	10c00104 	addi	r3,r2,4
 400a464:	e0ffc715 	stw	r3,-228(fp)
 400a468:	10800017 	ldw	r2,0(r2)
 400a46c:	10bfffcc 	andi	r2,r2,65535
 400a470:	e0bfc315 	stw	r2,-244(fp)
 400a474:	e03fc415 	stw	zero,-240(fp)
 400a478:	00000606 	br	400a494 <___vfiprintf_internal_r+0x8fc>
 400a47c:	e0bfc717 	ldw	r2,-228(fp)
 400a480:	10c00104 	addi	r3,r2,4
 400a484:	e0ffc715 	stw	r3,-228(fp)
 400a488:	10800017 	ldw	r2,0(r2)
 400a48c:	e0bfc315 	stw	r2,-244(fp)
 400a490:	e03fc415 	stw	zero,-240(fp)
 400a494:	e0bfc317 	ldw	r2,-244(fp)
 400a498:	e0bff315 	stw	r2,-52(fp)
 400a49c:	e0bfc417 	ldw	r2,-240(fp)
 400a4a0:	e0bff415 	stw	r2,-48(fp)
			base = DEC;
 400a4a4:	00800044 	movi	r2,1
 400a4a8:	e0bff215 	stw	r2,-56(fp)
			goto nosign;
 400a4ac:	00003d06 	br	400a5a4 <___vfiprintf_internal_r+0xa0c>
			xdigs = "0123456789ABCDEF";
 400a4b0:	00810074 	movhi	r2,1025
 400a4b4:	108e5704 	addi	r2,r2,14684
 400a4b8:	e0bfee15 	stw	r2,-72(fp)
			goto hex;
 400a4bc:	00000306 	br	400a4cc <___vfiprintf_internal_r+0x934>
			xdigs = "0123456789abcdef";
 400a4c0:	00810074 	movhi	r2,1025
 400a4c4:	108e5004 	addi	r2,r2,14656
 400a4c8:	e0bfee15 	stw	r2,-72(fp)
hex:			_uquad = UARG ();
 400a4cc:	8880080c 	andi	r2,r17,32
 400a4d0:	10000826 	beq	r2,zero,400a4f4 <___vfiprintf_internal_r+0x95c>
 400a4d4:	e0bfc717 	ldw	r2,-228(fp)
 400a4d8:	10c00204 	addi	r3,r2,8
 400a4dc:	e0ffc715 	stw	r3,-228(fp)
 400a4e0:	10c00017 	ldw	r3,0(r2)
 400a4e4:	e0ffc115 	stw	r3,-252(fp)
 400a4e8:	10800117 	ldw	r2,4(r2)
 400a4ec:	e0bfc215 	stw	r2,-248(fp)
 400a4f0:	00001906 	br	400a558 <___vfiprintf_internal_r+0x9c0>
 400a4f4:	8880040c 	andi	r2,r17,16
 400a4f8:	10000726 	beq	r2,zero,400a518 <___vfiprintf_internal_r+0x980>
 400a4fc:	e0bfc717 	ldw	r2,-228(fp)
 400a500:	10c00104 	addi	r3,r2,4
 400a504:	e0ffc715 	stw	r3,-228(fp)
 400a508:	10800017 	ldw	r2,0(r2)
 400a50c:	e0bfc115 	stw	r2,-252(fp)
 400a510:	e03fc215 	stw	zero,-248(fp)
 400a514:	00001006 	br	400a558 <___vfiprintf_internal_r+0x9c0>
 400a518:	8880100c 	andi	r2,r17,64
 400a51c:	10000826 	beq	r2,zero,400a540 <___vfiprintf_internal_r+0x9a8>
 400a520:	e0bfc717 	ldw	r2,-228(fp)
 400a524:	10c00104 	addi	r3,r2,4
 400a528:	e0ffc715 	stw	r3,-228(fp)
 400a52c:	10800017 	ldw	r2,0(r2)
 400a530:	10bfffcc 	andi	r2,r2,65535
 400a534:	e0bfc115 	stw	r2,-252(fp)
 400a538:	e03fc215 	stw	zero,-248(fp)
 400a53c:	00000606 	br	400a558 <___vfiprintf_internal_r+0x9c0>
 400a540:	e0bfc717 	ldw	r2,-228(fp)
 400a544:	10c00104 	addi	r3,r2,4
 400a548:	e0ffc715 	stw	r3,-228(fp)
 400a54c:	10800017 	ldw	r2,0(r2)
 400a550:	e0bfc115 	stw	r2,-252(fp)
 400a554:	e03fc215 	stw	zero,-248(fp)
 400a558:	e0bfc117 	ldw	r2,-252(fp)
 400a55c:	e0bff315 	stw	r2,-52(fp)
 400a560:	e0bfc217 	ldw	r2,-248(fp)
 400a564:	e0bff415 	stw	r2,-48(fp)
			base = HEX;
 400a568:	00800084 	movi	r2,2
 400a56c:	e0bff215 	stw	r2,-56(fp)
			if (flags & ALT && _uquad != 0) {
 400a570:	8880004c 	andi	r2,r17,1
 400a574:	10000a26 	beq	r2,zero,400a5a0 <___vfiprintf_internal_r+0xa08>
 400a578:	e0bff317 	ldw	r2,-52(fp)
 400a57c:	e0fff417 	ldw	r3,-48(fp)
 400a580:	10c4b03a 	or	r2,r2,r3
 400a584:	10000726 	beq	r2,zero,400a5a4 <___vfiprintf_internal_r+0xa0c>
				ox[0] = '0';
 400a588:	00800c04 	movi	r2,48
 400a58c:	e0bfcb85 	stb	r2,-210(fp)
				ox[1] = ch;
 400a590:	a805883a 	mov	r2,r21
 400a594:	e0bfcbc5 	stb	r2,-209(fp)
				flags |= HEXPREFIX;
 400a598:	8c400094 	ori	r17,r17,2
 400a59c:	00000106 	br	400a5a4 <___vfiprintf_internal_r+0xa0c>
nosign:			sign = '\0';
 400a5a0:	0001883a 	nop
 400a5a4:	e03fe9c5 	stb	zero,-89(fp)
number:			if ((dprec = prec) >= 0)
 400a5a8:	e0bff517 	ldw	r2,-44(fp)
 400a5ac:	e0bff115 	stw	r2,-60(fp)
 400a5b0:	e0bff117 	ldw	r2,-60(fp)
 400a5b4:	10000216 	blt	r2,zero,400a5c0 <___vfiprintf_internal_r+0xa28>
				flags &= ~ZEROPAD;
 400a5b8:	00bfdfc4 	movi	r2,-129
 400a5bc:	88a2703a 	and	r17,r17,r2
			cp = buf + BUF;
 400a5c0:	e4bfcc04 	addi	r18,fp,-208
 400a5c4:	94800a04 	addi	r18,r18,40
			if (_uquad != 0 || prec != 0) {
 400a5c8:	e0bff317 	ldw	r2,-52(fp)
 400a5cc:	e0fff417 	ldw	r3,-48(fp)
 400a5d0:	10c4b03a 	or	r2,r2,r3
 400a5d4:	1000021e 	bne	r2,zero,400a5e0 <___vfiprintf_internal_r+0xa48>
 400a5d8:	e0bff517 	ldw	r2,-44(fp)
 400a5dc:	10007426 	beq	r2,zero,400a7b0 <___vfiprintf_internal_r+0xc18>
 400a5e0:	e0bff217 	ldw	r2,-56(fp)
 400a5e4:	108000a0 	cmpeqi	r2,r2,2
 400a5e8:	1000531e 	bne	r2,zero,400a738 <___vfiprintf_internal_r+0xba0>
 400a5ec:	e0bff217 	ldw	r2,-56(fp)
 400a5f0:	108000e8 	cmpgeui	r2,r2,3
 400a5f4:	1000651e 	bne	r2,zero,400a78c <___vfiprintf_internal_r+0xbf4>
 400a5f8:	e0bff217 	ldw	r2,-56(fp)
 400a5fc:	10000526 	beq	r2,zero,400a614 <___vfiprintf_internal_r+0xa7c>
 400a600:	e0bff217 	ldw	r2,-56(fp)
 400a604:	10800060 	cmpeqi	r2,r2,1
 400a608:	1000201e 	bne	r2,zero,400a68c <___vfiprintf_internal_r+0xaf4>
 400a60c:	00005f06 	br	400a78c <___vfiprintf_internal_r+0xbf4>
				case OCT:
 400a610:	0001883a 	nop
						*--cp = to_char (_uquad & 7);
 400a614:	e0bff317 	ldw	r2,-52(fp)
 400a618:	108001cc 	andi	r2,r2,7
 400a61c:	10800c04 	addi	r2,r2,48
 400a620:	94bfffc4 	addi	r18,r18,-1
 400a624:	90800005 	stb	r2,0(r18)
						_uquad >>= 3;
 400a628:	e0bff417 	ldw	r2,-48(fp)
 400a62c:	1004977a 	slli	r2,r2,29
 400a630:	e0fff317 	ldw	r3,-52(fp)
 400a634:	1806d0fa 	srli	r3,r3,3
 400a638:	1884b03a 	or	r2,r3,r2
 400a63c:	e0bff315 	stw	r2,-52(fp)
 400a640:	e0bff417 	ldw	r2,-48(fp)
 400a644:	1004d0fa 	srli	r2,r2,3
 400a648:	e0bff415 	stw	r2,-48(fp)
					} while (_uquad);
 400a64c:	e0bff317 	ldw	r2,-52(fp)
 400a650:	e0fff417 	ldw	r3,-48(fp)
 400a654:	10c4b03a 	or	r2,r2,r3
 400a658:	103fed1e 	bne	r2,zero,400a610 <___vfiprintf_internal_r+0xa78>
					if (flags & ALT && *cp != '0')
 400a65c:	8880004c 	andi	r2,r17,1
 400a660:	10005126 	beq	r2,zero,400a7a8 <___vfiprintf_internal_r+0xc10>
 400a664:	90800003 	ldbu	r2,0(r18)
 400a668:	10803fcc 	andi	r2,r2,255
 400a66c:	1080201c 	xori	r2,r2,128
 400a670:	10bfe004 	addi	r2,r2,-128
 400a674:	10800c20 	cmpeqi	r2,r2,48
 400a678:	10004b1e 	bne	r2,zero,400a7a8 <___vfiprintf_internal_r+0xc10>
						*--cp = '0';
 400a67c:	94bfffc4 	addi	r18,r18,-1
 400a680:	00800c04 	movi	r2,48
 400a684:	90800005 	stb	r2,0(r18)
					break;
 400a688:	00004706 	br	400a7a8 <___vfiprintf_internal_r+0xc10>
					if (_uquad < 10) {
 400a68c:	e0bff417 	ldw	r2,-48(fp)
 400a690:	10000a1e 	bne	r2,zero,400a6bc <___vfiprintf_internal_r+0xb24>
 400a694:	e0bff417 	ldw	r2,-48(fp)
 400a698:	1000031e 	bne	r2,zero,400a6a8 <___vfiprintf_internal_r+0xb10>
 400a69c:	e0bff317 	ldw	r2,-52(fp)
 400a6a0:	108002a8 	cmpgeui	r2,r2,10
 400a6a4:	1000051e 	bne	r2,zero,400a6bc <___vfiprintf_internal_r+0xb24>
						*--cp = to_char(_uquad);
 400a6a8:	e0bff317 	ldw	r2,-52(fp)
 400a6ac:	10800c04 	addi	r2,r2,48
 400a6b0:	94bfffc4 	addi	r18,r18,-1
 400a6b4:	90800005 	stb	r2,0(r18)
						break;
 400a6b8:	00003c06 	br	400a7ac <___vfiprintf_internal_r+0xc14>
					  *--cp = to_char (_uquad % 10);
 400a6bc:	e0bff317 	ldw	r2,-52(fp)
 400a6c0:	e0fff417 	ldw	r3,-48(fp)
 400a6c4:	01800284 	movi	r6,10
 400a6c8:	000f883a 	mov	r7,zero
 400a6cc:	1009883a 	mov	r4,r2
 400a6d0:	180b883a 	mov	r5,r3
 400a6d4:	400daac0 	call	400daac <__umoddi3>
 400a6d8:	1009883a 	mov	r4,r2
 400a6dc:	180b883a 	mov	r5,r3
 400a6e0:	2005883a 	mov	r2,r4
 400a6e4:	2807883a 	mov	r3,r5
 400a6e8:	10800c04 	addi	r2,r2,48
 400a6ec:	94bfffc4 	addi	r18,r18,-1
 400a6f0:	90800005 	stb	r2,0(r18)
					  _uquad /= 10;
 400a6f4:	e0bff317 	ldw	r2,-52(fp)
 400a6f8:	e0fff417 	ldw	r3,-48(fp)
 400a6fc:	01800284 	movi	r6,10
 400a700:	000f883a 	mov	r7,zero
 400a704:	1009883a 	mov	r4,r2
 400a708:	180b883a 	mov	r5,r3
 400a70c:	400d51c0 	call	400d51c <__udivdi3>
 400a710:	1009883a 	mov	r4,r2
 400a714:	180b883a 	mov	r5,r3
 400a718:	e13ff315 	stw	r4,-52(fp)
 400a71c:	e17ff415 	stw	r5,-48(fp)
					} while (_uquad != 0);
 400a720:	e0bff317 	ldw	r2,-52(fp)
 400a724:	e0fff417 	ldw	r3,-48(fp)
 400a728:	10c4b03a 	or	r2,r2,r3
 400a72c:	103fe31e 	bne	r2,zero,400a6bc <___vfiprintf_internal_r+0xb24>
					break;
 400a730:	00001e06 	br	400a7ac <___vfiprintf_internal_r+0xc14>
				case HEX:
 400a734:	0001883a 	nop
						*--cp = xdigs[_uquad & 15];
 400a738:	e0bff317 	ldw	r2,-52(fp)
 400a73c:	108003cc 	andi	r2,r2,15
 400a740:	e0ffee17 	ldw	r3,-72(fp)
 400a744:	1885883a 	add	r2,r3,r2
 400a748:	94bfffc4 	addi	r18,r18,-1
 400a74c:	10800003 	ldbu	r2,0(r2)
 400a750:	90800005 	stb	r2,0(r18)
						_uquad >>= 4;
 400a754:	e0bff417 	ldw	r2,-48(fp)
 400a758:	1004973a 	slli	r2,r2,28
 400a75c:	e0fff317 	ldw	r3,-52(fp)
 400a760:	1806d13a 	srli	r3,r3,4
 400a764:	1884b03a 	or	r2,r3,r2
 400a768:	e0bff315 	stw	r2,-52(fp)
 400a76c:	e0bff417 	ldw	r2,-48(fp)
 400a770:	1004d13a 	srli	r2,r2,4
 400a774:	e0bff415 	stw	r2,-48(fp)
					} while (_uquad);
 400a778:	e0bff317 	ldw	r2,-52(fp)
 400a77c:	e0fff417 	ldw	r3,-48(fp)
 400a780:	10c4b03a 	or	r2,r2,r3
 400a784:	103feb1e 	bne	r2,zero,400a734 <___vfiprintf_internal_r+0xb9c>
					break;
 400a788:	00000806 	br	400a7ac <___vfiprintf_internal_r+0xc14>
					cp = "bug in vfprintf: bad base";
 400a78c:	04810074 	movhi	r18,1025
 400a790:	948e5c04 	addi	r18,r18,14704
					size = strlen (cp);
 400a794:	9009883a 	mov	r4,r18
 400a798:	40098340 	call	4009834 <strlen>
 400a79c:	e0bfef15 	stw	r2,-68(fp)
					goto skipsize;
 400a7a0:	0001883a 	nop
			break;
 400a7a4:	00001606 	br	400a800 <___vfiprintf_internal_r+0xc68>
					break;
 400a7a8:	0001883a 	nop
				switch (base) {
 400a7ac:	00000706 	br	400a7cc <___vfiprintf_internal_r+0xc34>
                       else if (base == OCT && (flags & ALT))
 400a7b0:	e0bff217 	ldw	r2,-56(fp)
 400a7b4:	1000051e 	bne	r2,zero,400a7cc <___vfiprintf_internal_r+0xc34>
 400a7b8:	8880004c 	andi	r2,r17,1
 400a7bc:	10000326 	beq	r2,zero,400a7cc <___vfiprintf_internal_r+0xc34>
                         *--cp = '0';
 400a7c0:	94bfffc4 	addi	r18,r18,-1
 400a7c4:	00800c04 	movi	r2,48
 400a7c8:	90800005 	stb	r2,0(r18)
			size = buf + BUF - cp;
 400a7cc:	e0bfcc04 	addi	r2,fp,-208
 400a7d0:	10800a04 	addi	r2,r2,40
 400a7d4:	1485c83a 	sub	r2,r2,r18
 400a7d8:	e0bfef15 	stw	r2,-68(fp)
			break;
 400a7dc:	00000806 	br	400a800 <___vfiprintf_internal_r+0xc68>
			if (ch == '\0')
 400a7e0:	a8015426 	beq	r21,zero,400ad34 <___vfiprintf_internal_r+0x119c>
			cp = buf;
 400a7e4:	e4bfcc04 	addi	r18,fp,-208
			*cp = ch;
 400a7e8:	a805883a 	mov	r2,r21
 400a7ec:	90800005 	stb	r2,0(r18)
			size = 1;
 400a7f0:	00800044 	movi	r2,1
 400a7f4:	e0bfef15 	stw	r2,-68(fp)
			sign = '\0';
 400a7f8:	e03fe9c5 	stb	zero,-89(fp)
			break;
 400a7fc:	0001883a 	nop
		realsz = dprec > size ? dprec : size;
 400a800:	e0fff117 	ldw	r3,-60(fp)
 400a804:	e0bfef17 	ldw	r2,-68(fp)
 400a808:	10c0010e 	bge	r2,r3,400a810 <___vfiprintf_internal_r+0xc78>
 400a80c:	1805883a 	mov	r2,r3
 400a810:	e0bff015 	stw	r2,-64(fp)
		if (sign)
 400a814:	e0bfe9c3 	ldbu	r2,-89(fp)
 400a818:	10803fcc 	andi	r2,r2,255
 400a81c:	1080201c 	xori	r2,r2,128
 400a820:	10bfe004 	addi	r2,r2,-128
 400a824:	10000326 	beq	r2,zero,400a834 <___vfiprintf_internal_r+0xc9c>
			realsz++;
 400a828:	e0bff017 	ldw	r2,-64(fp)
 400a82c:	10800044 	addi	r2,r2,1
 400a830:	e0bff015 	stw	r2,-64(fp)
		if (flags & HEXPREFIX)
 400a834:	8880008c 	andi	r2,r17,2
 400a838:	10000326 	beq	r2,zero,400a848 <___vfiprintf_internal_r+0xcb0>
			realsz+= 2;
 400a83c:	e0bff017 	ldw	r2,-64(fp)
 400a840:	10800084 	addi	r2,r2,2
 400a844:	e0bff015 	stw	r2,-64(fp)
		if ((flags & (LADJUST|ZEROPAD)) == 0)
 400a848:	8880210c 	andi	r2,r17,132
 400a84c:	1000351e 	bne	r2,zero,400a924 <___vfiprintf_internal_r+0xd8c>
			PAD (width - realsz, blanks);
 400a850:	e0fff617 	ldw	r3,-40(fp)
 400a854:	e0bff017 	ldw	r2,-64(fp)
 400a858:	18a7c83a 	sub	r19,r3,r2
 400a85c:	04c0310e 	bge	zero,r19,400a924 <___vfiprintf_internal_r+0xd8c>
 400a860:	00001706 	br	400a8c0 <___vfiprintf_internal_r+0xd28>
 400a864:	00810074 	movhi	r2,1025
 400a868:	108e6304 	addi	r2,r2,14732
 400a86c:	80800015 	stw	r2,0(r16)
 400a870:	00800404 	movi	r2,16
 400a874:	80800115 	stw	r2,4(r16)
 400a878:	e0bfe817 	ldw	r2,-96(fp)
 400a87c:	10800404 	addi	r2,r2,16
 400a880:	e0bfe815 	stw	r2,-96(fp)
 400a884:	84000204 	addi	r16,r16,8
 400a888:	e0bfe717 	ldw	r2,-100(fp)
 400a88c:	10800044 	addi	r2,r2,1
 400a890:	e0bfe715 	stw	r2,-100(fp)
 400a894:	e0bfe717 	ldw	r2,-100(fp)
 400a898:	10800210 	cmplti	r2,r2,8
 400a89c:	1000071e 	bne	r2,zero,400a8bc <___vfiprintf_internal_r+0xd24>
 400a8a0:	e0bfe604 	addi	r2,fp,-104
 400a8a4:	100d883a 	mov	r6,r2
 400a8a8:	e17fc917 	ldw	r5,-220(fp)
 400a8ac:	e13fca17 	ldw	r4,-216(fp)
 400a8b0:	40099280 	call	4009928 <__sprint_r>
 400a8b4:	10012d1e 	bne	r2,zero,400ad6c <___vfiprintf_internal_r+0x11d4>
 400a8b8:	e43fd604 	addi	r16,fp,-168
 400a8bc:	9cfffc04 	addi	r19,r19,-16
 400a8c0:	98800448 	cmpgei	r2,r19,17
 400a8c4:	103fe71e 	bne	r2,zero,400a864 <___vfiprintf_internal_r+0xccc>
 400a8c8:	00810074 	movhi	r2,1025
 400a8cc:	108e6304 	addi	r2,r2,14732
 400a8d0:	80800015 	stw	r2,0(r16)
 400a8d4:	9805883a 	mov	r2,r19
 400a8d8:	80800115 	stw	r2,4(r16)
 400a8dc:	e0bfe817 	ldw	r2,-96(fp)
 400a8e0:	9807883a 	mov	r3,r19
 400a8e4:	10c5883a 	add	r2,r2,r3
 400a8e8:	e0bfe815 	stw	r2,-96(fp)
 400a8ec:	84000204 	addi	r16,r16,8
 400a8f0:	e0bfe717 	ldw	r2,-100(fp)
 400a8f4:	10800044 	addi	r2,r2,1
 400a8f8:	e0bfe715 	stw	r2,-100(fp)
 400a8fc:	e0bfe717 	ldw	r2,-100(fp)
 400a900:	10800210 	cmplti	r2,r2,8
 400a904:	1000071e 	bne	r2,zero,400a924 <___vfiprintf_internal_r+0xd8c>
 400a908:	e0bfe604 	addi	r2,fp,-104
 400a90c:	100d883a 	mov	r6,r2
 400a910:	e17fc917 	ldw	r5,-220(fp)
 400a914:	e13fca17 	ldw	r4,-216(fp)
 400a918:	40099280 	call	4009928 <__sprint_r>
 400a91c:	1001151e 	bne	r2,zero,400ad74 <___vfiprintf_internal_r+0x11dc>
 400a920:	e43fd604 	addi	r16,fp,-168
		if (sign)
 400a924:	e0bfe9c3 	ldbu	r2,-89(fp)
 400a928:	10803fcc 	andi	r2,r2,255
 400a92c:	1080201c 	xori	r2,r2,128
 400a930:	10bfe004 	addi	r2,r2,-128
 400a934:	10001526 	beq	r2,zero,400a98c <___vfiprintf_internal_r+0xdf4>
			PRINT (&sign, 1);
 400a938:	e0bfe9c4 	addi	r2,fp,-89
 400a93c:	80800015 	stw	r2,0(r16)
 400a940:	00800044 	movi	r2,1
 400a944:	80800115 	stw	r2,4(r16)
 400a948:	e0bfe817 	ldw	r2,-96(fp)
 400a94c:	10800044 	addi	r2,r2,1
 400a950:	e0bfe815 	stw	r2,-96(fp)
 400a954:	84000204 	addi	r16,r16,8
 400a958:	e0bfe717 	ldw	r2,-100(fp)
 400a95c:	10800044 	addi	r2,r2,1
 400a960:	e0bfe715 	stw	r2,-100(fp)
 400a964:	e0bfe717 	ldw	r2,-100(fp)
 400a968:	10800210 	cmplti	r2,r2,8
 400a96c:	1000071e 	bne	r2,zero,400a98c <___vfiprintf_internal_r+0xdf4>
 400a970:	e0bfe604 	addi	r2,fp,-104
 400a974:	100d883a 	mov	r6,r2
 400a978:	e17fc917 	ldw	r5,-220(fp)
 400a97c:	e13fca17 	ldw	r4,-216(fp)
 400a980:	40099280 	call	4009928 <__sprint_r>
 400a984:	1000fd1e 	bne	r2,zero,400ad7c <___vfiprintf_internal_r+0x11e4>
 400a988:	e43fd604 	addi	r16,fp,-168
		if (flags & HEXPREFIX)
 400a98c:	8880008c 	andi	r2,r17,2
 400a990:	10001526 	beq	r2,zero,400a9e8 <___vfiprintf_internal_r+0xe50>
			PRINT (ox, 2);
 400a994:	e0bfcb84 	addi	r2,fp,-210
 400a998:	80800015 	stw	r2,0(r16)
 400a99c:	00800084 	movi	r2,2
 400a9a0:	80800115 	stw	r2,4(r16)
 400a9a4:	e0bfe817 	ldw	r2,-96(fp)
 400a9a8:	10800084 	addi	r2,r2,2
 400a9ac:	e0bfe815 	stw	r2,-96(fp)
 400a9b0:	84000204 	addi	r16,r16,8
 400a9b4:	e0bfe717 	ldw	r2,-100(fp)
 400a9b8:	10800044 	addi	r2,r2,1
 400a9bc:	e0bfe715 	stw	r2,-100(fp)
 400a9c0:	e0bfe717 	ldw	r2,-100(fp)
 400a9c4:	10800210 	cmplti	r2,r2,8
 400a9c8:	1000071e 	bne	r2,zero,400a9e8 <___vfiprintf_internal_r+0xe50>
 400a9cc:	e0bfe604 	addi	r2,fp,-104
 400a9d0:	100d883a 	mov	r6,r2
 400a9d4:	e17fc917 	ldw	r5,-220(fp)
 400a9d8:	e13fca17 	ldw	r4,-216(fp)
 400a9dc:	40099280 	call	4009928 <__sprint_r>
 400a9e0:	1000e81e 	bne	r2,zero,400ad84 <___vfiprintf_internal_r+0x11ec>
 400a9e4:	e43fd604 	addi	r16,fp,-168
		if ((flags & (LADJUST|ZEROPAD)) == ZEROPAD)
 400a9e8:	8880210c 	andi	r2,r17,132
 400a9ec:	10802018 	cmpnei	r2,r2,128
 400a9f0:	1000351e 	bne	r2,zero,400aac8 <___vfiprintf_internal_r+0xf30>
			PAD (width - realsz, zeroes);
 400a9f4:	e0fff617 	ldw	r3,-40(fp)
 400a9f8:	e0bff017 	ldw	r2,-64(fp)
 400a9fc:	18a7c83a 	sub	r19,r3,r2
 400aa00:	04c0310e 	bge	zero,r19,400aac8 <___vfiprintf_internal_r+0xf30>
 400aa04:	00001706 	br	400aa64 <___vfiprintf_internal_r+0xecc>
 400aa08:	00810074 	movhi	r2,1025
 400aa0c:	108e6704 	addi	r2,r2,14748
 400aa10:	80800015 	stw	r2,0(r16)
 400aa14:	00800404 	movi	r2,16
 400aa18:	80800115 	stw	r2,4(r16)
 400aa1c:	e0bfe817 	ldw	r2,-96(fp)
 400aa20:	10800404 	addi	r2,r2,16
 400aa24:	e0bfe815 	stw	r2,-96(fp)
 400aa28:	84000204 	addi	r16,r16,8
 400aa2c:	e0bfe717 	ldw	r2,-100(fp)
 400aa30:	10800044 	addi	r2,r2,1
 400aa34:	e0bfe715 	stw	r2,-100(fp)
 400aa38:	e0bfe717 	ldw	r2,-100(fp)
 400aa3c:	10800210 	cmplti	r2,r2,8
 400aa40:	1000071e 	bne	r2,zero,400aa60 <___vfiprintf_internal_r+0xec8>
 400aa44:	e0bfe604 	addi	r2,fp,-104
 400aa48:	100d883a 	mov	r6,r2
 400aa4c:	e17fc917 	ldw	r5,-220(fp)
 400aa50:	e13fca17 	ldw	r4,-216(fp)
 400aa54:	40099280 	call	4009928 <__sprint_r>
 400aa58:	1000cc1e 	bne	r2,zero,400ad8c <___vfiprintf_internal_r+0x11f4>
 400aa5c:	e43fd604 	addi	r16,fp,-168
 400aa60:	9cfffc04 	addi	r19,r19,-16
 400aa64:	98800448 	cmpgei	r2,r19,17
 400aa68:	103fe71e 	bne	r2,zero,400aa08 <___vfiprintf_internal_r+0xe70>
 400aa6c:	00810074 	movhi	r2,1025
 400aa70:	108e6704 	addi	r2,r2,14748
 400aa74:	80800015 	stw	r2,0(r16)
 400aa78:	9805883a 	mov	r2,r19
 400aa7c:	80800115 	stw	r2,4(r16)
 400aa80:	e0bfe817 	ldw	r2,-96(fp)
 400aa84:	9807883a 	mov	r3,r19
 400aa88:	10c5883a 	add	r2,r2,r3
 400aa8c:	e0bfe815 	stw	r2,-96(fp)
 400aa90:	84000204 	addi	r16,r16,8
 400aa94:	e0bfe717 	ldw	r2,-100(fp)
 400aa98:	10800044 	addi	r2,r2,1
 400aa9c:	e0bfe715 	stw	r2,-100(fp)
 400aaa0:	e0bfe717 	ldw	r2,-100(fp)
 400aaa4:	10800210 	cmplti	r2,r2,8
 400aaa8:	1000071e 	bne	r2,zero,400aac8 <___vfiprintf_internal_r+0xf30>
 400aaac:	e0bfe604 	addi	r2,fp,-104
 400aab0:	100d883a 	mov	r6,r2
 400aab4:	e17fc917 	ldw	r5,-220(fp)
 400aab8:	e13fca17 	ldw	r4,-216(fp)
 400aabc:	40099280 	call	4009928 <__sprint_r>
 400aac0:	1000b41e 	bne	r2,zero,400ad94 <___vfiprintf_internal_r+0x11fc>
 400aac4:	e43fd604 	addi	r16,fp,-168
		PAD (dprec - size, zeroes);
 400aac8:	e0fff117 	ldw	r3,-60(fp)
 400aacc:	e0bfef17 	ldw	r2,-68(fp)
 400aad0:	18a7c83a 	sub	r19,r3,r2
 400aad4:	04c0310e 	bge	zero,r19,400ab9c <___vfiprintf_internal_r+0x1004>
 400aad8:	00001706 	br	400ab38 <___vfiprintf_internal_r+0xfa0>
 400aadc:	00810074 	movhi	r2,1025
 400aae0:	108e6704 	addi	r2,r2,14748
 400aae4:	80800015 	stw	r2,0(r16)
 400aae8:	00800404 	movi	r2,16
 400aaec:	80800115 	stw	r2,4(r16)
 400aaf0:	e0bfe817 	ldw	r2,-96(fp)
 400aaf4:	10800404 	addi	r2,r2,16
 400aaf8:	e0bfe815 	stw	r2,-96(fp)
 400aafc:	84000204 	addi	r16,r16,8
 400ab00:	e0bfe717 	ldw	r2,-100(fp)
 400ab04:	10800044 	addi	r2,r2,1
 400ab08:	e0bfe715 	stw	r2,-100(fp)
 400ab0c:	e0bfe717 	ldw	r2,-100(fp)
 400ab10:	10800210 	cmplti	r2,r2,8
 400ab14:	1000071e 	bne	r2,zero,400ab34 <___vfiprintf_internal_r+0xf9c>
 400ab18:	e0bfe604 	addi	r2,fp,-104
 400ab1c:	100d883a 	mov	r6,r2
 400ab20:	e17fc917 	ldw	r5,-220(fp)
 400ab24:	e13fca17 	ldw	r4,-216(fp)
 400ab28:	40099280 	call	4009928 <__sprint_r>
 400ab2c:	10009b1e 	bne	r2,zero,400ad9c <___vfiprintf_internal_r+0x1204>
 400ab30:	e43fd604 	addi	r16,fp,-168
 400ab34:	9cfffc04 	addi	r19,r19,-16
 400ab38:	98800448 	cmpgei	r2,r19,17
 400ab3c:	103fe71e 	bne	r2,zero,400aadc <___vfiprintf_internal_r+0xf44>
 400ab40:	00810074 	movhi	r2,1025
 400ab44:	108e6704 	addi	r2,r2,14748
 400ab48:	80800015 	stw	r2,0(r16)
 400ab4c:	9805883a 	mov	r2,r19
 400ab50:	80800115 	stw	r2,4(r16)
 400ab54:	e0bfe817 	ldw	r2,-96(fp)
 400ab58:	9807883a 	mov	r3,r19
 400ab5c:	10c5883a 	add	r2,r2,r3
 400ab60:	e0bfe815 	stw	r2,-96(fp)
 400ab64:	84000204 	addi	r16,r16,8
 400ab68:	e0bfe717 	ldw	r2,-100(fp)
 400ab6c:	10800044 	addi	r2,r2,1
 400ab70:	e0bfe715 	stw	r2,-100(fp)
 400ab74:	e0bfe717 	ldw	r2,-100(fp)
 400ab78:	10800210 	cmplti	r2,r2,8
 400ab7c:	1000071e 	bne	r2,zero,400ab9c <___vfiprintf_internal_r+0x1004>
 400ab80:	e0bfe604 	addi	r2,fp,-104
 400ab84:	100d883a 	mov	r6,r2
 400ab88:	e17fc917 	ldw	r5,-220(fp)
 400ab8c:	e13fca17 	ldw	r4,-216(fp)
 400ab90:	40099280 	call	4009928 <__sprint_r>
 400ab94:	1000831e 	bne	r2,zero,400ada4 <___vfiprintf_internal_r+0x120c>
 400ab98:	e43fd604 	addi	r16,fp,-168
		PRINT (cp, size);
 400ab9c:	84800015 	stw	r18,0(r16)
 400aba0:	e0bfef17 	ldw	r2,-68(fp)
 400aba4:	80800115 	stw	r2,4(r16)
 400aba8:	e0ffe817 	ldw	r3,-96(fp)
 400abac:	e0bfef17 	ldw	r2,-68(fp)
 400abb0:	1885883a 	add	r2,r3,r2
 400abb4:	e0bfe815 	stw	r2,-96(fp)
 400abb8:	84000204 	addi	r16,r16,8
 400abbc:	e0bfe717 	ldw	r2,-100(fp)
 400abc0:	10800044 	addi	r2,r2,1
 400abc4:	e0bfe715 	stw	r2,-100(fp)
 400abc8:	e0bfe717 	ldw	r2,-100(fp)
 400abcc:	10800210 	cmplti	r2,r2,8
 400abd0:	1000071e 	bne	r2,zero,400abf0 <___vfiprintf_internal_r+0x1058>
 400abd4:	e0bfe604 	addi	r2,fp,-104
 400abd8:	100d883a 	mov	r6,r2
 400abdc:	e17fc917 	ldw	r5,-220(fp)
 400abe0:	e13fca17 	ldw	r4,-216(fp)
 400abe4:	40099280 	call	4009928 <__sprint_r>
 400abe8:	1000701e 	bne	r2,zero,400adac <___vfiprintf_internal_r+0x1214>
 400abec:	e43fd604 	addi	r16,fp,-168
		if (flags & LADJUST)
 400abf0:	8880010c 	andi	r2,r17,4
 400abf4:	10003526 	beq	r2,zero,400accc <___vfiprintf_internal_r+0x1134>
			PAD (width - realsz, blanks);
 400abf8:	e0fff617 	ldw	r3,-40(fp)
 400abfc:	e0bff017 	ldw	r2,-64(fp)
 400ac00:	18a7c83a 	sub	r19,r3,r2
 400ac04:	04c0310e 	bge	zero,r19,400accc <___vfiprintf_internal_r+0x1134>
 400ac08:	00001706 	br	400ac68 <___vfiprintf_internal_r+0x10d0>
 400ac0c:	00810074 	movhi	r2,1025
 400ac10:	108e6304 	addi	r2,r2,14732
 400ac14:	80800015 	stw	r2,0(r16)
 400ac18:	00800404 	movi	r2,16
 400ac1c:	80800115 	stw	r2,4(r16)
 400ac20:	e0bfe817 	ldw	r2,-96(fp)
 400ac24:	10800404 	addi	r2,r2,16
 400ac28:	e0bfe815 	stw	r2,-96(fp)
 400ac2c:	84000204 	addi	r16,r16,8
 400ac30:	e0bfe717 	ldw	r2,-100(fp)
 400ac34:	10800044 	addi	r2,r2,1
 400ac38:	e0bfe715 	stw	r2,-100(fp)
 400ac3c:	e0bfe717 	ldw	r2,-100(fp)
 400ac40:	10800210 	cmplti	r2,r2,8
 400ac44:	1000071e 	bne	r2,zero,400ac64 <___vfiprintf_internal_r+0x10cc>
 400ac48:	e0bfe604 	addi	r2,fp,-104
 400ac4c:	100d883a 	mov	r6,r2
 400ac50:	e17fc917 	ldw	r5,-220(fp)
 400ac54:	e13fca17 	ldw	r4,-216(fp)
 400ac58:	40099280 	call	4009928 <__sprint_r>
 400ac5c:	1000551e 	bne	r2,zero,400adb4 <___vfiprintf_internal_r+0x121c>
 400ac60:	e43fd604 	addi	r16,fp,-168
 400ac64:	9cfffc04 	addi	r19,r19,-16
 400ac68:	98800448 	cmpgei	r2,r19,17
 400ac6c:	103fe71e 	bne	r2,zero,400ac0c <___vfiprintf_internal_r+0x1074>
 400ac70:	00810074 	movhi	r2,1025
 400ac74:	108e6304 	addi	r2,r2,14732
 400ac78:	80800015 	stw	r2,0(r16)
 400ac7c:	9805883a 	mov	r2,r19
 400ac80:	80800115 	stw	r2,4(r16)
 400ac84:	e0bfe817 	ldw	r2,-96(fp)
 400ac88:	9807883a 	mov	r3,r19
 400ac8c:	10c5883a 	add	r2,r2,r3
 400ac90:	e0bfe815 	stw	r2,-96(fp)
 400ac94:	84000204 	addi	r16,r16,8
 400ac98:	e0bfe717 	ldw	r2,-100(fp)
 400ac9c:	10800044 	addi	r2,r2,1
 400aca0:	e0bfe715 	stw	r2,-100(fp)
 400aca4:	e0bfe717 	ldw	r2,-100(fp)
 400aca8:	10800210 	cmplti	r2,r2,8
 400acac:	1000071e 	bne	r2,zero,400accc <___vfiprintf_internal_r+0x1134>
 400acb0:	e0bfe604 	addi	r2,fp,-104
 400acb4:	100d883a 	mov	r6,r2
 400acb8:	e17fc917 	ldw	r5,-220(fp)
 400acbc:	e13fca17 	ldw	r4,-216(fp)
 400acc0:	40099280 	call	4009928 <__sprint_r>
 400acc4:	10003d1e 	bne	r2,zero,400adbc <___vfiprintf_internal_r+0x1224>
 400acc8:	e43fd604 	addi	r16,fp,-168
		ret += width > realsz ? width : realsz;
 400accc:	e0fff617 	ldw	r3,-40(fp)
 400acd0:	e0bff017 	ldw	r2,-64(fp)
 400acd4:	10c0010e 	bge	r2,r3,400acdc <___vfiprintf_internal_r+0x1144>
 400acd8:	1805883a 	mov	r2,r3
 400acdc:	e0fff717 	ldw	r3,-36(fp)
 400ace0:	1885883a 	add	r2,r3,r2
 400ace4:	e0bff715 	stw	r2,-36(fp)
		FLUSH ();	/* copy out the I/O vectors */
 400ace8:	e0bfe817 	ldw	r2,-96(fp)
 400acec:	10000626 	beq	r2,zero,400ad08 <___vfiprintf_internal_r+0x1170>
 400acf0:	e0bfe604 	addi	r2,fp,-104
 400acf4:	100d883a 	mov	r6,r2
 400acf8:	e17fc917 	ldw	r5,-220(fp)
 400acfc:	e13fca17 	ldw	r4,-216(fp)
 400ad00:	40099280 	call	4009928 <__sprint_r>
 400ad04:	10002f1e 	bne	r2,zero,400adc4 <___vfiprintf_internal_r+0x122c>
 400ad08:	e03fe715 	stw	zero,-100(fp)
 400ad0c:	e43fd604 	addi	r16,fp,-168
                if (malloc_buf != NULL) {
 400ad10:	e0bfed17 	ldw	r2,-76(fp)
 400ad14:	103bf326 	beq	r2,zero,4009ce4 <___vfiprintf_internal_r+0x14c>
			_free_r (data, malloc_buf);
 400ad18:	e17fed17 	ldw	r5,-76(fp)
 400ad1c:	e13fca17 	ldw	r4,-216(fp)
 400ad20:	40055ac0 	call	40055ac <_free_r>
			malloc_buf = NULL;
 400ad24:	e03fed15 	stw	zero,-76(fp)
	        cp = fmt;
 400ad28:	003bee06 	br	4009ce4 <___vfiprintf_internal_r+0x14c>
                    goto done;
 400ad2c:	0001883a 	nop
 400ad30:	00000106 	br	400ad38 <___vfiprintf_internal_r+0x11a0>
				goto done;
 400ad34:	0001883a 	nop
	FLUSH ();
 400ad38:	e0bfe817 	ldw	r2,-96(fp)
 400ad3c:	10000626 	beq	r2,zero,400ad58 <___vfiprintf_internal_r+0x11c0>
 400ad40:	e0bfe604 	addi	r2,fp,-104
 400ad44:	100d883a 	mov	r6,r2
 400ad48:	e17fc917 	ldw	r5,-220(fp)
 400ad4c:	e13fca17 	ldw	r4,-216(fp)
 400ad50:	40099280 	call	4009928 <__sprint_r>
 400ad54:	10001d1e 	bne	r2,zero,400adcc <___vfiprintf_internal_r+0x1234>
 400ad58:	e03fe715 	stw	zero,-100(fp)
 400ad5c:	e43fd604 	addi	r16,fp,-168
 400ad60:	00001b06 	br	400add0 <___vfiprintf_internal_r+0x1238>
			PRINT (cp, m);
 400ad64:	0001883a 	nop
 400ad68:	00001906 	br	400add0 <___vfiprintf_internal_r+0x1238>
			PAD (width - realsz, blanks);
 400ad6c:	0001883a 	nop
 400ad70:	00001706 	br	400add0 <___vfiprintf_internal_r+0x1238>
 400ad74:	0001883a 	nop
 400ad78:	00001506 	br	400add0 <___vfiprintf_internal_r+0x1238>
			PRINT (&sign, 1);
 400ad7c:	0001883a 	nop
 400ad80:	00001306 	br	400add0 <___vfiprintf_internal_r+0x1238>
			PRINT (ox, 2);
 400ad84:	0001883a 	nop
 400ad88:	00001106 	br	400add0 <___vfiprintf_internal_r+0x1238>
			PAD (width - realsz, zeroes);
 400ad8c:	0001883a 	nop
 400ad90:	00000f06 	br	400add0 <___vfiprintf_internal_r+0x1238>
 400ad94:	0001883a 	nop
 400ad98:	00000d06 	br	400add0 <___vfiprintf_internal_r+0x1238>
		PAD (dprec - size, zeroes);
 400ad9c:	0001883a 	nop
 400ada0:	00000b06 	br	400add0 <___vfiprintf_internal_r+0x1238>
 400ada4:	0001883a 	nop
 400ada8:	00000906 	br	400add0 <___vfiprintf_internal_r+0x1238>
		PRINT (cp, size);
 400adac:	0001883a 	nop
 400adb0:	00000706 	br	400add0 <___vfiprintf_internal_r+0x1238>
			PAD (width - realsz, blanks);
 400adb4:	0001883a 	nop
 400adb8:	00000506 	br	400add0 <___vfiprintf_internal_r+0x1238>
 400adbc:	0001883a 	nop
 400adc0:	00000306 	br	400add0 <___vfiprintf_internal_r+0x1238>
		FLUSH ();	/* copy out the I/O vectors */
 400adc4:	0001883a 	nop
 400adc8:	00000106 	br	400add0 <___vfiprintf_internal_r+0x1238>
	FLUSH ();
 400adcc:	0001883a 	nop
	if (malloc_buf != NULL)
 400add0:	e0bfed17 	ldw	r2,-76(fp)
 400add4:	10000326 	beq	r2,zero,400ade4 <___vfiprintf_internal_r+0x124c>
		_free_r (data, malloc_buf);
 400add8:	e17fed17 	ldw	r5,-76(fp)
 400addc:	e13fca17 	ldw	r4,-216(fp)
 400ade0:	40055ac0 	call	40055ac <_free_r>
	return (__sferror (fp) ? EOF : ret);
 400ade4:	e0bfc917 	ldw	r2,-220(fp)
 400ade8:	1080030b 	ldhu	r2,12(r2)
 400adec:	10bfffcc 	andi	r2,r2,65535
 400adf0:	1080100c 	andi	r2,r2,64
 400adf4:	1000021e 	bne	r2,zero,400ae00 <___vfiprintf_internal_r+0x1268>
 400adf8:	e0bff717 	ldw	r2,-36(fp)
 400adfc:	00000106 	br	400ae04 <___vfiprintf_internal_r+0x126c>
 400ae00:	00bfffc4 	movi	r2,-1
}
 400ae04:	e6fff804 	addi	sp,fp,-32
 400ae08:	dfc00917 	ldw	ra,36(sp)
 400ae0c:	df000817 	ldw	fp,32(sp)
 400ae10:	ddc00717 	ldw	r23,28(sp)
 400ae14:	dd800617 	ldw	r22,24(sp)
 400ae18:	dd400517 	ldw	r21,20(sp)
 400ae1c:	dd000417 	ldw	r20,16(sp)
 400ae20:	dcc00317 	ldw	r19,12(sp)
 400ae24:	dc800217 	ldw	r18,8(sp)
 400ae28:	dc400117 	ldw	r17,4(sp)
 400ae2c:	dc000017 	ldw	r16,0(sp)
 400ae30:	dec00a04 	addi	sp,sp,40
 400ae34:	f800283a 	ret

0400ae38 <__get_global_locale>:
{
 400ae38:	deffff04 	addi	sp,sp,-4
 400ae3c:	df000015 	stw	fp,0(sp)
 400ae40:	d839883a 	mov	fp,sp
  return &__global_locale;
 400ae44:	00810074 	movhi	r2,1025
 400ae48:	10907404 	addi	r2,r2,16848
}
 400ae4c:	e037883a 	mov	sp,fp
 400ae50:	df000017 	ldw	fp,0(sp)
 400ae54:	dec00104 	addi	sp,sp,4
 400ae58:	f800283a 	ret

0400ae5c <__get_current_locale>:
{
 400ae5c:	defffe04 	addi	sp,sp,-8
 400ae60:	dfc00115 	stw	ra,4(sp)
 400ae64:	df000015 	stw	fp,0(sp)
 400ae68:	d839883a 	mov	fp,sp
  return __get_global_locale();
 400ae6c:	400ae380 	call	400ae38 <__get_global_locale>
}
 400ae70:	e037883a 	mov	sp,fp
 400ae74:	dfc00117 	ldw	ra,4(sp)
 400ae78:	df000017 	ldw	fp,0(sp)
 400ae7c:	dec00204 	addi	sp,sp,8
 400ae80:	f800283a 	ret

0400ae84 <_wctomb_r>:
int
_wctomb_r (struct _reent *r,
        char          *s,
        wchar_t        _wchar,
        mbstate_t     *state)
{
 400ae84:	defffa04 	addi	sp,sp,-24
 400ae88:	dfc00515 	stw	ra,20(sp)
 400ae8c:	df000415 	stw	fp,16(sp)
 400ae90:	df000404 	addi	fp,sp,16
 400ae94:	e13fff15 	stw	r4,-4(fp)
 400ae98:	e17ffe15 	stw	r5,-8(fp)
 400ae9c:	e1bffd15 	stw	r6,-12(fp)
 400aea0:	e1fffc15 	stw	r7,-16(fp)
  return __WCTOMB (r, s, _wchar, state);
 400aea4:	400ae5c0 	call	400ae5c <__get_current_locale>
 400aea8:	10803817 	ldw	r2,224(r2)
 400aeac:	e1fffc17 	ldw	r7,-16(fp)
 400aeb0:	e1bffd17 	ldw	r6,-12(fp)
 400aeb4:	e17ffe17 	ldw	r5,-8(fp)
 400aeb8:	e13fff17 	ldw	r4,-4(fp)
 400aebc:	103ee83a 	callr	r2
}
 400aec0:	e037883a 	mov	sp,fp
 400aec4:	dfc00117 	ldw	ra,4(sp)
 400aec8:	df000017 	ldw	fp,0(sp)
 400aecc:	dec00204 	addi	sp,sp,8
 400aed0:	f800283a 	ret

0400aed4 <__ascii_wctomb>:
int
__ascii_wctomb (struct _reent *r,
        char          *s,
        wchar_t        _wchar,
        mbstate_t     *state)
{
 400aed4:	defffa04 	addi	sp,sp,-24
 400aed8:	df000515 	stw	fp,20(sp)
 400aedc:	df000504 	addi	fp,sp,20
 400aee0:	e13ffe15 	stw	r4,-8(fp)
 400aee4:	e17ffd15 	stw	r5,-12(fp)
 400aee8:	e1bffc15 	stw	r6,-16(fp)
 400aeec:	e1fffb15 	stw	r7,-20(fp)
  /* Avoids compiler warnings about comparisons that are always false
     due to limited range when sizeof(wchar_t) is 2 but sizeof(wint_t)
     is 4, as is the case on cygwin.  */
  wint_t wchar = _wchar;
 400aef0:	e0bffc17 	ldw	r2,-16(fp)
 400aef4:	e0bfff15 	stw	r2,-4(fp)

  if (s == NULL)
 400aef8:	e0bffd17 	ldw	r2,-12(fp)
 400aefc:	1000021e 	bne	r2,zero,400af08 <__ascii_wctomb+0x34>
    return 0;
 400af00:	0005883a 	mov	r2,zero
 400af04:	00000d06 	br	400af3c <__ascii_wctomb+0x68>
 
#ifdef __CYGWIN__
  if ((size_t)wchar >= 0x80)
#else
  if ((size_t)wchar >= 0x100)
 400af08:	e0bfff17 	ldw	r2,-4(fp)
 400af0c:	10804030 	cmpltui	r2,r2,256
 400af10:	1000051e 	bne	r2,zero,400af28 <__ascii_wctomb+0x54>
#endif
    {
      r->_errno = EILSEQ;
 400af14:	e0bffe17 	ldw	r2,-8(fp)
 400af18:	00c02284 	movi	r3,138
 400af1c:	10c00015 	stw	r3,0(r2)
      return -1;
 400af20:	00bfffc4 	movi	r2,-1
 400af24:	00000506 	br	400af3c <__ascii_wctomb+0x68>
    }

  *s = (char) wchar;
 400af28:	e0bfff17 	ldw	r2,-4(fp)
 400af2c:	1007883a 	mov	r3,r2
 400af30:	e0bffd17 	ldw	r2,-12(fp)
 400af34:	10c00005 	stb	r3,0(r2)
  return 1;
 400af38:	00800044 	movi	r2,1
}
 400af3c:	e037883a 	mov	sp,fp
 400af40:	df000017 	ldw	fp,0(sp)
 400af44:	dec00104 	addi	sp,sp,4
 400af48:	f800283a 	ret

0400af4c <_write_r>:
_ssize_t
_write_r (struct _reent *ptr,
     int fd,
     const void *buf,
     size_t cnt)
{
 400af4c:	defff904 	addi	sp,sp,-28
 400af50:	dfc00615 	stw	ra,24(sp)
 400af54:	df000515 	stw	fp,20(sp)
 400af58:	df000504 	addi	fp,sp,20
 400af5c:	e13ffe15 	stw	r4,-8(fp)
 400af60:	e17ffd15 	stw	r5,-12(fp)
 400af64:	e1bffc15 	stw	r6,-16(fp)
 400af68:	e1fffb15 	stw	r7,-20(fp)
  _ssize_t ret;

  errno = 0;
 400af6c:	d0271515 	stw	zero,-25516(gp)
  if ((ret = (_ssize_t)_write (fd, buf, cnt)) == -1 && errno != 0)
 400af70:	e1bffb17 	ldw	r6,-20(fp)
 400af74:	e17ffc17 	ldw	r5,-16(fp)
 400af78:	e13ffd17 	ldw	r4,-12(fp)
 400af7c:	401121c0 	call	401121c <write>
 400af80:	e0bfff15 	stw	r2,-4(fp)
 400af84:	e0bfff17 	ldw	r2,-4(fp)
 400af88:	10bfffd8 	cmpnei	r2,r2,-1
 400af8c:	1000051e 	bne	r2,zero,400afa4 <_write_r+0x58>
 400af90:	d0a71517 	ldw	r2,-25516(gp)
 400af94:	10000326 	beq	r2,zero,400afa4 <_write_r+0x58>
    ptr->_errno = errno;
 400af98:	d0e71517 	ldw	r3,-25516(gp)
 400af9c:	e0bffe17 	ldw	r2,-8(fp)
 400afa0:	10c00015 	stw	r3,0(r2)
  return ret;
 400afa4:	e0bfff17 	ldw	r2,-4(fp)
}
 400afa8:	e037883a 	mov	sp,fp
 400afac:	dfc00117 	ldw	ra,4(sp)
 400afb0:	df000017 	ldw	fp,0(sp)
 400afb4:	dec00204 	addi	sp,sp,8
 400afb8:	f800283a 	ret

0400afbc <_close_r>:

int
_close_r (ptr, fd)
     struct _reent *ptr;
     int fd;
{
 400afbc:	defffb04 	addi	sp,sp,-20
 400afc0:	dfc00415 	stw	ra,16(sp)
 400afc4:	df000315 	stw	fp,12(sp)
 400afc8:	df000304 	addi	fp,sp,12
 400afcc:	e13ffe15 	stw	r4,-8(fp)
 400afd0:	e17ffd15 	stw	r5,-12(fp)
  int ret;

  errno = 0;
 400afd4:	d0271515 	stw	zero,-25516(gp)
  if ((ret = _close (fd)) == -1 && errno != 0)
 400afd8:	e13ffd17 	ldw	r4,-12(fp)
 400afdc:	40108200 	call	4010820 <close>
 400afe0:	e0bfff15 	stw	r2,-4(fp)
 400afe4:	e0bfff17 	ldw	r2,-4(fp)
 400afe8:	10bfffd8 	cmpnei	r2,r2,-1
 400afec:	1000051e 	bne	r2,zero,400b004 <_close_r+0x48>
 400aff0:	d0a71517 	ldw	r2,-25516(gp)
 400aff4:	10000326 	beq	r2,zero,400b004 <_close_r+0x48>
    ptr->_errno = errno;
 400aff8:	d0e71517 	ldw	r3,-25516(gp)
 400affc:	e0bffe17 	ldw	r2,-8(fp)
 400b000:	10c00015 	stw	r3,0(r2)
  return ret;
 400b004:	e0bfff17 	ldw	r2,-4(fp)
}
 400b008:	e037883a 	mov	sp,fp
 400b00c:	dfc00117 	ldw	ra,4(sp)
 400b010:	df000017 	ldw	fp,0(sp)
 400b014:	dec00204 	addi	sp,sp,8
 400b018:	f800283a 	ret

0400b01c <__assert_func>:
void
__assert_func (const char *file,
	int line,
	const char *func,
	const char *failedexpr)
{
 400b01c:	defff704 	addi	sp,sp,-36
 400b020:	dfc00815 	stw	ra,32(sp)
 400b024:	df000715 	stw	fp,28(sp)
 400b028:	df000704 	addi	fp,sp,28
 400b02c:	e13fff15 	stw	r4,-4(fp)
 400b030:	e17ffe15 	stw	r5,-8(fp)
 400b034:	e1bffd15 	stw	r6,-12(fp)
 400b038:	e1fffc15 	stw	r7,-16(fp)
  fiprintf(stderr,
 400b03c:	d0a00017 	ldw	r2,-32768(gp)
 400b040:	11000317 	ldw	r4,12(r2)
 400b044:	e0bffd17 	ldw	r2,-12(fp)
 400b048:	10000326 	beq	r2,zero,400b058 <__assert_func+0x3c>
 400b04c:	00810074 	movhi	r2,1025
 400b050:	108e6b04 	addi	r2,r2,14764
 400b054:	00000206 	br	400b060 <__assert_func+0x44>
 400b058:	00810074 	movhi	r2,1025
 400b05c:	108e6f04 	addi	r2,r2,14780
 400b060:	e0fffd17 	ldw	r3,-12(fp)
 400b064:	18000226 	beq	r3,zero,400b070 <__assert_func+0x54>
 400b068:	e0fffd17 	ldw	r3,-12(fp)
 400b06c:	00000206 	br	400b078 <__assert_func+0x5c>
 400b070:	00c10074 	movhi	r3,1025
 400b074:	18ce6f04 	addi	r3,r3,14780
 400b078:	d8c00215 	stw	r3,8(sp)
 400b07c:	d8800115 	stw	r2,4(sp)
 400b080:	e0bffe17 	ldw	r2,-8(fp)
 400b084:	d8800015 	stw	r2,0(sp)
 400b088:	e1ffff17 	ldw	r7,-4(fp)
 400b08c:	e1bffc17 	ldw	r6,-16(fp)
 400b090:	01410074 	movhi	r5,1025
 400b094:	294e7004 	addi	r5,r5,14784
 400b098:	400b3f40 	call	400b3f4 <fiprintf>
	   "assertion \"%s\" failed: file \"%s\", line %d%s%s\n",
	   failedexpr, file, line,
	   func ? ", function: " : "", func ? func : "");
  abort();
 400b09c:	400d0480 	call	400d048 <abort>

0400b0a0 <__assert>:

void
__assert (const char *file,
	int line,
	const char *failedexpr)
{
 400b0a0:	defffb04 	addi	sp,sp,-20
 400b0a4:	dfc00415 	stw	ra,16(sp)
 400b0a8:	df000315 	stw	fp,12(sp)
 400b0ac:	df000304 	addi	fp,sp,12
 400b0b0:	e13fff15 	stw	r4,-4(fp)
 400b0b4:	e17ffe15 	stw	r5,-8(fp)
 400b0b8:	e1bffd15 	stw	r6,-12(fp)
   __assert_func (file, line, NULL, failedexpr);
 400b0bc:	e1fffd17 	ldw	r7,-12(fp)
 400b0c0:	000d883a 	mov	r6,zero
 400b0c4:	e17ffe17 	ldw	r5,-8(fp)
 400b0c8:	e13fff17 	ldw	r4,-4(fp)
 400b0cc:	400b01c0 	call	400b01c <__assert_func>

0400b0d0 <_calloc_r>:
{
 400b0d0:	defff504 	addi	sp,sp,-44
 400b0d4:	dfc00a15 	stw	ra,40(sp)
 400b0d8:	df000915 	stw	fp,36(sp)
 400b0dc:	df000904 	addi	fp,sp,36
 400b0e0:	e13ff915 	stw	r4,-28(fp)
 400b0e4:	e17ff815 	stw	r5,-32(fp)
 400b0e8:	e1bff715 	stw	r6,-36(fp)
  INTERNAL_SIZE_T sz = n * elem_size;
 400b0ec:	e0fff817 	ldw	r3,-32(fp)
 400b0f0:	e0bff717 	ldw	r2,-36(fp)
 400b0f4:	1885383a 	mul	r2,r3,r2
 400b0f8:	e0bffe15 	stw	r2,-8(fp)
  mem = mALLOc (RCALL sz);
 400b0fc:	e17ffe17 	ldw	r5,-8(fp)
 400b100:	e13ff917 	ldw	r4,-28(fp)
 400b104:	40067380 	call	4006738 <_malloc_r>
 400b108:	e0bffd15 	stw	r2,-12(fp)
  if (mem == 0) 
 400b10c:	e0bffd17 	ldw	r2,-12(fp)
 400b110:	1000021e 	bne	r2,zero,400b11c <_calloc_r+0x4c>
    return 0;
 400b114:	0005883a 	mov	r2,zero
 400b118:	00004106 	br	400b220 <_calloc_r+0x150>
    p = mem2chunk(mem);
 400b11c:	e0bffd17 	ldw	r2,-12(fp)
 400b120:	10bffe04 	addi	r2,r2,-8
 400b124:	e0bffc15 	stw	r2,-16(fp)
    csz = chunksize(p);
 400b128:	e0bffc17 	ldw	r2,-16(fp)
 400b12c:	10c00117 	ldw	r3,4(r2)
 400b130:	00bfff04 	movi	r2,-4
 400b134:	1884703a 	and	r2,r3,r2
 400b138:	e0bffb15 	stw	r2,-20(fp)
    MALLOC_ZERO(mem, csz - SIZE_SZ);
 400b13c:	e0bffb17 	ldw	r2,-20(fp)
 400b140:	10bfff04 	addi	r2,r2,-4
 400b144:	e0bffa15 	stw	r2,-24(fp)
 400b148:	e0bffa17 	ldw	r2,-24(fp)
 400b14c:	10800968 	cmpgeui	r2,r2,37
 400b150:	10002e1e 	bne	r2,zero,400b20c <_calloc_r+0x13c>
 400b154:	e0bffd17 	ldw	r2,-12(fp)
 400b158:	e0bfff15 	stw	r2,-4(fp)
 400b15c:	e0bffa17 	ldw	r2,-24(fp)
 400b160:	10800530 	cmpltui	r2,r2,20
 400b164:	10001e1e 	bne	r2,zero,400b1e0 <_calloc_r+0x110>
 400b168:	e0bfff17 	ldw	r2,-4(fp)
 400b16c:	10c00104 	addi	r3,r2,4
 400b170:	e0ffff15 	stw	r3,-4(fp)
 400b174:	10000015 	stw	zero,0(r2)
 400b178:	e0bfff17 	ldw	r2,-4(fp)
 400b17c:	10c00104 	addi	r3,r2,4
 400b180:	e0ffff15 	stw	r3,-4(fp)
 400b184:	10000015 	stw	zero,0(r2)
 400b188:	e0bffa17 	ldw	r2,-24(fp)
 400b18c:	10800730 	cmpltui	r2,r2,28
 400b190:	1000131e 	bne	r2,zero,400b1e0 <_calloc_r+0x110>
 400b194:	e0bfff17 	ldw	r2,-4(fp)
 400b198:	10c00104 	addi	r3,r2,4
 400b19c:	e0ffff15 	stw	r3,-4(fp)
 400b1a0:	10000015 	stw	zero,0(r2)
 400b1a4:	e0bfff17 	ldw	r2,-4(fp)
 400b1a8:	10c00104 	addi	r3,r2,4
 400b1ac:	e0ffff15 	stw	r3,-4(fp)
 400b1b0:	10000015 	stw	zero,0(r2)
 400b1b4:	e0bffa17 	ldw	r2,-24(fp)
 400b1b8:	10800930 	cmpltui	r2,r2,36
 400b1bc:	1000081e 	bne	r2,zero,400b1e0 <_calloc_r+0x110>
 400b1c0:	e0bfff17 	ldw	r2,-4(fp)
 400b1c4:	10c00104 	addi	r3,r2,4
 400b1c8:	e0ffff15 	stw	r3,-4(fp)
 400b1cc:	10000015 	stw	zero,0(r2)
 400b1d0:	e0bfff17 	ldw	r2,-4(fp)
 400b1d4:	10c00104 	addi	r3,r2,4
 400b1d8:	e0ffff15 	stw	r3,-4(fp)
 400b1dc:	10000015 	stw	zero,0(r2)
 400b1e0:	e0bfff17 	ldw	r2,-4(fp)
 400b1e4:	10c00104 	addi	r3,r2,4
 400b1e8:	e0ffff15 	stw	r3,-4(fp)
 400b1ec:	10000015 	stw	zero,0(r2)
 400b1f0:	e0bfff17 	ldw	r2,-4(fp)
 400b1f4:	10c00104 	addi	r3,r2,4
 400b1f8:	e0ffff15 	stw	r3,-4(fp)
 400b1fc:	10000015 	stw	zero,0(r2)
 400b200:	e0bfff17 	ldw	r2,-4(fp)
 400b204:	10000015 	stw	zero,0(r2)
 400b208:	00000406 	br	400b21c <_calloc_r+0x14c>
 400b20c:	e1bffa17 	ldw	r6,-24(fp)
 400b210:	000b883a 	mov	r5,zero
 400b214:	e13ffd17 	ldw	r4,-12(fp)
 400b218:	400771c0 	call	400771c <memset>
    return mem;
 400b21c:	e0bffd17 	ldw	r2,-12(fp)
}
 400b220:	e037883a 	mov	sp,fp
 400b224:	dfc00117 	ldw	ra,4(sp)
 400b228:	df000017 	ldw	fp,0(sp)
 400b22c:	dec00204 	addi	sp,sp,8
 400b230:	f800283a 	ret

0400b234 <_fclose_r>:
#include "local.h"

int
_fclose_r (struct _reent *rptr,
      register FILE * fp)
{
 400b234:	defffa04 	addi	sp,sp,-24
 400b238:	dfc00515 	stw	ra,20(sp)
 400b23c:	df000415 	stw	fp,16(sp)
 400b240:	dc000315 	stw	r16,12(sp)
 400b244:	df000404 	addi	fp,sp,16
 400b248:	e13ffc15 	stw	r4,-16(fp)
 400b24c:	2821883a 	mov	r16,r5
  int r;

  if (fp == NULL)
 400b250:	8000021e 	bne	r16,zero,400b25c <_fclose_r+0x28>
    return (0);			/* on NULL */
 400b254:	0005883a 	mov	r2,zero
 400b258:	00003b06 	br	400b348 <_fclose_r+0x114>

  CHECK_INIT (rptr, fp);
 400b25c:	e0bffc17 	ldw	r2,-16(fp)
 400b260:	e0bffd15 	stw	r2,-12(fp)
 400b264:	e0bffd17 	ldw	r2,-12(fp)
 400b268:	10000526 	beq	r2,zero,400b280 <_fclose_r+0x4c>
 400b26c:	e0bffd17 	ldw	r2,-12(fp)
 400b270:	10800e17 	ldw	r2,56(r2)
 400b274:	1000021e 	bne	r2,zero,400b280 <_fclose_r+0x4c>
 400b278:	e13ffd17 	ldw	r4,-12(fp)
 400b27c:	40053b00 	call	40053b0 <__sinit>
  pthread_setcancelstate (PTHREAD_CANCEL_DISABLE, &__oldcancel);
#endif
  if (!(fp->_flags2 & __SNLK))
    _flockfile (fp);

  if (fp->_flags == 0)		/* not open! */
 400b280:	8080030b 	ldhu	r2,12(r16)
 400b284:	10bfffcc 	andi	r2,r2,65535
 400b288:	10a0001c 	xori	r2,r2,32768
 400b28c:	10a00004 	addi	r2,r2,-32768
 400b290:	1000021e 	bne	r2,zero,400b29c <_fclose_r+0x68>
      if (!(fp->_flags2 & __SNLK))
	_funlockfile (fp);
#ifdef _STDIO_WITH_THREAD_CANCELLATION_SUPPORT
      pthread_setcancelstate (__oldcancel, &__oldcancel);
#endif
      return (0);
 400b294:	0005883a 	mov	r2,zero
 400b298:	00002b06 	br	400b348 <_fclose_r+0x114>
  r = (fp->_flags & __SWR) ? __sflush_r (rptr, fp) : 0;
#else
  /* Follow POSIX semantics exactly.  Unconditionally flush to allow
     special handling for seekable read files to reposition file to last
     byte processed as opposed to last byte read ahead into the buffer. */
  r = __sflush_r (rptr, fp);
 400b29c:	800b883a 	mov	r5,r16
 400b2a0:	e13ffc17 	ldw	r4,-16(fp)
 400b2a4:	4004b840 	call	4004b84 <__sflush_r>
 400b2a8:	e0bffe15 	stw	r2,-8(fp)
#endif
  if (fp->_close != NULL && fp->_close (rptr, fp->_cookie) < 0)
 400b2ac:	80800b17 	ldw	r2,44(r16)
 400b2b0:	10000826 	beq	r2,zero,400b2d4 <_fclose_r+0xa0>
 400b2b4:	80800b17 	ldw	r2,44(r16)
 400b2b8:	80c00717 	ldw	r3,28(r16)
 400b2bc:	180b883a 	mov	r5,r3
 400b2c0:	e13ffc17 	ldw	r4,-16(fp)
 400b2c4:	103ee83a 	callr	r2
 400b2c8:	1000020e 	bge	r2,zero,400b2d4 <_fclose_r+0xa0>
    r = EOF;
 400b2cc:	00bfffc4 	movi	r2,-1
 400b2d0:	e0bffe15 	stw	r2,-8(fp)
  if (fp->_flags & __SMBF)
 400b2d4:	8080030b 	ldhu	r2,12(r16)
 400b2d8:	10bfffcc 	andi	r2,r2,65535
 400b2dc:	1080200c 	andi	r2,r2,128
 400b2e0:	10000426 	beq	r2,zero,400b2f4 <_fclose_r+0xc0>
    _free_r (rptr, (char *) fp->_bf._base);
 400b2e4:	80800417 	ldw	r2,16(r16)
 400b2e8:	100b883a 	mov	r5,r2
 400b2ec:	e13ffc17 	ldw	r4,-16(fp)
 400b2f0:	40055ac0 	call	40055ac <_free_r>
  if (HASUB (fp))
 400b2f4:	80800c17 	ldw	r2,48(r16)
 400b2f8:	10000826 	beq	r2,zero,400b31c <_fclose_r+0xe8>
    FREEUB (rptr, fp);
 400b2fc:	80c00c17 	ldw	r3,48(r16)
 400b300:	80801004 	addi	r2,r16,64
 400b304:	18800426 	beq	r3,r2,400b318 <_fclose_r+0xe4>
 400b308:	80800c17 	ldw	r2,48(r16)
 400b30c:	100b883a 	mov	r5,r2
 400b310:	e13ffc17 	ldw	r4,-16(fp)
 400b314:	40055ac0 	call	40055ac <_free_r>
 400b318:	80000c15 	stw	zero,48(r16)
  if (HASLB (fp))
 400b31c:	80801117 	ldw	r2,68(r16)
 400b320:	10000526 	beq	r2,zero,400b338 <_fclose_r+0x104>
    FREELB (rptr, fp);
 400b324:	80801117 	ldw	r2,68(r16)
 400b328:	100b883a 	mov	r5,r2
 400b32c:	e13ffc17 	ldw	r4,-16(fp)
 400b330:	40055ac0 	call	40055ac <_free_r>
 400b334:	80001115 	stw	zero,68(r16)
  __sfp_lock_acquire ();
 400b338:	40054640 	call	4005464 <__sfp_lock_acquire>
  fp->_flags = 0;		/* release this FILE for reuse */
 400b33c:	8000030d 	sth	zero,12(r16)
    _funlockfile (fp);
#ifndef __SINGLE_THREAD__
  __lock_close_recursive (fp->_lock);
#endif

  __sfp_lock_release ();
 400b340:	40054840 	call	4005484 <__sfp_lock_release>
#ifdef _STDIO_WITH_THREAD_CANCELLATION_SUPPORT
  pthread_setcancelstate (__oldcancel, &__oldcancel);
#endif

  return (r);
 400b344:	e0bffe17 	ldw	r2,-8(fp)
}
 400b348:	e6ffff04 	addi	sp,fp,-4
 400b34c:	dfc00217 	ldw	ra,8(sp)
 400b350:	df000117 	ldw	fp,4(sp)
 400b354:	dc000017 	ldw	r16,0(sp)
 400b358:	dec00304 	addi	sp,sp,12
 400b35c:	f800283a 	ret

0400b360 <fclose>:

#ifndef _REENT_ONLY

int
fclose (register FILE * fp)
{
 400b360:	defffe04 	addi	sp,sp,-8
 400b364:	dfc00115 	stw	ra,4(sp)
 400b368:	df000015 	stw	fp,0(sp)
 400b36c:	d839883a 	mov	fp,sp
 400b370:	2007883a 	mov	r3,r4
  return _fclose_r(_REENT, fp);
 400b374:	d0a00017 	ldw	r2,-32768(gp)
 400b378:	180b883a 	mov	r5,r3
 400b37c:	1009883a 	mov	r4,r2
 400b380:	400b2340 	call	400b234 <_fclose_r>
}
 400b384:	e037883a 	mov	sp,fp
 400b388:	dfc00117 	ldw	ra,4(sp)
 400b38c:	df000017 	ldw	fp,0(sp)
 400b390:	dec00204 	addi	sp,sp,8
 400b394:	f800283a 	ret

0400b398 <_fiprintf_r>:

int
_fiprintf_r (struct _reent *ptr,
       FILE * fp,
       const char *fmt, ...)
{
 400b398:	defff804 	addi	sp,sp,-32
 400b39c:	dfc00615 	stw	ra,24(sp)
 400b3a0:	df000515 	stw	fp,20(sp)
 400b3a4:	df000504 	addi	fp,sp,20
 400b3a8:	e13ffd15 	stw	r4,-12(fp)
 400b3ac:	e17ffc15 	stw	r5,-16(fp)
 400b3b0:	e1bffb15 	stw	r6,-20(fp)
 400b3b4:	e1c00215 	stw	r7,8(fp)
  int ret;
  va_list ap;

  va_start (ap, fmt);
 400b3b8:	e0800204 	addi	r2,fp,8
 400b3bc:	e0bffe15 	stw	r2,-8(fp)
  ret = _vfiprintf_r (ptr, fp, fmt, ap);
 400b3c0:	e0bffe17 	ldw	r2,-8(fp)
 400b3c4:	100f883a 	mov	r7,r2
 400b3c8:	e1bffb17 	ldw	r6,-20(fp)
 400b3cc:	e17ffc17 	ldw	r5,-16(fp)
 400b3d0:	e13ffd17 	ldw	r4,-12(fp)
 400b3d4:	400cc940 	call	400cc94 <_vfiprintf_r>
 400b3d8:	e0bfff15 	stw	r2,-4(fp)
  va_end (ap);
  return ret;
 400b3dc:	e0bfff17 	ldw	r2,-4(fp)
}
 400b3e0:	e037883a 	mov	sp,fp
 400b3e4:	dfc00117 	ldw	ra,4(sp)
 400b3e8:	df000017 	ldw	fp,0(sp)
 400b3ec:	dec00304 	addi	sp,sp,12
 400b3f0:	f800283a 	ret

0400b3f4 <fiprintf>:
#ifndef _REENT_ONLY

int
fiprintf (FILE * fp,
       const char *fmt, ...)
{
 400b3f4:	defff804 	addi	sp,sp,-32
 400b3f8:	dfc00515 	stw	ra,20(sp)
 400b3fc:	df000415 	stw	fp,16(sp)
 400b400:	df000404 	addi	fp,sp,16
 400b404:	e13ffd15 	stw	r4,-12(fp)
 400b408:	e17ffc15 	stw	r5,-16(fp)
 400b40c:	e1800215 	stw	r6,8(fp)
 400b410:	e1c00315 	stw	r7,12(fp)
  int ret;
  va_list ap;

  va_start (ap, fmt);
 400b414:	e0800204 	addi	r2,fp,8
 400b418:	e0bffe15 	stw	r2,-8(fp)
  ret = _vfiprintf_r (_REENT, fp, fmt, ap);
 400b41c:	d0a00017 	ldw	r2,-32768(gp)
 400b420:	e0fffe17 	ldw	r3,-8(fp)
 400b424:	180f883a 	mov	r7,r3
 400b428:	e1bffc17 	ldw	r6,-16(fp)
 400b42c:	e17ffd17 	ldw	r5,-12(fp)
 400b430:	1009883a 	mov	r4,r2
 400b434:	400cc940 	call	400cc94 <_vfiprintf_r>
 400b438:	e0bfff15 	stw	r2,-4(fp)
  va_end (ap);
  return ret;
 400b43c:	e0bfff17 	ldw	r2,-4(fp)
}
 400b440:	e037883a 	mov	sp,fp
 400b444:	dfc00117 	ldw	ra,4(sp)
 400b448:	df000017 	ldw	fp,0(sp)
 400b44c:	dec00404 	addi	sp,sp,16
 400b450:	f800283a 	ret

0400b454 <__fputwc>:

wint_t
__fputwc (struct _reent *ptr,
	wchar_t wc,
	FILE *fp)
{
 400b454:	defff804 	addi	sp,sp,-32
 400b458:	dfc00715 	stw	ra,28(sp)
 400b45c:	df000615 	stw	fp,24(sp)
 400b460:	df000604 	addi	fp,sp,24
 400b464:	e13ffc15 	stw	r4,-16(fp)
 400b468:	e17ffb15 	stw	r5,-20(fp)
 400b46c:	e1bffa15 	stw	r6,-24(fp)
  char buf[MB_LEN_MAX];
  size_t i, len;

  if (MB_CUR_MAX == 1 && wc > 0 && wc <= UCHAR_MAX)
 400b470:	400606c0 	call	400606c <__locale_mb_cur_max>
 400b474:	10800058 	cmpnei	r2,r2,1
 400b478:	10000a1e 	bne	r2,zero,400b4a4 <__fputwc+0x50>
 400b47c:	e0bffb17 	ldw	r2,-20(fp)
 400b480:	0080080e 	bge	zero,r2,400b4a4 <__fputwc+0x50>
 400b484:	e0bffb17 	ldw	r2,-20(fp)
 400b488:	10804008 	cmpgei	r2,r2,256
 400b48c:	1000051e 	bne	r2,zero,400b4a4 <__fputwc+0x50>
      /*
       * Assume single-byte locale with no special encoding.
       * A more careful test would be to check
       * _CurrentRuneLocale->encoding.
       */
      *buf = (unsigned char)wc;
 400b490:	e0bffb17 	ldw	r2,-20(fp)
 400b494:	e0bffdc5 	stb	r2,-9(fp)
      len = 1;
 400b498:	00800044 	movi	r2,1
 400b49c:	e0bffe15 	stw	r2,-8(fp)
 400b4a0:	00001406 	br	400b4f4 <__fputwc+0xa0>
    }
  else
    {
      if ((len = _wcrtomb_r (ptr, buf, wc, &fp->_mbstate)) == (size_t) -1)
 400b4a4:	e0bffa17 	ldw	r2,-24(fp)
 400b4a8:	10c01704 	addi	r3,r2,92
 400b4ac:	e0bffdc4 	addi	r2,fp,-9
 400b4b0:	180f883a 	mov	r7,r3
 400b4b4:	e1bffb17 	ldw	r6,-20(fp)
 400b4b8:	100b883a 	mov	r5,r2
 400b4bc:	e13ffc17 	ldw	r4,-16(fp)
 400b4c0:	400cedc0 	call	400cedc <_wcrtomb_r>
 400b4c4:	e0bffe15 	stw	r2,-8(fp)
 400b4c8:	e0bffe17 	ldw	r2,-8(fp)
 400b4cc:	10bfffd8 	cmpnei	r2,r2,-1
 400b4d0:	1000081e 	bne	r2,zero,400b4f4 <__fputwc+0xa0>
	{
	  fp->_flags |= __SERR;
 400b4d4:	e0bffa17 	ldw	r2,-24(fp)
 400b4d8:	1080030b 	ldhu	r2,12(r2)
 400b4dc:	10801014 	ori	r2,r2,64
 400b4e0:	1007883a 	mov	r3,r2
 400b4e4:	e0bffa17 	ldw	r2,-24(fp)
 400b4e8:	10c0030d 	sth	r3,12(r2)
	  return WEOF;
 400b4ec:	00bfffc4 	movi	r2,-1
 400b4f0:	00004906 	br	400b618 <__fputwc+0x1c4>
	}
    }

  for (i = 0; i < len; i++)
 400b4f4:	e03fff15 	stw	zero,-4(fp)
 400b4f8:	00004306 	br	400b608 <__fputwc+0x1b4>
    if (__sputc_r (ptr, (unsigned char) buf[i], fp) == EOF)
 400b4fc:	e0bffa17 	ldw	r2,-24(fp)
 400b500:	10800217 	ldw	r2,8(r2)
 400b504:	10ffffc4 	addi	r3,r2,-1
 400b508:	e0bffa17 	ldw	r2,-24(fp)
 400b50c:	10c00215 	stw	r3,8(r2)
 400b510:	e0bffa17 	ldw	r2,-24(fp)
 400b514:	10800217 	ldw	r2,8(r2)
 400b518:	1000280e 	bge	r2,zero,400b5bc <__fputwc+0x168>
 400b51c:	e0bffa17 	ldw	r2,-24(fp)
 400b520:	10c00217 	ldw	r3,8(r2)
 400b524:	e0bffa17 	ldw	r2,-24(fp)
 400b528:	10800617 	ldw	r2,24(r2)
 400b52c:	18801916 	blt	r3,r2,400b594 <__fputwc+0x140>
 400b530:	e0bfff17 	ldw	r2,-4(fp)
 400b534:	e085883a 	add	r2,fp,r2
 400b538:	10fffdc3 	ldbu	r3,-9(r2)
 400b53c:	e0bffa17 	ldw	r2,-24(fp)
 400b540:	10800017 	ldw	r2,0(r2)
 400b544:	10c00005 	stb	r3,0(r2)
 400b548:	e0bffa17 	ldw	r2,-24(fp)
 400b54c:	10800017 	ldw	r2,0(r2)
 400b550:	10800003 	ldbu	r2,0(r2)
 400b554:	10803fcc 	andi	r2,r2,255
 400b558:	108002a0 	cmpeqi	r2,r2,10
 400b55c:	1000071e 	bne	r2,zero,400b57c <__fputwc+0x128>
 400b560:	e0bffa17 	ldw	r2,-24(fp)
 400b564:	10800017 	ldw	r2,0(r2)
 400b568:	10c00044 	addi	r3,r2,1
 400b56c:	e0bffa17 	ldw	r2,-24(fp)
 400b570:	10c00015 	stw	r3,0(r2)
 400b574:	0005883a 	mov	r2,zero
 400b578:	00001c06 	br	400b5ec <__fputwc+0x198>
 400b57c:	e1bffa17 	ldw	r6,-24(fp)
 400b580:	01400284 	movi	r5,10
 400b584:	e13ffc17 	ldw	r4,-16(fp)
 400b588:	400cce80 	call	400cce8 <__swbuf_r>
 400b58c:	10bfffe0 	cmpeqi	r2,r2,-1
 400b590:	00001606 	br	400b5ec <__fputwc+0x198>
 400b594:	e0bfff17 	ldw	r2,-4(fp)
 400b598:	e085883a 	add	r2,fp,r2
 400b59c:	10bffdc3 	ldbu	r2,-9(r2)
 400b5a0:	10803fcc 	andi	r2,r2,255
 400b5a4:	e1bffa17 	ldw	r6,-24(fp)
 400b5a8:	100b883a 	mov	r5,r2
 400b5ac:	e13ffc17 	ldw	r4,-16(fp)
 400b5b0:	400cce80 	call	400cce8 <__swbuf_r>
 400b5b4:	10bfffe0 	cmpeqi	r2,r2,-1
 400b5b8:	00000c06 	br	400b5ec <__fputwc+0x198>
 400b5bc:	e0bfff17 	ldw	r2,-4(fp)
 400b5c0:	e085883a 	add	r2,fp,r2
 400b5c4:	10fffdc3 	ldbu	r3,-9(r2)
 400b5c8:	e0bffa17 	ldw	r2,-24(fp)
 400b5cc:	10800017 	ldw	r2,0(r2)
 400b5d0:	10c00005 	stb	r3,0(r2)
 400b5d4:	e0bffa17 	ldw	r2,-24(fp)
 400b5d8:	10800017 	ldw	r2,0(r2)
 400b5dc:	10c00044 	addi	r3,r2,1
 400b5e0:	e0bffa17 	ldw	r2,-24(fp)
 400b5e4:	10c00015 	stw	r3,0(r2)
 400b5e8:	0005883a 	mov	r2,zero
 400b5ec:	10803fcc 	andi	r2,r2,255
 400b5f0:	10000226 	beq	r2,zero,400b5fc <__fputwc+0x1a8>
      return WEOF;
 400b5f4:	00bfffc4 	movi	r2,-1
 400b5f8:	00000706 	br	400b618 <__fputwc+0x1c4>
  for (i = 0; i < len; i++)
 400b5fc:	e0bfff17 	ldw	r2,-4(fp)
 400b600:	10800044 	addi	r2,r2,1
 400b604:	e0bfff15 	stw	r2,-4(fp)
 400b608:	e0ffff17 	ldw	r3,-4(fp)
 400b60c:	e0bffe17 	ldw	r2,-8(fp)
 400b610:	18bfba36 	bltu	r3,r2,400b4fc <__fputwc+0xa8>

  return (wint_t) wc;
 400b614:	e0bffb17 	ldw	r2,-20(fp)
}
 400b618:	e037883a 	mov	sp,fp
 400b61c:	dfc00117 	ldw	ra,4(sp)
 400b620:	df000017 	ldw	fp,0(sp)
 400b624:	dec00204 	addi	sp,sp,8
 400b628:	f800283a 	ret

0400b62c <_fputwc_r>:

wint_t
_fputwc_r (struct _reent *ptr,
	wchar_t wc,
	FILE *fp)
{
 400b62c:	defffa04 	addi	sp,sp,-24
 400b630:	dfc00515 	stw	ra,20(sp)
 400b634:	df000415 	stw	fp,16(sp)
 400b638:	df000404 	addi	fp,sp,16
 400b63c:	e13ffe15 	stw	r4,-8(fp)
 400b640:	e17ffd15 	stw	r5,-12(fp)
 400b644:	e1bffc15 	stw	r6,-16(fp)
  wint_t r;

  _newlib_flockfile_start (fp);
  ORIENT(fp, 1);
 400b648:	e0bffc17 	ldw	r2,-16(fp)
 400b64c:	1080030b 	ldhu	r2,12(r2)
 400b650:	10bfffcc 	andi	r2,r2,65535
 400b654:	1088000c 	andi	r2,r2,8192
 400b658:	10000b1e 	bne	r2,zero,400b688 <_fputwc_r+0x5c>
 400b65c:	e0bffc17 	ldw	r2,-16(fp)
 400b660:	1080030b 	ldhu	r2,12(r2)
 400b664:	10880014 	ori	r2,r2,8192
 400b668:	1007883a 	mov	r3,r2
 400b66c:	e0bffc17 	ldw	r2,-16(fp)
 400b670:	10c0030d 	sth	r3,12(r2)
 400b674:	e0bffc17 	ldw	r2,-16(fp)
 400b678:	10801917 	ldw	r2,100(r2)
 400b67c:	10c80014 	ori	r3,r2,8192
 400b680:	e0bffc17 	ldw	r2,-16(fp)
 400b684:	10c01915 	stw	r3,100(r2)
  r = __fputwc(ptr, wc, fp);
 400b688:	e1bffc17 	ldw	r6,-16(fp)
 400b68c:	e17ffd17 	ldw	r5,-12(fp)
 400b690:	e13ffe17 	ldw	r4,-8(fp)
 400b694:	400b4540 	call	400b454 <__fputwc>
 400b698:	e0bfff15 	stw	r2,-4(fp)
  _newlib_flockfile_end (fp);
  return r;
 400b69c:	e0bfff17 	ldw	r2,-4(fp)
}
 400b6a0:	e037883a 	mov	sp,fp
 400b6a4:	dfc00117 	ldw	ra,4(sp)
 400b6a8:	df000017 	ldw	fp,0(sp)
 400b6ac:	dec00204 	addi	sp,sp,8
 400b6b0:	f800283a 	ret

0400b6b4 <fputwc>:

wint_t
fputwc (wchar_t wc,
	FILE *fp)
{
 400b6b4:	defffa04 	addi	sp,sp,-24
 400b6b8:	dfc00515 	stw	ra,20(sp)
 400b6bc:	df000415 	stw	fp,16(sp)
 400b6c0:	df000404 	addi	fp,sp,16
 400b6c4:	e13ffd15 	stw	r4,-12(fp)
 400b6c8:	e17ffc15 	stw	r5,-16(fp)
  struct _reent *reent = _REENT;
 400b6cc:	d0a00017 	ldw	r2,-32768(gp)
 400b6d0:	e0bfff15 	stw	r2,-4(fp)

  CHECK_INIT(reent, fp);
 400b6d4:	e0bfff17 	ldw	r2,-4(fp)
 400b6d8:	e0bffe15 	stw	r2,-8(fp)
 400b6dc:	e0bffe17 	ldw	r2,-8(fp)
 400b6e0:	10000526 	beq	r2,zero,400b6f8 <fputwc+0x44>
 400b6e4:	e0bffe17 	ldw	r2,-8(fp)
 400b6e8:	10800e17 	ldw	r2,56(r2)
 400b6ec:	1000021e 	bne	r2,zero,400b6f8 <fputwc+0x44>
 400b6f0:	e13ffe17 	ldw	r4,-8(fp)
 400b6f4:	40053b00 	call	40053b0 <__sinit>
  return _fputwc_r (reent, wc, fp);
 400b6f8:	e1bffc17 	ldw	r6,-16(fp)
 400b6fc:	e17ffd17 	ldw	r5,-12(fp)
 400b700:	e13fff17 	ldw	r4,-4(fp)
 400b704:	400b62c0 	call	400b62c <_fputwc_r>
}
 400b708:	e037883a 	mov	sp,fp
 400b70c:	dfc00117 	ldw	ra,4(sp)
 400b710:	df000017 	ldw	fp,0(sp)
 400b714:	dec00204 	addi	sp,sp,8
 400b718:	f800283a 	ret

0400b71c <_fstat_r>:
int
_fstat_r (ptr, fd, pstat)
     struct _reent *ptr;
     int fd;
     struct stat *pstat;
{
 400b71c:	defffa04 	addi	sp,sp,-24
 400b720:	dfc00515 	stw	ra,20(sp)
 400b724:	df000415 	stw	fp,16(sp)
 400b728:	df000404 	addi	fp,sp,16
 400b72c:	e13ffe15 	stw	r4,-8(fp)
 400b730:	e17ffd15 	stw	r5,-12(fp)
 400b734:	e1bffc15 	stw	r6,-16(fp)
  int ret;

  errno = 0;
 400b738:	d0271515 	stw	zero,-25516(gp)
  if ((ret = _fstat (fd, pstat)) == -1 && errno != 0)
 400b73c:	e17ffc17 	ldw	r5,-16(fp)
 400b740:	e13ffd17 	ldw	r4,-12(fp)
 400b744:	40109900 	call	4010990 <fstat>
 400b748:	e0bfff15 	stw	r2,-4(fp)
 400b74c:	e0bfff17 	ldw	r2,-4(fp)
 400b750:	10bfffd8 	cmpnei	r2,r2,-1
 400b754:	1000051e 	bne	r2,zero,400b76c <_fstat_r+0x50>
 400b758:	d0a71517 	ldw	r2,-25516(gp)
 400b75c:	10000326 	beq	r2,zero,400b76c <_fstat_r+0x50>
    ptr->_errno = errno;
 400b760:	d0e71517 	ldw	r3,-25516(gp)
 400b764:	e0bffe17 	ldw	r2,-8(fp)
 400b768:	10c00015 	stw	r3,0(r2)
  return ret;
 400b76c:	e0bfff17 	ldw	r2,-4(fp)
}
 400b770:	e037883a 	mov	sp,fp
 400b774:	dfc00117 	ldw	ra,4(sp)
 400b778:	df000017 	ldw	fp,0(sp)
 400b77c:	dec00204 	addi	sp,sp,8
 400b780:	f800283a 	ret

0400b784 <__sfvwrite_r>:

int
__sfvwrite_r (struct _reent *ptr,
       register FILE *fp,
       register struct __suio *uio)
{
 400b784:	defff004 	addi	sp,sp,-64
 400b788:	dfc00f15 	stw	ra,60(sp)
 400b78c:	df000e15 	stw	fp,56(sp)
 400b790:	dd800d15 	stw	r22,52(sp)
 400b794:	dd400c15 	stw	r21,48(sp)
 400b798:	dd000b15 	stw	r20,44(sp)
 400b79c:	dcc00a15 	stw	r19,40(sp)
 400b7a0:	dc800915 	stw	r18,36(sp)
 400b7a4:	dc400815 	stw	r17,32(sp)
 400b7a8:	dc000715 	stw	r16,28(sp)
 400b7ac:	df000e04 	addi	fp,sp,56
 400b7b0:	e13ff215 	stw	r4,-56(fp)
 400b7b4:	2821883a 	mov	r16,r5
 400b7b8:	302b883a 	mov	r21,r6
  register size_t len;
  register const char *p = NULL;
 400b7bc:	0027883a 	mov	r19,zero
  register struct __siov *iov;
  register _READ_WRITE_RETURN_TYPE w, s;
  char *nl;
  int nlknown, nldist;

  if ((len = uio->uio_resid) == 0)
 400b7c0:	ac800217 	ldw	r18,8(r21)
 400b7c4:	9000021e 	bne	r18,zero,400b7d0 <__sfvwrite_r+0x4c>
    return 0;
 400b7c8:	0005883a 	mov	r2,zero
 400b7cc:	00015606 	br	400bd28 <__sfvwrite_r+0x5a4>

  /* make sure we can write */
  if (cantwrite (ptr, fp))
 400b7d0:	8080030b 	ldhu	r2,12(r16)
 400b7d4:	10bfffcc 	andi	r2,r2,65535
 400b7d8:	1080020c 	andi	r2,r2,8
 400b7dc:	10000226 	beq	r2,zero,400b7e8 <__sfvwrite_r+0x64>
 400b7e0:	80800417 	ldw	r2,16(r16)
 400b7e4:	1000061e 	bne	r2,zero,400b800 <__sfvwrite_r+0x7c>
 400b7e8:	800b883a 	mov	r5,r16
 400b7ec:	e13ff217 	ldw	r4,-56(fp)
 400b7f0:	4002a140 	call	4002a14 <__swsetup_r>
 400b7f4:	10000226 	beq	r2,zero,400b800 <__sfvwrite_r+0x7c>
    return EOF;
 400b7f8:	00bfffc4 	movi	r2,-1
 400b7fc:	00014a06 	br	400bd28 <__sfvwrite_r+0x5a4>

  iov = uio->uio_iov;
 400b800:	ad000017 	ldw	r20,0(r21)
  len = 0;
 400b804:	0025883a 	mov	r18,zero
      while (uio->uio_resid > 0);
      return 0;
    }
#endif

  if (fp->_flags & __SNBF)
 400b808:	8080030b 	ldhu	r2,12(r16)
 400b80c:	10bfffcc 	andi	r2,r2,65535
 400b810:	1080008c 	andi	r2,r2,2
 400b814:	10001f26 	beq	r2,zero,400b894 <__sfvwrite_r+0x110>
       * Unbuffered: Split buffer in the largest multiple of BUFSIZ < INT_MAX
       * as some legacy code may expect int instead of size_t.
       */
      do
	{
	  GETIOV (;);
 400b818:	00000306 	br	400b828 <__sfvwrite_r+0xa4>
 400b81c:	a4c00017 	ldw	r19,0(r20)
 400b820:	a4800117 	ldw	r18,4(r20)
 400b824:	a5000204 	addi	r20,r20,8
 400b828:	903ffc26 	beq	r18,zero,400b81c <__sfvwrite_r+0x98>
	  w = fp->_write (ptr, fp->_cookie, p,
 400b82c:	82000917 	ldw	r8,36(r16)
 400b830:	81000717 	ldw	r4,28(r16)
			  MIN (len, INT_MAX - INT_MAX % BUFSIZ));
 400b834:	9005883a 	mov	r2,r18
 400b838:	00e00034 	movhi	r3,32768
 400b83c:	18ff0004 	addi	r3,r3,-1024
 400b840:	1880022e 	bgeu	r3,r2,400b84c <__sfvwrite_r+0xc8>
 400b844:	00a00034 	movhi	r2,32768
 400b848:	10bf0004 	addi	r2,r2,-1024
	  w = fp->_write (ptr, fp->_cookie, p,
 400b84c:	100f883a 	mov	r7,r2
 400b850:	980d883a 	mov	r6,r19
 400b854:	200b883a 	mov	r5,r4
 400b858:	e13ff217 	ldw	r4,-56(fp)
 400b85c:	403ee83a 	callr	r8
 400b860:	1023883a 	mov	r17,r2
	  if (w <= 0)
 400b864:	0441270e 	bge	zero,r17,400bd04 <__sfvwrite_r+0x580>
	    goto err;
	  p += w;
 400b868:	8805883a 	mov	r2,r17
 400b86c:	98a7883a 	add	r19,r19,r2
	  len -= w;
 400b870:	8805883a 	mov	r2,r17
 400b874:	90a5c83a 	sub	r18,r18,r2
	}
      while ((uio->uio_resid -= w) != 0);
 400b878:	a8800217 	ldw	r2,8(r21)
 400b87c:	8807883a 	mov	r3,r17
 400b880:	10c5c83a 	sub	r2,r2,r3
 400b884:	a8800215 	stw	r2,8(r21)
 400b888:	a8800217 	ldw	r2,8(r21)
 400b88c:	103fe61e 	bne	r2,zero,400b828 <__sfvwrite_r+0xa4>
 400b890:	00011a06 	br	400bcfc <__sfvwrite_r+0x578>
    }
  else if ((fp->_flags & __SLBF) == 0)
 400b894:	8080030b 	ldhu	r2,12(r16)
 400b898:	10bfffcc 	andi	r2,r2,65535
 400b89c:	1080004c 	andi	r2,r2,1
 400b8a0:	1000b41e 	bne	r2,zero,400bb74 <__sfvwrite_r+0x3f0>
       * we are dealing with the asprintf routines, we will
       * dynamically increase the buffer size as needed.
       */
      do
	{
	  GETIOV (;);
 400b8a4:	00000306 	br	400b8b4 <__sfvwrite_r+0x130>
 400b8a8:	a4c00017 	ldw	r19,0(r20)
 400b8ac:	a4800117 	ldw	r18,4(r20)
 400b8b0:	a5000204 	addi	r20,r20,8
 400b8b4:	903ffc26 	beq	r18,zero,400b8a8 <__sfvwrite_r+0x124>
	  w = fp->_w;
 400b8b8:	84400217 	ldw	r17,8(r16)
	  if (fp->_flags & __SSTR)
 400b8bc:	8080030b 	ldhu	r2,12(r16)
 400b8c0:	10bfffcc 	andi	r2,r2,65535
 400b8c4:	1080800c 	andi	r2,r2,512
 400b8c8:	10006826 	beq	r2,zero,400ba6c <__sfvwrite_r+0x2e8>
	    {
	      if (len >= w && fp->_flags & (__SMBF | __SOPT))
 400b8cc:	8805883a 	mov	r2,r17
 400b8d0:	90805436 	bltu	r18,r2,400ba24 <__sfvwrite_r+0x2a0>
 400b8d4:	8080030b 	ldhu	r2,12(r16)
 400b8d8:	10bfffcc 	andi	r2,r2,65535
 400b8dc:	1081200c 	andi	r2,r2,1152
 400b8e0:	10005026 	beq	r2,zero,400ba24 <__sfvwrite_r+0x2a0>
		{ /* must be asprintf family */
		  unsigned char *str;
		  int curpos = (fp->_p - fp->_bf._base);
 400b8e4:	80c00017 	ldw	r3,0(r16)
 400b8e8:	80800417 	ldw	r2,16(r16)
 400b8ec:	1885c83a 	sub	r2,r3,r2
 400b8f0:	e0bff315 	stw	r2,-52(fp)
		     than (1+sqrt(5))/2 to accomodate malloc
		     overhead. asprintf EXPECTS us to overallocate, so
		     that it can add a trailing \0 without
		     reallocating.  The new allocation should thus be
		     max(prev_size*1.5, curpos+len+1). */
		  int newsize = fp->_bf._size * 3 / 2;
 400b8f4:	80800517 	ldw	r2,20(r16)
 400b8f8:	108000e4 	muli	r2,r2,3
 400b8fc:	1006d7fa 	srli	r3,r2,31
 400b900:	1885883a 	add	r2,r3,r2
 400b904:	1005d07a 	srai	r2,r2,1
 400b908:	e0bff515 	stw	r2,-44(fp)
		  if (newsize < curpos + len + 1)
 400b90c:	e0bff317 	ldw	r2,-52(fp)
 400b910:	9085883a 	add	r2,r18,r2
 400b914:	10800044 	addi	r2,r2,1
 400b918:	e0fff517 	ldw	r3,-44(fp)
 400b91c:	1880042e 	bgeu	r3,r2,400b930 <__sfvwrite_r+0x1ac>
		    newsize = curpos + len + 1;
 400b920:	e0bff317 	ldw	r2,-52(fp)
 400b924:	9085883a 	add	r2,r18,r2
 400b928:	10800044 	addi	r2,r2,1
 400b92c:	e0bff515 	stw	r2,-44(fp)
		  if (fp->_flags & __SOPT)
 400b930:	8080030b 	ldhu	r2,12(r16)
 400b934:	10bfffcc 	andi	r2,r2,65535
 400b938:	1081000c 	andi	r2,r2,1024
 400b93c:	10001726 	beq	r2,zero,400b99c <__sfvwrite_r+0x218>
		    {
		      /* asnprintf leaves original buffer alone.  */
		      str = (unsigned char *)_malloc_r (ptr, newsize);
 400b940:	e0bff517 	ldw	r2,-44(fp)
 400b944:	100b883a 	mov	r5,r2
 400b948:	e13ff217 	ldw	r4,-56(fp)
 400b94c:	40067380 	call	4006738 <_malloc_r>
 400b950:	e0bff615 	stw	r2,-40(fp)
		      if (!str)
 400b954:	e0bff617 	ldw	r2,-40(fp)
 400b958:	1000041e 	bne	r2,zero,400b96c <__sfvwrite_r+0x1e8>
			{
			  ptr->_errno = ENOMEM;
 400b95c:	e0bff217 	ldw	r2,-56(fp)
 400b960:	00c00304 	movi	r3,12
 400b964:	10c00015 	stw	r3,0(r2)
			  goto err;
 400b968:	0000eb06 	br	400bd18 <__sfvwrite_r+0x594>
			}
		      memcpy (str, fp->_bf._base, curpos);
 400b96c:	80800417 	ldw	r2,16(r16)
 400b970:	e0fff317 	ldw	r3,-52(fp)
 400b974:	180d883a 	mov	r6,r3
 400b978:	100b883a 	mov	r5,r2
 400b97c:	e13ff617 	ldw	r4,-40(fp)
 400b980:	40075940 	call	4007594 <memcpy>
		      fp->_flags = (fp->_flags & ~__SOPT) | __SMBF;
 400b984:	80c0030b 	ldhu	r3,12(r16)
 400b988:	00bedfc4 	movi	r2,-1153
 400b98c:	1884703a 	and	r2,r3,r2
 400b990:	10802014 	ori	r2,r2,128
 400b994:	8080030d 	sth	r2,12(r16)
 400b998:	00001506 	br	400b9f0 <__sfvwrite_r+0x26c>
		    }
		  else
		    {
		      str = (unsigned char *)_realloc_r (ptr, fp->_bf._base,
 400b99c:	80800417 	ldw	r2,16(r16)
 400b9a0:	e0fff517 	ldw	r3,-44(fp)
 400b9a4:	180d883a 	mov	r6,r3
 400b9a8:	100b883a 	mov	r5,r2
 400b9ac:	e13ff217 	ldw	r4,-56(fp)
 400b9b0:	400c0a00 	call	400c0a0 <_realloc_r>
 400b9b4:	e0bff615 	stw	r2,-40(fp)
							 newsize);
		      if (!str)
 400b9b8:	e0bff617 	ldw	r2,-40(fp)
 400b9bc:	10000c1e 	bne	r2,zero,400b9f0 <__sfvwrite_r+0x26c>
			{
			  /* Free buffer which is no longer used and clear
			     __SMBF flag to avoid double free in fclose.  */
			  _free_r (ptr, fp->_bf._base);
 400b9c0:	80800417 	ldw	r2,16(r16)
 400b9c4:	100b883a 	mov	r5,r2
 400b9c8:	e13ff217 	ldw	r4,-56(fp)
 400b9cc:	40055ac0 	call	40055ac <_free_r>
			  fp->_flags &=  ~__SMBF;
 400b9d0:	80c0030b 	ldhu	r3,12(r16)
 400b9d4:	00bfdfc4 	movi	r2,-129
 400b9d8:	1884703a 	and	r2,r3,r2
 400b9dc:	8080030d 	sth	r2,12(r16)
			  /* Ensure correct errno, even if free changed it.  */
			  ptr->_errno = ENOMEM;
 400b9e0:	e0bff217 	ldw	r2,-56(fp)
 400b9e4:	00c00304 	movi	r3,12
 400b9e8:	10c00015 	stw	r3,0(r2)
			  goto err;
 400b9ec:	0000ca06 	br	400bd18 <__sfvwrite_r+0x594>
			}
		    }
		  fp->_bf._base = str;
 400b9f0:	e0bff617 	ldw	r2,-40(fp)
 400b9f4:	80800415 	stw	r2,16(r16)
		  fp->_p = str + curpos;
 400b9f8:	e0bff317 	ldw	r2,-52(fp)
 400b9fc:	e0fff617 	ldw	r3,-40(fp)
 400ba00:	1885883a 	add	r2,r3,r2
 400ba04:	80800015 	stw	r2,0(r16)
		  fp->_bf._size = newsize;
 400ba08:	e0bff517 	ldw	r2,-44(fp)
 400ba0c:	80800515 	stw	r2,20(r16)
		  w = len;
 400ba10:	9023883a 	mov	r17,r18
		  fp->_w = newsize - curpos;
 400ba14:	e0fff517 	ldw	r3,-44(fp)
 400ba18:	e0bff317 	ldw	r2,-52(fp)
 400ba1c:	1885c83a 	sub	r2,r3,r2
 400ba20:	80800215 	stw	r2,8(r16)
		}
	      if (len < w)
 400ba24:	8805883a 	mov	r2,r17
 400ba28:	9080012e 	bgeu	r18,r2,400ba30 <__sfvwrite_r+0x2ac>
		w = len;
 400ba2c:	9023883a 	mov	r17,r18
	      COPY (w);		/* copy MIN(fp->_w,len), */
 400ba30:	80800017 	ldw	r2,0(r16)
 400ba34:	8807883a 	mov	r3,r17
 400ba38:	180d883a 	mov	r6,r3
 400ba3c:	980b883a 	mov	r5,r19
 400ba40:	1009883a 	mov	r4,r2
 400ba44:	400be280 	call	400be28 <memmove>
	      fp->_w -= w;
 400ba48:	80800217 	ldw	r2,8(r16)
 400ba4c:	1445c83a 	sub	r2,r2,r17
 400ba50:	80800215 	stw	r2,8(r16)
	      fp->_p += w;
 400ba54:	80800017 	ldw	r2,0(r16)
 400ba58:	8807883a 	mov	r3,r17
 400ba5c:	10c5883a 	add	r2,r2,r3
 400ba60:	80800015 	stw	r2,0(r16)
	      w = len;		/* but pretend copied all */
 400ba64:	9023883a 	mov	r17,r18
 400ba68:	00003706 	br	400bb48 <__sfvwrite_r+0x3c4>
	    }
	  else if (fp->_p > fp->_bf._base || len < fp->_bf._size)
 400ba6c:	80800017 	ldw	r2,0(r16)
 400ba70:	80c00417 	ldw	r3,16(r16)
 400ba74:	18800236 	bltu	r3,r2,400ba80 <__sfvwrite_r+0x2fc>
 400ba78:	80800517 	ldw	r2,20(r16)
 400ba7c:	9080192e 	bgeu	r18,r2,400bae4 <__sfvwrite_r+0x360>
	    {
	      /* pass through the buffer */
	      w = MIN (len, w);
 400ba80:	8807883a 	mov	r3,r17
 400ba84:	9005883a 	mov	r2,r18
 400ba88:	1880012e 	bgeu	r3,r2,400ba90 <__sfvwrite_r+0x30c>
 400ba8c:	1805883a 	mov	r2,r3
 400ba90:	1023883a 	mov	r17,r2
	      COPY (w);
 400ba94:	80800017 	ldw	r2,0(r16)
 400ba98:	8807883a 	mov	r3,r17
 400ba9c:	180d883a 	mov	r6,r3
 400baa0:	980b883a 	mov	r5,r19
 400baa4:	1009883a 	mov	r4,r2
 400baa8:	400be280 	call	400be28 <memmove>
	      fp->_w -= w;
 400baac:	80800217 	ldw	r2,8(r16)
 400bab0:	1445c83a 	sub	r2,r2,r17
 400bab4:	80800215 	stw	r2,8(r16)
	      fp->_p += w;
 400bab8:	80800017 	ldw	r2,0(r16)
 400babc:	8807883a 	mov	r3,r17
 400bac0:	10c5883a 	add	r2,r2,r3
 400bac4:	80800015 	stw	r2,0(r16)
	      if (fp->_w == 0 && _fflush_r (ptr, fp))
 400bac8:	80800217 	ldw	r2,8(r16)
 400bacc:	10001d1e 	bne	r2,zero,400bb44 <__sfvwrite_r+0x3c0>
 400bad0:	800b883a 	mov	r5,r16
 400bad4:	e13ff217 	ldw	r4,-56(fp)
 400bad8:	4004e800 	call	4004e80 <_fflush_r>
 400badc:	10001926 	beq	r2,zero,400bb44 <__sfvwrite_r+0x3c0>
		goto err;
 400bae0:	00008d06 	br	400bd18 <__sfvwrite_r+0x594>
	    }
	  else
	    {
	      /* write directly */
	      w = ((int)MIN (len, INT_MAX)) / fp->_bf._size * fp->_bf._size;
 400bae4:	00a00034 	movhi	r2,32768
 400bae8:	10bfff84 	addi	r2,r2,-2
 400baec:	14800236 	bltu	r2,r18,400baf8 <__sfvwrite_r+0x374>
 400baf0:	9005883a 	mov	r2,r18
 400baf4:	00000206 	br	400bb00 <__sfvwrite_r+0x37c>
 400baf8:	00a00034 	movhi	r2,32768
 400bafc:	10bfffc4 	addi	r2,r2,-1
 400bb00:	80c00517 	ldw	r3,20(r16)
 400bb04:	180b883a 	mov	r5,r3
 400bb08:	1009883a 	mov	r4,r2
 400bb0c:	400dfe00 	call	400dfe0 <__divsi3>
 400bb10:	1007883a 	mov	r3,r2
 400bb14:	80800517 	ldw	r2,20(r16)
 400bb18:	18a3383a 	mul	r17,r3,r2
	      w = fp->_write (ptr, fp->_cookie, p, w);
 400bb1c:	80800917 	ldw	r2,36(r16)
 400bb20:	80c00717 	ldw	r3,28(r16)
 400bb24:	880f883a 	mov	r7,r17
 400bb28:	980d883a 	mov	r6,r19
 400bb2c:	180b883a 	mov	r5,r3
 400bb30:	e13ff217 	ldw	r4,-56(fp)
 400bb34:	103ee83a 	callr	r2
 400bb38:	1023883a 	mov	r17,r2
	      if (w <= 0)
 400bb3c:	0440730e 	bge	zero,r17,400bd0c <__sfvwrite_r+0x588>
 400bb40:	00000106 	br	400bb48 <__sfvwrite_r+0x3c4>
	      if (fp->_w == 0 && _fflush_r (ptr, fp))
 400bb44:	0001883a 	nop
		goto err;
	    }
	  p += w;
 400bb48:	8805883a 	mov	r2,r17
 400bb4c:	98a7883a 	add	r19,r19,r2
	  len -= w;
 400bb50:	8805883a 	mov	r2,r17
 400bb54:	90a5c83a 	sub	r18,r18,r2
	}
      while ((uio->uio_resid -= w) != 0);
 400bb58:	a8800217 	ldw	r2,8(r21)
 400bb5c:	8807883a 	mov	r3,r17
 400bb60:	10c5c83a 	sub	r2,r2,r3
 400bb64:	a8800215 	stw	r2,8(r21)
 400bb68:	a8800217 	ldw	r2,8(r21)
 400bb6c:	103f511e 	bne	r2,zero,400b8b4 <__sfvwrite_r+0x130>
 400bb70:	00006206 	br	400bcfc <__sfvwrite_r+0x578>
       * must check for newlines.  Compute the distance
       * to the first newline (including the newline),
       * or `infinity' if there is none, then pretend
       * that the amount to write is MIN(len,nldist).
       */
      nlknown = 0;
 400bb74:	e03ff815 	stw	zero,-32(fp)
      nldist = 0;
 400bb78:	e03ff715 	stw	zero,-36(fp)
      do
	{
	  GETIOV (nlknown = 0);
 400bb7c:	00000406 	br	400bb90 <__sfvwrite_r+0x40c>
 400bb80:	e03ff815 	stw	zero,-32(fp)
 400bb84:	a4c00017 	ldw	r19,0(r20)
 400bb88:	a4800117 	ldw	r18,4(r20)
 400bb8c:	a5000204 	addi	r20,r20,8
 400bb90:	903ffb26 	beq	r18,zero,400bb80 <__sfvwrite_r+0x3fc>
	  if (!nlknown)
 400bb94:	e0bff817 	ldw	r2,-32(fp)
 400bb98:	10000f1e 	bne	r2,zero,400bbd8 <__sfvwrite_r+0x454>
	    {
	      nl = memchr ((void *) p, '\n', len);
 400bb9c:	900d883a 	mov	r6,r18
 400bba0:	01400284 	movi	r5,10
 400bba4:	9809883a 	mov	r4,r19
 400bba8:	40073d80 	call	40073d8 <memchr>
 400bbac:	e0bff415 	stw	r2,-48(fp)
	      nldist = nl ? nl + 1 - p : len + 1;
 400bbb0:	e0bff417 	ldw	r2,-48(fp)
 400bbb4:	10000426 	beq	r2,zero,400bbc8 <__sfvwrite_r+0x444>
 400bbb8:	e0bff417 	ldw	r2,-48(fp)
 400bbbc:	10800044 	addi	r2,r2,1
 400bbc0:	14c5c83a 	sub	r2,r2,r19
 400bbc4:	00000106 	br	400bbcc <__sfvwrite_r+0x448>
 400bbc8:	90800044 	addi	r2,r18,1
 400bbcc:	e0bff715 	stw	r2,-36(fp)
	      nlknown = 1;
 400bbd0:	00800044 	movi	r2,1
 400bbd4:	e0bff815 	stw	r2,-32(fp)
	    }
	  s = MIN (len, nldist);
 400bbd8:	e0fff717 	ldw	r3,-36(fp)
 400bbdc:	9005883a 	mov	r2,r18
 400bbe0:	1880012e 	bgeu	r3,r2,400bbe8 <__sfvwrite_r+0x464>
 400bbe4:	1805883a 	mov	r2,r3
 400bbe8:	102d883a 	mov	r22,r2
	  w = fp->_w + fp->_bf._size;
 400bbec:	80c00217 	ldw	r3,8(r16)
 400bbf0:	80800517 	ldw	r2,20(r16)
 400bbf4:	18a3883a 	add	r17,r3,r2
	  if (fp->_p > fp->_bf._base && s > w)
 400bbf8:	80800017 	ldw	r2,0(r16)
 400bbfc:	80c00417 	ldw	r3,16(r16)
 400bc00:	1880102e 	bgeu	r3,r2,400bc44 <__sfvwrite_r+0x4c0>
 400bc04:	8d800f0e 	bge	r17,r22,400bc44 <__sfvwrite_r+0x4c0>
	    {
	      COPY (w);
 400bc08:	80800017 	ldw	r2,0(r16)
 400bc0c:	8807883a 	mov	r3,r17
 400bc10:	180d883a 	mov	r6,r3
 400bc14:	980b883a 	mov	r5,r19
 400bc18:	1009883a 	mov	r4,r2
 400bc1c:	400be280 	call	400be28 <memmove>
	      /* fp->_w -= w; */
	      fp->_p += w;
 400bc20:	80800017 	ldw	r2,0(r16)
 400bc24:	8807883a 	mov	r3,r17
 400bc28:	10c5883a 	add	r2,r2,r3
 400bc2c:	80800015 	stw	r2,0(r16)
	      if (_fflush_r (ptr, fp))
 400bc30:	800b883a 	mov	r5,r16
 400bc34:	e13ff217 	ldw	r4,-56(fp)
 400bc38:	4004e800 	call	4004e80 <_fflush_r>
 400bc3c:	10001b26 	beq	r2,zero,400bcac <__sfvwrite_r+0x528>
		goto err;
 400bc40:	00003506 	br	400bd18 <__sfvwrite_r+0x594>
	    }
	  else if (s >= (w = fp->_bf._size))
 400bc44:	84400517 	ldw	r17,20(r16)
 400bc48:	b4400a16 	blt	r22,r17,400bc74 <__sfvwrite_r+0x4f0>
	    {
	      w = fp->_write (ptr, fp->_cookie, p, w);
 400bc4c:	80800917 	ldw	r2,36(r16)
 400bc50:	80c00717 	ldw	r3,28(r16)
 400bc54:	880f883a 	mov	r7,r17
 400bc58:	980d883a 	mov	r6,r19
 400bc5c:	180b883a 	mov	r5,r3
 400bc60:	e13ff217 	ldw	r4,-56(fp)
 400bc64:	103ee83a 	callr	r2
 400bc68:	1023883a 	mov	r17,r2
	      if (w <= 0)
 400bc6c:	04400f16 	blt	zero,r17,400bcac <__sfvwrite_r+0x528>
		goto err;
 400bc70:	00002906 	br	400bd18 <__sfvwrite_r+0x594>
	    }
	  else
	    {
	      w = s;
 400bc74:	b023883a 	mov	r17,r22
	      COPY (w);
 400bc78:	80800017 	ldw	r2,0(r16)
 400bc7c:	8807883a 	mov	r3,r17
 400bc80:	180d883a 	mov	r6,r3
 400bc84:	980b883a 	mov	r5,r19
 400bc88:	1009883a 	mov	r4,r2
 400bc8c:	400be280 	call	400be28 <memmove>
	      fp->_w -= w;
 400bc90:	80800217 	ldw	r2,8(r16)
 400bc94:	1445c83a 	sub	r2,r2,r17
 400bc98:	80800215 	stw	r2,8(r16)
	      fp->_p += w;
 400bc9c:	80800017 	ldw	r2,0(r16)
 400bca0:	8807883a 	mov	r3,r17
 400bca4:	10c5883a 	add	r2,r2,r3
 400bca8:	80800015 	stw	r2,0(r16)
	    }
	  if ((nldist -= w) == 0)
 400bcac:	e0bff717 	ldw	r2,-36(fp)
 400bcb0:	1445c83a 	sub	r2,r2,r17
 400bcb4:	e0bff715 	stw	r2,-36(fp)
 400bcb8:	e0bff717 	ldw	r2,-36(fp)
 400bcbc:	1000051e 	bne	r2,zero,400bcd4 <__sfvwrite_r+0x550>
	    {
	      /* copied the newline: flush and forget */
	      if (_fflush_r (ptr, fp))
 400bcc0:	800b883a 	mov	r5,r16
 400bcc4:	e13ff217 	ldw	r4,-56(fp)
 400bcc8:	4004e800 	call	4004e80 <_fflush_r>
 400bccc:	1000111e 	bne	r2,zero,400bd14 <__sfvwrite_r+0x590>
		goto err;
	      nlknown = 0;
 400bcd0:	e03ff815 	stw	zero,-32(fp)
	    }
	  p += w;
 400bcd4:	8805883a 	mov	r2,r17
 400bcd8:	98a7883a 	add	r19,r19,r2
	  len -= w;
 400bcdc:	8805883a 	mov	r2,r17
 400bce0:	90a5c83a 	sub	r18,r18,r2
	}
      while ((uio->uio_resid -= w) != 0);
 400bce4:	a8800217 	ldw	r2,8(r21)
 400bce8:	8807883a 	mov	r3,r17
 400bcec:	10c5c83a 	sub	r2,r2,r3
 400bcf0:	a8800215 	stw	r2,8(r21)
 400bcf4:	a8800217 	ldw	r2,8(r21)
 400bcf8:	103fa51e 	bne	r2,zero,400bb90 <__sfvwrite_r+0x40c>
    }
  return 0;
 400bcfc:	0005883a 	mov	r2,zero
 400bd00:	00000906 	br	400bd28 <__sfvwrite_r+0x5a4>
	    goto err;
 400bd04:	0001883a 	nop
 400bd08:	00000306 	br	400bd18 <__sfvwrite_r+0x594>
		goto err;
 400bd0c:	0001883a 	nop
 400bd10:	00000106 	br	400bd18 <__sfvwrite_r+0x594>
		goto err;
 400bd14:	0001883a 	nop

err:
  fp->_flags |= __SERR;
 400bd18:	8080030b 	ldhu	r2,12(r16)
 400bd1c:	10801014 	ori	r2,r2,64
 400bd20:	8080030d 	sth	r2,12(r16)
  return EOF;
 400bd24:	00bfffc4 	movi	r2,-1
}
 400bd28:	e6fff904 	addi	sp,fp,-28
 400bd2c:	dfc00817 	ldw	ra,32(sp)
 400bd30:	df000717 	ldw	fp,28(sp)
 400bd34:	dd800617 	ldw	r22,24(sp)
 400bd38:	dd400517 	ldw	r21,20(sp)
 400bd3c:	dd000417 	ldw	r20,16(sp)
 400bd40:	dcc00317 	ldw	r19,12(sp)
 400bd44:	dc800217 	ldw	r18,8(sp)
 400bd48:	dc400117 	ldw	r17,4(sp)
 400bd4c:	dc000017 	ldw	r16,0(sp)
 400bd50:	dec00904 	addi	sp,sp,36
 400bd54:	f800283a 	ret

0400bd58 <_isatty_r>:

int
_isatty_r (ptr, fd)
     struct _reent *ptr;
     int fd;
{
 400bd58:	defffb04 	addi	sp,sp,-20
 400bd5c:	dfc00415 	stw	ra,16(sp)
 400bd60:	df000315 	stw	fp,12(sp)
 400bd64:	df000304 	addi	fp,sp,12
 400bd68:	e13ffe15 	stw	r4,-8(fp)
 400bd6c:	e17ffd15 	stw	r5,-12(fp)
  int ret;

  errno = 0;
 400bd70:	d0271515 	stw	zero,-25516(gp)
  if ((ret = _isatty (fd)) == -1 && errno != 0)
 400bd74:	e13ffd17 	ldw	r4,-12(fp)
 400bd78:	4010a9c0 	call	4010a9c <isatty>
 400bd7c:	e0bfff15 	stw	r2,-4(fp)
 400bd80:	e0bfff17 	ldw	r2,-4(fp)
 400bd84:	10bfffd8 	cmpnei	r2,r2,-1
 400bd88:	1000051e 	bne	r2,zero,400bda0 <_isatty_r+0x48>
 400bd8c:	d0a71517 	ldw	r2,-25516(gp)
 400bd90:	10000326 	beq	r2,zero,400bda0 <_isatty_r+0x48>
    ptr->_errno = errno;
 400bd94:	d0e71517 	ldw	r3,-25516(gp)
 400bd98:	e0bffe17 	ldw	r2,-8(fp)
 400bd9c:	10c00015 	stw	r3,0(r2)
  return ret;
 400bda0:	e0bfff17 	ldw	r2,-4(fp)
}
 400bda4:	e037883a 	mov	sp,fp
 400bda8:	dfc00117 	ldw	ra,4(sp)
 400bdac:	df000017 	ldw	fp,0(sp)
 400bdb0:	dec00204 	addi	sp,sp,8
 400bdb4:	f800283a 	ret

0400bdb8 <_lseek_r>:
_off_t
_lseek_r (struct _reent *ptr,
     int fd,
     _off_t pos,
     int whence)
{
 400bdb8:	defff904 	addi	sp,sp,-28
 400bdbc:	dfc00615 	stw	ra,24(sp)
 400bdc0:	df000515 	stw	fp,20(sp)
 400bdc4:	df000504 	addi	fp,sp,20
 400bdc8:	e13ffe15 	stw	r4,-8(fp)
 400bdcc:	e17ffd15 	stw	r5,-12(fp)
 400bdd0:	e1bffc15 	stw	r6,-16(fp)
 400bdd4:	e1fffb15 	stw	r7,-20(fp)
  _off_t ret;

  errno = 0;
 400bdd8:	d0271515 	stw	zero,-25516(gp)
  if ((ret = _lseek (fd, pos, whence)) == (_off_t) -1 && errno != 0)
 400bddc:	e1bffb17 	ldw	r6,-20(fp)
 400bde0:	e17ffc17 	ldw	r5,-16(fp)
 400bde4:	e13ffd17 	ldw	r4,-12(fp)
 400bde8:	4010dd00 	call	4010dd0 <lseek>
 400bdec:	e0bfff15 	stw	r2,-4(fp)
 400bdf0:	e0bfff17 	ldw	r2,-4(fp)
 400bdf4:	10bfffd8 	cmpnei	r2,r2,-1
 400bdf8:	1000051e 	bne	r2,zero,400be10 <_lseek_r+0x58>
 400bdfc:	d0a71517 	ldw	r2,-25516(gp)
 400be00:	10000326 	beq	r2,zero,400be10 <_lseek_r+0x58>
    ptr->_errno = errno;
 400be04:	d0e71517 	ldw	r3,-25516(gp)
 400be08:	e0bffe17 	ldw	r2,-8(fp)
 400be0c:	10c00015 	stw	r3,0(r2)
  return ret;
 400be10:	e0bfff17 	ldw	r2,-4(fp)
}
 400be14:	e037883a 	mov	sp,fp
 400be18:	dfc00117 	ldw	ra,4(sp)
 400be1c:	df000017 	ldw	fp,0(sp)
 400be20:	dec00204 	addi	sp,sp,8
 400be24:	f800283a 	ret

0400be28 <memmove>:
void *
__inhibit_loop_to_libcall
memmove (void *dst_void,
	const void *src_void,
	size_t length)
{
 400be28:	defff804 	addi	sp,sp,-32
 400be2c:	df000715 	stw	fp,28(sp)
 400be30:	df000704 	addi	fp,sp,28
 400be34:	e13ffb15 	stw	r4,-20(fp)
 400be38:	e17ffa15 	stw	r5,-24(fp)
 400be3c:	e1bff915 	stw	r6,-28(fp)
	}
    }

  return dst_void;
#else
  char *dst = dst_void;
 400be40:	e0bffb17 	ldw	r2,-20(fp)
 400be44:	e0bfff15 	stw	r2,-4(fp)
  const char *src = src_void;
 400be48:	e0bffa17 	ldw	r2,-24(fp)
 400be4c:	e0bffe15 	stw	r2,-8(fp)
  long *aligned_dst;
  const long *aligned_src;

  if (src < dst && dst < src + length)
 400be50:	e0fffe17 	ldw	r3,-8(fp)
 400be54:	e0bfff17 	ldw	r2,-4(fp)
 400be58:	18801d2e 	bgeu	r3,r2,400bed0 <memmove+0xa8>
 400be5c:	e0fffe17 	ldw	r3,-8(fp)
 400be60:	e0bff917 	ldw	r2,-28(fp)
 400be64:	1885883a 	add	r2,r3,r2
 400be68:	e0ffff17 	ldw	r3,-4(fp)
 400be6c:	1880182e 	bgeu	r3,r2,400bed0 <memmove+0xa8>
    {
      /* Destructive overlap...have to copy backwards */
      src += length;
 400be70:	e0fffe17 	ldw	r3,-8(fp)
 400be74:	e0bff917 	ldw	r2,-28(fp)
 400be78:	1885883a 	add	r2,r3,r2
 400be7c:	e0bffe15 	stw	r2,-8(fp)
      dst += length;
 400be80:	e0ffff17 	ldw	r3,-4(fp)
 400be84:	e0bff917 	ldw	r2,-28(fp)
 400be88:	1885883a 	add	r2,r3,r2
 400be8c:	e0bfff15 	stw	r2,-4(fp)
      while (length--)
 400be90:	00000a06 	br	400bebc <memmove+0x94>
	{
	  *--dst = *--src;
 400be94:	e0bffe17 	ldw	r2,-8(fp)
 400be98:	10bfffc4 	addi	r2,r2,-1
 400be9c:	e0bffe15 	stw	r2,-8(fp)
 400bea0:	e0bfff17 	ldw	r2,-4(fp)
 400bea4:	10bfffc4 	addi	r2,r2,-1
 400bea8:	e0bfff15 	stw	r2,-4(fp)
 400beac:	e0bffe17 	ldw	r2,-8(fp)
 400beb0:	10c00003 	ldbu	r3,0(r2)
 400beb4:	e0bfff17 	ldw	r2,-4(fp)
 400beb8:	10c00005 	stb	r3,0(r2)
      while (length--)
 400bebc:	e0bff917 	ldw	r2,-28(fp)
 400bec0:	10ffffc4 	addi	r3,r2,-1
 400bec4:	e0fff915 	stw	r3,-28(fp)
 400bec8:	103ff21e 	bne	r2,zero,400be94 <memmove+0x6c>
  if (src < dst && dst < src + length)
 400becc:	00005306 	br	400c01c <memmove+0x1f4>
  else
    {
      /* Use optimizing algorithm for a non-destructive copy to closely 
         match memcpy. If the size is small or either SRC or DST is unaligned,
         then punt into the byte copy loop.  This should be rare.  */
      if (!TOO_SMALL(length) && !UNALIGNED (src, dst))
 400bed0:	e0bff917 	ldw	r2,-28(fp)
 400bed4:	10800430 	cmpltui	r2,r2,16
 400bed8:	10004c1e 	bne	r2,zero,400c00c <memmove+0x1e4>
 400bedc:	e0fffe17 	ldw	r3,-8(fp)
 400bee0:	e0bfff17 	ldw	r2,-4(fp)
 400bee4:	1884b03a 	or	r2,r3,r2
 400bee8:	108000cc 	andi	r2,r2,3
 400beec:	1000471e 	bne	r2,zero,400c00c <memmove+0x1e4>
        {
          aligned_dst = (long*)dst;
 400bef0:	e0bfff17 	ldw	r2,-4(fp)
 400bef4:	e0bffd15 	stw	r2,-12(fp)
          aligned_src = (long*)src;
 400bef8:	e0bffe17 	ldw	r2,-8(fp)
 400befc:	e0bffc15 	stw	r2,-16(fp)

          /* Copy 4X long words at a time if possible.  */
          while (length >= BIGBLOCKSIZE)
 400bf00:	00002306 	br	400bf90 <memmove+0x168>
            {
              *aligned_dst++ = *aligned_src++;
 400bf04:	e0fffc17 	ldw	r3,-16(fp)
 400bf08:	18800104 	addi	r2,r3,4
 400bf0c:	e0bffc15 	stw	r2,-16(fp)
 400bf10:	e0bffd17 	ldw	r2,-12(fp)
 400bf14:	11000104 	addi	r4,r2,4
 400bf18:	e13ffd15 	stw	r4,-12(fp)
 400bf1c:	18c00017 	ldw	r3,0(r3)
 400bf20:	10c00015 	stw	r3,0(r2)
              *aligned_dst++ = *aligned_src++;
 400bf24:	e0fffc17 	ldw	r3,-16(fp)
 400bf28:	18800104 	addi	r2,r3,4
 400bf2c:	e0bffc15 	stw	r2,-16(fp)
 400bf30:	e0bffd17 	ldw	r2,-12(fp)
 400bf34:	11000104 	addi	r4,r2,4
 400bf38:	e13ffd15 	stw	r4,-12(fp)
 400bf3c:	18c00017 	ldw	r3,0(r3)
 400bf40:	10c00015 	stw	r3,0(r2)
              *aligned_dst++ = *aligned_src++;
 400bf44:	e0fffc17 	ldw	r3,-16(fp)
 400bf48:	18800104 	addi	r2,r3,4
 400bf4c:	e0bffc15 	stw	r2,-16(fp)
 400bf50:	e0bffd17 	ldw	r2,-12(fp)
 400bf54:	11000104 	addi	r4,r2,4
 400bf58:	e13ffd15 	stw	r4,-12(fp)
 400bf5c:	18c00017 	ldw	r3,0(r3)
 400bf60:	10c00015 	stw	r3,0(r2)
              *aligned_dst++ = *aligned_src++;
 400bf64:	e0fffc17 	ldw	r3,-16(fp)
 400bf68:	18800104 	addi	r2,r3,4
 400bf6c:	e0bffc15 	stw	r2,-16(fp)
 400bf70:	e0bffd17 	ldw	r2,-12(fp)
 400bf74:	11000104 	addi	r4,r2,4
 400bf78:	e13ffd15 	stw	r4,-12(fp)
 400bf7c:	18c00017 	ldw	r3,0(r3)
 400bf80:	10c00015 	stw	r3,0(r2)
              length -= BIGBLOCKSIZE;
 400bf84:	e0bff917 	ldw	r2,-28(fp)
 400bf88:	10bffc04 	addi	r2,r2,-16
 400bf8c:	e0bff915 	stw	r2,-28(fp)
          while (length >= BIGBLOCKSIZE)
 400bf90:	e0bff917 	ldw	r2,-28(fp)
 400bf94:	10800428 	cmpgeui	r2,r2,16
 400bf98:	103fda1e 	bne	r2,zero,400bf04 <memmove+0xdc>
            }

          /* Copy one long word at a time if possible.  */
          while (length >= LITTLEBLOCKSIZE)
 400bf9c:	00000b06 	br	400bfcc <memmove+0x1a4>
            {
              *aligned_dst++ = *aligned_src++;
 400bfa0:	e0fffc17 	ldw	r3,-16(fp)
 400bfa4:	18800104 	addi	r2,r3,4
 400bfa8:	e0bffc15 	stw	r2,-16(fp)
 400bfac:	e0bffd17 	ldw	r2,-12(fp)
 400bfb0:	11000104 	addi	r4,r2,4
 400bfb4:	e13ffd15 	stw	r4,-12(fp)
 400bfb8:	18c00017 	ldw	r3,0(r3)
 400bfbc:	10c00015 	stw	r3,0(r2)
              length -= LITTLEBLOCKSIZE;
 400bfc0:	e0bff917 	ldw	r2,-28(fp)
 400bfc4:	10bfff04 	addi	r2,r2,-4
 400bfc8:	e0bff915 	stw	r2,-28(fp)
          while (length >= LITTLEBLOCKSIZE)
 400bfcc:	e0bff917 	ldw	r2,-28(fp)
 400bfd0:	10800128 	cmpgeui	r2,r2,4
 400bfd4:	103ff21e 	bne	r2,zero,400bfa0 <memmove+0x178>
            }

          /* Pick up any residual with a byte copier.  */
          dst = (char*)aligned_dst;
 400bfd8:	e0bffd17 	ldw	r2,-12(fp)
 400bfdc:	e0bfff15 	stw	r2,-4(fp)
          src = (char*)aligned_src;
 400bfe0:	e0bffc17 	ldw	r2,-16(fp)
 400bfe4:	e0bffe15 	stw	r2,-8(fp)
        }

      while (length--)
 400bfe8:	00000806 	br	400c00c <memmove+0x1e4>
        {
          *dst++ = *src++;
 400bfec:	e0fffe17 	ldw	r3,-8(fp)
 400bff0:	18800044 	addi	r2,r3,1
 400bff4:	e0bffe15 	stw	r2,-8(fp)
 400bff8:	e0bfff17 	ldw	r2,-4(fp)
 400bffc:	11000044 	addi	r4,r2,1
 400c000:	e13fff15 	stw	r4,-4(fp)
 400c004:	18c00003 	ldbu	r3,0(r3)
 400c008:	10c00005 	stb	r3,0(r2)
      while (length--)
 400c00c:	e0bff917 	ldw	r2,-28(fp)
 400c010:	10ffffc4 	addi	r3,r2,-1
 400c014:	e0fff915 	stw	r3,-28(fp)
 400c018:	103ff41e 	bne	r2,zero,400bfec <memmove+0x1c4>
        }
    }

  return dst_void;
 400c01c:	e0bffb17 	ldw	r2,-20(fp)
#endif /* not PREFER_SIZE_OVER_SPEED */
}
 400c020:	e037883a 	mov	sp,fp
 400c024:	df000017 	ldw	fp,0(sp)
 400c028:	dec00104 	addi	sp,sp,4
 400c02c:	f800283a 	ret

0400c030 <_read_r>:
_ssize_t
_read_r (struct _reent *ptr,
     int fd,
     void *buf,
     size_t cnt)
{
 400c030:	defff904 	addi	sp,sp,-28
 400c034:	dfc00615 	stw	ra,24(sp)
 400c038:	df000515 	stw	fp,20(sp)
 400c03c:	df000504 	addi	fp,sp,20
 400c040:	e13ffe15 	stw	r4,-8(fp)
 400c044:	e17ffd15 	stw	r5,-12(fp)
 400c048:	e1bffc15 	stw	r6,-16(fp)
 400c04c:	e1fffb15 	stw	r7,-20(fp)
  _ssize_t ret;

  errno = 0;
 400c050:	d0271515 	stw	zero,-25516(gp)
  if ((ret = (_ssize_t)_read (fd, buf, cnt)) == -1 && errno != 0)
 400c054:	e1bffb17 	ldw	r6,-20(fp)
 400c058:	e17ffc17 	ldw	r5,-16(fp)
 400c05c:	e13ffd17 	ldw	r4,-12(fp)
 400c060:	4010fa40 	call	4010fa4 <read>
 400c064:	e0bfff15 	stw	r2,-4(fp)
 400c068:	e0bfff17 	ldw	r2,-4(fp)
 400c06c:	10bfffd8 	cmpnei	r2,r2,-1
 400c070:	1000051e 	bne	r2,zero,400c088 <_read_r+0x58>
 400c074:	d0a71517 	ldw	r2,-25516(gp)
 400c078:	10000326 	beq	r2,zero,400c088 <_read_r+0x58>
    ptr->_errno = errno;
 400c07c:	d0e71517 	ldw	r3,-25516(gp)
 400c080:	e0bffe17 	ldw	r2,-8(fp)
 400c084:	10c00015 	stw	r3,0(r2)
  return ret;
 400c088:	e0bfff17 	ldw	r2,-4(fp)
}
 400c08c:	e037883a 	mov	sp,fp
 400c090:	dfc00117 	ldw	ra,4(sp)
 400c094:	df000017 	ldw	fp,0(sp)
 400c098:	dec00204 	addi	sp,sp,8
 400c09c:	f800283a 	ret

0400c0a0 <_realloc_r>:
{
 400c0a0:	deffe104 	addi	sp,sp,-124
 400c0a4:	dfc01e15 	stw	ra,120(sp)
 400c0a8:	df001d15 	stw	fp,116(sp)
 400c0ac:	df001d04 	addi	fp,sp,116
 400c0b0:	e13fe515 	stw	r4,-108(fp)
 400c0b4:	e17fe415 	stw	r5,-112(fp)
 400c0b8:	e1bfe315 	stw	r6,-116(fp)
  if (oldmem == 0) return mALLOc(RCALL bytes);
 400c0bc:	e0bfe417 	ldw	r2,-112(fp)
 400c0c0:	1000041e 	bne	r2,zero,400c0d4 <_realloc_r+0x34>
 400c0c4:	e17fe317 	ldw	r5,-116(fp)
 400c0c8:	e13fe517 	ldw	r4,-108(fp)
 400c0cc:	40067380 	call	4006738 <_malloc_r>
 400c0d0:	0002eb06 	br	400cc80 <_realloc_r+0xbe0>
  MALLOC_LOCK;
 400c0d4:	e13fe517 	ldw	r4,-108(fp)
 400c0d8:	4010f200 	call	4010f20 <__malloc_lock>
  newp    = oldp    = mem2chunk(oldmem);
 400c0dc:	e0bfe417 	ldw	r2,-112(fp)
 400c0e0:	10bffe04 	addi	r2,r2,-8
 400c0e4:	e0bff315 	stw	r2,-52(fp)
 400c0e8:	e0bff317 	ldw	r2,-52(fp)
 400c0ec:	e0bfff15 	stw	r2,-4(fp)
  newsize = oldsize = chunksize(oldp);
 400c0f0:	e0bff317 	ldw	r2,-52(fp)
 400c0f4:	10c00117 	ldw	r3,4(r2)
 400c0f8:	00bfff04 	movi	r2,-4
 400c0fc:	1884703a 	and	r2,r3,r2
 400c100:	e0bff215 	stw	r2,-56(fp)
 400c104:	e0bff217 	ldw	r2,-56(fp)
 400c108:	e0bffe15 	stw	r2,-8(fp)
  nb = request2size(bytes);
 400c10c:	e0bfe317 	ldw	r2,-116(fp)
 400c110:	108002c4 	addi	r2,r2,11
 400c114:	108005f0 	cmpltui	r2,r2,23
 400c118:	1000051e 	bne	r2,zero,400c130 <_realloc_r+0x90>
 400c11c:	e0bfe317 	ldw	r2,-116(fp)
 400c120:	10c002c4 	addi	r3,r2,11
 400c124:	00bffe04 	movi	r2,-8
 400c128:	1884703a 	and	r2,r3,r2
 400c12c:	00000106 	br	400c134 <_realloc_r+0x94>
 400c130:	00800404 	movi	r2,16
 400c134:	e0bff115 	stw	r2,-60(fp)
  if (nb > INT_MAX || nb < bytes)
 400c138:	e0bff117 	ldw	r2,-60(fp)
 400c13c:	10000316 	blt	r2,zero,400c14c <_realloc_r+0xac>
 400c140:	e0fff117 	ldw	r3,-60(fp)
 400c144:	e0bfe317 	ldw	r2,-116(fp)
 400c148:	1880052e 	bgeu	r3,r2,400c160 <_realloc_r+0xc0>
    RERRNO = ENOMEM;
 400c14c:	e0bfe517 	ldw	r2,-108(fp)
 400c150:	00c00304 	movi	r3,12
 400c154:	10c00015 	stw	r3,0(r2)
    return 0;
 400c158:	0005883a 	mov	r2,zero
 400c15c:	0002c806 	br	400cc80 <_realloc_r+0xbe0>
  if ((long)(oldsize) < (long)(nb))  
 400c160:	e0fff217 	ldw	r3,-56(fp)
 400c164:	e0bff117 	ldw	r2,-60(fp)
 400c168:	18828b0e 	bge	r3,r2,400cb98 <_realloc_r+0xaf8>
    next = chunk_at_offset(oldp, oldsize);
 400c16c:	e0fff317 	ldw	r3,-52(fp)
 400c170:	e0bff217 	ldw	r2,-56(fp)
 400c174:	1885883a 	add	r2,r3,r2
 400c178:	e0bffd15 	stw	r2,-12(fp)
    if (next == top || !inuse(next)) 
 400c17c:	00810074 	movhi	r2,1025
 400c180:	1090cf04 	addi	r2,r2,17212
 400c184:	10800217 	ldw	r2,8(r2)
 400c188:	e0fffd17 	ldw	r3,-12(fp)
 400c18c:	18800926 	beq	r3,r2,400c1b4 <_realloc_r+0x114>
 400c190:	e0bffd17 	ldw	r2,-12(fp)
 400c194:	10c00117 	ldw	r3,4(r2)
 400c198:	00bfff84 	movi	r2,-2
 400c19c:	1884703a 	and	r2,r3,r2
 400c1a0:	e0fffd17 	ldw	r3,-12(fp)
 400c1a4:	1885883a 	add	r2,r3,r2
 400c1a8:	10800117 	ldw	r2,4(r2)
 400c1ac:	1080004c 	andi	r2,r2,1
 400c1b0:	1000461e 	bne	r2,zero,400c2cc <_realloc_r+0x22c>
      nextsize = chunksize(next);
 400c1b4:	e0bffd17 	ldw	r2,-12(fp)
 400c1b8:	10c00117 	ldw	r3,4(r2)
 400c1bc:	00bfff04 	movi	r2,-4
 400c1c0:	1884703a 	and	r2,r3,r2
 400c1c4:	e0bffc15 	stw	r2,-16(fp)
      if (next == top)
 400c1c8:	00810074 	movhi	r2,1025
 400c1cc:	1090cf04 	addi	r2,r2,17212
 400c1d0:	10800217 	ldw	r2,8(r2)
 400c1d4:	e0fffd17 	ldw	r3,-12(fp)
 400c1d8:	1880251e 	bne	r3,r2,400c270 <_realloc_r+0x1d0>
        if ((long)(nextsize + newsize) >= (long)(nb + MINSIZE))
 400c1dc:	e0fffc17 	ldw	r3,-16(fp)
 400c1e0:	e0bffe17 	ldw	r2,-8(fp)
 400c1e4:	1885883a 	add	r2,r3,r2
 400c1e8:	1007883a 	mov	r3,r2
 400c1ec:	e0bff117 	ldw	r2,-60(fp)
 400c1f0:	10800404 	addi	r2,r2,16
 400c1f4:	18803816 	blt	r3,r2,400c2d8 <_realloc_r+0x238>
          newsize += nextsize;
 400c1f8:	e0fffe17 	ldw	r3,-8(fp)
 400c1fc:	e0bffc17 	ldw	r2,-16(fp)
 400c200:	1885883a 	add	r2,r3,r2
 400c204:	e0bffe15 	stw	r2,-8(fp)
          top = chunk_at_offset(oldp, nb);
 400c208:	00810074 	movhi	r2,1025
 400c20c:	1090cf04 	addi	r2,r2,17212
 400c210:	e13ff317 	ldw	r4,-52(fp)
 400c214:	e0fff117 	ldw	r3,-60(fp)
 400c218:	20c7883a 	add	r3,r4,r3
 400c21c:	10c00215 	stw	r3,8(r2)
          set_head(top, (newsize - nb) | PREV_INUSE);
 400c220:	e0fffe17 	ldw	r3,-8(fp)
 400c224:	e0bff117 	ldw	r2,-60(fp)
 400c228:	1887c83a 	sub	r3,r3,r2
 400c22c:	00810074 	movhi	r2,1025
 400c230:	1090cf04 	addi	r2,r2,17212
 400c234:	10800217 	ldw	r2,8(r2)
 400c238:	18c00054 	ori	r3,r3,1
 400c23c:	10c00115 	stw	r3,4(r2)
          set_head_size(oldp, nb);
 400c240:	e0bff317 	ldw	r2,-52(fp)
 400c244:	10800117 	ldw	r2,4(r2)
 400c248:	10c0004c 	andi	r3,r2,1
 400c24c:	e0bff117 	ldw	r2,-60(fp)
 400c250:	1886b03a 	or	r3,r3,r2
 400c254:	e0bff317 	ldw	r2,-52(fp)
 400c258:	10c00115 	stw	r3,4(r2)
	  MALLOC_UNLOCK;
 400c25c:	e13fe517 	ldw	r4,-108(fp)
 400c260:	4010f440 	call	4010f44 <__malloc_unlock>
          return chunk2mem(oldp);
 400c264:	e0bff317 	ldw	r2,-52(fp)
 400c268:	10800204 	addi	r2,r2,8
 400c26c:	00028406 	br	400cc80 <_realloc_r+0xbe0>
      else if (((long)(nextsize + newsize) >= (long)(nb)))
 400c270:	e0fffc17 	ldw	r3,-16(fp)
 400c274:	e0bffe17 	ldw	r2,-8(fp)
 400c278:	1885883a 	add	r2,r3,r2
 400c27c:	1007883a 	mov	r3,r2
 400c280:	e0bff117 	ldw	r2,-60(fp)
 400c284:	18801416 	blt	r3,r2,400c2d8 <_realloc_r+0x238>
        unlink(next, bck, fwd);
 400c288:	e0bffd17 	ldw	r2,-12(fp)
 400c28c:	10800317 	ldw	r2,12(r2)
 400c290:	e0bff015 	stw	r2,-64(fp)
 400c294:	e0bffd17 	ldw	r2,-12(fp)
 400c298:	10800217 	ldw	r2,8(r2)
 400c29c:	e0bfef15 	stw	r2,-68(fp)
 400c2a0:	e0bfef17 	ldw	r2,-68(fp)
 400c2a4:	e0fff017 	ldw	r3,-64(fp)
 400c2a8:	10c00315 	stw	r3,12(r2)
 400c2ac:	e0bff017 	ldw	r2,-64(fp)
 400c2b0:	e0ffef17 	ldw	r3,-68(fp)
 400c2b4:	10c00215 	stw	r3,8(r2)
        newsize  += nextsize;
 400c2b8:	e0fffe17 	ldw	r3,-8(fp)
 400c2bc:	e0bffc17 	ldw	r2,-16(fp)
 400c2c0:	1885883a 	add	r2,r3,r2
 400c2c4:	e0bffe15 	stw	r2,-8(fp)
        goto split;
 400c2c8:	00023406 	br	400cb9c <_realloc_r+0xafc>
      next = 0;
 400c2cc:	e03ffd15 	stw	zero,-12(fp)
      nextsize = 0;
 400c2d0:	e03ffc15 	stw	zero,-16(fp)
 400c2d4:	00000106 	br	400c2dc <_realloc_r+0x23c>
      if (next == top)
 400c2d8:	0001883a 	nop
    if (!prev_inuse(oldp))
 400c2dc:	e0bff317 	ldw	r2,-52(fp)
 400c2e0:	10800117 	ldw	r2,4(r2)
 400c2e4:	1080004c 	andi	r2,r2,1
 400c2e8:	1001a91e 	bne	r2,zero,400c990 <_realloc_r+0x8f0>
      prev = prev_chunk(oldp);
 400c2ec:	e0bff317 	ldw	r2,-52(fp)
 400c2f0:	10800017 	ldw	r2,0(r2)
 400c2f4:	0085c83a 	sub	r2,zero,r2
 400c2f8:	e0fff317 	ldw	r3,-52(fp)
 400c2fc:	1885883a 	add	r2,r3,r2
 400c300:	e0bfee15 	stw	r2,-72(fp)
      prevsize = chunksize(prev);
 400c304:	e0bfee17 	ldw	r2,-72(fp)
 400c308:	10c00117 	ldw	r3,4(r2)
 400c30c:	00bfff04 	movi	r2,-4
 400c310:	1884703a 	and	r2,r3,r2
 400c314:	e0bfed15 	stw	r2,-76(fp)
      if (next != 0)
 400c318:	e0bffd17 	ldw	r2,-12(fp)
 400c31c:	10012226 	beq	r2,zero,400c7a8 <_realloc_r+0x708>
        if (next == top)
 400c320:	00810074 	movhi	r2,1025
 400c324:	1090cf04 	addi	r2,r2,17212
 400c328:	10800217 	ldw	r2,8(r2)
 400c32c:	e0fffd17 	ldw	r3,-12(fp)
 400c330:	1880951e 	bne	r3,r2,400c588 <_realloc_r+0x4e8>
          if ((long)(nextsize + prevsize + newsize) >= (long)(nb + MINSIZE))
 400c334:	e0fffc17 	ldw	r3,-16(fp)
 400c338:	e0bfed17 	ldw	r2,-76(fp)
 400c33c:	1887883a 	add	r3,r3,r2
 400c340:	e0bffe17 	ldw	r2,-8(fp)
 400c344:	1885883a 	add	r2,r3,r2
 400c348:	1007883a 	mov	r3,r2
 400c34c:	e0bff117 	ldw	r2,-60(fp)
 400c350:	10800404 	addi	r2,r2,16
 400c354:	18811416 	blt	r3,r2,400c7a8 <_realloc_r+0x708>
            unlink(prev, bck, fwd);
 400c358:	e0bfee17 	ldw	r2,-72(fp)
 400c35c:	10800317 	ldw	r2,12(r2)
 400c360:	e0bff015 	stw	r2,-64(fp)
 400c364:	e0bfee17 	ldw	r2,-72(fp)
 400c368:	10800217 	ldw	r2,8(r2)
 400c36c:	e0bfef15 	stw	r2,-68(fp)
 400c370:	e0bfef17 	ldw	r2,-68(fp)
 400c374:	e0fff017 	ldw	r3,-64(fp)
 400c378:	10c00315 	stw	r3,12(r2)
 400c37c:	e0bff017 	ldw	r2,-64(fp)
 400c380:	e0ffef17 	ldw	r3,-68(fp)
 400c384:	10c00215 	stw	r3,8(r2)
            newp = prev;
 400c388:	e0bfee17 	ldw	r2,-72(fp)
 400c38c:	e0bfff15 	stw	r2,-4(fp)
            newsize += prevsize + nextsize;
 400c390:	e0ffed17 	ldw	r3,-76(fp)
 400c394:	e0bffc17 	ldw	r2,-16(fp)
 400c398:	1885883a 	add	r2,r3,r2
 400c39c:	e0fffe17 	ldw	r3,-8(fp)
 400c3a0:	1885883a 	add	r2,r3,r2
 400c3a4:	e0bffe15 	stw	r2,-8(fp)
            newmem = chunk2mem(newp);
 400c3a8:	e0bfff17 	ldw	r2,-4(fp)
 400c3ac:	10800204 	addi	r2,r2,8
 400c3b0:	e0bfec15 	stw	r2,-80(fp)
            MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
 400c3b4:	e0bff217 	ldw	r2,-56(fp)
 400c3b8:	10bfff04 	addi	r2,r2,-4
 400c3bc:	e0bfea15 	stw	r2,-88(fp)
 400c3c0:	e0bfea17 	ldw	r2,-88(fp)
 400c3c4:	10800968 	cmpgeui	r2,r2,37
 400c3c8:	1000521e 	bne	r2,zero,400c514 <_realloc_r+0x474>
 400c3cc:	e0bfe417 	ldw	r2,-112(fp)
 400c3d0:	e0bffb15 	stw	r2,-20(fp)
 400c3d4:	e0bfec17 	ldw	r2,-80(fp)
 400c3d8:	e0bffa15 	stw	r2,-24(fp)
 400c3dc:	e0bfea17 	ldw	r2,-88(fp)
 400c3e0:	10800530 	cmpltui	r2,r2,20
 400c3e4:	1000361e 	bne	r2,zero,400c4c0 <_realloc_r+0x420>
 400c3e8:	e0fffb17 	ldw	r3,-20(fp)
 400c3ec:	18800104 	addi	r2,r3,4
 400c3f0:	e0bffb15 	stw	r2,-20(fp)
 400c3f4:	e0bffa17 	ldw	r2,-24(fp)
 400c3f8:	11000104 	addi	r4,r2,4
 400c3fc:	e13ffa15 	stw	r4,-24(fp)
 400c400:	18c00017 	ldw	r3,0(r3)
 400c404:	10c00015 	stw	r3,0(r2)
 400c408:	e0fffb17 	ldw	r3,-20(fp)
 400c40c:	18800104 	addi	r2,r3,4
 400c410:	e0bffb15 	stw	r2,-20(fp)
 400c414:	e0bffa17 	ldw	r2,-24(fp)
 400c418:	11000104 	addi	r4,r2,4
 400c41c:	e13ffa15 	stw	r4,-24(fp)
 400c420:	18c00017 	ldw	r3,0(r3)
 400c424:	10c00015 	stw	r3,0(r2)
 400c428:	e0bfea17 	ldw	r2,-88(fp)
 400c42c:	10800730 	cmpltui	r2,r2,28
 400c430:	1000231e 	bne	r2,zero,400c4c0 <_realloc_r+0x420>
 400c434:	e0fffb17 	ldw	r3,-20(fp)
 400c438:	18800104 	addi	r2,r3,4
 400c43c:	e0bffb15 	stw	r2,-20(fp)
 400c440:	e0bffa17 	ldw	r2,-24(fp)
 400c444:	11000104 	addi	r4,r2,4
 400c448:	e13ffa15 	stw	r4,-24(fp)
 400c44c:	18c00017 	ldw	r3,0(r3)
 400c450:	10c00015 	stw	r3,0(r2)
 400c454:	e0fffb17 	ldw	r3,-20(fp)
 400c458:	18800104 	addi	r2,r3,4
 400c45c:	e0bffb15 	stw	r2,-20(fp)
 400c460:	e0bffa17 	ldw	r2,-24(fp)
 400c464:	11000104 	addi	r4,r2,4
 400c468:	e13ffa15 	stw	r4,-24(fp)
 400c46c:	18c00017 	ldw	r3,0(r3)
 400c470:	10c00015 	stw	r3,0(r2)
 400c474:	e0bfea17 	ldw	r2,-88(fp)
 400c478:	10800930 	cmpltui	r2,r2,36
 400c47c:	1000101e 	bne	r2,zero,400c4c0 <_realloc_r+0x420>
 400c480:	e0fffb17 	ldw	r3,-20(fp)
 400c484:	18800104 	addi	r2,r3,4
 400c488:	e0bffb15 	stw	r2,-20(fp)
 400c48c:	e0bffa17 	ldw	r2,-24(fp)
 400c490:	11000104 	addi	r4,r2,4
 400c494:	e13ffa15 	stw	r4,-24(fp)
 400c498:	18c00017 	ldw	r3,0(r3)
 400c49c:	10c00015 	stw	r3,0(r2)
 400c4a0:	e0fffb17 	ldw	r3,-20(fp)
 400c4a4:	18800104 	addi	r2,r3,4
 400c4a8:	e0bffb15 	stw	r2,-20(fp)
 400c4ac:	e0bffa17 	ldw	r2,-24(fp)
 400c4b0:	11000104 	addi	r4,r2,4
 400c4b4:	e13ffa15 	stw	r4,-24(fp)
 400c4b8:	18c00017 	ldw	r3,0(r3)
 400c4bc:	10c00015 	stw	r3,0(r2)
 400c4c0:	e0fffb17 	ldw	r3,-20(fp)
 400c4c4:	18800104 	addi	r2,r3,4
 400c4c8:	e0bffb15 	stw	r2,-20(fp)
 400c4cc:	e0bffa17 	ldw	r2,-24(fp)
 400c4d0:	11000104 	addi	r4,r2,4
 400c4d4:	e13ffa15 	stw	r4,-24(fp)
 400c4d8:	18c00017 	ldw	r3,0(r3)
 400c4dc:	10c00015 	stw	r3,0(r2)
 400c4e0:	e0fffb17 	ldw	r3,-20(fp)
 400c4e4:	18800104 	addi	r2,r3,4
 400c4e8:	e0bffb15 	stw	r2,-20(fp)
 400c4ec:	e0bffa17 	ldw	r2,-24(fp)
 400c4f0:	11000104 	addi	r4,r2,4
 400c4f4:	e13ffa15 	stw	r4,-24(fp)
 400c4f8:	18c00017 	ldw	r3,0(r3)
 400c4fc:	10c00015 	stw	r3,0(r2)
 400c500:	e0bffb17 	ldw	r2,-20(fp)
 400c504:	10c00017 	ldw	r3,0(r2)
 400c508:	e0bffa17 	ldw	r2,-24(fp)
 400c50c:	10c00015 	stw	r3,0(r2)
 400c510:	00000406 	br	400c524 <_realloc_r+0x484>
 400c514:	e1bfea17 	ldw	r6,-88(fp)
 400c518:	e17fe417 	ldw	r5,-112(fp)
 400c51c:	e13fec17 	ldw	r4,-80(fp)
 400c520:	400be280 	call	400be28 <memmove>
            top = chunk_at_offset(newp, nb);
 400c524:	00810074 	movhi	r2,1025
 400c528:	1090cf04 	addi	r2,r2,17212
 400c52c:	e13fff17 	ldw	r4,-4(fp)
 400c530:	e0fff117 	ldw	r3,-60(fp)
 400c534:	20c7883a 	add	r3,r4,r3
 400c538:	10c00215 	stw	r3,8(r2)
            set_head(top, (newsize - nb) | PREV_INUSE);
 400c53c:	e0fffe17 	ldw	r3,-8(fp)
 400c540:	e0bff117 	ldw	r2,-60(fp)
 400c544:	1887c83a 	sub	r3,r3,r2
 400c548:	00810074 	movhi	r2,1025
 400c54c:	1090cf04 	addi	r2,r2,17212
 400c550:	10800217 	ldw	r2,8(r2)
 400c554:	18c00054 	ori	r3,r3,1
 400c558:	10c00115 	stw	r3,4(r2)
            set_head_size(newp, nb);
 400c55c:	e0bfff17 	ldw	r2,-4(fp)
 400c560:	10800117 	ldw	r2,4(r2)
 400c564:	10c0004c 	andi	r3,r2,1
 400c568:	e0bff117 	ldw	r2,-60(fp)
 400c56c:	1886b03a 	or	r3,r3,r2
 400c570:	e0bfff17 	ldw	r2,-4(fp)
 400c574:	10c00115 	stw	r3,4(r2)
	    MALLOC_UNLOCK;
 400c578:	e13fe517 	ldw	r4,-108(fp)
 400c57c:	4010f440 	call	4010f44 <__malloc_unlock>
            return newmem;
 400c580:	e0bfec17 	ldw	r2,-80(fp)
 400c584:	0001be06 	br	400cc80 <_realloc_r+0xbe0>
        else if (((long)(nextsize + prevsize + newsize) >= (long)(nb)))
 400c588:	e0fffc17 	ldw	r3,-16(fp)
 400c58c:	e0bfed17 	ldw	r2,-76(fp)
 400c590:	1887883a 	add	r3,r3,r2
 400c594:	e0bffe17 	ldw	r2,-8(fp)
 400c598:	1885883a 	add	r2,r3,r2
 400c59c:	1007883a 	mov	r3,r2
 400c5a0:	e0bff117 	ldw	r2,-60(fp)
 400c5a4:	18808016 	blt	r3,r2,400c7a8 <_realloc_r+0x708>
          unlink(next, bck, fwd);
 400c5a8:	e0bffd17 	ldw	r2,-12(fp)
 400c5ac:	10800317 	ldw	r2,12(r2)
 400c5b0:	e0bff015 	stw	r2,-64(fp)
 400c5b4:	e0bffd17 	ldw	r2,-12(fp)
 400c5b8:	10800217 	ldw	r2,8(r2)
 400c5bc:	e0bfef15 	stw	r2,-68(fp)
 400c5c0:	e0bfef17 	ldw	r2,-68(fp)
 400c5c4:	e0fff017 	ldw	r3,-64(fp)
 400c5c8:	10c00315 	stw	r3,12(r2)
 400c5cc:	e0bff017 	ldw	r2,-64(fp)
 400c5d0:	e0ffef17 	ldw	r3,-68(fp)
 400c5d4:	10c00215 	stw	r3,8(r2)
          unlink(prev, bck, fwd);
 400c5d8:	e0bfee17 	ldw	r2,-72(fp)
 400c5dc:	10800317 	ldw	r2,12(r2)
 400c5e0:	e0bff015 	stw	r2,-64(fp)
 400c5e4:	e0bfee17 	ldw	r2,-72(fp)
 400c5e8:	10800217 	ldw	r2,8(r2)
 400c5ec:	e0bfef15 	stw	r2,-68(fp)
 400c5f0:	e0bfef17 	ldw	r2,-68(fp)
 400c5f4:	e0fff017 	ldw	r3,-64(fp)
 400c5f8:	10c00315 	stw	r3,12(r2)
 400c5fc:	e0bff017 	ldw	r2,-64(fp)
 400c600:	e0ffef17 	ldw	r3,-68(fp)
 400c604:	10c00215 	stw	r3,8(r2)
          newp = prev;
 400c608:	e0bfee17 	ldw	r2,-72(fp)
 400c60c:	e0bfff15 	stw	r2,-4(fp)
          newsize += nextsize + prevsize;
 400c610:	e0fffc17 	ldw	r3,-16(fp)
 400c614:	e0bfed17 	ldw	r2,-76(fp)
 400c618:	1885883a 	add	r2,r3,r2
 400c61c:	e0fffe17 	ldw	r3,-8(fp)
 400c620:	1885883a 	add	r2,r3,r2
 400c624:	e0bffe15 	stw	r2,-8(fp)
          newmem = chunk2mem(newp);
 400c628:	e0bfff17 	ldw	r2,-4(fp)
 400c62c:	10800204 	addi	r2,r2,8
 400c630:	e0bfec15 	stw	r2,-80(fp)
          MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
 400c634:	e0bff217 	ldw	r2,-56(fp)
 400c638:	10bfff04 	addi	r2,r2,-4
 400c63c:	e0bfeb15 	stw	r2,-84(fp)
 400c640:	e0bfeb17 	ldw	r2,-84(fp)
 400c644:	10800968 	cmpgeui	r2,r2,37
 400c648:	1000521e 	bne	r2,zero,400c794 <_realloc_r+0x6f4>
 400c64c:	e0bfe417 	ldw	r2,-112(fp)
 400c650:	e0bff915 	stw	r2,-28(fp)
 400c654:	e0bfec17 	ldw	r2,-80(fp)
 400c658:	e0bff815 	stw	r2,-32(fp)
 400c65c:	e0bfeb17 	ldw	r2,-84(fp)
 400c660:	10800530 	cmpltui	r2,r2,20
 400c664:	1000361e 	bne	r2,zero,400c740 <_realloc_r+0x6a0>
 400c668:	e0fff917 	ldw	r3,-28(fp)
 400c66c:	18800104 	addi	r2,r3,4
 400c670:	e0bff915 	stw	r2,-28(fp)
 400c674:	e0bff817 	ldw	r2,-32(fp)
 400c678:	11000104 	addi	r4,r2,4
 400c67c:	e13ff815 	stw	r4,-32(fp)
 400c680:	18c00017 	ldw	r3,0(r3)
 400c684:	10c00015 	stw	r3,0(r2)
 400c688:	e0fff917 	ldw	r3,-28(fp)
 400c68c:	18800104 	addi	r2,r3,4
 400c690:	e0bff915 	stw	r2,-28(fp)
 400c694:	e0bff817 	ldw	r2,-32(fp)
 400c698:	11000104 	addi	r4,r2,4
 400c69c:	e13ff815 	stw	r4,-32(fp)
 400c6a0:	18c00017 	ldw	r3,0(r3)
 400c6a4:	10c00015 	stw	r3,0(r2)
 400c6a8:	e0bfeb17 	ldw	r2,-84(fp)
 400c6ac:	10800730 	cmpltui	r2,r2,28
 400c6b0:	1000231e 	bne	r2,zero,400c740 <_realloc_r+0x6a0>
 400c6b4:	e0fff917 	ldw	r3,-28(fp)
 400c6b8:	18800104 	addi	r2,r3,4
 400c6bc:	e0bff915 	stw	r2,-28(fp)
 400c6c0:	e0bff817 	ldw	r2,-32(fp)
 400c6c4:	11000104 	addi	r4,r2,4
 400c6c8:	e13ff815 	stw	r4,-32(fp)
 400c6cc:	18c00017 	ldw	r3,0(r3)
 400c6d0:	10c00015 	stw	r3,0(r2)
 400c6d4:	e0fff917 	ldw	r3,-28(fp)
 400c6d8:	18800104 	addi	r2,r3,4
 400c6dc:	e0bff915 	stw	r2,-28(fp)
 400c6e0:	e0bff817 	ldw	r2,-32(fp)
 400c6e4:	11000104 	addi	r4,r2,4
 400c6e8:	e13ff815 	stw	r4,-32(fp)
 400c6ec:	18c00017 	ldw	r3,0(r3)
 400c6f0:	10c00015 	stw	r3,0(r2)
 400c6f4:	e0bfeb17 	ldw	r2,-84(fp)
 400c6f8:	10800930 	cmpltui	r2,r2,36
 400c6fc:	1000101e 	bne	r2,zero,400c740 <_realloc_r+0x6a0>
 400c700:	e0fff917 	ldw	r3,-28(fp)
 400c704:	18800104 	addi	r2,r3,4
 400c708:	e0bff915 	stw	r2,-28(fp)
 400c70c:	e0bff817 	ldw	r2,-32(fp)
 400c710:	11000104 	addi	r4,r2,4
 400c714:	e13ff815 	stw	r4,-32(fp)
 400c718:	18c00017 	ldw	r3,0(r3)
 400c71c:	10c00015 	stw	r3,0(r2)
 400c720:	e0fff917 	ldw	r3,-28(fp)
 400c724:	18800104 	addi	r2,r3,4
 400c728:	e0bff915 	stw	r2,-28(fp)
 400c72c:	e0bff817 	ldw	r2,-32(fp)
 400c730:	11000104 	addi	r4,r2,4
 400c734:	e13ff815 	stw	r4,-32(fp)
 400c738:	18c00017 	ldw	r3,0(r3)
 400c73c:	10c00015 	stw	r3,0(r2)
 400c740:	e0fff917 	ldw	r3,-28(fp)
 400c744:	18800104 	addi	r2,r3,4
 400c748:	e0bff915 	stw	r2,-28(fp)
 400c74c:	e0bff817 	ldw	r2,-32(fp)
 400c750:	11000104 	addi	r4,r2,4
 400c754:	e13ff815 	stw	r4,-32(fp)
 400c758:	18c00017 	ldw	r3,0(r3)
 400c75c:	10c00015 	stw	r3,0(r2)
 400c760:	e0fff917 	ldw	r3,-28(fp)
 400c764:	18800104 	addi	r2,r3,4
 400c768:	e0bff915 	stw	r2,-28(fp)
 400c76c:	e0bff817 	ldw	r2,-32(fp)
 400c770:	11000104 	addi	r4,r2,4
 400c774:	e13ff815 	stw	r4,-32(fp)
 400c778:	18c00017 	ldw	r3,0(r3)
 400c77c:	10c00015 	stw	r3,0(r2)
 400c780:	e0bff917 	ldw	r2,-28(fp)
 400c784:	10c00017 	ldw	r3,0(r2)
 400c788:	e0bff817 	ldw	r2,-32(fp)
 400c78c:	10c00015 	stw	r3,0(r2)
          goto split;
 400c790:	00010206 	br	400cb9c <_realloc_r+0xafc>
          MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
 400c794:	e1bfeb17 	ldw	r6,-84(fp)
 400c798:	e17fe417 	ldw	r5,-112(fp)
 400c79c:	e13fec17 	ldw	r4,-80(fp)
 400c7a0:	400be280 	call	400be28 <memmove>
          goto split;
 400c7a4:	0000fd06 	br	400cb9c <_realloc_r+0xafc>
      if (prev != 0 && (long)(prevsize + newsize) >= (long)nb)  
 400c7a8:	e0bfee17 	ldw	r2,-72(fp)
 400c7ac:	10007826 	beq	r2,zero,400c990 <_realloc_r+0x8f0>
 400c7b0:	e0ffed17 	ldw	r3,-76(fp)
 400c7b4:	e0bffe17 	ldw	r2,-8(fp)
 400c7b8:	1885883a 	add	r2,r3,r2
 400c7bc:	1007883a 	mov	r3,r2
 400c7c0:	e0bff117 	ldw	r2,-60(fp)
 400c7c4:	18807216 	blt	r3,r2,400c990 <_realloc_r+0x8f0>
        unlink(prev, bck, fwd);
 400c7c8:	e0bfee17 	ldw	r2,-72(fp)
 400c7cc:	10800317 	ldw	r2,12(r2)
 400c7d0:	e0bff015 	stw	r2,-64(fp)
 400c7d4:	e0bfee17 	ldw	r2,-72(fp)
 400c7d8:	10800217 	ldw	r2,8(r2)
 400c7dc:	e0bfef15 	stw	r2,-68(fp)
 400c7e0:	e0bfef17 	ldw	r2,-68(fp)
 400c7e4:	e0fff017 	ldw	r3,-64(fp)
 400c7e8:	10c00315 	stw	r3,12(r2)
 400c7ec:	e0bff017 	ldw	r2,-64(fp)
 400c7f0:	e0ffef17 	ldw	r3,-68(fp)
 400c7f4:	10c00215 	stw	r3,8(r2)
        newp = prev;
 400c7f8:	e0bfee17 	ldw	r2,-72(fp)
 400c7fc:	e0bfff15 	stw	r2,-4(fp)
        newsize += prevsize;
 400c800:	e0fffe17 	ldw	r3,-8(fp)
 400c804:	e0bfed17 	ldw	r2,-76(fp)
 400c808:	1885883a 	add	r2,r3,r2
 400c80c:	e0bffe15 	stw	r2,-8(fp)
        newmem = chunk2mem(newp);
 400c810:	e0bfff17 	ldw	r2,-4(fp)
 400c814:	10800204 	addi	r2,r2,8
 400c818:	e0bfec15 	stw	r2,-80(fp)
        MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
 400c81c:	e0bff217 	ldw	r2,-56(fp)
 400c820:	10bfff04 	addi	r2,r2,-4
 400c824:	e0bfe915 	stw	r2,-92(fp)
 400c828:	e0bfe917 	ldw	r2,-92(fp)
 400c82c:	10800968 	cmpgeui	r2,r2,37
 400c830:	1000521e 	bne	r2,zero,400c97c <_realloc_r+0x8dc>
 400c834:	e0bfe417 	ldw	r2,-112(fp)
 400c838:	e0bff715 	stw	r2,-36(fp)
 400c83c:	e0bfec17 	ldw	r2,-80(fp)
 400c840:	e0bff615 	stw	r2,-40(fp)
 400c844:	e0bfe917 	ldw	r2,-92(fp)
 400c848:	10800530 	cmpltui	r2,r2,20
 400c84c:	1000361e 	bne	r2,zero,400c928 <_realloc_r+0x888>
 400c850:	e0fff717 	ldw	r3,-36(fp)
 400c854:	18800104 	addi	r2,r3,4
 400c858:	e0bff715 	stw	r2,-36(fp)
 400c85c:	e0bff617 	ldw	r2,-40(fp)
 400c860:	11000104 	addi	r4,r2,4
 400c864:	e13ff615 	stw	r4,-40(fp)
 400c868:	18c00017 	ldw	r3,0(r3)
 400c86c:	10c00015 	stw	r3,0(r2)
 400c870:	e0fff717 	ldw	r3,-36(fp)
 400c874:	18800104 	addi	r2,r3,4
 400c878:	e0bff715 	stw	r2,-36(fp)
 400c87c:	e0bff617 	ldw	r2,-40(fp)
 400c880:	11000104 	addi	r4,r2,4
 400c884:	e13ff615 	stw	r4,-40(fp)
 400c888:	18c00017 	ldw	r3,0(r3)
 400c88c:	10c00015 	stw	r3,0(r2)
 400c890:	e0bfe917 	ldw	r2,-92(fp)
 400c894:	10800730 	cmpltui	r2,r2,28
 400c898:	1000231e 	bne	r2,zero,400c928 <_realloc_r+0x888>
 400c89c:	e0fff717 	ldw	r3,-36(fp)
 400c8a0:	18800104 	addi	r2,r3,4
 400c8a4:	e0bff715 	stw	r2,-36(fp)
 400c8a8:	e0bff617 	ldw	r2,-40(fp)
 400c8ac:	11000104 	addi	r4,r2,4
 400c8b0:	e13ff615 	stw	r4,-40(fp)
 400c8b4:	18c00017 	ldw	r3,0(r3)
 400c8b8:	10c00015 	stw	r3,0(r2)
 400c8bc:	e0fff717 	ldw	r3,-36(fp)
 400c8c0:	18800104 	addi	r2,r3,4
 400c8c4:	e0bff715 	stw	r2,-36(fp)
 400c8c8:	e0bff617 	ldw	r2,-40(fp)
 400c8cc:	11000104 	addi	r4,r2,4
 400c8d0:	e13ff615 	stw	r4,-40(fp)
 400c8d4:	18c00017 	ldw	r3,0(r3)
 400c8d8:	10c00015 	stw	r3,0(r2)
 400c8dc:	e0bfe917 	ldw	r2,-92(fp)
 400c8e0:	10800930 	cmpltui	r2,r2,36
 400c8e4:	1000101e 	bne	r2,zero,400c928 <_realloc_r+0x888>
 400c8e8:	e0fff717 	ldw	r3,-36(fp)
 400c8ec:	18800104 	addi	r2,r3,4
 400c8f0:	e0bff715 	stw	r2,-36(fp)
 400c8f4:	e0bff617 	ldw	r2,-40(fp)
 400c8f8:	11000104 	addi	r4,r2,4
 400c8fc:	e13ff615 	stw	r4,-40(fp)
 400c900:	18c00017 	ldw	r3,0(r3)
 400c904:	10c00015 	stw	r3,0(r2)
 400c908:	e0fff717 	ldw	r3,-36(fp)
 400c90c:	18800104 	addi	r2,r3,4
 400c910:	e0bff715 	stw	r2,-36(fp)
 400c914:	e0bff617 	ldw	r2,-40(fp)
 400c918:	11000104 	addi	r4,r2,4
 400c91c:	e13ff615 	stw	r4,-40(fp)
 400c920:	18c00017 	ldw	r3,0(r3)
 400c924:	10c00015 	stw	r3,0(r2)
 400c928:	e0fff717 	ldw	r3,-36(fp)
 400c92c:	18800104 	addi	r2,r3,4
 400c930:	e0bff715 	stw	r2,-36(fp)
 400c934:	e0bff617 	ldw	r2,-40(fp)
 400c938:	11000104 	addi	r4,r2,4
 400c93c:	e13ff615 	stw	r4,-40(fp)
 400c940:	18c00017 	ldw	r3,0(r3)
 400c944:	10c00015 	stw	r3,0(r2)
 400c948:	e0fff717 	ldw	r3,-36(fp)
 400c94c:	18800104 	addi	r2,r3,4
 400c950:	e0bff715 	stw	r2,-36(fp)
 400c954:	e0bff617 	ldw	r2,-40(fp)
 400c958:	11000104 	addi	r4,r2,4
 400c95c:	e13ff615 	stw	r4,-40(fp)
 400c960:	18c00017 	ldw	r3,0(r3)
 400c964:	10c00015 	stw	r3,0(r2)
 400c968:	e0bff717 	ldw	r2,-36(fp)
 400c96c:	10c00017 	ldw	r3,0(r2)
 400c970:	e0bff617 	ldw	r2,-40(fp)
 400c974:	10c00015 	stw	r3,0(r2)
        goto split;
 400c978:	00008806 	br	400cb9c <_realloc_r+0xafc>
        MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
 400c97c:	e1bfe917 	ldw	r6,-92(fp)
 400c980:	e17fe417 	ldw	r5,-112(fp)
 400c984:	e13fec17 	ldw	r4,-80(fp)
 400c988:	400be280 	call	400be28 <memmove>
        goto split;
 400c98c:	00008306 	br	400cb9c <_realloc_r+0xafc>
    newmem = mALLOc (RCALL bytes);
 400c990:	e17fe317 	ldw	r5,-116(fp)
 400c994:	e13fe517 	ldw	r4,-108(fp)
 400c998:	40067380 	call	4006738 <_malloc_r>
 400c99c:	e0bfec15 	stw	r2,-80(fp)
    if (newmem == 0)  /* propagate failure */
 400c9a0:	e0bfec17 	ldw	r2,-80(fp)
 400c9a4:	1000041e 	bne	r2,zero,400c9b8 <_realloc_r+0x918>
      MALLOC_UNLOCK;
 400c9a8:	e13fe517 	ldw	r4,-108(fp)
 400c9ac:	4010f440 	call	4010f44 <__malloc_unlock>
      return 0;
 400c9b0:	0005883a 	mov	r2,zero
 400c9b4:	0000b206 	br	400cc80 <_realloc_r+0xbe0>
    if ( (newp = mem2chunk(newmem)) == next_chunk(oldp)) 
 400c9b8:	e0bfec17 	ldw	r2,-80(fp)
 400c9bc:	10bffe04 	addi	r2,r2,-8
 400c9c0:	e0bfff15 	stw	r2,-4(fp)
 400c9c4:	e0bff317 	ldw	r2,-52(fp)
 400c9c8:	10c00117 	ldw	r3,4(r2)
 400c9cc:	00bfff84 	movi	r2,-2
 400c9d0:	1884703a 	and	r2,r3,r2
 400c9d4:	e0fff317 	ldw	r3,-52(fp)
 400c9d8:	1885883a 	add	r2,r3,r2
 400c9dc:	e0ffff17 	ldw	r3,-4(fp)
 400c9e0:	18800a1e 	bne	r3,r2,400ca0c <_realloc_r+0x96c>
      newsize += chunksize(newp);
 400c9e4:	e0bfff17 	ldw	r2,-4(fp)
 400c9e8:	10c00117 	ldw	r3,4(r2)
 400c9ec:	00bfff04 	movi	r2,-4
 400c9f0:	1884703a 	and	r2,r3,r2
 400c9f4:	e0fffe17 	ldw	r3,-8(fp)
 400c9f8:	1885883a 	add	r2,r3,r2
 400c9fc:	e0bffe15 	stw	r2,-8(fp)
      newp = oldp;
 400ca00:	e0bff317 	ldw	r2,-52(fp)
 400ca04:	e0bfff15 	stw	r2,-4(fp)
      goto split;
 400ca08:	00006406 	br	400cb9c <_realloc_r+0xafc>
    MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
 400ca0c:	e0bff217 	ldw	r2,-56(fp)
 400ca10:	10bfff04 	addi	r2,r2,-4
 400ca14:	e0bfe815 	stw	r2,-96(fp)
 400ca18:	e0bfe817 	ldw	r2,-96(fp)
 400ca1c:	10800968 	cmpgeui	r2,r2,37
 400ca20:	1000521e 	bne	r2,zero,400cb6c <_realloc_r+0xacc>
 400ca24:	e0bfe417 	ldw	r2,-112(fp)
 400ca28:	e0bff515 	stw	r2,-44(fp)
 400ca2c:	e0bfec17 	ldw	r2,-80(fp)
 400ca30:	e0bff415 	stw	r2,-48(fp)
 400ca34:	e0bfe817 	ldw	r2,-96(fp)
 400ca38:	10800530 	cmpltui	r2,r2,20
 400ca3c:	1000361e 	bne	r2,zero,400cb18 <_realloc_r+0xa78>
 400ca40:	e0fff517 	ldw	r3,-44(fp)
 400ca44:	18800104 	addi	r2,r3,4
 400ca48:	e0bff515 	stw	r2,-44(fp)
 400ca4c:	e0bff417 	ldw	r2,-48(fp)
 400ca50:	11000104 	addi	r4,r2,4
 400ca54:	e13ff415 	stw	r4,-48(fp)
 400ca58:	18c00017 	ldw	r3,0(r3)
 400ca5c:	10c00015 	stw	r3,0(r2)
 400ca60:	e0fff517 	ldw	r3,-44(fp)
 400ca64:	18800104 	addi	r2,r3,4
 400ca68:	e0bff515 	stw	r2,-44(fp)
 400ca6c:	e0bff417 	ldw	r2,-48(fp)
 400ca70:	11000104 	addi	r4,r2,4
 400ca74:	e13ff415 	stw	r4,-48(fp)
 400ca78:	18c00017 	ldw	r3,0(r3)
 400ca7c:	10c00015 	stw	r3,0(r2)
 400ca80:	e0bfe817 	ldw	r2,-96(fp)
 400ca84:	10800730 	cmpltui	r2,r2,28
 400ca88:	1000231e 	bne	r2,zero,400cb18 <_realloc_r+0xa78>
 400ca8c:	e0fff517 	ldw	r3,-44(fp)
 400ca90:	18800104 	addi	r2,r3,4
 400ca94:	e0bff515 	stw	r2,-44(fp)
 400ca98:	e0bff417 	ldw	r2,-48(fp)
 400ca9c:	11000104 	addi	r4,r2,4
 400caa0:	e13ff415 	stw	r4,-48(fp)
 400caa4:	18c00017 	ldw	r3,0(r3)
 400caa8:	10c00015 	stw	r3,0(r2)
 400caac:	e0fff517 	ldw	r3,-44(fp)
 400cab0:	18800104 	addi	r2,r3,4
 400cab4:	e0bff515 	stw	r2,-44(fp)
 400cab8:	e0bff417 	ldw	r2,-48(fp)
 400cabc:	11000104 	addi	r4,r2,4
 400cac0:	e13ff415 	stw	r4,-48(fp)
 400cac4:	18c00017 	ldw	r3,0(r3)
 400cac8:	10c00015 	stw	r3,0(r2)
 400cacc:	e0bfe817 	ldw	r2,-96(fp)
 400cad0:	10800930 	cmpltui	r2,r2,36
 400cad4:	1000101e 	bne	r2,zero,400cb18 <_realloc_r+0xa78>
 400cad8:	e0fff517 	ldw	r3,-44(fp)
 400cadc:	18800104 	addi	r2,r3,4
 400cae0:	e0bff515 	stw	r2,-44(fp)
 400cae4:	e0bff417 	ldw	r2,-48(fp)
 400cae8:	11000104 	addi	r4,r2,4
 400caec:	e13ff415 	stw	r4,-48(fp)
 400caf0:	18c00017 	ldw	r3,0(r3)
 400caf4:	10c00015 	stw	r3,0(r2)
 400caf8:	e0fff517 	ldw	r3,-44(fp)
 400cafc:	18800104 	addi	r2,r3,4
 400cb00:	e0bff515 	stw	r2,-44(fp)
 400cb04:	e0bff417 	ldw	r2,-48(fp)
 400cb08:	11000104 	addi	r4,r2,4
 400cb0c:	e13ff415 	stw	r4,-48(fp)
 400cb10:	18c00017 	ldw	r3,0(r3)
 400cb14:	10c00015 	stw	r3,0(r2)
 400cb18:	e0fff517 	ldw	r3,-44(fp)
 400cb1c:	18800104 	addi	r2,r3,4
 400cb20:	e0bff515 	stw	r2,-44(fp)
 400cb24:	e0bff417 	ldw	r2,-48(fp)
 400cb28:	11000104 	addi	r4,r2,4
 400cb2c:	e13ff415 	stw	r4,-48(fp)
 400cb30:	18c00017 	ldw	r3,0(r3)
 400cb34:	10c00015 	stw	r3,0(r2)
 400cb38:	e0fff517 	ldw	r3,-44(fp)
 400cb3c:	18800104 	addi	r2,r3,4
 400cb40:	e0bff515 	stw	r2,-44(fp)
 400cb44:	e0bff417 	ldw	r2,-48(fp)
 400cb48:	11000104 	addi	r4,r2,4
 400cb4c:	e13ff415 	stw	r4,-48(fp)
 400cb50:	18c00017 	ldw	r3,0(r3)
 400cb54:	10c00015 	stw	r3,0(r2)
 400cb58:	e0bff517 	ldw	r2,-44(fp)
 400cb5c:	10c00017 	ldw	r3,0(r2)
 400cb60:	e0bff417 	ldw	r2,-48(fp)
 400cb64:	10c00015 	stw	r3,0(r2)
 400cb68:	00000406 	br	400cb7c <_realloc_r+0xadc>
 400cb6c:	e1bfe817 	ldw	r6,-96(fp)
 400cb70:	e17fe417 	ldw	r5,-112(fp)
 400cb74:	e13fec17 	ldw	r4,-80(fp)
 400cb78:	400be280 	call	400be28 <memmove>
    fREe(RCALL oldmem);
 400cb7c:	e17fe417 	ldw	r5,-112(fp)
 400cb80:	e13fe517 	ldw	r4,-108(fp)
 400cb84:	40055ac0 	call	40055ac <_free_r>
    MALLOC_UNLOCK;
 400cb88:	e13fe517 	ldw	r4,-108(fp)
 400cb8c:	4010f440 	call	4010f44 <__malloc_unlock>
    return newmem;
 400cb90:	e0bfec17 	ldw	r2,-80(fp)
 400cb94:	00003a06 	br	400cc80 <_realloc_r+0xbe0>
 split:  /* split off extra room in old or expanded chunk */
 400cb98:	0001883a 	nop
  remainder_size = long_sub_size_t(newsize, nb);
 400cb9c:	e0fffe17 	ldw	r3,-8(fp)
 400cba0:	e0bff117 	ldw	r2,-60(fp)
 400cba4:	1885c83a 	sub	r2,r3,r2
 400cba8:	e0bfe715 	stw	r2,-100(fp)
  if (remainder_size >= (long)MINSIZE) /* split off remainder */
 400cbac:	e0bfe717 	ldw	r2,-100(fp)
 400cbb0:	10800430 	cmpltui	r2,r2,16
 400cbb4:	10001e1e 	bne	r2,zero,400cc30 <_realloc_r+0xb90>
    remainder = chunk_at_offset(newp, nb);
 400cbb8:	e0ffff17 	ldw	r3,-4(fp)
 400cbbc:	e0bff117 	ldw	r2,-60(fp)
 400cbc0:	1885883a 	add	r2,r3,r2
 400cbc4:	e0bfe615 	stw	r2,-104(fp)
    set_head_size(newp, nb);
 400cbc8:	e0bfff17 	ldw	r2,-4(fp)
 400cbcc:	10800117 	ldw	r2,4(r2)
 400cbd0:	10c0004c 	andi	r3,r2,1
 400cbd4:	e0bff117 	ldw	r2,-60(fp)
 400cbd8:	1886b03a 	or	r3,r3,r2
 400cbdc:	e0bfff17 	ldw	r2,-4(fp)
 400cbe0:	10c00115 	stw	r3,4(r2)
    set_head(remainder, remainder_size | PREV_INUSE);
 400cbe4:	e0bfe717 	ldw	r2,-100(fp)
 400cbe8:	10c00054 	ori	r3,r2,1
 400cbec:	e0bfe617 	ldw	r2,-104(fp)
 400cbf0:	10c00115 	stw	r3,4(r2)
    set_inuse_bit_at_offset(remainder, remainder_size);
 400cbf4:	e0ffe617 	ldw	r3,-104(fp)
 400cbf8:	e0bfe717 	ldw	r2,-100(fp)
 400cbfc:	1885883a 	add	r2,r3,r2
 400cc00:	10c00117 	ldw	r3,4(r2)
 400cc04:	e13fe617 	ldw	r4,-104(fp)
 400cc08:	e0bfe717 	ldw	r2,-100(fp)
 400cc0c:	2085883a 	add	r2,r4,r2
 400cc10:	18c00054 	ori	r3,r3,1
 400cc14:	10c00115 	stw	r3,4(r2)
    fREe(RCALL chunk2mem(remainder)); /* let free() deal with it */
 400cc18:	e0bfe617 	ldw	r2,-104(fp)
 400cc1c:	10800204 	addi	r2,r2,8
 400cc20:	100b883a 	mov	r5,r2
 400cc24:	e13fe517 	ldw	r4,-108(fp)
 400cc28:	40055ac0 	call	40055ac <_free_r>
 400cc2c:	00001006 	br	400cc70 <_realloc_r+0xbd0>
    set_head_size(newp, newsize);
 400cc30:	e0bfff17 	ldw	r2,-4(fp)
 400cc34:	10800117 	ldw	r2,4(r2)
 400cc38:	10c0004c 	andi	r3,r2,1
 400cc3c:	e0bffe17 	ldw	r2,-8(fp)
 400cc40:	1886b03a 	or	r3,r3,r2
 400cc44:	e0bfff17 	ldw	r2,-4(fp)
 400cc48:	10c00115 	stw	r3,4(r2)
    set_inuse_bit_at_offset(newp, newsize);
 400cc4c:	e0ffff17 	ldw	r3,-4(fp)
 400cc50:	e0bffe17 	ldw	r2,-8(fp)
 400cc54:	1885883a 	add	r2,r3,r2
 400cc58:	10c00117 	ldw	r3,4(r2)
 400cc5c:	e13fff17 	ldw	r4,-4(fp)
 400cc60:	e0bffe17 	ldw	r2,-8(fp)
 400cc64:	2085883a 	add	r2,r4,r2
 400cc68:	18c00054 	ori	r3,r3,1
 400cc6c:	10c00115 	stw	r3,4(r2)
  MALLOC_UNLOCK;
 400cc70:	e13fe517 	ldw	r4,-108(fp)
 400cc74:	4010f440 	call	4010f44 <__malloc_unlock>
  return chunk2mem(newp);
 400cc78:	e0bfff17 	ldw	r2,-4(fp)
 400cc7c:	10800204 	addi	r2,r2,8
}
 400cc80:	e037883a 	mov	sp,fp
 400cc84:	dfc00117 	ldw	ra,4(sp)
 400cc88:	df000017 	ldw	fp,0(sp)
 400cc8c:	dec00204 	addi	sp,sp,8
 400cc90:	f800283a 	ret

0400cc94 <_vfiprintf_r>:
_DEFUN (_vfiprintf_r, (data, fp, fmt, ap),
	struct _reent *data _AND
	FILE * fp _AND
	_CONST char *fmt _AND
	va_list ap)
{
 400cc94:	defff904 	addi	sp,sp,-28
 400cc98:	dfc00615 	stw	ra,24(sp)
 400cc9c:	df000515 	stw	fp,20(sp)
 400cca0:	df000504 	addi	fp,sp,20
 400cca4:	e13ffe15 	stw	r4,-8(fp)
 400cca8:	e17ffd15 	stw	r5,-12(fp)
 400ccac:	e1bffc15 	stw	r6,-16(fp)
 400ccb0:	e1fffb15 	stw	r7,-20(fp)
  int ret;

  _REENT_SMALL_CHECK_INIT(fp);
  _FILE_INIT_DEV_WRITE (fp);
  ret = ___vfiprintf_internal_r (data, fp, fmt, ap);
 400ccb4:	e0bffb17 	ldw	r2,-20(fp)
 400ccb8:	100f883a 	mov	r7,r2
 400ccbc:	e1bffc17 	ldw	r6,-16(fp)
 400ccc0:	e17ffd17 	ldw	r5,-12(fp)
 400ccc4:	e13ffe17 	ldw	r4,-8(fp)
 400ccc8:	4009b980 	call	4009b98 <___vfiprintf_internal_r>
 400cccc:	e0bfff15 	stw	r2,-4(fp)
  va_end (ap);
  return ret;
 400ccd0:	e0bfff17 	ldw	r2,-4(fp)
}
 400ccd4:	e037883a 	mov	sp,fp
 400ccd8:	dfc00117 	ldw	ra,4(sp)
 400ccdc:	df000017 	ldw	fp,0(sp)
 400cce0:	dec00204 	addi	sp,sp,8
 400cce4:	f800283a 	ret

0400cce8 <__swbuf_r>:

int
__swbuf_r (struct _reent *ptr,
       register int c,
       register FILE *fp)
{
 400cce8:	defff904 	addi	sp,sp,-28
 400ccec:	dfc00615 	stw	ra,24(sp)
 400ccf0:	df000515 	stw	fp,20(sp)
 400ccf4:	dc800415 	stw	r18,16(sp)
 400ccf8:	dc400315 	stw	r17,12(sp)
 400ccfc:	dc000215 	stw	r16,8(sp)
 400cd00:	df000504 	addi	fp,sp,20
 400cd04:	e13ffb15 	stw	r4,-20(fp)
 400cd08:	2825883a 	mov	r18,r5
 400cd0c:	3021883a 	mov	r16,r6
  register int n;

  /* Ensure stdio has been initialized.  */

  CHECK_INIT (ptr, fp);
 400cd10:	e0bffb17 	ldw	r2,-20(fp)
 400cd14:	e0bffc15 	stw	r2,-16(fp)
 400cd18:	e0bffc17 	ldw	r2,-16(fp)
 400cd1c:	10000526 	beq	r2,zero,400cd34 <__swbuf_r+0x4c>
 400cd20:	e0bffc17 	ldw	r2,-16(fp)
 400cd24:	10800e17 	ldw	r2,56(r2)
 400cd28:	1000021e 	bne	r2,zero,400cd34 <__swbuf_r+0x4c>
 400cd2c:	e13ffc17 	ldw	r4,-16(fp)
 400cd30:	40053b00 	call	40053b0 <__sinit>
   * (if line buffered) so that we will get called again.
   * If we did not do this, a sufficient number of putc()
   * calls might wrap _w from negative to positive.
   */

  fp->_w = fp->_lbfsize;
 400cd34:	80800617 	ldw	r2,24(r16)
 400cd38:	80800215 	stw	r2,8(r16)
  if (cantwrite (ptr, fp))
 400cd3c:	8080030b 	ldhu	r2,12(r16)
 400cd40:	10bfffcc 	andi	r2,r2,65535
 400cd44:	1080020c 	andi	r2,r2,8
 400cd48:	10000226 	beq	r2,zero,400cd54 <__swbuf_r+0x6c>
 400cd4c:	80800417 	ldw	r2,16(r16)
 400cd50:	1000061e 	bne	r2,zero,400cd6c <__swbuf_r+0x84>
 400cd54:	800b883a 	mov	r5,r16
 400cd58:	e13ffb17 	ldw	r4,-20(fp)
 400cd5c:	4002a140 	call	4002a14 <__swsetup_r>
 400cd60:	10000226 	beq	r2,zero,400cd6c <__swbuf_r+0x84>
    return EOF;
 400cd64:	00bfffc4 	movi	r2,-1
 400cd68:	00003106 	br	400ce30 <__swbuf_r+0x148>
  c = (unsigned char) c;
 400cd6c:	9005883a 	mov	r2,r18
 400cd70:	14803fcc 	andi	r18,r2,255

  ORIENT (fp, -1);
 400cd74:	8080030b 	ldhu	r2,12(r16)
 400cd78:	10bfffcc 	andi	r2,r2,65535
 400cd7c:	1088000c 	andi	r2,r2,8192
 400cd80:	1000071e 	bne	r2,zero,400cda0 <__swbuf_r+0xb8>
 400cd84:	8080030b 	ldhu	r2,12(r16)
 400cd88:	10880014 	ori	r2,r2,8192
 400cd8c:	8080030d 	sth	r2,12(r16)
 400cd90:	80c01917 	ldw	r3,100(r16)
 400cd94:	00b7ffc4 	movi	r2,-8193
 400cd98:	1884703a 	and	r2,r3,r2
 400cd9c:	80801915 	stw	r2,100(r16)
   * happen on unbuffered streams, where _bf._size==1; fflush()
   * guarantees that putc() will always call wbuf() by setting _w
   * to 0, so we need not do anything else.
   */

  n = fp->_p - fp->_bf._base;
 400cda0:	80c00017 	ldw	r3,0(r16)
 400cda4:	80800417 	ldw	r2,16(r16)
 400cda8:	18a3c83a 	sub	r17,r3,r2
  if (n >= fp->_bf._size)
 400cdac:	80800517 	ldw	r2,20(r16)
 400cdb0:	88800716 	blt	r17,r2,400cdd0 <__swbuf_r+0xe8>
    {
      if (_fflush_r (ptr, fp))
 400cdb4:	800b883a 	mov	r5,r16
 400cdb8:	e13ffb17 	ldw	r4,-20(fp)
 400cdbc:	4004e800 	call	4004e80 <_fflush_r>
 400cdc0:	10000226 	beq	r2,zero,400cdcc <__swbuf_r+0xe4>
	return EOF;
 400cdc4:	00bfffc4 	movi	r2,-1
 400cdc8:	00001906 	br	400ce30 <__swbuf_r+0x148>
      n = 0;
 400cdcc:	0023883a 	mov	r17,zero
    }
  fp->_w--;
 400cdd0:	80800217 	ldw	r2,8(r16)
 400cdd4:	10bfffc4 	addi	r2,r2,-1
 400cdd8:	80800215 	stw	r2,8(r16)
  *fp->_p++ = c;
 400cddc:	80800017 	ldw	r2,0(r16)
 400cde0:	10c00044 	addi	r3,r2,1
 400cde4:	80c00015 	stw	r3,0(r16)
 400cde8:	9007883a 	mov	r3,r18
 400cdec:	10c00005 	stb	r3,0(r2)
  if (++n == fp->_bf._size || (fp->_flags & __SLBF && c == '\n'))
 400cdf0:	8c400044 	addi	r17,r17,1
 400cdf4:	80800517 	ldw	r2,20(r16)
 400cdf8:	88800626 	beq	r17,r2,400ce14 <__swbuf_r+0x12c>
 400cdfc:	8080030b 	ldhu	r2,12(r16)
 400ce00:	10bfffcc 	andi	r2,r2,65535
 400ce04:	1080004c 	andi	r2,r2,1
 400ce08:	10000826 	beq	r2,zero,400ce2c <__swbuf_r+0x144>
 400ce0c:	90800298 	cmpnei	r2,r18,10
 400ce10:	1000061e 	bne	r2,zero,400ce2c <__swbuf_r+0x144>
    if (_fflush_r (ptr, fp))
 400ce14:	800b883a 	mov	r5,r16
 400ce18:	e13ffb17 	ldw	r4,-20(fp)
 400ce1c:	4004e800 	call	4004e80 <_fflush_r>
 400ce20:	10000226 	beq	r2,zero,400ce2c <__swbuf_r+0x144>
      return EOF;
 400ce24:	00bfffc4 	movi	r2,-1
 400ce28:	00000106 	br	400ce30 <__swbuf_r+0x148>
  return c;
 400ce2c:	9005883a 	mov	r2,r18
}
 400ce30:	e6fffd04 	addi	sp,fp,-12
 400ce34:	dfc00417 	ldw	ra,16(sp)
 400ce38:	df000317 	ldw	fp,12(sp)
 400ce3c:	dc800217 	ldw	r18,8(sp)
 400ce40:	dc400117 	ldw	r17,4(sp)
 400ce44:	dc000017 	ldw	r16,0(sp)
 400ce48:	dec00504 	addi	sp,sp,20
 400ce4c:	f800283a 	ret

0400ce50 <__swbuf>:
   required for backward compatibility with applications built against
   earlier dynamically built newlib libraries. */
int
__swbuf (register int c,
       register FILE *fp)
{
 400ce50:	defffe04 	addi	sp,sp,-8
 400ce54:	dfc00115 	stw	ra,4(sp)
 400ce58:	df000015 	stw	fp,0(sp)
 400ce5c:	d839883a 	mov	fp,sp
 400ce60:	2007883a 	mov	r3,r4
 400ce64:	2809883a 	mov	r4,r5
  return __swbuf_r (_REENT, c, fp);
 400ce68:	d0a00017 	ldw	r2,-32768(gp)
 400ce6c:	200d883a 	mov	r6,r4
 400ce70:	180b883a 	mov	r5,r3
 400ce74:	1009883a 	mov	r4,r2
 400ce78:	400cce80 	call	400cce8 <__swbuf_r>
}
 400ce7c:	e037883a 	mov	sp,fp
 400ce80:	dfc00117 	ldw	ra,4(sp)
 400ce84:	df000017 	ldw	fp,0(sp)
 400ce88:	dec00204 	addi	sp,sp,8
 400ce8c:	f800283a 	ret

0400ce90 <__get_global_locale>:
{
 400ce90:	deffff04 	addi	sp,sp,-4
 400ce94:	df000015 	stw	fp,0(sp)
 400ce98:	d839883a 	mov	fp,sp
  return &__global_locale;
 400ce9c:	00810074 	movhi	r2,1025
 400cea0:	10907404 	addi	r2,r2,16848
}
 400cea4:	e037883a 	mov	sp,fp
 400cea8:	df000017 	ldw	fp,0(sp)
 400ceac:	dec00104 	addi	sp,sp,4
 400ceb0:	f800283a 	ret

0400ceb4 <__get_current_locale>:
{
 400ceb4:	defffe04 	addi	sp,sp,-8
 400ceb8:	dfc00115 	stw	ra,4(sp)
 400cebc:	df000015 	stw	fp,0(sp)
 400cec0:	d839883a 	mov	fp,sp
  return __get_global_locale();
 400cec4:	400ce900 	call	400ce90 <__get_global_locale>
}
 400cec8:	e037883a 	mov	sp,fp
 400cecc:	dfc00117 	ldw	ra,4(sp)
 400ced0:	df000017 	ldw	fp,0(sp)
 400ced4:	dec00204 	addi	sp,sp,8
 400ced8:	f800283a 	ret

0400cedc <_wcrtomb_r>:
size_t
_wcrtomb_r (struct _reent *ptr,
	char *s,
	wchar_t wc,
	mbstate_t *ps)
{
 400cedc:	defff604 	addi	sp,sp,-40
 400cee0:	dfc00915 	stw	ra,36(sp)
 400cee4:	df000815 	stw	fp,32(sp)
 400cee8:	df000804 	addi	fp,sp,32
 400ceec:	e13ffb15 	stw	r4,-20(fp)
 400cef0:	e17ffa15 	stw	r5,-24(fp)
 400cef4:	e1bff915 	stw	r6,-28(fp)
 400cef8:	e1fff815 	stw	r7,-32(fp)
  int retval = 0;
 400cefc:	e03fff15 	stw	zero,-4(fp)
      _REENT_CHECK_MISC(ptr);
      ps = &(_REENT_WCRTOMB_STATE(ptr));
    }
#endif

  if (s == NULL)
 400cf00:	e0bffa17 	ldw	r2,-24(fp)
 400cf04:	10000a1e 	bne	r2,zero,400cf30 <_wcrtomb_r+0x54>
    retval = __WCTOMB (ptr, buf, L'\0', ps);
 400cf08:	400ceb40 	call	400ceb4 <__get_current_locale>
 400cf0c:	10803817 	ldw	r2,224(r2)
 400cf10:	e0fffc84 	addi	r3,fp,-14
 400cf14:	e1fff817 	ldw	r7,-32(fp)
 400cf18:	000d883a 	mov	r6,zero
 400cf1c:	180b883a 	mov	r5,r3
 400cf20:	e13ffb17 	ldw	r4,-20(fp)
 400cf24:	103ee83a 	callr	r2
 400cf28:	e0bfff15 	stw	r2,-4(fp)
 400cf2c:	00000806 	br	400cf50 <_wcrtomb_r+0x74>
  else
    retval = __WCTOMB (ptr, s, wc, ps);
 400cf30:	400ceb40 	call	400ceb4 <__get_current_locale>
 400cf34:	10803817 	ldw	r2,224(r2)
 400cf38:	e1fff817 	ldw	r7,-32(fp)
 400cf3c:	e1bff917 	ldw	r6,-28(fp)
 400cf40:	e17ffa17 	ldw	r5,-24(fp)
 400cf44:	e13ffb17 	ldw	r4,-20(fp)
 400cf48:	103ee83a 	callr	r2
 400cf4c:	e0bfff15 	stw	r2,-4(fp)

  if (retval == -1)
 400cf50:	e0bfff17 	ldw	r2,-4(fp)
 400cf54:	10bfffd8 	cmpnei	r2,r2,-1
 400cf58:	1000071e 	bne	r2,zero,400cf78 <_wcrtomb_r+0x9c>
    {
      ps->__count = 0;
 400cf5c:	e0bff817 	ldw	r2,-32(fp)
 400cf60:	10000015 	stw	zero,0(r2)
      ptr->_errno = EILSEQ;
 400cf64:	e0bffb17 	ldw	r2,-20(fp)
 400cf68:	00c02284 	movi	r3,138
 400cf6c:	10c00015 	stw	r3,0(r2)
      return (size_t)(-1);
 400cf70:	00bfffc4 	movi	r2,-1
 400cf74:	00000106 	br	400cf7c <_wcrtomb_r+0xa0>
    }
  else
    return (size_t)retval;
 400cf78:	e0bfff17 	ldw	r2,-4(fp)
}
 400cf7c:	e037883a 	mov	sp,fp
 400cf80:	dfc00117 	ldw	ra,4(sp)
 400cf84:	df000017 	ldw	fp,0(sp)
 400cf88:	dec00204 	addi	sp,sp,8
 400cf8c:	f800283a 	ret

0400cf90 <wcrtomb>:
#ifndef _REENT_ONLY
size_t
wcrtomb (char *__restrict s,
	wchar_t wc,
	mbstate_t *__restrict ps)
{
 400cf90:	defff604 	addi	sp,sp,-40
 400cf94:	dfc00915 	stw	ra,36(sp)
 400cf98:	df000815 	stw	fp,32(sp)
 400cf9c:	df000804 	addi	fp,sp,32
 400cfa0:	e13ffa15 	stw	r4,-24(fp)
 400cfa4:	e17ff915 	stw	r5,-28(fp)
 400cfa8:	e1bff815 	stw	r6,-32(fp)
#if defined(PREFER_SIZE_OVER_SPEED) || defined(__OPTIMIZE_SIZE__)
  return _wcrtomb_r (_REENT, s, wc, ps);
#else
  int retval = 0;
 400cfac:	e03fff15 	stw	zero,-4(fp)
  struct _reent *reent = _REENT;
 400cfb0:	d0a00017 	ldw	r2,-32768(gp)
 400cfb4:	e0bffe15 	stw	r2,-8(fp)
      _REENT_CHECK_MISC(reent);
      ps = &(_REENT_WCRTOMB_STATE(reent));
    }
#endif

  if (s == NULL)
 400cfb8:	e0bffa17 	ldw	r2,-24(fp)
 400cfbc:	10000a1e 	bne	r2,zero,400cfe8 <wcrtomb+0x58>
    retval = __WCTOMB (reent, buf, L'\0', ps);
 400cfc0:	400ceb40 	call	400ceb4 <__get_current_locale>
 400cfc4:	10803817 	ldw	r2,224(r2)
 400cfc8:	e0fffb84 	addi	r3,fp,-18
 400cfcc:	e1fff817 	ldw	r7,-32(fp)
 400cfd0:	000d883a 	mov	r6,zero
 400cfd4:	180b883a 	mov	r5,r3
 400cfd8:	e13ffe17 	ldw	r4,-8(fp)
 400cfdc:	103ee83a 	callr	r2
 400cfe0:	e0bfff15 	stw	r2,-4(fp)
 400cfe4:	00000806 	br	400d008 <wcrtomb+0x78>
  else
    retval = __WCTOMB (reent, s, wc, ps);
 400cfe8:	400ceb40 	call	400ceb4 <__get_current_locale>
 400cfec:	10803817 	ldw	r2,224(r2)
 400cff0:	e1fff817 	ldw	r7,-32(fp)
 400cff4:	e1bff917 	ldw	r6,-28(fp)
 400cff8:	e17ffa17 	ldw	r5,-24(fp)
 400cffc:	e13ffe17 	ldw	r4,-8(fp)
 400d000:	103ee83a 	callr	r2
 400d004:	e0bfff15 	stw	r2,-4(fp)

  if (retval == -1)
 400d008:	e0bfff17 	ldw	r2,-4(fp)
 400d00c:	10bfffd8 	cmpnei	r2,r2,-1
 400d010:	1000071e 	bne	r2,zero,400d030 <wcrtomb+0xa0>
    {
      ps->__count = 0;
 400d014:	e0bff817 	ldw	r2,-32(fp)
 400d018:	10000015 	stw	zero,0(r2)
      reent->_errno = EILSEQ;
 400d01c:	e0bffe17 	ldw	r2,-8(fp)
 400d020:	00c02284 	movi	r3,138
 400d024:	10c00015 	stw	r3,0(r2)
      return (size_t)(-1);
 400d028:	00bfffc4 	movi	r2,-1
 400d02c:	00000106 	br	400d034 <wcrtomb+0xa4>
    }
  else
    return (size_t)retval;
 400d030:	e0bfff17 	ldw	r2,-4(fp)
#endif /* not PREFER_SIZE_OVER_SPEED */
}
 400d034:	e037883a 	mov	sp,fp
 400d038:	dfc00117 	ldw	ra,4(sp)
 400d03c:	df000017 	ldw	fp,0(sp)
 400d040:	dec00204 	addi	sp,sp,8
 400d044:	f800283a 	ret

0400d048 <abort>:
#include <unistd.h>
#include <signal.h>

void
abort (void)
{
 400d048:	defffe04 	addi	sp,sp,-8
 400d04c:	dfc00115 	stw	ra,4(sp)
 400d050:	df000015 	stw	fp,0(sp)
 400d054:	d839883a 	mov	fp,sp
  write (2, "Abort called\n", sizeof ("Abort called\n")-1);
#endif

  while (1)
    {
      raise (SIGABRT);
 400d058:	01000184 	movi	r4,6
 400d05c:	400d3a00 	call	400d3a0 <raise>
      _exit (1);
 400d060:	01000044 	movi	r4,1
 400d064:	401091c0 	call	401091c <_exit>

0400d068 <_init_signal_r>:
#include <reent.h>
#include <_syslist.h>

int
_init_signal_r (struct _reent *ptr)
{
 400d068:	defffc04 	addi	sp,sp,-16
 400d06c:	dfc00315 	stw	ra,12(sp)
 400d070:	df000215 	stw	fp,8(sp)
 400d074:	df000204 	addi	fp,sp,8
 400d078:	e13ffe15 	stw	r4,-8(fp)
  int i;

  if (ptr->_sig_func == NULL)
 400d07c:	e0bffe17 	ldw	r2,-8(fp)
 400d080:	1080b717 	ldw	r2,732(r2)
 400d084:	1000191e 	bne	r2,zero,400d0ec <_init_signal_r+0x84>
    {
      ptr->_sig_func = (_sig_func_ptr *)_malloc_r (ptr, sizeof (_sig_func_ptr) * NSIG);
 400d088:	01402004 	movi	r5,128
 400d08c:	e13ffe17 	ldw	r4,-8(fp)
 400d090:	40067380 	call	4006738 <_malloc_r>
 400d094:	1007883a 	mov	r3,r2
 400d098:	e0bffe17 	ldw	r2,-8(fp)
 400d09c:	10c0b715 	stw	r3,732(r2)
      if (ptr->_sig_func == NULL)
 400d0a0:	e0bffe17 	ldw	r2,-8(fp)
 400d0a4:	1080b717 	ldw	r2,732(r2)
 400d0a8:	1000021e 	bne	r2,zero,400d0b4 <_init_signal_r+0x4c>
	return -1;
 400d0ac:	00bfffc4 	movi	r2,-1
 400d0b0:	00000f06 	br	400d0f0 <_init_signal_r+0x88>

      for (i = 0; i < NSIG; i++)
 400d0b4:	e03fff15 	stw	zero,-4(fp)
 400d0b8:	00000906 	br	400d0e0 <_init_signal_r+0x78>
	ptr->_sig_func[i] = SIG_DFL;
 400d0bc:	e0bffe17 	ldw	r2,-8(fp)
 400d0c0:	10c0b717 	ldw	r3,732(r2)
 400d0c4:	e0bfff17 	ldw	r2,-4(fp)
 400d0c8:	100490ba 	slli	r2,r2,2
 400d0cc:	1885883a 	add	r2,r3,r2
 400d0d0:	10000015 	stw	zero,0(r2)
      for (i = 0; i < NSIG; i++)
 400d0d4:	e0bfff17 	ldw	r2,-4(fp)
 400d0d8:	10800044 	addi	r2,r2,1
 400d0dc:	e0bfff15 	stw	r2,-4(fp)
 400d0e0:	e0bfff17 	ldw	r2,-4(fp)
 400d0e4:	10800810 	cmplti	r2,r2,32
 400d0e8:	103ff41e 	bne	r2,zero,400d0bc <_init_signal_r+0x54>
    }

  return 0;
 400d0ec:	0005883a 	mov	r2,zero
}
 400d0f0:	e037883a 	mov	sp,fp
 400d0f4:	dfc00117 	ldw	ra,4(sp)
 400d0f8:	df000017 	ldw	fp,0(sp)
 400d0fc:	dec00204 	addi	sp,sp,8
 400d100:	f800283a 	ret

0400d104 <_signal_r>:

_sig_func_ptr
_signal_r (struct _reent *ptr,
	int sig,
	_sig_func_ptr func)
{
 400d104:	defffa04 	addi	sp,sp,-24
 400d108:	dfc00515 	stw	ra,20(sp)
 400d10c:	df000415 	stw	fp,16(sp)
 400d110:	df000404 	addi	fp,sp,16
 400d114:	e13ffe15 	stw	r4,-8(fp)
 400d118:	e17ffd15 	stw	r5,-12(fp)
 400d11c:	e1bffc15 	stw	r6,-16(fp)
  _sig_func_ptr old_func;

  if (sig < 0 || sig >= NSIG)
 400d120:	e0bffd17 	ldw	r2,-12(fp)
 400d124:	10000316 	blt	r2,zero,400d134 <_signal_r+0x30>
 400d128:	e0bffd17 	ldw	r2,-12(fp)
 400d12c:	10800810 	cmplti	r2,r2,32
 400d130:	1000051e 	bne	r2,zero,400d148 <_signal_r+0x44>
    {
      ptr->_errno = EINVAL;
 400d134:	e0bffe17 	ldw	r2,-8(fp)
 400d138:	00c00584 	movi	r3,22
 400d13c:	10c00015 	stw	r3,0(r2)
      return SIG_ERR;
 400d140:	00bfffc4 	movi	r2,-1
 400d144:	00001706 	br	400d1a4 <_signal_r+0xa0>
    }

  if (ptr->_sig_func == NULL && _init_signal_r (ptr) != 0)
 400d148:	e0bffe17 	ldw	r2,-8(fp)
 400d14c:	1080b717 	ldw	r2,732(r2)
 400d150:	1000051e 	bne	r2,zero,400d168 <_signal_r+0x64>
 400d154:	e13ffe17 	ldw	r4,-8(fp)
 400d158:	400d0680 	call	400d068 <_init_signal_r>
 400d15c:	10000226 	beq	r2,zero,400d168 <_signal_r+0x64>
    return SIG_ERR;
 400d160:	00bfffc4 	movi	r2,-1
 400d164:	00000f06 	br	400d1a4 <_signal_r+0xa0>
  
  old_func = ptr->_sig_func[sig];
 400d168:	e0bffe17 	ldw	r2,-8(fp)
 400d16c:	10c0b717 	ldw	r3,732(r2)
 400d170:	e0bffd17 	ldw	r2,-12(fp)
 400d174:	100490ba 	slli	r2,r2,2
 400d178:	1885883a 	add	r2,r3,r2
 400d17c:	10800017 	ldw	r2,0(r2)
 400d180:	e0bfff15 	stw	r2,-4(fp)
  ptr->_sig_func[sig] = func;
 400d184:	e0bffe17 	ldw	r2,-8(fp)
 400d188:	10c0b717 	ldw	r3,732(r2)
 400d18c:	e0bffd17 	ldw	r2,-12(fp)
 400d190:	100490ba 	slli	r2,r2,2
 400d194:	1885883a 	add	r2,r3,r2
 400d198:	e0fffc17 	ldw	r3,-16(fp)
 400d19c:	10c00015 	stw	r3,0(r2)

  return old_func;
 400d1a0:	e0bfff17 	ldw	r2,-4(fp)
}
 400d1a4:	e037883a 	mov	sp,fp
 400d1a8:	dfc00117 	ldw	ra,4(sp)
 400d1ac:	df000017 	ldw	fp,0(sp)
 400d1b0:	dec00204 	addi	sp,sp,8
 400d1b4:	f800283a 	ret

0400d1b8 <_raise_r>:

int 
_raise_r (struct _reent *ptr,
     int sig)
{
 400d1b8:	defffb04 	addi	sp,sp,-20
 400d1bc:	dfc00415 	stw	ra,16(sp)
 400d1c0:	df000315 	stw	fp,12(sp)
 400d1c4:	df000304 	addi	fp,sp,12
 400d1c8:	e13ffe15 	stw	r4,-8(fp)
 400d1cc:	e17ffd15 	stw	r5,-12(fp)
  _sig_func_ptr func;

  if (sig < 0 || sig >= NSIG)
 400d1d0:	e0bffd17 	ldw	r2,-12(fp)
 400d1d4:	10000316 	blt	r2,zero,400d1e4 <_raise_r+0x2c>
 400d1d8:	e0bffd17 	ldw	r2,-12(fp)
 400d1dc:	10800810 	cmplti	r2,r2,32
 400d1e0:	1000051e 	bne	r2,zero,400d1f8 <_raise_r+0x40>
    {
      ptr->_errno = EINVAL;
 400d1e4:	e0bffe17 	ldw	r2,-8(fp)
 400d1e8:	00c00584 	movi	r3,22
 400d1ec:	10c00015 	stw	r3,0(r2)
      return -1;
 400d1f0:	00bfffc4 	movi	r2,-1
 400d1f4:	00002c06 	br	400d2a8 <_raise_r+0xf0>
    }

  if (ptr->_sig_func == NULL)
 400d1f8:	e0bffe17 	ldw	r2,-8(fp)
 400d1fc:	1080b717 	ldw	r2,732(r2)
 400d200:	1000021e 	bne	r2,zero,400d20c <_raise_r+0x54>
    func = SIG_DFL;
 400d204:	e03fff15 	stw	zero,-4(fp)
 400d208:	00000706 	br	400d228 <_raise_r+0x70>
  else
    func = ptr->_sig_func[sig];
 400d20c:	e0bffe17 	ldw	r2,-8(fp)
 400d210:	10c0b717 	ldw	r3,732(r2)
 400d214:	e0bffd17 	ldw	r2,-12(fp)
 400d218:	100490ba 	slli	r2,r2,2
 400d21c:	1885883a 	add	r2,r3,r2
 400d220:	10800017 	ldw	r2,0(r2)
 400d224:	e0bfff15 	stw	r2,-4(fp)

  if (func == SIG_DFL)
 400d228:	e0bfff17 	ldw	r2,-4(fp)
 400d22c:	1000071e 	bne	r2,zero,400d24c <_raise_r+0x94>
    return _kill_r (ptr, _getpid_r (ptr), sig);
 400d230:	e13ffe17 	ldw	r4,-8(fp)
 400d234:	400d4e80 	call	400d4e8 <_getpid_r>
 400d238:	e1bffd17 	ldw	r6,-12(fp)
 400d23c:	100b883a 	mov	r5,r2
 400d240:	e13ffe17 	ldw	r4,-8(fp)
 400d244:	400d4800 	call	400d480 <_kill_r>
 400d248:	00001706 	br	400d2a8 <_raise_r+0xf0>
  else if (func == SIG_IGN)
 400d24c:	e0bfff17 	ldw	r2,-4(fp)
 400d250:	10800058 	cmpnei	r2,r2,1
 400d254:	1000021e 	bne	r2,zero,400d260 <_raise_r+0xa8>
    return 0;
 400d258:	0005883a 	mov	r2,zero
 400d25c:	00001206 	br	400d2a8 <_raise_r+0xf0>
  else if (func == SIG_ERR)
 400d260:	e0bfff17 	ldw	r2,-4(fp)
 400d264:	10bfffd8 	cmpnei	r2,r2,-1
 400d268:	1000051e 	bne	r2,zero,400d280 <_raise_r+0xc8>
    {
      ptr->_errno = EINVAL;
 400d26c:	e0bffe17 	ldw	r2,-8(fp)
 400d270:	00c00584 	movi	r3,22
 400d274:	10c00015 	stw	r3,0(r2)
      return 1;
 400d278:	00800044 	movi	r2,1
 400d27c:	00000a06 	br	400d2a8 <_raise_r+0xf0>
    }
  else
    {
      ptr->_sig_func[sig] = SIG_DFL;
 400d280:	e0bffe17 	ldw	r2,-8(fp)
 400d284:	10c0b717 	ldw	r3,732(r2)
 400d288:	e0bffd17 	ldw	r2,-12(fp)
 400d28c:	100490ba 	slli	r2,r2,2
 400d290:	1885883a 	add	r2,r3,r2
 400d294:	10000015 	stw	zero,0(r2)
      func (sig);
 400d298:	e0bfff17 	ldw	r2,-4(fp)
 400d29c:	e13ffd17 	ldw	r4,-12(fp)
 400d2a0:	103ee83a 	callr	r2
      return 0;
 400d2a4:	0005883a 	mov	r2,zero
    }
}
 400d2a8:	e037883a 	mov	sp,fp
 400d2ac:	dfc00117 	ldw	ra,4(sp)
 400d2b0:	df000017 	ldw	fp,0(sp)
 400d2b4:	dec00204 	addi	sp,sp,8
 400d2b8:	f800283a 	ret

0400d2bc <__sigtramp_r>:

int
__sigtramp_r (struct _reent *ptr,
     int sig)
{
 400d2bc:	defffb04 	addi	sp,sp,-20
 400d2c0:	dfc00415 	stw	ra,16(sp)
 400d2c4:	df000315 	stw	fp,12(sp)
 400d2c8:	df000304 	addi	fp,sp,12
 400d2cc:	e13ffe15 	stw	r4,-8(fp)
 400d2d0:	e17ffd15 	stw	r5,-12(fp)
  _sig_func_ptr func;

  if (sig < 0 || sig >= NSIG)
 400d2d4:	e0bffd17 	ldw	r2,-12(fp)
 400d2d8:	10000316 	blt	r2,zero,400d2e8 <__sigtramp_r+0x2c>
 400d2dc:	e0bffd17 	ldw	r2,-12(fp)
 400d2e0:	10800810 	cmplti	r2,r2,32
 400d2e4:	1000021e 	bne	r2,zero,400d2f0 <__sigtramp_r+0x34>
    {
      return -1;
 400d2e8:	00bfffc4 	movi	r2,-1
 400d2ec:	00002706 	br	400d38c <__sigtramp_r+0xd0>
    }

  if (ptr->_sig_func == NULL && _init_signal_r (ptr) != 0)
 400d2f0:	e0bffe17 	ldw	r2,-8(fp)
 400d2f4:	1080b717 	ldw	r2,732(r2)
 400d2f8:	1000051e 	bne	r2,zero,400d310 <__sigtramp_r+0x54>
 400d2fc:	e13ffe17 	ldw	r4,-8(fp)
 400d300:	400d0680 	call	400d068 <_init_signal_r>
 400d304:	10000226 	beq	r2,zero,400d310 <__sigtramp_r+0x54>
    return -1;
 400d308:	00bfffc4 	movi	r2,-1
 400d30c:	00001f06 	br	400d38c <__sigtramp_r+0xd0>

  func = ptr->_sig_func[sig];
 400d310:	e0bffe17 	ldw	r2,-8(fp)
 400d314:	10c0b717 	ldw	r3,732(r2)
 400d318:	e0bffd17 	ldw	r2,-12(fp)
 400d31c:	100490ba 	slli	r2,r2,2
 400d320:	1885883a 	add	r2,r3,r2
 400d324:	10800017 	ldw	r2,0(r2)
 400d328:	e0bfff15 	stw	r2,-4(fp)
  if (func == SIG_DFL)
 400d32c:	e0bfff17 	ldw	r2,-4(fp)
 400d330:	1000021e 	bne	r2,zero,400d33c <__sigtramp_r+0x80>
    return 1;
 400d334:	00800044 	movi	r2,1
 400d338:	00001406 	br	400d38c <__sigtramp_r+0xd0>
  else if (func == SIG_ERR)
 400d33c:	e0bfff17 	ldw	r2,-4(fp)
 400d340:	10bfffd8 	cmpnei	r2,r2,-1
 400d344:	1000021e 	bne	r2,zero,400d350 <__sigtramp_r+0x94>
    return 2;
 400d348:	00800084 	movi	r2,2
 400d34c:	00000f06 	br	400d38c <__sigtramp_r+0xd0>
  else if (func == SIG_IGN)
 400d350:	e0bfff17 	ldw	r2,-4(fp)
 400d354:	10800058 	cmpnei	r2,r2,1
 400d358:	1000021e 	bne	r2,zero,400d364 <__sigtramp_r+0xa8>
    return 3;
 400d35c:	008000c4 	movi	r2,3
 400d360:	00000a06 	br	400d38c <__sigtramp_r+0xd0>
  else
    {
      ptr->_sig_func[sig] = SIG_DFL;
 400d364:	e0bffe17 	ldw	r2,-8(fp)
 400d368:	10c0b717 	ldw	r3,732(r2)
 400d36c:	e0bffd17 	ldw	r2,-12(fp)
 400d370:	100490ba 	slli	r2,r2,2
 400d374:	1885883a 	add	r2,r3,r2
 400d378:	10000015 	stw	zero,0(r2)
      func (sig);
 400d37c:	e0bfff17 	ldw	r2,-4(fp)
 400d380:	e13ffd17 	ldw	r4,-12(fp)
 400d384:	103ee83a 	callr	r2
      return 0;
 400d388:	0005883a 	mov	r2,zero
    }
}
 400d38c:	e037883a 	mov	sp,fp
 400d390:	dfc00117 	ldw	ra,4(sp)
 400d394:	df000017 	ldw	fp,0(sp)
 400d398:	dec00204 	addi	sp,sp,8
 400d39c:	f800283a 	ret

0400d3a0 <raise>:

#ifndef _REENT_ONLY

int 
raise (int sig)
{
 400d3a0:	defffd04 	addi	sp,sp,-12
 400d3a4:	dfc00215 	stw	ra,8(sp)
 400d3a8:	df000115 	stw	fp,4(sp)
 400d3ac:	df000104 	addi	fp,sp,4
 400d3b0:	e13fff15 	stw	r4,-4(fp)
  return _raise_r (_REENT, sig);
 400d3b4:	d0a00017 	ldw	r2,-32768(gp)
 400d3b8:	e17fff17 	ldw	r5,-4(fp)
 400d3bc:	1009883a 	mov	r4,r2
 400d3c0:	400d1b80 	call	400d1b8 <_raise_r>
}
 400d3c4:	e037883a 	mov	sp,fp
 400d3c8:	dfc00117 	ldw	ra,4(sp)
 400d3cc:	df000017 	ldw	fp,0(sp)
 400d3d0:	dec00204 	addi	sp,sp,8
 400d3d4:	f800283a 	ret

0400d3d8 <signal>:

_sig_func_ptr
signal (int sig,
	_sig_func_ptr func)
{
 400d3d8:	defffc04 	addi	sp,sp,-16
 400d3dc:	dfc00315 	stw	ra,12(sp)
 400d3e0:	df000215 	stw	fp,8(sp)
 400d3e4:	df000204 	addi	fp,sp,8
 400d3e8:	e13fff15 	stw	r4,-4(fp)
 400d3ec:	e17ffe15 	stw	r5,-8(fp)
  return _signal_r (_REENT, sig, func);
 400d3f0:	d0a00017 	ldw	r2,-32768(gp)
 400d3f4:	e1bffe17 	ldw	r6,-8(fp)
 400d3f8:	e17fff17 	ldw	r5,-4(fp)
 400d3fc:	1009883a 	mov	r4,r2
 400d400:	400d1040 	call	400d104 <_signal_r>
}
 400d404:	e037883a 	mov	sp,fp
 400d408:	dfc00117 	ldw	ra,4(sp)
 400d40c:	df000017 	ldw	fp,0(sp)
 400d410:	dec00204 	addi	sp,sp,8
 400d414:	f800283a 	ret

0400d418 <_init_signal>:

int 
_init_signal (void)
{
 400d418:	defffe04 	addi	sp,sp,-8
 400d41c:	dfc00115 	stw	ra,4(sp)
 400d420:	df000015 	stw	fp,0(sp)
 400d424:	d839883a 	mov	fp,sp
  return _init_signal_r (_REENT);
 400d428:	d0a00017 	ldw	r2,-32768(gp)
 400d42c:	1009883a 	mov	r4,r2
 400d430:	400d0680 	call	400d068 <_init_signal_r>
}
 400d434:	e037883a 	mov	sp,fp
 400d438:	dfc00117 	ldw	ra,4(sp)
 400d43c:	df000017 	ldw	fp,0(sp)
 400d440:	dec00204 	addi	sp,sp,8
 400d444:	f800283a 	ret

0400d448 <__sigtramp>:

int
__sigtramp (int sig)
{
 400d448:	defffd04 	addi	sp,sp,-12
 400d44c:	dfc00215 	stw	ra,8(sp)
 400d450:	df000115 	stw	fp,4(sp)
 400d454:	df000104 	addi	fp,sp,4
 400d458:	e13fff15 	stw	r4,-4(fp)
  return __sigtramp_r (_REENT, sig);
 400d45c:	d0a00017 	ldw	r2,-32768(gp)
 400d460:	e17fff17 	ldw	r5,-4(fp)
 400d464:	1009883a 	mov	r4,r2
 400d468:	400d2bc0 	call	400d2bc <__sigtramp_r>
}
 400d46c:	e037883a 	mov	sp,fp
 400d470:	dfc00117 	ldw	ra,4(sp)
 400d474:	df000017 	ldw	fp,0(sp)
 400d478:	dec00204 	addi	sp,sp,8
 400d47c:	f800283a 	ret

0400d480 <_kill_r>:

int
_kill_r (struct _reent *ptr,
     int pid,
     int sig)
{
 400d480:	defffa04 	addi	sp,sp,-24
 400d484:	dfc00515 	stw	ra,20(sp)
 400d488:	df000415 	stw	fp,16(sp)
 400d48c:	df000404 	addi	fp,sp,16
 400d490:	e13ffe15 	stw	r4,-8(fp)
 400d494:	e17ffd15 	stw	r5,-12(fp)
 400d498:	e1bffc15 	stw	r6,-16(fp)
  int ret;

  errno = 0;
 400d49c:	d0271515 	stw	zero,-25516(gp)
  if ((ret = _kill (pid, sig)) == -1 && errno != 0)
 400d4a0:	e17ffc17 	ldw	r5,-16(fp)
 400d4a4:	e13ffd17 	ldw	r4,-12(fp)
 400d4a8:	4010b7c0 	call	4010b7c <kill>
 400d4ac:	e0bfff15 	stw	r2,-4(fp)
 400d4b0:	e0bfff17 	ldw	r2,-4(fp)
 400d4b4:	10bfffd8 	cmpnei	r2,r2,-1
 400d4b8:	1000051e 	bne	r2,zero,400d4d0 <_kill_r+0x50>
 400d4bc:	d0a71517 	ldw	r2,-25516(gp)
 400d4c0:	10000326 	beq	r2,zero,400d4d0 <_kill_r+0x50>
    ptr->_errno = errno;
 400d4c4:	d0e71517 	ldw	r3,-25516(gp)
 400d4c8:	e0bffe17 	ldw	r2,-8(fp)
 400d4cc:	10c00015 	stw	r3,0(r2)
  return ret;
 400d4d0:	e0bfff17 	ldw	r2,-4(fp)
}
 400d4d4:	e037883a 	mov	sp,fp
 400d4d8:	dfc00117 	ldw	ra,4(sp)
 400d4dc:	df000017 	ldw	fp,0(sp)
 400d4e0:	dec00204 	addi	sp,sp,8
 400d4e4:	f800283a 	ret

0400d4e8 <_getpid_r>:
	still must have the reentrant pointer argument.
*/

int
_getpid_r (struct _reent *ptr)
{
 400d4e8:	defffc04 	addi	sp,sp,-16
 400d4ec:	dfc00315 	stw	ra,12(sp)
 400d4f0:	df000215 	stw	fp,8(sp)
 400d4f4:	df000204 	addi	fp,sp,8
 400d4f8:	e13ffe15 	stw	r4,-8(fp)
  int ret;
  ret = _getpid ();
 400d4fc:	4010a400 	call	4010a40 <getpid>
 400d500:	e0bfff15 	stw	r2,-4(fp)
  return ret;
 400d504:	e0bfff17 	ldw	r2,-4(fp)
}
 400d508:	e037883a 	mov	sp,fp
 400d50c:	dfc00117 	ldw	ra,4(sp)
 400d510:	df000017 	ldw	fp,0(sp)
 400d514:	dec00204 	addi	sp,sp,8
 400d518:	f800283a 	ret

0400d51c <__udivdi3>:
 400d51c:	defff504 	addi	sp,sp,-44
 400d520:	dcc00415 	stw	r19,16(sp)
 400d524:	dc000115 	stw	r16,4(sp)
 400d528:	dfc00a15 	stw	ra,40(sp)
 400d52c:	df000915 	stw	fp,36(sp)
 400d530:	ddc00815 	stw	r23,32(sp)
 400d534:	dd800715 	stw	r22,28(sp)
 400d538:	dd400615 	stw	r21,24(sp)
 400d53c:	dd000515 	stw	r20,20(sp)
 400d540:	dc800315 	stw	r18,12(sp)
 400d544:	dc400215 	stw	r17,8(sp)
 400d548:	2027883a 	mov	r19,r4
 400d54c:	2821883a 	mov	r16,r5
 400d550:	3800411e 	bne	r7,zero,400d658 <__udivdi3+0x13c>
 400d554:	3829883a 	mov	r20,r7
 400d558:	3023883a 	mov	r17,r6
 400d55c:	2025883a 	mov	r18,r4
 400d560:	29805d2e 	bgeu	r5,r6,400d6d8 <__udivdi3+0x1bc>
 400d564:	00bfffd4 	movui	r2,65535
 400d568:	282b883a 	mov	r21,r5
 400d56c:	1180a02e 	bgeu	r2,r6,400d7f0 <__udivdi3+0x2d4>
 400d570:	00804034 	movhi	r2,256
 400d574:	30813636 	bltu	r6,r2,400da50 <__udivdi3+0x534>
 400d578:	3006d63a 	srli	r3,r6,24
 400d57c:	05000604 	movi	r20,24
 400d580:	00810074 	movhi	r2,1025
 400d584:	1885883a 	add	r2,r3,r2
 400d588:	108f1d03 	ldbu	r2,15476(r2)
 400d58c:	00c00804 	movi	r3,32
 400d590:	1505883a 	add	r2,r2,r20
 400d594:	1889c83a 	sub	r4,r3,r2
 400d598:	18800526 	beq	r3,r2,400d5b0 <__udivdi3+0x94>
 400d59c:	8120983a 	sll	r16,r16,r4
 400d5a0:	9884d83a 	srl	r2,r19,r2
 400d5a4:	3122983a 	sll	r17,r6,r4
 400d5a8:	9924983a 	sll	r18,r19,r4
 400d5ac:	142ab03a 	or	r21,r2,r16
 400d5b0:	882cd43a 	srli	r22,r17,16
 400d5b4:	a809883a 	mov	r4,r21
 400d5b8:	8d3fffcc 	andi	r20,r17,65535
 400d5bc:	b00b883a 	mov	r5,r22
 400d5c0:	400e1380 	call	400e138 <__umodsi3>
 400d5c4:	a809883a 	mov	r4,r21
 400d5c8:	b00b883a 	mov	r5,r22
 400d5cc:	1027883a 	mov	r19,r2
 400d5d0:	400e0d40 	call	400e0d4 <__udivsi3>
 400d5d4:	9826943a 	slli	r19,r19,16
 400d5d8:	9008d43a 	srli	r4,r18,16
 400d5dc:	1021883a 	mov	r16,r2
 400d5e0:	a085383a 	mul	r2,r20,r2
 400d5e4:	9908b03a 	or	r4,r19,r4
 400d5e8:	2080052e 	bgeu	r4,r2,400d600 <__udivdi3+0xe4>
 400d5ec:	2449883a 	add	r4,r4,r17
 400d5f0:	80ffffc4 	addi	r3,r16,-1
 400d5f4:	24400136 	bltu	r4,r17,400d5fc <__udivdi3+0xe0>
 400d5f8:	20812636 	bltu	r4,r2,400da94 <__udivdi3+0x578>
 400d5fc:	1821883a 	mov	r16,r3
 400d600:	20a7c83a 	sub	r19,r4,r2
 400d604:	9809883a 	mov	r4,r19
 400d608:	b00b883a 	mov	r5,r22
 400d60c:	400e1380 	call	400e138 <__umodsi3>
 400d610:	9809883a 	mov	r4,r19
 400d614:	b00b883a 	mov	r5,r22
 400d618:	1027883a 	mov	r19,r2
 400d61c:	9826943a 	slli	r19,r19,16
 400d620:	400e0d40 	call	400e0d4 <__udivsi3>
 400d624:	a0a9383a 	mul	r20,r20,r2
 400d628:	94bfffcc 	andi	r18,r18,65535
 400d62c:	9ca4b03a 	or	r18,r19,r18
 400d630:	9500052e 	bgeu	r18,r20,400d648 <__udivdi3+0x12c>
 400d634:	8ca5883a 	add	r18,r17,r18
 400d638:	10ffffc4 	addi	r3,r2,-1
 400d63c:	94400136 	bltu	r18,r17,400d644 <__udivdi3+0x128>
 400d640:	95011236 	bltu	r18,r20,400da8c <__udivdi3+0x570>
 400d644:	1805883a 	mov	r2,r3
 400d648:	8020943a 	slli	r16,r16,16
 400d64c:	0007883a 	mov	r3,zero
 400d650:	8084b03a 	or	r2,r16,r2
 400d654:	00000306 	br	400d664 <__udivdi3+0x148>
 400d658:	29c00e2e 	bgeu	r5,r7,400d694 <__udivdi3+0x178>
 400d65c:	0007883a 	mov	r3,zero
 400d660:	0005883a 	mov	r2,zero
 400d664:	dfc00a17 	ldw	ra,40(sp)
 400d668:	df000917 	ldw	fp,36(sp)
 400d66c:	ddc00817 	ldw	r23,32(sp)
 400d670:	dd800717 	ldw	r22,28(sp)
 400d674:	dd400617 	ldw	r21,24(sp)
 400d678:	dd000517 	ldw	r20,20(sp)
 400d67c:	dcc00417 	ldw	r19,16(sp)
 400d680:	dc800317 	ldw	r18,12(sp)
 400d684:	dc400217 	ldw	r17,8(sp)
 400d688:	dc000117 	ldw	r16,4(sp)
 400d68c:	dec00b04 	addi	sp,sp,44
 400d690:	f800283a 	ret
 400d694:	00bfffd4 	movui	r2,65535
 400d698:	11c05a2e 	bgeu	r2,r7,400d804 <__udivdi3+0x2e8>
 400d69c:	00804034 	movhi	r2,256
 400d6a0:	3880dd36 	bltu	r7,r2,400da18 <__udivdi3+0x4fc>
 400d6a4:	3806d63a 	srli	r3,r7,24
 400d6a8:	01000604 	movi	r4,24
 400d6ac:	00810074 	movhi	r2,1025
 400d6b0:	1885883a 	add	r2,r3,r2
 400d6b4:	10cf1d03 	ldbu	r3,15476(r2)
 400d6b8:	00800804 	movi	r2,32
 400d6bc:	1907883a 	add	r3,r3,r4
 400d6c0:	10ebc83a 	sub	r21,r2,r3
 400d6c4:	10c0861e 	bne	r2,r3,400d8e0 <__udivdi3+0x3c4>
 400d6c8:	3c00d836 	bltu	r7,r16,400da2c <__udivdi3+0x510>
 400d6cc:	9985403a 	cmpgeu	r2,r19,r6
 400d6d0:	0007883a 	mov	r3,zero
 400d6d4:	003fe306 	br	400d664 <__udivdi3+0x148>
 400d6d8:	3000041e 	bne	r6,zero,400d6ec <__udivdi3+0x1d0>
 400d6dc:	000b883a 	mov	r5,zero
 400d6e0:	01000044 	movi	r4,1
 400d6e4:	400e0d40 	call	400e0d4 <__udivsi3>
 400d6e8:	1023883a 	mov	r17,r2
 400d6ec:	00bfffd4 	movui	r2,65535
 400d6f0:	14403a2e 	bgeu	r2,r17,400d7dc <__udivdi3+0x2c0>
 400d6f4:	00804034 	movhi	r2,256
 400d6f8:	8880d236 	bltu	r17,r2,400da44 <__udivdi3+0x528>
 400d6fc:	8806d63a 	srli	r3,r17,24
 400d700:	05000604 	movi	r20,24
 400d704:	00810074 	movhi	r2,1025
 400d708:	1885883a 	add	r2,r3,r2
 400d70c:	108f1d03 	ldbu	r2,15476(r2)
 400d710:	00c00804 	movi	r3,32
 400d714:	1505883a 	add	r2,r2,r20
 400d718:	188dc83a 	sub	r6,r3,r2
 400d71c:	18803e1e 	bne	r3,r2,400d818 <__udivdi3+0x2fc>
 400d720:	882ad43a 	srli	r21,r17,16
 400d724:	8461c83a 	sub	r16,r16,r17
 400d728:	8cffffcc 	andi	r19,r17,65535
 400d72c:	00c00044 	movi	r3,1
 400d730:	8009883a 	mov	r4,r16
 400d734:	a80b883a 	mov	r5,r21
 400d738:	d8c00015 	stw	r3,0(sp)
 400d73c:	400e1380 	call	400e138 <__umodsi3>
 400d740:	8009883a 	mov	r4,r16
 400d744:	a80b883a 	mov	r5,r21
 400d748:	1021883a 	mov	r16,r2
 400d74c:	400e0d40 	call	400e0d4 <__udivsi3>
 400d750:	8020943a 	slli	r16,r16,16
 400d754:	9008d43a 	srli	r4,r18,16
 400d758:	1029883a 	mov	r20,r2
 400d75c:	14c5383a 	mul	r2,r2,r19
 400d760:	8108b03a 	or	r4,r16,r4
 400d764:	d8c00017 	ldw	r3,0(sp)
 400d768:	2080052e 	bgeu	r4,r2,400d780 <__udivdi3+0x264>
 400d76c:	2449883a 	add	r4,r4,r17
 400d770:	a17fffc4 	addi	r5,r20,-1
 400d774:	24400136 	bltu	r4,r17,400d77c <__udivdi3+0x260>
 400d778:	2080c936 	bltu	r4,r2,400daa0 <__udivdi3+0x584>
 400d77c:	2829883a 	mov	r20,r5
 400d780:	20a1c83a 	sub	r16,r4,r2
 400d784:	8009883a 	mov	r4,r16
 400d788:	a80b883a 	mov	r5,r21
 400d78c:	d8c00015 	stw	r3,0(sp)
 400d790:	400e1380 	call	400e138 <__umodsi3>
 400d794:	8009883a 	mov	r4,r16
 400d798:	a80b883a 	mov	r5,r21
 400d79c:	1021883a 	mov	r16,r2
 400d7a0:	8020943a 	slli	r16,r16,16
 400d7a4:	400e0d40 	call	400e0d4 <__udivsi3>
 400d7a8:	14e7383a 	mul	r19,r2,r19
 400d7ac:	94bfffcc 	andi	r18,r18,65535
 400d7b0:	84a4b03a 	or	r18,r16,r18
 400d7b4:	d8c00017 	ldw	r3,0(sp)
 400d7b8:	94c0052e 	bgeu	r18,r19,400d7d0 <__udivdi3+0x2b4>
 400d7bc:	8ca5883a 	add	r18,r17,r18
 400d7c0:	113fffc4 	addi	r4,r2,-1
 400d7c4:	94400136 	bltu	r18,r17,400d7cc <__udivdi3+0x2b0>
 400d7c8:	94c0ae36 	bltu	r18,r19,400da84 <__udivdi3+0x568>
 400d7cc:	2005883a 	mov	r2,r4
 400d7d0:	a00c943a 	slli	r6,r20,16
 400d7d4:	3084b03a 	or	r2,r6,r2
 400d7d8:	003fa206 	br	400d664 <__udivdi3+0x148>
 400d7dc:	88804030 	cmpltui	r2,r17,256
 400d7e0:	10009e1e 	bne	r2,zero,400da5c <__udivdi3+0x540>
 400d7e4:	8806d23a 	srli	r3,r17,8
 400d7e8:	05000204 	movi	r20,8
 400d7ec:	003fc506 	br	400d704 <__udivdi3+0x1e8>
 400d7f0:	30804030 	cmpltui	r2,r6,256
 400d7f4:	10008b1e 	bne	r2,zero,400da24 <__udivdi3+0x508>
 400d7f8:	3006d23a 	srli	r3,r6,8
 400d7fc:	05000204 	movi	r20,8
 400d800:	003f5f06 	br	400d580 <__udivdi3+0x64>
 400d804:	38804030 	cmpltui	r2,r7,256
 400d808:	10008b1e 	bne	r2,zero,400da38 <__udivdi3+0x51c>
 400d80c:	3806d23a 	srli	r3,r7,8
 400d810:	01000204 	movi	r4,8
 400d814:	003fa506 	br	400d6ac <__udivdi3+0x190>
 400d818:	89a2983a 	sll	r17,r17,r6
 400d81c:	80acd83a 	srl	r22,r16,r2
 400d820:	81a0983a 	sll	r16,r16,r6
 400d824:	882ad43a 	srli	r21,r17,16
 400d828:	9884d83a 	srl	r2,r19,r2
 400d82c:	b009883a 	mov	r4,r22
 400d830:	a80b883a 	mov	r5,r21
 400d834:	99a4983a 	sll	r18,r19,r6
 400d838:	1428b03a 	or	r20,r2,r16
 400d83c:	400e1380 	call	400e138 <__umodsi3>
 400d840:	b009883a 	mov	r4,r22
 400d844:	a80b883a 	mov	r5,r21
 400d848:	1021883a 	mov	r16,r2
 400d84c:	400e0d40 	call	400e0d4 <__udivsi3>
 400d850:	8008943a 	slli	r4,r16,16
 400d854:	a00ad43a 	srli	r5,r20,16
 400d858:	8cffffcc 	andi	r19,r17,65535
 400d85c:	98a1383a 	mul	r16,r19,r2
 400d860:	2148b03a 	or	r4,r4,r5
 400d864:	102d883a 	mov	r22,r2
 400d868:	2400062e 	bgeu	r4,r16,400d884 <__udivdi3+0x368>
 400d86c:	2449883a 	add	r4,r4,r17
 400d870:	10bfffc4 	addi	r2,r2,-1
 400d874:	24408136 	bltu	r4,r17,400da7c <__udivdi3+0x560>
 400d878:	2400802e 	bgeu	r4,r16,400da7c <__udivdi3+0x560>
 400d87c:	b5bfff84 	addi	r22,r22,-2
 400d880:	2449883a 	add	r4,r4,r17
 400d884:	2421c83a 	sub	r16,r4,r16
 400d888:	8009883a 	mov	r4,r16
 400d88c:	a80b883a 	mov	r5,r21
 400d890:	400e1380 	call	400e138 <__umodsi3>
 400d894:	8009883a 	mov	r4,r16
 400d898:	a80b883a 	mov	r5,r21
 400d89c:	1021883a 	mov	r16,r2
 400d8a0:	8020943a 	slli	r16,r16,16
 400d8a4:	400e0d40 	call	400e0d4 <__udivsi3>
 400d8a8:	9889383a 	mul	r4,r19,r2
 400d8ac:	a53fffcc 	andi	r20,r20,65535
 400d8b0:	8520b03a 	or	r16,r16,r20
 400d8b4:	8100062e 	bgeu	r16,r4,400d8d0 <__udivdi3+0x3b4>
 400d8b8:	8461883a 	add	r16,r16,r17
 400d8bc:	10ffffc4 	addi	r3,r2,-1
 400d8c0:	84406a36 	bltu	r16,r17,400da6c <__udivdi3+0x550>
 400d8c4:	8100692e 	bgeu	r16,r4,400da6c <__udivdi3+0x550>
 400d8c8:	10bfff84 	addi	r2,r2,-2
 400d8cc:	8461883a 	add	r16,r16,r17
 400d8d0:	b006943a 	slli	r3,r22,16
 400d8d4:	8121c83a 	sub	r16,r16,r4
 400d8d8:	1886b03a 	or	r3,r3,r2
 400d8dc:	003f9406 	br	400d730 <__udivdi3+0x214>
 400d8e0:	30ecd83a 	srl	r22,r6,r3
 400d8e4:	3d4e983a 	sll	r7,r7,r21
 400d8e8:	80e4d83a 	srl	r18,r16,r3
 400d8ec:	98e2d83a 	srl	r17,r19,r3
 400d8f0:	b1ecb03a 	or	r22,r22,r7
 400d8f4:	b038d43a 	srli	fp,r22,16
 400d8f8:	8546983a 	sll	r3,r16,r21
 400d8fc:	9009883a 	mov	r4,r18
 400d900:	e00b883a 	mov	r5,fp
 400d904:	88e2b03a 	or	r17,r17,r3
 400d908:	3568983a 	sll	r20,r6,r21
 400d90c:	400e1380 	call	400e138 <__umodsi3>
 400d910:	9009883a 	mov	r4,r18
 400d914:	e00b883a 	mov	r5,fp
 400d918:	1025883a 	mov	r18,r2
 400d91c:	400e0d40 	call	400e0d4 <__udivsi3>
 400d920:	9008943a 	slli	r4,r18,16
 400d924:	8806d43a 	srli	r3,r17,16
 400d928:	b5ffffcc 	andi	r23,r22,65535
 400d92c:	b8a5383a 	mul	r18,r23,r2
 400d930:	20c8b03a 	or	r4,r4,r3
 400d934:	1021883a 	mov	r16,r2
 400d938:	2480062e 	bgeu	r4,r18,400d954 <__udivdi3+0x438>
 400d93c:	2589883a 	add	r4,r4,r22
 400d940:	10bfffc4 	addi	r2,r2,-1
 400d944:	25804b36 	bltu	r4,r22,400da74 <__udivdi3+0x558>
 400d948:	24804a2e 	bgeu	r4,r18,400da74 <__udivdi3+0x558>
 400d94c:	843fff84 	addi	r16,r16,-2
 400d950:	2589883a 	add	r4,r4,r22
 400d954:	24a5c83a 	sub	r18,r4,r18
 400d958:	9009883a 	mov	r4,r18
 400d95c:	e00b883a 	mov	r5,fp
 400d960:	400e1380 	call	400e138 <__umodsi3>
 400d964:	9009883a 	mov	r4,r18
 400d968:	e00b883a 	mov	r5,fp
 400d96c:	1025883a 	mov	r18,r2
 400d970:	9024943a 	slli	r18,r18,16
 400d974:	400e0d40 	call	400e0d4 <__udivsi3>
 400d978:	b8af383a 	mul	r23,r23,r2
 400d97c:	8c7fffcc 	andi	r17,r17,65535
 400d980:	9462b03a 	or	r17,r18,r17
 400d984:	8dc0062e 	bgeu	r17,r23,400d9a0 <__udivdi3+0x484>
 400d988:	8da3883a 	add	r17,r17,r22
 400d98c:	10ffffc4 	addi	r3,r2,-1
 400d990:	8d803436 	bltu	r17,r22,400da64 <__udivdi3+0x548>
 400d994:	8dc0332e 	bgeu	r17,r23,400da64 <__udivdi3+0x548>
 400d998:	10bfff84 	addi	r2,r2,-2
 400d99c:	8da3883a 	add	r17,r17,r22
 400d9a0:	8020943a 	slli	r16,r16,16
 400d9a4:	10ffffcc 	andi	r3,r2,65535
 400d9a8:	a00ed43a 	srli	r7,r20,16
 400d9ac:	8084b03a 	or	r2,r16,r2
 400d9b0:	1008d43a 	srli	r4,r2,16
 400d9b4:	a1bfffcc 	andi	r6,r20,65535
 400d9b8:	1991383a 	mul	r8,r3,r6
 400d9bc:	218d383a 	mul	r6,r4,r6
 400d9c0:	19c7383a 	mul	r3,r3,r7
 400d9c4:	400ad43a 	srli	r5,r8,16
 400d9c8:	21c9383a 	mul	r4,r4,r7
 400d9cc:	1987883a 	add	r3,r3,r6
 400d9d0:	28c7883a 	add	r3,r5,r3
 400d9d4:	8de3c83a 	sub	r17,r17,r23
 400d9d8:	1980022e 	bgeu	r3,r6,400d9e4 <__udivdi3+0x4c8>
 400d9dc:	01400074 	movhi	r5,1
 400d9e0:	2149883a 	add	r4,r4,r5
 400d9e4:	180ad43a 	srli	r5,r3,16
 400d9e8:	2909883a 	add	r4,r5,r4
 400d9ec:	89000836 	bltu	r17,r4,400da10 <__udivdi3+0x4f4>
 400d9f0:	89000226 	beq	r17,r4,400d9fc <__udivdi3+0x4e0>
 400d9f4:	0007883a 	mov	r3,zero
 400d9f8:	003f1a06 	br	400d664 <__udivdi3+0x148>
 400d9fc:	1806943a 	slli	r3,r3,16
 400da00:	9d4c983a 	sll	r6,r19,r21
 400da04:	423fffcc 	andi	r8,r8,65535
 400da08:	1a07883a 	add	r3,r3,r8
 400da0c:	30fff92e 	bgeu	r6,r3,400d9f4 <__udivdi3+0x4d8>
 400da10:	10bfffc4 	addi	r2,r2,-1
 400da14:	003ff706 	br	400d9f4 <__udivdi3+0x4d8>
 400da18:	3806d43a 	srli	r3,r7,16
 400da1c:	01000404 	movi	r4,16
 400da20:	003f2206 	br	400d6ac <__udivdi3+0x190>
 400da24:	3007883a 	mov	r3,r6
 400da28:	003ed506 	br	400d580 <__udivdi3+0x64>
 400da2c:	0007883a 	mov	r3,zero
 400da30:	00800044 	movi	r2,1
 400da34:	003f0b06 	br	400d664 <__udivdi3+0x148>
 400da38:	3807883a 	mov	r3,r7
 400da3c:	0009883a 	mov	r4,zero
 400da40:	003f1a06 	br	400d6ac <__udivdi3+0x190>
 400da44:	8806d43a 	srli	r3,r17,16
 400da48:	05000404 	movi	r20,16
 400da4c:	003f2d06 	br	400d704 <__udivdi3+0x1e8>
 400da50:	3006d43a 	srli	r3,r6,16
 400da54:	05000404 	movi	r20,16
 400da58:	003ec906 	br	400d580 <__udivdi3+0x64>
 400da5c:	8807883a 	mov	r3,r17
 400da60:	003f2806 	br	400d704 <__udivdi3+0x1e8>
 400da64:	1805883a 	mov	r2,r3
 400da68:	003fcd06 	br	400d9a0 <__udivdi3+0x484>
 400da6c:	1805883a 	mov	r2,r3
 400da70:	003f9706 	br	400d8d0 <__udivdi3+0x3b4>
 400da74:	1021883a 	mov	r16,r2
 400da78:	003fb606 	br	400d954 <__udivdi3+0x438>
 400da7c:	102d883a 	mov	r22,r2
 400da80:	003f8006 	br	400d884 <__udivdi3+0x368>
 400da84:	10bfff84 	addi	r2,r2,-2
 400da88:	003f5106 	br	400d7d0 <__udivdi3+0x2b4>
 400da8c:	10bfff84 	addi	r2,r2,-2
 400da90:	003eed06 	br	400d648 <__udivdi3+0x12c>
 400da94:	843fff84 	addi	r16,r16,-2
 400da98:	2449883a 	add	r4,r4,r17
 400da9c:	003ed806 	br	400d600 <__udivdi3+0xe4>
 400daa0:	a53fff84 	addi	r20,r20,-2
 400daa4:	2449883a 	add	r4,r4,r17
 400daa8:	003f3506 	br	400d780 <__udivdi3+0x264>

0400daac <__umoddi3>:
 400daac:	defff504 	addi	sp,sp,-44
 400dab0:	dc400215 	stw	r17,8(sp)
 400dab4:	dc000115 	stw	r16,4(sp)
 400dab8:	dfc00a15 	stw	ra,40(sp)
 400dabc:	df000915 	stw	fp,36(sp)
 400dac0:	ddc00815 	stw	r23,32(sp)
 400dac4:	dd800715 	stw	r22,28(sp)
 400dac8:	dd400615 	stw	r21,24(sp)
 400dacc:	dd000515 	stw	r20,20(sp)
 400dad0:	dcc00415 	stw	r19,16(sp)
 400dad4:	dc800315 	stw	r18,12(sp)
 400dad8:	2823883a 	mov	r17,r5
 400dadc:	2021883a 	mov	r16,r4
 400dae0:	3800371e 	bne	r7,zero,400dbc0 <__umoddi3+0x114>
 400dae4:	3825883a 	mov	r18,r7
 400dae8:	3029883a 	mov	r20,r6
 400daec:	2027883a 	mov	r19,r4
 400daf0:	2980572e 	bgeu	r5,r6,400dc50 <__umoddi3+0x1a4>
 400daf4:	00bfffd4 	movui	r2,65535
 400daf8:	282b883a 	mov	r21,r5
 400dafc:	1180922e 	bgeu	r2,r6,400dd48 <__umoddi3+0x29c>
 400db00:	00804034 	movhi	r2,256
 400db04:	30812036 	bltu	r6,r2,400df88 <__umoddi3+0x4dc>
 400db08:	3006d63a 	srli	r3,r6,24
 400db0c:	04800604 	movi	r18,24
 400db10:	00810074 	movhi	r2,1025
 400db14:	1885883a 	add	r2,r3,r2
 400db18:	108f1d03 	ldbu	r2,15476(r2)
 400db1c:	00c00804 	movi	r3,32
 400db20:	1485883a 	add	r2,r2,r18
 400db24:	18a5c83a 	sub	r18,r3,r2
 400db28:	18800526 	beq	r3,r2,400db40 <__umoddi3+0x94>
 400db2c:	8ca2983a 	sll	r17,r17,r18
 400db30:	8084d83a 	srl	r2,r16,r2
 400db34:	34a8983a 	sll	r20,r6,r18
 400db38:	84a6983a 	sll	r19,r16,r18
 400db3c:	146ab03a 	or	r21,r2,r17
 400db40:	a02ed43a 	srli	r23,r20,16
 400db44:	a809883a 	mov	r4,r21
 400db48:	a43fffcc 	andi	r16,r20,65535
 400db4c:	b80b883a 	mov	r5,r23
 400db50:	400e1380 	call	400e138 <__umodsi3>
 400db54:	a809883a 	mov	r4,r21
 400db58:	b80b883a 	mov	r5,r23
 400db5c:	102d883a 	mov	r22,r2
 400db60:	400e0d40 	call	400e0d4 <__udivsi3>
 400db64:	b02c943a 	slli	r22,r22,16
 400db68:	9808d43a 	srli	r4,r19,16
 400db6c:	80ab383a 	mul	r21,r16,r2
 400db70:	b108b03a 	or	r4,r22,r4
 400db74:	2540042e 	bgeu	r4,r21,400db88 <__umoddi3+0xdc>
 400db78:	2509883a 	add	r4,r4,r20
 400db7c:	25000236 	bltu	r4,r20,400db88 <__umoddi3+0xdc>
 400db80:	2540012e 	bgeu	r4,r21,400db88 <__umoddi3+0xdc>
 400db84:	2509883a 	add	r4,r4,r20
 400db88:	256bc83a 	sub	r21,r4,r21
 400db8c:	b80b883a 	mov	r5,r23
 400db90:	a809883a 	mov	r4,r21
 400db94:	400e1380 	call	400e138 <__umodsi3>
 400db98:	1023883a 	mov	r17,r2
 400db9c:	b80b883a 	mov	r5,r23
 400dba0:	a809883a 	mov	r4,r21
 400dba4:	400e0d40 	call	400e0d4 <__udivsi3>
 400dba8:	8822943a 	slli	r17,r17,16
 400dbac:	8085383a 	mul	r2,r16,r2
 400dbb0:	98ffffcc 	andi	r3,r19,65535
 400dbb4:	88c6b03a 	or	r3,r17,r3
 400dbb8:	18805a2e 	bgeu	r3,r2,400dd24 <__umoddi3+0x278>
 400dbbc:	00005506 	br	400dd14 <__umoddi3+0x268>
 400dbc0:	2005883a 	mov	r2,r4
 400dbc4:	29c00d2e 	bgeu	r5,r7,400dbfc <__umoddi3+0x150>
 400dbc8:	2807883a 	mov	r3,r5
 400dbcc:	dfc00a17 	ldw	ra,40(sp)
 400dbd0:	df000917 	ldw	fp,36(sp)
 400dbd4:	ddc00817 	ldw	r23,32(sp)
 400dbd8:	dd800717 	ldw	r22,28(sp)
 400dbdc:	dd400617 	ldw	r21,24(sp)
 400dbe0:	dd000517 	ldw	r20,20(sp)
 400dbe4:	dcc00417 	ldw	r19,16(sp)
 400dbe8:	dc800317 	ldw	r18,12(sp)
 400dbec:	dc400217 	ldw	r17,8(sp)
 400dbf0:	dc000117 	ldw	r16,4(sp)
 400dbf4:	dec00b04 	addi	sp,sp,44
 400dbf8:	f800283a 	ret
 400dbfc:	013fffd4 	movui	r4,65535
 400dc00:	2807883a 	mov	r3,r5
 400dc04:	21c0552e 	bgeu	r4,r7,400dd5c <__umoddi3+0x2b0>
 400dc08:	01004034 	movhi	r4,256
 400dc0c:	3900e336 	bltu	r7,r4,400df9c <__umoddi3+0x4f0>
 400dc10:	3808d63a 	srli	r4,r7,24
 400dc14:	02000604 	movi	r8,24
 400dc18:	01410074 	movhi	r5,1025
 400dc1c:	214b883a 	add	r5,r4,r5
 400dc20:	2d4f1d03 	ldbu	r21,15476(r5)
 400dc24:	01000804 	movi	r4,32
 400dc28:	aa2b883a 	add	r21,r21,r8
 400dc2c:	2569c83a 	sub	r20,r4,r21
 400dc30:	25404f1e 	bne	r4,r21,400dd70 <__umoddi3+0x2c4>
 400dc34:	3c400136 	bltu	r7,r17,400dc3c <__umoddi3+0x190>
 400dc38:	81bfe436 	bltu	r16,r6,400dbcc <__umoddi3+0x120>
 400dc3c:	8185c83a 	sub	r2,r16,r6
 400dc40:	89cfc83a 	sub	r7,r17,r7
 400dc44:	8087803a 	cmpltu	r3,r16,r2
 400dc48:	38c7c83a 	sub	r3,r7,r3
 400dc4c:	003fdf06 	br	400dbcc <__umoddi3+0x120>
 400dc50:	3000041e 	bne	r6,zero,400dc64 <__umoddi3+0x1b8>
 400dc54:	000b883a 	mov	r5,zero
 400dc58:	01000044 	movi	r4,1
 400dc5c:	400e0d40 	call	400e0d4 <__udivsi3>
 400dc60:	1029883a 	mov	r20,r2
 400dc64:	00bfffd4 	movui	r2,65535
 400dc68:	1500322e 	bgeu	r2,r20,400dd34 <__umoddi3+0x288>
 400dc6c:	00804034 	movhi	r2,256
 400dc70:	a080cd36 	bltu	r20,r2,400dfa8 <__umoddi3+0x4fc>
 400dc74:	a006d63a 	srli	r3,r20,24
 400dc78:	04800604 	movi	r18,24
 400dc7c:	00810074 	movhi	r2,1025
 400dc80:	1885883a 	add	r2,r3,r2
 400dc84:	158f1d03 	ldbu	r22,15476(r2)
 400dc88:	00800804 	movi	r2,32
 400dc8c:	b4ad883a 	add	r22,r22,r18
 400dc90:	15a5c83a 	sub	r18,r2,r22
 400dc94:	15808a1e 	bne	r2,r22,400dec0 <__umoddi3+0x414>
 400dc98:	a02ed43a 	srli	r23,r20,16
 400dc9c:	8d23c83a 	sub	r17,r17,r20
 400dca0:	a57fffcc 	andi	r21,r20,65535
 400dca4:	b80b883a 	mov	r5,r23
 400dca8:	8809883a 	mov	r4,r17
 400dcac:	400e1380 	call	400e138 <__umodsi3>
 400dcb0:	8809883a 	mov	r4,r17
 400dcb4:	b80b883a 	mov	r5,r23
 400dcb8:	102d883a 	mov	r22,r2
 400dcbc:	400e0d40 	call	400e0d4 <__udivsi3>
 400dcc0:	b02c943a 	slli	r22,r22,16
 400dcc4:	9808d43a 	srli	r4,r19,16
 400dcc8:	1561383a 	mul	r16,r2,r21
 400dccc:	b108b03a 	or	r4,r22,r4
 400dcd0:	2400032e 	bgeu	r4,r16,400dce0 <__umoddi3+0x234>
 400dcd4:	2509883a 	add	r4,r4,r20
 400dcd8:	25000136 	bltu	r4,r20,400dce0 <__umoddi3+0x234>
 400dcdc:	2400be36 	bltu	r4,r16,400dfd8 <__umoddi3+0x52c>
 400dce0:	2421c83a 	sub	r16,r4,r16
 400dce4:	b80b883a 	mov	r5,r23
 400dce8:	8009883a 	mov	r4,r16
 400dcec:	400e1380 	call	400e138 <__umodsi3>
 400dcf0:	1023883a 	mov	r17,r2
 400dcf4:	b80b883a 	mov	r5,r23
 400dcf8:	8009883a 	mov	r4,r16
 400dcfc:	400e0d40 	call	400e0d4 <__udivsi3>
 400dd00:	8822943a 	slli	r17,r17,16
 400dd04:	1545383a 	mul	r2,r2,r21
 400dd08:	9cffffcc 	andi	r19,r19,65535
 400dd0c:	8cc6b03a 	or	r3,r17,r19
 400dd10:	1880042e 	bgeu	r3,r2,400dd24 <__umoddi3+0x278>
 400dd14:	1d07883a 	add	r3,r3,r20
 400dd18:	1d000236 	bltu	r3,r20,400dd24 <__umoddi3+0x278>
 400dd1c:	1880012e 	bgeu	r3,r2,400dd24 <__umoddi3+0x278>
 400dd20:	1d07883a 	add	r3,r3,r20
 400dd24:	1885c83a 	sub	r2,r3,r2
 400dd28:	1484d83a 	srl	r2,r2,r18
 400dd2c:	0007883a 	mov	r3,zero
 400dd30:	003fa606 	br	400dbcc <__umoddi3+0x120>
 400dd34:	a0804030 	cmpltui	r2,r20,256
 400dd38:	10009e1e 	bne	r2,zero,400dfb4 <__umoddi3+0x508>
 400dd3c:	a006d23a 	srli	r3,r20,8
 400dd40:	04800204 	movi	r18,8
 400dd44:	003fcd06 	br	400dc7c <__umoddi3+0x1d0>
 400dd48:	30804030 	cmpltui	r2,r6,256
 400dd4c:	1000911e 	bne	r2,zero,400df94 <__umoddi3+0x4e8>
 400dd50:	3006d23a 	srli	r3,r6,8
 400dd54:	04800204 	movi	r18,8
 400dd58:	003f6d06 	br	400db10 <__umoddi3+0x64>
 400dd5c:	39004030 	cmpltui	r4,r7,256
 400dd60:	2000961e 	bne	r4,zero,400dfbc <__umoddi3+0x510>
 400dd64:	3808d23a 	srli	r4,r7,8
 400dd68:	02000204 	movi	r8,8
 400dd6c:	003faa06 	br	400dc18 <__umoddi3+0x16c>
 400dd70:	3d0e983a 	sll	r7,r7,r20
 400dd74:	3544d83a 	srl	r2,r6,r21
 400dd78:	8d64d83a 	srl	r18,r17,r21
 400dd7c:	8d22983a 	sll	r17,r17,r20
 400dd80:	11eeb03a 	or	r23,r2,r7
 400dd84:	b838d43a 	srli	fp,r23,16
 400dd88:	8544d83a 	srl	r2,r16,r21
 400dd8c:	9009883a 	mov	r4,r18
 400dd90:	e00b883a 	mov	r5,fp
 400dd94:	3526983a 	sll	r19,r6,r20
 400dd98:	1462b03a 	or	r17,r2,r17
 400dd9c:	400e1380 	call	400e138 <__umodsi3>
 400dda0:	9009883a 	mov	r4,r18
 400dda4:	e00b883a 	mov	r5,fp
 400dda8:	1025883a 	mov	r18,r2
 400ddac:	400e0d40 	call	400e0d4 <__udivsi3>
 400ddb0:	9008943a 	slli	r4,r18,16
 400ddb4:	8806d43a 	srli	r3,r17,16
 400ddb8:	b9ffffcc 	andi	r7,r23,65535
 400ddbc:	38a5383a 	mul	r18,r7,r2
 400ddc0:	20c8b03a 	or	r4,r4,r3
 400ddc4:	8520983a 	sll	r16,r16,r20
 400ddc8:	102d883a 	mov	r22,r2
 400ddcc:	2480062e 	bgeu	r4,r18,400dde8 <__umoddi3+0x33c>
 400ddd0:	25c9883a 	add	r4,r4,r23
 400ddd4:	10bfffc4 	addi	r2,r2,-1
 400ddd8:	25c07d36 	bltu	r4,r23,400dfd0 <__umoddi3+0x524>
 400dddc:	24807c2e 	bgeu	r4,r18,400dfd0 <__umoddi3+0x524>
 400dde0:	b5bfff84 	addi	r22,r22,-2
 400dde4:	25c9883a 	add	r4,r4,r23
 400dde8:	24a5c83a 	sub	r18,r4,r18
 400ddec:	9009883a 	mov	r4,r18
 400ddf0:	e00b883a 	mov	r5,fp
 400ddf4:	d9c00015 	stw	r7,0(sp)
 400ddf8:	400e1380 	call	400e138 <__umodsi3>
 400ddfc:	9009883a 	mov	r4,r18
 400de00:	e00b883a 	mov	r5,fp
 400de04:	1025883a 	mov	r18,r2
 400de08:	400e0d40 	call	400e0d4 <__udivsi3>
 400de0c:	d9c00017 	ldw	r7,0(sp)
 400de10:	9024943a 	slli	r18,r18,16
 400de14:	8c7fffcc 	andi	r17,r17,65535
 400de18:	388f383a 	mul	r7,r7,r2
 400de1c:	9448b03a 	or	r4,r18,r17
 400de20:	21c0062e 	bgeu	r4,r7,400de3c <__umoddi3+0x390>
 400de24:	25c9883a 	add	r4,r4,r23
 400de28:	10ffffc4 	addi	r3,r2,-1
 400de2c:	25c06636 	bltu	r4,r23,400dfc8 <__umoddi3+0x51c>
 400de30:	21c0652e 	bgeu	r4,r7,400dfc8 <__umoddi3+0x51c>
 400de34:	10bfff84 	addi	r2,r2,-2
 400de38:	25c9883a 	add	r4,r4,r23
 400de3c:	b00a943a 	slli	r5,r22,16
 400de40:	11bfffcc 	andi	r6,r2,65535
 400de44:	9806d43a 	srli	r3,r19,16
 400de48:	2884b03a 	or	r2,r5,r2
 400de4c:	102cd43a 	srli	r22,r2,16
 400de50:	997fffcc 	andi	r5,r19,65535
 400de54:	3151383a 	mul	r8,r6,r5
 400de58:	b14b383a 	mul	r5,r22,r5
 400de5c:	30cd383a 	mul	r6,r6,r3
 400de60:	4004d43a 	srli	r2,r8,16
 400de64:	b0ed383a 	mul	r22,r22,r3
 400de68:	314d883a 	add	r6,r6,r5
 400de6c:	1185883a 	add	r2,r2,r6
 400de70:	21c9c83a 	sub	r4,r4,r7
 400de74:	1140022e 	bgeu	r2,r5,400de80 <__umoddi3+0x3d4>
 400de78:	00c00074 	movhi	r3,1
 400de7c:	b0ed883a 	add	r22,r22,r3
 400de80:	1006d43a 	srli	r3,r2,16
 400de84:	1004943a 	slli	r2,r2,16
 400de88:	423fffcc 	andi	r8,r8,65535
 400de8c:	1dad883a 	add	r22,r3,r22
 400de90:	1205883a 	add	r2,r2,r8
 400de94:	25803636 	bltu	r4,r22,400df70 <__umoddi3+0x4c4>
 400de98:	25803426 	beq	r4,r22,400df6c <__umoddi3+0x4c0>
 400de9c:	8085c83a 	sub	r2,r16,r2
 400dea0:	8087803a 	cmpltu	r3,r16,r2
 400dea4:	2589c83a 	sub	r4,r4,r22
 400dea8:	20c7c83a 	sub	r3,r4,r3
 400deac:	1d60983a 	sll	r16,r3,r21
 400deb0:	1504d83a 	srl	r2,r2,r20
 400deb4:	1d06d83a 	srl	r3,r3,r20
 400deb8:	8084b03a 	or	r2,r16,r2
 400debc:	003f4306 	br	400dbcc <__umoddi3+0x120>
 400dec0:	a4a8983a 	sll	r20,r20,r18
 400dec4:	8daad83a 	srl	r21,r17,r22
 400dec8:	8ca2983a 	sll	r17,r17,r18
 400decc:	a02ed43a 	srli	r23,r20,16
 400ded0:	a809883a 	mov	r4,r21
 400ded4:	85acd83a 	srl	r22,r16,r22
 400ded8:	b80b883a 	mov	r5,r23
 400dedc:	400e1380 	call	400e138 <__umodsi3>
 400dee0:	a809883a 	mov	r4,r21
 400dee4:	b80b883a 	mov	r5,r23
 400dee8:	b46cb03a 	or	r22,r22,r17
 400deec:	1027883a 	mov	r19,r2
 400def0:	400e0d40 	call	400e0d4 <__udivsi3>
 400def4:	9826943a 	slli	r19,r19,16
 400def8:	b008d43a 	srli	r4,r22,16
 400defc:	a57fffcc 	andi	r21,r20,65535
 400df00:	a8a3383a 	mul	r17,r21,r2
 400df04:	9908b03a 	or	r4,r19,r4
 400df08:	84a6983a 	sll	r19,r16,r18
 400df0c:	2440042e 	bgeu	r4,r17,400df20 <__umoddi3+0x474>
 400df10:	2509883a 	add	r4,r4,r20
 400df14:	25000236 	bltu	r4,r20,400df20 <__umoddi3+0x474>
 400df18:	2440012e 	bgeu	r4,r17,400df20 <__umoddi3+0x474>
 400df1c:	2509883a 	add	r4,r4,r20
 400df20:	2463c83a 	sub	r17,r4,r17
 400df24:	8809883a 	mov	r4,r17
 400df28:	b80b883a 	mov	r5,r23
 400df2c:	400e1380 	call	400e138 <__umodsi3>
 400df30:	1021883a 	mov	r16,r2
 400df34:	8809883a 	mov	r4,r17
 400df38:	b80b883a 	mov	r5,r23
 400df3c:	8020943a 	slli	r16,r16,16
 400df40:	400e0d40 	call	400e0d4 <__udivsi3>
 400df44:	a885383a 	mul	r2,r21,r2
 400df48:	b47fffcc 	andi	r17,r22,65535
 400df4c:	8462b03a 	or	r17,r16,r17
 400df50:	8880042e 	bgeu	r17,r2,400df64 <__umoddi3+0x4b8>
 400df54:	8d23883a 	add	r17,r17,r20
 400df58:	8d000236 	bltu	r17,r20,400df64 <__umoddi3+0x4b8>
 400df5c:	8880012e 	bgeu	r17,r2,400df64 <__umoddi3+0x4b8>
 400df60:	8d23883a 	add	r17,r17,r20
 400df64:	88a3c83a 	sub	r17,r17,r2
 400df68:	003f4e06 	br	400dca4 <__umoddi3+0x1f8>
 400df6c:	80bfcb2e 	bgeu	r16,r2,400de9c <__umoddi3+0x3f0>
 400df70:	14e7c83a 	sub	r19,r2,r19
 400df74:	14c5803a 	cmpltu	r2,r2,r19
 400df78:	15c5883a 	add	r2,r2,r23
 400df7c:	b0adc83a 	sub	r22,r22,r2
 400df80:	9805883a 	mov	r2,r19
 400df84:	003fc506 	br	400de9c <__umoddi3+0x3f0>
 400df88:	3006d43a 	srli	r3,r6,16
 400df8c:	04800404 	movi	r18,16
 400df90:	003edf06 	br	400db10 <__umoddi3+0x64>
 400df94:	3007883a 	mov	r3,r6
 400df98:	003edd06 	br	400db10 <__umoddi3+0x64>
 400df9c:	3808d43a 	srli	r4,r7,16
 400dfa0:	02000404 	movi	r8,16
 400dfa4:	003f1c06 	br	400dc18 <__umoddi3+0x16c>
 400dfa8:	a006d43a 	srli	r3,r20,16
 400dfac:	04800404 	movi	r18,16
 400dfb0:	003f3206 	br	400dc7c <__umoddi3+0x1d0>
 400dfb4:	a007883a 	mov	r3,r20
 400dfb8:	003f3006 	br	400dc7c <__umoddi3+0x1d0>
 400dfbc:	3809883a 	mov	r4,r7
 400dfc0:	0011883a 	mov	r8,zero
 400dfc4:	003f1406 	br	400dc18 <__umoddi3+0x16c>
 400dfc8:	1805883a 	mov	r2,r3
 400dfcc:	003f9b06 	br	400de3c <__umoddi3+0x390>
 400dfd0:	102d883a 	mov	r22,r2
 400dfd4:	003f8406 	br	400dde8 <__umoddi3+0x33c>
 400dfd8:	2509883a 	add	r4,r4,r20
 400dfdc:	003f4006 	br	400dce0 <__umoddi3+0x234>

0400dfe0 <__divsi3>:
 400dfe0:	20001a16 	blt	r4,zero,400e04c <__divsi3+0x6c>
 400dfe4:	000f883a 	mov	r7,zero
 400dfe8:	2800020e 	bge	r5,zero,400dff4 <__divsi3+0x14>
 400dfec:	014bc83a 	sub	r5,zero,r5
 400dff0:	39c0005c 	xori	r7,r7,1
 400dff4:	200d883a 	mov	r6,r4
 400dff8:	00c00044 	movi	r3,1
 400dffc:	2900092e 	bgeu	r5,r4,400e024 <__divsi3+0x44>
 400e000:	00800804 	movi	r2,32
 400e004:	00c00044 	movi	r3,1
 400e008:	00000106 	br	400e010 <__divsi3+0x30>
 400e00c:	10001226 	beq	r2,zero,400e058 <__divsi3+0x78>
 400e010:	294b883a 	add	r5,r5,r5
 400e014:	10bfffc4 	addi	r2,r2,-1
 400e018:	18c7883a 	add	r3,r3,r3
 400e01c:	293ffb36 	bltu	r5,r4,400e00c <__divsi3+0x2c>
 400e020:	18000d26 	beq	r3,zero,400e058 <__divsi3+0x78>
 400e024:	0005883a 	mov	r2,zero
 400e028:	31400236 	bltu	r6,r5,400e034 <__divsi3+0x54>
 400e02c:	314dc83a 	sub	r6,r6,r5
 400e030:	10c4b03a 	or	r2,r2,r3
 400e034:	1806d07a 	srli	r3,r3,1
 400e038:	280ad07a 	srli	r5,r5,1
 400e03c:	183ffa1e 	bne	r3,zero,400e028 <__divsi3+0x48>
 400e040:	38000126 	beq	r7,zero,400e048 <__divsi3+0x68>
 400e044:	0085c83a 	sub	r2,zero,r2
 400e048:	f800283a 	ret
 400e04c:	0109c83a 	sub	r4,zero,r4
 400e050:	01c00044 	movi	r7,1
 400e054:	003fe406 	br	400dfe8 <__divsi3+0x8>
 400e058:	0005883a 	mov	r2,zero
 400e05c:	003ff806 	br	400e040 <__divsi3+0x60>

0400e060 <__modsi3>:
 400e060:	20001916 	blt	r4,zero,400e0c8 <__modsi3+0x68>
 400e064:	000f883a 	mov	r7,zero
 400e068:	2005883a 	mov	r2,r4
 400e06c:	2800010e 	bge	r5,zero,400e074 <__modsi3+0x14>
 400e070:	014bc83a 	sub	r5,zero,r5
 400e074:	00c00044 	movi	r3,1
 400e078:	2900092e 	bgeu	r5,r4,400e0a0 <__modsi3+0x40>
 400e07c:	01800804 	movi	r6,32
 400e080:	00c00044 	movi	r3,1
 400e084:	00000106 	br	400e08c <__modsi3+0x2c>
 400e088:	30000d26 	beq	r6,zero,400e0c0 <__modsi3+0x60>
 400e08c:	294b883a 	add	r5,r5,r5
 400e090:	31bfffc4 	addi	r6,r6,-1
 400e094:	18c7883a 	add	r3,r3,r3
 400e098:	293ffb36 	bltu	r5,r4,400e088 <__modsi3+0x28>
 400e09c:	18000826 	beq	r3,zero,400e0c0 <__modsi3+0x60>
 400e0a0:	1806d07a 	srli	r3,r3,1
 400e0a4:	11400136 	bltu	r2,r5,400e0ac <__modsi3+0x4c>
 400e0a8:	1145c83a 	sub	r2,r2,r5
 400e0ac:	280ad07a 	srli	r5,r5,1
 400e0b0:	183ffb1e 	bne	r3,zero,400e0a0 <__modsi3+0x40>
 400e0b4:	38000126 	beq	r7,zero,400e0bc <__modsi3+0x5c>
 400e0b8:	0085c83a 	sub	r2,zero,r2
 400e0bc:	f800283a 	ret
 400e0c0:	2005883a 	mov	r2,r4
 400e0c4:	003ffb06 	br	400e0b4 <__modsi3+0x54>
 400e0c8:	0109c83a 	sub	r4,zero,r4
 400e0cc:	01c00044 	movi	r7,1
 400e0d0:	003fe506 	br	400e068 <__modsi3+0x8>

0400e0d4 <__udivsi3>:
 400e0d4:	200d883a 	mov	r6,r4
 400e0d8:	2900152e 	bgeu	r5,r4,400e130 <__udivsi3+0x5c>
 400e0dc:	28001416 	blt	r5,zero,400e130 <__udivsi3+0x5c>
 400e0e0:	00800804 	movi	r2,32
 400e0e4:	00c00044 	movi	r3,1
 400e0e8:	00000206 	br	400e0f4 <__udivsi3+0x20>
 400e0ec:	10000e26 	beq	r2,zero,400e128 <__udivsi3+0x54>
 400e0f0:	28000516 	blt	r5,zero,400e108 <__udivsi3+0x34>
 400e0f4:	294b883a 	add	r5,r5,r5
 400e0f8:	10bfffc4 	addi	r2,r2,-1
 400e0fc:	18c7883a 	add	r3,r3,r3
 400e100:	293ffa36 	bltu	r5,r4,400e0ec <__udivsi3+0x18>
 400e104:	18000826 	beq	r3,zero,400e128 <__udivsi3+0x54>
 400e108:	0005883a 	mov	r2,zero
 400e10c:	31400236 	bltu	r6,r5,400e118 <__udivsi3+0x44>
 400e110:	314dc83a 	sub	r6,r6,r5
 400e114:	10c4b03a 	or	r2,r2,r3
 400e118:	1806d07a 	srli	r3,r3,1
 400e11c:	280ad07a 	srli	r5,r5,1
 400e120:	183ffa1e 	bne	r3,zero,400e10c <__udivsi3+0x38>
 400e124:	f800283a 	ret
 400e128:	0005883a 	mov	r2,zero
 400e12c:	f800283a 	ret
 400e130:	00c00044 	movi	r3,1
 400e134:	003ff406 	br	400e108 <__udivsi3+0x34>

0400e138 <__umodsi3>:
 400e138:	2005883a 	mov	r2,r4
 400e13c:	2900132e 	bgeu	r5,r4,400e18c <__umodsi3+0x54>
 400e140:	28001216 	blt	r5,zero,400e18c <__umodsi3+0x54>
 400e144:	01800804 	movi	r6,32
 400e148:	00c00044 	movi	r3,1
 400e14c:	00000206 	br	400e158 <__umodsi3+0x20>
 400e150:	30000c26 	beq	r6,zero,400e184 <__umodsi3+0x4c>
 400e154:	28000516 	blt	r5,zero,400e16c <__umodsi3+0x34>
 400e158:	294b883a 	add	r5,r5,r5
 400e15c:	31bfffc4 	addi	r6,r6,-1
 400e160:	18c7883a 	add	r3,r3,r3
 400e164:	293ffa36 	bltu	r5,r4,400e150 <__umodsi3+0x18>
 400e168:	18000626 	beq	r3,zero,400e184 <__umodsi3+0x4c>
 400e16c:	1806d07a 	srli	r3,r3,1
 400e170:	11400136 	bltu	r2,r5,400e178 <__umodsi3+0x40>
 400e174:	1145c83a 	sub	r2,r2,r5
 400e178:	280ad07a 	srli	r5,r5,1
 400e17c:	183ffb1e 	bne	r3,zero,400e16c <__umodsi3+0x34>
 400e180:	f800283a 	ret
 400e184:	2005883a 	mov	r2,r4
 400e188:	f800283a 	ret
 400e18c:	00c00044 	movi	r3,1
 400e190:	003ff606 	br	400e16c <__umodsi3+0x34>

0400e194 <__adddf3>:
 400e194:	02000434 	movhi	r8,16
 400e198:	423fffc4 	addi	r8,r8,-1
 400e19c:	3a12703a 	and	r9,r7,r8
 400e1a0:	2a06703a 	and	r3,r5,r8
 400e1a4:	2818d53a 	srli	r12,r5,20
 400e1a8:	3804d53a 	srli	r2,r7,20
 400e1ac:	481490fa 	slli	r10,r9,3
 400e1b0:	280ad7fa 	srli	r5,r5,31
 400e1b4:	180690fa 	slli	r3,r3,3
 400e1b8:	2016d77a 	srli	r11,r4,29
 400e1bc:	3012d77a 	srli	r9,r6,29
 400e1c0:	380ed7fa 	srli	r7,r7,31
 400e1c4:	defffb04 	addi	sp,sp,-20
 400e1c8:	dc400115 	stw	r17,4(sp)
 400e1cc:	dc000015 	stw	r16,0(sp)
 400e1d0:	dfc00415 	stw	ra,16(sp)
 400e1d4:	dcc00315 	stw	r19,12(sp)
 400e1d8:	dc800215 	stw	r18,8(sp)
 400e1dc:	201c90fa 	slli	r14,r4,3
 400e1e0:	301a90fa 	slli	r13,r6,3
 400e1e4:	6441ffcc 	andi	r17,r12,2047
 400e1e8:	2821883a 	mov	r16,r5
 400e1ec:	58c6b03a 	or	r3,r11,r3
 400e1f0:	1081ffcc 	andi	r2,r2,2047
 400e1f4:	4a92b03a 	or	r9,r9,r10
 400e1f8:	29c06326 	beq	r5,r7,400e388 <__adddf3+0x1f4>
 400e1fc:	888bc83a 	sub	r5,r17,r2
 400e200:	0140560e 	bge	zero,r5,400e35c <__adddf3+0x1c8>
 400e204:	10007526 	beq	r2,zero,400e3dc <__adddf3+0x248>
 400e208:	8881ffd8 	cmpnei	r2,r17,2047
 400e20c:	10012d26 	beq	r2,zero,400e6c4 <__adddf3+0x530>
 400e210:	4a402034 	orhi	r9,r9,128
 400e214:	28800e48 	cmpgei	r2,r5,57
 400e218:	1000f41e 	bne	r2,zero,400e5ec <__adddf3+0x458>
 400e21c:	28800808 	cmpgei	r2,r5,32
 400e220:	1001471e 	bne	r2,zero,400e740 <__adddf3+0x5ac>
 400e224:	00800804 	movi	r2,32
 400e228:	1145c83a 	sub	r2,r2,r5
 400e22c:	6948d83a 	srl	r4,r13,r5
 400e230:	48a4983a 	sll	r18,r9,r2
 400e234:	6884983a 	sll	r2,r13,r2
 400e238:	494ad83a 	srl	r5,r9,r5
 400e23c:	9124b03a 	or	r18,r18,r4
 400e240:	101ac03a 	cmpne	r13,r2,zero
 400e244:	9364b03a 	or	r18,r18,r13
 400e248:	1947c83a 	sub	r3,r3,r5
 400e24c:	74a5c83a 	sub	r18,r14,r18
 400e250:	7489803a 	cmpltu	r4,r14,r18
 400e254:	1909c83a 	sub	r4,r3,r4
 400e258:	2080202c 	andhi	r2,r4,128
 400e25c:	10008626 	beq	r2,zero,400e478 <__adddf3+0x2e4>
 400e260:	00802034 	movhi	r2,128
 400e264:	10bfffc4 	addi	r2,r2,-1
 400e268:	20a6703a 	and	r19,r4,r2
 400e26c:	9800d626 	beq	r19,zero,400e5c8 <__adddf3+0x434>
 400e270:	9809883a 	mov	r4,r19
 400e274:	40107900 	call	4010790 <__clzsi2>
 400e278:	133ffe04 	addi	r12,r2,-8
 400e27c:	01000804 	movi	r4,32
 400e280:	2309c83a 	sub	r4,r4,r12
 400e284:	9108d83a 	srl	r4,r18,r4
 400e288:	9b04983a 	sll	r2,r19,r12
 400e28c:	9324983a 	sll	r18,r18,r12
 400e290:	2088b03a 	or	r4,r4,r2
 400e294:	6440c716 	blt	r12,r17,400e5b4 <__adddf3+0x420>
 400e298:	6459c83a 	sub	r12,r12,r17
 400e29c:	62000044 	addi	r8,r12,1
 400e2a0:	40800808 	cmpgei	r2,r8,32
 400e2a4:	1001191e 	bne	r2,zero,400e70c <__adddf3+0x578>
 400e2a8:	00800804 	movi	r2,32
 400e2ac:	1205c83a 	sub	r2,r2,r8
 400e2b0:	9206d83a 	srl	r3,r18,r8
 400e2b4:	90a4983a 	sll	r18,r18,r2
 400e2b8:	2084983a 	sll	r2,r4,r2
 400e2bc:	2208d83a 	srl	r4,r4,r8
 400e2c0:	9024c03a 	cmpne	r18,r18,zero
 400e2c4:	10c4b03a 	or	r2,r2,r3
 400e2c8:	14a4b03a 	or	r18,r2,r18
 400e2cc:	0023883a 	mov	r17,zero
 400e2d0:	908001cc 	andi	r2,r18,7
 400e2d4:	10000726 	beq	r2,zero,400e2f4 <__adddf3+0x160>
 400e2d8:	908003cc 	andi	r2,r18,15
 400e2dc:	10800120 	cmpeqi	r2,r2,4
 400e2e0:	1000041e 	bne	r2,zero,400e2f4 <__adddf3+0x160>
 400e2e4:	90c00104 	addi	r3,r18,4
 400e2e8:	1ca5803a 	cmpltu	r18,r3,r18
 400e2ec:	2489883a 	add	r4,r4,r18
 400e2f0:	1825883a 	mov	r18,r3
 400e2f4:	2080202c 	andhi	r2,r4,128
 400e2f8:	10006126 	beq	r2,zero,400e480 <__adddf3+0x2ec>
 400e2fc:	89400044 	addi	r5,r17,1
 400e300:	2881ffe0 	cmpeqi	r2,r5,2047
 400e304:	2941ffcc 	andi	r5,r5,2047
 400e308:	1000731e 	bne	r2,zero,400e4d8 <__adddf3+0x344>
 400e30c:	023fe034 	movhi	r8,65408
 400e310:	423fffc4 	addi	r8,r8,-1
 400e314:	2210703a 	and	r8,r4,r8
 400e318:	4006927a 	slli	r3,r8,9
 400e31c:	9024d0fa 	srli	r18,r18,3
 400e320:	4004977a 	slli	r2,r8,29
 400e324:	1806d33a 	srli	r3,r3,12
 400e328:	1484b03a 	or	r2,r2,r18
 400e32c:	280a953a 	slli	r5,r5,20
 400e330:	84003fcc 	andi	r16,r16,255
 400e334:	802097fa 	slli	r16,r16,31
 400e338:	28c6b03a 	or	r3,r5,r3
 400e33c:	1c06b03a 	or	r3,r3,r16
 400e340:	dfc00417 	ldw	ra,16(sp)
 400e344:	dcc00317 	ldw	r19,12(sp)
 400e348:	dc800217 	ldw	r18,8(sp)
 400e34c:	dc400117 	ldw	r17,4(sp)
 400e350:	dc000017 	ldw	r16,0(sp)
 400e354:	dec00504 	addi	sp,sp,20
 400e358:	f800283a 	ret
 400e35c:	28002726 	beq	r5,zero,400e3fc <__adddf3+0x268>
 400e360:	144bc83a 	sub	r5,r2,r17
 400e364:	8800be1e 	bne	r17,zero,400e660 <__adddf3+0x4cc>
 400e368:	1b88b03a 	or	r4,r3,r14
 400e36c:	20013126 	beq	r4,zero,400e834 <__adddf3+0x6a0>
 400e370:	293fffc4 	addi	r4,r5,-1
 400e374:	20017226 	beq	r4,zero,400e940 <__adddf3+0x7ac>
 400e378:	2941ffd8 	cmpnei	r5,r5,2047
 400e37c:	2801c226 	beq	r5,zero,400ea88 <__adddf3+0x8f4>
 400e380:	200b883a 	mov	r5,r4
 400e384:	0000b906 	br	400e66c <__adddf3+0x4d8>
 400e388:	888bc83a 	sub	r5,r17,r2
 400e38c:	0140700e 	bge	zero,r5,400e550 <__adddf3+0x3bc>
 400e390:	10002a26 	beq	r2,zero,400e43c <__adddf3+0x2a8>
 400e394:	8881ffd8 	cmpnei	r2,r17,2047
 400e398:	1000ca26 	beq	r2,zero,400e6c4 <__adddf3+0x530>
 400e39c:	4a402034 	orhi	r9,r9,128
 400e3a0:	28800e48 	cmpgei	r2,r5,57
 400e3a4:	1000421e 	bne	r2,zero,400e4b0 <__adddf3+0x31c>
 400e3a8:	28800808 	cmpgei	r2,r5,32
 400e3ac:	1000ff26 	beq	r2,zero,400e7ac <__adddf3+0x618>
 400e3b0:	2cbff804 	addi	r18,r5,-32
 400e3b4:	29000820 	cmpeqi	r4,r5,32
 400e3b8:	4c84d83a 	srl	r2,r9,r18
 400e3bc:	2000041e 	bne	r4,zero,400e3d0 <__adddf3+0x23c>
 400e3c0:	01001004 	movi	r4,64
 400e3c4:	214bc83a 	sub	r5,r4,r5
 400e3c8:	4952983a 	sll	r9,r9,r5
 400e3cc:	6a5ab03a 	or	r13,r13,r9
 400e3d0:	6824c03a 	cmpne	r18,r13,zero
 400e3d4:	90a4b03a 	or	r18,r18,r2
 400e3d8:	00003706 	br	400e4b8 <__adddf3+0x324>
 400e3dc:	4b44b03a 	or	r2,r9,r13
 400e3e0:	1000b126 	beq	r2,zero,400e6a8 <__adddf3+0x514>
 400e3e4:	28bfffc4 	addi	r2,r5,-1
 400e3e8:	10011a26 	beq	r2,zero,400e854 <__adddf3+0x6c0>
 400e3ec:	2941ffd8 	cmpnei	r5,r5,2047
 400e3f0:	28012526 	beq	r5,zero,400e888 <__adddf3+0x6f4>
 400e3f4:	100b883a 	mov	r5,r2
 400e3f8:	003f8606 	br	400e214 <__adddf3+0x80>
 400e3fc:	8a800044 	addi	r10,r17,1
 400e400:	5281ff8c 	andi	r10,r10,2046
 400e404:	50008b1e 	bne	r10,zero,400e634 <__adddf3+0x4a0>
 400e408:	1b96b03a 	or	r11,r3,r14
 400e40c:	4b44b03a 	or	r2,r9,r13
 400e410:	8801031e 	bne	r17,zero,400e820 <__adddf3+0x68c>
 400e414:	58014126 	beq	r11,zero,400e91c <__adddf3+0x788>
 400e418:	1001571e 	bne	r2,zero,400e978 <__adddf3+0x7e4>
 400e41c:	1804977a 	slli	r2,r3,29
 400e420:	01480034 	movhi	r5,8192
 400e424:	297fffc4 	addi	r5,r5,-1
 400e428:	2148703a 	and	r4,r4,r5
 400e42c:	1810d0fa 	srli	r8,r3,3
 400e430:	1104b03a 	or	r2,r2,r4
 400e434:	500b883a 	mov	r5,r10
 400e438:	00001806 	br	400e49c <__adddf3+0x308>
 400e43c:	4b44b03a 	or	r2,r9,r13
 400e440:	10010a26 	beq	r2,zero,400e86c <__adddf3+0x6d8>
 400e444:	28bfffc4 	addi	r2,r5,-1
 400e448:	10000426 	beq	r2,zero,400e45c <__adddf3+0x2c8>
 400e44c:	2941ffd8 	cmpnei	r5,r5,2047
 400e450:	28014226 	beq	r5,zero,400e95c <__adddf3+0x7c8>
 400e454:	100b883a 	mov	r5,r2
 400e458:	003fd106 	br	400e3a0 <__adddf3+0x20c>
 400e45c:	7365883a 	add	r18,r14,r13
 400e460:	1a47883a 	add	r3,r3,r9
 400e464:	9389803a 	cmpltu	r4,r18,r14
 400e468:	1909883a 	add	r4,r3,r4
 400e46c:	2080202c 	andhi	r2,r4,128
 400e470:	10009b1e 	bne	r2,zero,400e6e0 <__adddf3+0x54c>
 400e474:	04400044 	movi	r17,1
 400e478:	908001cc 	andi	r2,r18,7
 400e47c:	103f961e 	bne	r2,zero,400e2d8 <__adddf3+0x144>
 400e480:	9024d0fa 	srli	r18,r18,3
 400e484:	2004977a 	slli	r2,r4,29
 400e488:	2010d0fa 	srli	r8,r4,3
 400e48c:	880b883a 	mov	r5,r17
 400e490:	9084b03a 	or	r2,r18,r2
 400e494:	28c1ffe0 	cmpeqi	r3,r5,2047
 400e498:	1800251e 	bne	r3,zero,400e530 <__adddf3+0x39c>
 400e49c:	00c00434 	movhi	r3,16
 400e4a0:	18ffffc4 	addi	r3,r3,-1
 400e4a4:	40c6703a 	and	r3,r8,r3
 400e4a8:	2941ffcc 	andi	r5,r5,2047
 400e4ac:	003f9f06 	br	400e32c <__adddf3+0x198>
 400e4b0:	4b64b03a 	or	r18,r9,r13
 400e4b4:	9024c03a 	cmpne	r18,r18,zero
 400e4b8:	93a5883a 	add	r18,r18,r14
 400e4bc:	9389803a 	cmpltu	r4,r18,r14
 400e4c0:	20c9883a 	add	r4,r4,r3
 400e4c4:	2080202c 	andhi	r2,r4,128
 400e4c8:	103feb26 	beq	r2,zero,400e478 <__adddf3+0x2e4>
 400e4cc:	8c400044 	addi	r17,r17,1
 400e4d0:	8881ffe0 	cmpeqi	r2,r17,2047
 400e4d4:	10008326 	beq	r2,zero,400e6e4 <__adddf3+0x550>
 400e4d8:	0141ffc4 	movi	r5,2047
 400e4dc:	0007883a 	mov	r3,zero
 400e4e0:	0005883a 	mov	r2,zero
 400e4e4:	003f9106 	br	400e32c <__adddf3+0x198>
 400e4e8:	4b44b03a 	or	r2,r9,r13
 400e4ec:	180a977a 	slli	r5,r3,29
 400e4f0:	1810d0fa 	srli	r8,r3,3
 400e4f4:	10016c26 	beq	r2,zero,400eaa8 <__adddf3+0x914>
 400e4f8:	00c80034 	movhi	r3,8192
 400e4fc:	18ffffc4 	addi	r3,r3,-1
 400e500:	20c4703a 	and	r2,r4,r3
 400e504:	4100022c 	andhi	r4,r8,8
 400e508:	1144b03a 	or	r2,r2,r5
 400e50c:	20000826 	beq	r4,zero,400e530 <__adddf3+0x39c>
 400e510:	4808d0fa 	srli	r4,r9,3
 400e514:	2140022c 	andhi	r5,r4,8
 400e518:	2800051e 	bne	r5,zero,400e530 <__adddf3+0x39c>
 400e51c:	4804977a 	slli	r2,r9,29
 400e520:	30cc703a 	and	r6,r6,r3
 400e524:	3821883a 	mov	r16,r7
 400e528:	3084b03a 	or	r2,r6,r2
 400e52c:	2011883a 	mov	r8,r4
 400e530:	4086b03a 	or	r3,r8,r2
 400e534:	18017126 	beq	r3,zero,400eafc <__adddf3+0x968>
 400e538:	01000434 	movhi	r4,16
 400e53c:	40c00234 	orhi	r3,r8,8
 400e540:	213fffc4 	addi	r4,r4,-1
 400e544:	1906703a 	and	r3,r3,r4
 400e548:	0141ffc4 	movi	r5,2047
 400e54c:	003f7706 	br	400e32c <__adddf3+0x198>
 400e550:	28002926 	beq	r5,zero,400e5f8 <__adddf3+0x464>
 400e554:	144bc83a 	sub	r5,r2,r17
 400e558:	88008c26 	beq	r17,zero,400e78c <__adddf3+0x5f8>
 400e55c:	1101ffd8 	cmpnei	r4,r2,2047
 400e560:	20011126 	beq	r4,zero,400e9a8 <__adddf3+0x814>
 400e564:	18c02034 	orhi	r3,r3,128
 400e568:	29000e48 	cmpgei	r4,r5,57
 400e56c:	2000d51e 	bne	r4,zero,400e8c4 <__adddf3+0x730>
 400e570:	29000808 	cmpgei	r4,r5,32
 400e574:	2001511e 	bne	r4,zero,400eabc <__adddf3+0x928>
 400e578:	01000804 	movi	r4,32
 400e57c:	2149c83a 	sub	r4,r4,r5
 400e580:	1924983a 	sll	r18,r3,r4
 400e584:	714cd83a 	srl	r6,r14,r5
 400e588:	7108983a 	sll	r4,r14,r4
 400e58c:	194ad83a 	srl	r5,r3,r5
 400e590:	91a4b03a 	or	r18,r18,r6
 400e594:	2006c03a 	cmpne	r3,r4,zero
 400e598:	90e4b03a 	or	r18,r18,r3
 400e59c:	4953883a 	add	r9,r9,r5
 400e5a0:	9365883a 	add	r18,r18,r13
 400e5a4:	9349803a 	cmpltu	r4,r18,r13
 400e5a8:	2249883a 	add	r4,r4,r9
 400e5ac:	1023883a 	mov	r17,r2
 400e5b0:	003fc406 	br	400e4c4 <__adddf3+0x330>
 400e5b4:	023fe034 	movhi	r8,65408
 400e5b8:	423fffc4 	addi	r8,r8,-1
 400e5bc:	8b23c83a 	sub	r17,r17,r12
 400e5c0:	2208703a 	and	r4,r4,r8
 400e5c4:	003f4206 	br	400e2d0 <__adddf3+0x13c>
 400e5c8:	9009883a 	mov	r4,r18
 400e5cc:	40107900 	call	4010790 <__clzsi2>
 400e5d0:	13000604 	addi	r12,r2,24
 400e5d4:	60c00808 	cmpgei	r3,r12,32
 400e5d8:	183f2826 	beq	r3,zero,400e27c <__adddf3+0xe8>
 400e5dc:	113ffe04 	addi	r4,r2,-8
 400e5e0:	9108983a 	sll	r4,r18,r4
 400e5e4:	0025883a 	mov	r18,zero
 400e5e8:	003f2a06 	br	400e294 <__adddf3+0x100>
 400e5ec:	4b64b03a 	or	r18,r9,r13
 400e5f0:	9024c03a 	cmpne	r18,r18,zero
 400e5f4:	003f1506 	br	400e24c <__adddf3+0xb8>
 400e5f8:	8a000044 	addi	r8,r17,1
 400e5fc:	4081ff8c 	andi	r2,r8,2046
 400e600:	1000751e 	bne	r2,zero,400e7d8 <__adddf3+0x644>
 400e604:	1b84b03a 	or	r2,r3,r14
 400e608:	8800bc1e 	bne	r17,zero,400e8fc <__adddf3+0x768>
 400e60c:	10010c26 	beq	r2,zero,400ea40 <__adddf3+0x8ac>
 400e610:	4b44b03a 	or	r2,r9,r13
 400e614:	1001111e 	bne	r2,zero,400ea5c <__adddf3+0x8c8>
 400e618:	180c977a 	slli	r6,r3,29
 400e61c:	00880034 	movhi	r2,8192
 400e620:	10bfffc4 	addi	r2,r2,-1
 400e624:	2084703a 	and	r2,r4,r2
 400e628:	1810d0fa 	srli	r8,r3,3
 400e62c:	1184b03a 	or	r2,r2,r6
 400e630:	003f9a06 	br	400e49c <__adddf3+0x308>
 400e634:	7365c83a 	sub	r18,r14,r13
 400e638:	1a67c83a 	sub	r19,r3,r9
 400e63c:	7489803a 	cmpltu	r4,r14,r18
 400e640:	9927c83a 	sub	r19,r19,r4
 400e644:	9880202c 	andhi	r2,r19,128
 400e648:	10006f1e 	bne	r2,zero,400e808 <__adddf3+0x674>
 400e64c:	94c4b03a 	or	r2,r18,r19
 400e650:	103f061e 	bne	r2,zero,400e26c <__adddf3+0xd8>
 400e654:	0011883a 	mov	r8,zero
 400e658:	0021883a 	mov	r16,zero
 400e65c:	003f8f06 	br	400e49c <__adddf3+0x308>
 400e660:	1101ffd8 	cmpnei	r4,r2,2047
 400e664:	20008f26 	beq	r4,zero,400e8a4 <__adddf3+0x710>
 400e668:	18c02034 	orhi	r3,r3,128
 400e66c:	29000e48 	cmpgei	r4,r5,57
 400e670:	20003e1e 	bne	r4,zero,400e76c <__adddf3+0x5d8>
 400e674:	29000808 	cmpgei	r4,r5,32
 400e678:	2000951e 	bne	r4,zero,400e8d0 <__adddf3+0x73c>
 400e67c:	01000804 	movi	r4,32
 400e680:	2149c83a 	sub	r4,r4,r5
 400e684:	1924983a 	sll	r18,r3,r4
 400e688:	714cd83a 	srl	r6,r14,r5
 400e68c:	711c983a 	sll	r14,r14,r4
 400e690:	1946d83a 	srl	r3,r3,r5
 400e694:	91a4b03a 	or	r18,r18,r6
 400e698:	701cc03a 	cmpne	r14,r14,zero
 400e69c:	93a4b03a 	or	r18,r18,r14
 400e6a0:	48d3c83a 	sub	r9,r9,r3
 400e6a4:	00003306 	br	400e774 <__adddf3+0x5e0>
 400e6a8:	1824977a 	slli	r18,r3,29
 400e6ac:	01880034 	movhi	r6,8192
 400e6b0:	31bfffc4 	addi	r6,r6,-1
 400e6b4:	2184703a 	and	r2,r4,r6
 400e6b8:	1810d0fa 	srli	r8,r3,3
 400e6bc:	1484b03a 	or	r2,r2,r18
 400e6c0:	003f7406 	br	400e494 <__adddf3+0x300>
 400e6c4:	1804977a 	slli	r2,r3,29
 400e6c8:	01480034 	movhi	r5,8192
 400e6cc:	297fffc4 	addi	r5,r5,-1
 400e6d0:	2148703a 	and	r4,r4,r5
 400e6d4:	1810d0fa 	srli	r8,r3,3
 400e6d8:	1104b03a 	or	r2,r2,r4
 400e6dc:	003f9406 	br	400e530 <__adddf3+0x39c>
 400e6e0:	04400084 	movi	r17,2
 400e6e4:	00bfe034 	movhi	r2,65408
 400e6e8:	10bfffc4 	addi	r2,r2,-1
 400e6ec:	9006d07a 	srli	r3,r18,1
 400e6f0:	2088703a 	and	r4,r4,r2
 400e6f4:	200497fa 	slli	r2,r4,31
 400e6f8:	9480004c 	andi	r18,r18,1
 400e6fc:	1ca4b03a 	or	r18,r3,r18
 400e700:	2008d07a 	srli	r4,r4,1
 400e704:	14a4b03a 	or	r18,r2,r18
 400e708:	003ef106 	br	400e2d0 <__adddf3+0x13c>
 400e70c:	633ff844 	addi	r12,r12,-31
 400e710:	40800820 	cmpeqi	r2,r8,32
 400e714:	2318d83a 	srl	r12,r4,r12
 400e718:	1000041e 	bne	r2,zero,400e72c <__adddf3+0x598>
 400e71c:	00801004 	movi	r2,64
 400e720:	1211c83a 	sub	r8,r2,r8
 400e724:	2208983a 	sll	r4,r4,r8
 400e728:	9124b03a 	or	r18,r18,r4
 400e72c:	9024c03a 	cmpne	r18,r18,zero
 400e730:	9324b03a 	or	r18,r18,r12
 400e734:	0009883a 	mov	r4,zero
 400e738:	0023883a 	mov	r17,zero
 400e73c:	003f4e06 	br	400e478 <__adddf3+0x2e4>
 400e740:	2cbff804 	addi	r18,r5,-32
 400e744:	29000820 	cmpeqi	r4,r5,32
 400e748:	4c84d83a 	srl	r2,r9,r18
 400e74c:	2000041e 	bne	r4,zero,400e760 <__adddf3+0x5cc>
 400e750:	01001004 	movi	r4,64
 400e754:	214bc83a 	sub	r5,r4,r5
 400e758:	4952983a 	sll	r9,r9,r5
 400e75c:	6a5ab03a 	or	r13,r13,r9
 400e760:	6824c03a 	cmpne	r18,r13,zero
 400e764:	90a4b03a 	or	r18,r18,r2
 400e768:	003eb806 	br	400e24c <__adddf3+0xb8>
 400e76c:	1b88b03a 	or	r4,r3,r14
 400e770:	2024c03a 	cmpne	r18,r4,zero
 400e774:	6ca5c83a 	sub	r18,r13,r18
 400e778:	6c89803a 	cmpltu	r4,r13,r18
 400e77c:	4909c83a 	sub	r4,r9,r4
 400e780:	3821883a 	mov	r16,r7
 400e784:	1023883a 	mov	r17,r2
 400e788:	003eb306 	br	400e258 <__adddf3+0xc4>
 400e78c:	1b88b03a 	or	r4,r3,r14
 400e790:	20008c26 	beq	r4,zero,400e9c4 <__adddf3+0x830>
 400e794:	293fffc4 	addi	r4,r5,-1
 400e798:	2000d326 	beq	r4,zero,400eae8 <__adddf3+0x954>
 400e79c:	2941ffd8 	cmpnei	r5,r5,2047
 400e7a0:	28008126 	beq	r5,zero,400e9a8 <__adddf3+0x814>
 400e7a4:	200b883a 	mov	r5,r4
 400e7a8:	003f6f06 	br	400e568 <__adddf3+0x3d4>
 400e7ac:	00800804 	movi	r2,32
 400e7b0:	1145c83a 	sub	r2,r2,r5
 400e7b4:	6948d83a 	srl	r4,r13,r5
 400e7b8:	48a4983a 	sll	r18,r9,r2
 400e7bc:	6884983a 	sll	r2,r13,r2
 400e7c0:	494ad83a 	srl	r5,r9,r5
 400e7c4:	9124b03a 	or	r18,r18,r4
 400e7c8:	101ac03a 	cmpne	r13,r2,zero
 400e7cc:	9364b03a 	or	r18,r18,r13
 400e7d0:	1947883a 	add	r3,r3,r5
 400e7d4:	003f3806 	br	400e4b8 <__adddf3+0x324>
 400e7d8:	4081ffe0 	cmpeqi	r2,r8,2047
 400e7dc:	103f3e1e 	bne	r2,zero,400e4d8 <__adddf3+0x344>
 400e7e0:	7345883a 	add	r2,r14,r13
 400e7e4:	139d803a 	cmpltu	r14,r2,r14
 400e7e8:	1a49883a 	add	r4,r3,r9
 400e7ec:	2389883a 	add	r4,r4,r14
 400e7f0:	202497fa 	slli	r18,r4,31
 400e7f4:	1004d07a 	srli	r2,r2,1
 400e7f8:	2008d07a 	srli	r4,r4,1
 400e7fc:	4023883a 	mov	r17,r8
 400e800:	90a4b03a 	or	r18,r18,r2
 400e804:	003f1c06 	br	400e478 <__adddf3+0x2e4>
 400e808:	6ba5c83a 	sub	r18,r13,r14
 400e80c:	48c9c83a 	sub	r4,r9,r3
 400e810:	6c85803a 	cmpltu	r2,r13,r18
 400e814:	20a7c83a 	sub	r19,r4,r2
 400e818:	3821883a 	mov	r16,r7
 400e81c:	003e9306 	br	400e26c <__adddf3+0xd8>
 400e820:	58006f1e 	bne	r11,zero,400e9e0 <__adddf3+0x84c>
 400e824:	10001f1e 	bne	r2,zero,400e8a4 <__adddf3+0x710>
 400e828:	00bfffc4 	movi	r2,-1
 400e82c:	0021883a 	mov	r16,zero
 400e830:	003f4106 	br	400e538 <__adddf3+0x3a4>
 400e834:	4808977a 	slli	r4,r9,29
 400e838:	00c80034 	movhi	r3,8192
 400e83c:	18ffffc4 	addi	r3,r3,-1
 400e840:	30c4703a 	and	r2,r6,r3
 400e844:	4810d0fa 	srli	r8,r9,3
 400e848:	1104b03a 	or	r2,r2,r4
 400e84c:	3821883a 	mov	r16,r7
 400e850:	003f1006 	br	400e494 <__adddf3+0x300>
 400e854:	7365c83a 	sub	r18,r14,r13
 400e858:	1a47c83a 	sub	r3,r3,r9
 400e85c:	7489803a 	cmpltu	r4,r14,r18
 400e860:	1909c83a 	sub	r4,r3,r4
 400e864:	04400044 	movi	r17,1
 400e868:	003e7b06 	br	400e258 <__adddf3+0xc4>
 400e86c:	1824977a 	slli	r18,r3,29
 400e870:	01c80034 	movhi	r7,8192
 400e874:	39ffffc4 	addi	r7,r7,-1
 400e878:	21c4703a 	and	r2,r4,r7
 400e87c:	1810d0fa 	srli	r8,r3,3
 400e880:	1484b03a 	or	r2,r2,r18
 400e884:	003f0306 	br	400e494 <__adddf3+0x300>
 400e888:	1824977a 	slli	r18,r3,29
 400e88c:	01480034 	movhi	r5,8192
 400e890:	297fffc4 	addi	r5,r5,-1
 400e894:	2144703a 	and	r2,r4,r5
 400e898:	1810d0fa 	srli	r8,r3,3
 400e89c:	1484b03a 	or	r2,r2,r18
 400e8a0:	003f2306 	br	400e530 <__adddf3+0x39c>
 400e8a4:	4806977a 	slli	r3,r9,29
 400e8a8:	00880034 	movhi	r2,8192
 400e8ac:	10bfffc4 	addi	r2,r2,-1
 400e8b0:	3084703a 	and	r2,r6,r2
 400e8b4:	4810d0fa 	srli	r8,r9,3
 400e8b8:	10c4b03a 	or	r2,r2,r3
 400e8bc:	3821883a 	mov	r16,r7
 400e8c0:	003f1b06 	br	400e530 <__adddf3+0x39c>
 400e8c4:	1b88b03a 	or	r4,r3,r14
 400e8c8:	2024c03a 	cmpne	r18,r4,zero
 400e8cc:	003f3406 	br	400e5a0 <__adddf3+0x40c>
 400e8d0:	2cbff804 	addi	r18,r5,-32
 400e8d4:	29800820 	cmpeqi	r6,r5,32
 400e8d8:	1c88d83a 	srl	r4,r3,r18
 400e8dc:	3000041e 	bne	r6,zero,400e8f0 <__adddf3+0x75c>
 400e8e0:	01801004 	movi	r6,64
 400e8e4:	314bc83a 	sub	r5,r6,r5
 400e8e8:	1946983a 	sll	r3,r3,r5
 400e8ec:	70dcb03a 	or	r14,r14,r3
 400e8f0:	7024c03a 	cmpne	r18,r14,zero
 400e8f4:	9124b03a 	or	r18,r18,r4
 400e8f8:	003f9e06 	br	400e774 <__adddf3+0x5e0>
 400e8fc:	103efa1e 	bne	r2,zero,400e4e8 <__adddf3+0x354>
 400e900:	4804977a 	slli	r2,r9,29
 400e904:	00c80034 	movhi	r3,8192
 400e908:	18ffffc4 	addi	r3,r3,-1
 400e90c:	30cc703a 	and	r6,r6,r3
 400e910:	4810d0fa 	srli	r8,r9,3
 400e914:	1184b03a 	or	r2,r2,r6
 400e918:	003f0506 	br	400e530 <__adddf3+0x39c>
 400e91c:	10004426 	beq	r2,zero,400ea30 <__adddf3+0x89c>
 400e920:	4806977a 	slli	r3,r9,29
 400e924:	00880034 	movhi	r2,8192
 400e928:	10bfffc4 	addi	r2,r2,-1
 400e92c:	3084703a 	and	r2,r6,r2
 400e930:	4810d0fa 	srli	r8,r9,3
 400e934:	10c4b03a 	or	r2,r2,r3
 400e938:	3821883a 	mov	r16,r7
 400e93c:	003ed706 	br	400e49c <__adddf3+0x308>
 400e940:	6ba5c83a 	sub	r18,r13,r14
 400e944:	48c7c83a 	sub	r3,r9,r3
 400e948:	6c85803a 	cmpltu	r2,r13,r18
 400e94c:	1889c83a 	sub	r4,r3,r2
 400e950:	3821883a 	mov	r16,r7
 400e954:	04400044 	movi	r17,1
 400e958:	003e3f06 	br	400e258 <__adddf3+0xc4>
 400e95c:	180a977a 	slli	r5,r3,29
 400e960:	00880034 	movhi	r2,8192
 400e964:	10bfffc4 	addi	r2,r2,-1
 400e968:	2084703a 	and	r2,r4,r2
 400e96c:	1810d0fa 	srli	r8,r3,3
 400e970:	1144b03a 	or	r2,r2,r5
 400e974:	003eee06 	br	400e530 <__adddf3+0x39c>
 400e978:	7365c83a 	sub	r18,r14,r13
 400e97c:	7485803a 	cmpltu	r2,r14,r18
 400e980:	1a49c83a 	sub	r4,r3,r9
 400e984:	2089c83a 	sub	r4,r4,r2
 400e988:	2080202c 	andhi	r2,r4,128
 400e98c:	10002626 	beq	r2,zero,400ea28 <__adddf3+0x894>
 400e990:	6ba5c83a 	sub	r18,r13,r14
 400e994:	48c7c83a 	sub	r3,r9,r3
 400e998:	6c85803a 	cmpltu	r2,r13,r18
 400e99c:	1889c83a 	sub	r4,r3,r2
 400e9a0:	3821883a 	mov	r16,r7
 400e9a4:	003e4a06 	br	400e2d0 <__adddf3+0x13c>
 400e9a8:	4806977a 	slli	r3,r9,29
 400e9ac:	00880034 	movhi	r2,8192
 400e9b0:	10bfffc4 	addi	r2,r2,-1
 400e9b4:	3084703a 	and	r2,r6,r2
 400e9b8:	4810d0fa 	srli	r8,r9,3
 400e9bc:	10c4b03a 	or	r2,r2,r3
 400e9c0:	003edb06 	br	400e530 <__adddf3+0x39c>
 400e9c4:	4806977a 	slli	r3,r9,29
 400e9c8:	00880034 	movhi	r2,8192
 400e9cc:	10bfffc4 	addi	r2,r2,-1
 400e9d0:	3084703a 	and	r2,r6,r2
 400e9d4:	4810d0fa 	srli	r8,r9,3
 400e9d8:	10c4b03a 	or	r2,r2,r3
 400e9dc:	003ead06 	br	400e494 <__adddf3+0x300>
 400e9e0:	180a977a 	slli	r5,r3,29
 400e9e4:	1810d0fa 	srli	r8,r3,3
 400e9e8:	10002f26 	beq	r2,zero,400eaa8 <__adddf3+0x914>
 400e9ec:	00c80034 	movhi	r3,8192
 400e9f0:	18ffffc4 	addi	r3,r3,-1
 400e9f4:	20c4703a 	and	r2,r4,r3
 400e9f8:	4100022c 	andhi	r4,r8,8
 400e9fc:	1144b03a 	or	r2,r2,r5
 400ea00:	203ecb26 	beq	r4,zero,400e530 <__adddf3+0x39c>
 400ea04:	4808d0fa 	srli	r4,r9,3
 400ea08:	2140022c 	andhi	r5,r4,8
 400ea0c:	283ec81e 	bne	r5,zero,400e530 <__adddf3+0x39c>
 400ea10:	4812977a 	slli	r9,r9,29
 400ea14:	30c4703a 	and	r2,r6,r3
 400ea18:	3821883a 	mov	r16,r7
 400ea1c:	1244b03a 	or	r2,r2,r9
 400ea20:	2011883a 	mov	r8,r4
 400ea24:	003ec206 	br	400e530 <__adddf3+0x39c>
 400ea28:	9104b03a 	or	r2,r18,r4
 400ea2c:	103e921e 	bne	r2,zero,400e478 <__adddf3+0x2e4>
 400ea30:	0011883a 	mov	r8,zero
 400ea34:	100b883a 	mov	r5,r2
 400ea38:	0021883a 	mov	r16,zero
 400ea3c:	003e9706 	br	400e49c <__adddf3+0x308>
 400ea40:	4804977a 	slli	r2,r9,29
 400ea44:	00c80034 	movhi	r3,8192
 400ea48:	18ffffc4 	addi	r3,r3,-1
 400ea4c:	30cc703a 	and	r6,r6,r3
 400ea50:	4810d0fa 	srli	r8,r9,3
 400ea54:	1184b03a 	or	r2,r2,r6
 400ea58:	003e9006 	br	400e49c <__adddf3+0x308>
 400ea5c:	7365883a 	add	r18,r14,r13
 400ea60:	1a47883a 	add	r3,r3,r9
 400ea64:	9389803a 	cmpltu	r4,r18,r14
 400ea68:	1909883a 	add	r4,r3,r4
 400ea6c:	2080202c 	andhi	r2,r4,128
 400ea70:	103e8126 	beq	r2,zero,400e478 <__adddf3+0x2e4>
 400ea74:	00bfe034 	movhi	r2,65408
 400ea78:	10bfffc4 	addi	r2,r2,-1
 400ea7c:	2088703a 	and	r4,r4,r2
 400ea80:	04400044 	movi	r17,1
 400ea84:	003e7c06 	br	400e478 <__adddf3+0x2e4>
 400ea88:	4804977a 	slli	r2,r9,29
 400ea8c:	00c80034 	movhi	r3,8192
 400ea90:	18ffffc4 	addi	r3,r3,-1
 400ea94:	30cc703a 	and	r6,r6,r3
 400ea98:	4810d0fa 	srli	r8,r9,3
 400ea9c:	1184b03a 	or	r2,r2,r6
 400eaa0:	3821883a 	mov	r16,r7
 400eaa4:	003ea206 	br	400e530 <__adddf3+0x39c>
 400eaa8:	00880034 	movhi	r2,8192
 400eaac:	10bfffc4 	addi	r2,r2,-1
 400eab0:	2084703a 	and	r2,r4,r2
 400eab4:	1144b03a 	or	r2,r2,r5
 400eab8:	003e9d06 	br	400e530 <__adddf3+0x39c>
 400eabc:	293ff804 	addi	r4,r5,-32
 400eac0:	29800820 	cmpeqi	r6,r5,32
 400eac4:	1908d83a 	srl	r4,r3,r4
 400eac8:	3000041e 	bne	r6,zero,400eadc <__adddf3+0x948>
 400eacc:	01801004 	movi	r6,64
 400ead0:	314bc83a 	sub	r5,r6,r5
 400ead4:	1946983a 	sll	r3,r3,r5
 400ead8:	70dcb03a 	or	r14,r14,r3
 400eadc:	7024c03a 	cmpne	r18,r14,zero
 400eae0:	9124b03a 	or	r18,r18,r4
 400eae4:	003eae06 	br	400e5a0 <__adddf3+0x40c>
 400eae8:	7365883a 	add	r18,r14,r13
 400eaec:	1a47883a 	add	r3,r3,r9
 400eaf0:	9345803a 	cmpltu	r2,r18,r13
 400eaf4:	1889883a 	add	r4,r3,r2
 400eaf8:	003e5c06 	br	400e46c <__adddf3+0x2d8>
 400eafc:	0005883a 	mov	r2,zero
 400eb00:	0141ffc4 	movi	r5,2047
 400eb04:	0007883a 	mov	r3,zero
 400eb08:	003e0806 	br	400e32c <__adddf3+0x198>

0400eb0c <__divdf3>:
 400eb0c:	2804d53a 	srli	r2,r5,20
 400eb10:	defff204 	addi	sp,sp,-56
 400eb14:	dc000415 	stw	r16,16(sp)
 400eb18:	04000434 	movhi	r16,16
 400eb1c:	ddc00b15 	stw	r23,44(sp)
 400eb20:	dd800a15 	stw	r22,40(sp)
 400eb24:	dc800615 	stw	r18,24(sp)
 400eb28:	843fffc4 	addi	r16,r16,-1
 400eb2c:	dfc00d15 	stw	ra,52(sp)
 400eb30:	df000c15 	stw	fp,48(sp)
 400eb34:	dd400915 	stw	r21,36(sp)
 400eb38:	dd000815 	stw	r20,32(sp)
 400eb3c:	dcc00715 	stw	r19,28(sp)
 400eb40:	dc400515 	stw	r17,20(sp)
 400eb44:	1081ffcc 	andi	r2,r2,2047
 400eb48:	282cd7fa 	srli	r22,r5,31
 400eb4c:	302f883a 	mov	r23,r6
 400eb50:	2025883a 	mov	r18,r4
 400eb54:	2c20703a 	and	r16,r5,r16
 400eb58:	10005326 	beq	r2,zero,400eca8 <__divdf3+0x19c>
 400eb5c:	10c1ffe0 	cmpeqi	r3,r2,2047
 400eb60:	1800661e 	bne	r3,zero,400ecfc <__divdf3+0x1f0>
 400eb64:	2028d77a 	srli	r20,r4,29
 400eb68:	800a90fa 	slli	r5,r16,3
 400eb6c:	202490fa 	slli	r18,r4,3
 400eb70:	14ff0044 	addi	r19,r2,-1023
 400eb74:	a14ab03a 	or	r5,r20,r5
 400eb78:	2d002034 	orhi	r20,r5,128
 400eb7c:	0021883a 	mov	r16,zero
 400eb80:	0039883a 	mov	fp,zero
 400eb84:	3804d53a 	srli	r2,r7,20
 400eb88:	00c00434 	movhi	r3,16
 400eb8c:	18ffffc4 	addi	r3,r3,-1
 400eb90:	1081ffcc 	andi	r2,r2,2047
 400eb94:	3810d7fa 	srli	r8,r7,31
 400eb98:	38e2703a 	and	r17,r7,r3
 400eb9c:	10005e26 	beq	r2,zero,400ed18 <__divdf3+0x20c>
 400eba0:	10c1ffe0 	cmpeqi	r3,r2,2047
 400eba4:	1800201e 	bne	r3,zero,400ec28 <__divdf3+0x11c>
 400eba8:	880690fa 	slli	r3,r17,3
 400ebac:	b822d77a 	srli	r17,r23,29
 400ebb0:	b81290fa 	slli	r9,r23,3
 400ebb4:	10bf0044 	addi	r2,r2,-1023
 400ebb8:	88c6b03a 	or	r3,r17,r3
 400ebbc:	1c402034 	orhi	r17,r3,128
 400ebc0:	98a7c83a 	sub	r19,r19,r2
 400ebc4:	0007883a 	mov	r3,zero
 400ebc8:	80800428 	cmpgeui	r2,r16,16
 400ebcc:	b22af03a 	xor	r21,r22,r8
 400ebd0:	1000ac1e 	bne	r2,zero,400ee84 <__divdf3+0x378>
 400ebd4:	800490ba 	slli	r2,r16,2
 400ebd8:	01810074 	movhi	r6,1025
 400ebdc:	118d883a 	add	r6,r2,r6
 400ebe0:	30bafa17 	ldw	r2,-5144(r6)
 400ebe4:	1000683a 	jmp	r2
 400ebe8:	0400ee84 	movi	r16,954
 400ebec:	0400ec98 	cmpnei	r16,zero,946
 400ebf0:	0400ec44 	movi	r16,945
 400ebf4:	0400edcc 	andi	r16,zero,951
 400ebf8:	0400ec44 	movi	r16,945
 400ebfc:	0400ee28 	cmpgeui	r16,zero,952
 400ec00:	0400ec44 	movi	r16,945
 400ec04:	0400edcc 	andi	r16,zero,951
 400ec08:	0400ec98 	cmpnei	r16,zero,946
 400ec0c:	0400ec98 	cmpnei	r16,zero,946
 400ec10:	0400ee28 	cmpgeui	r16,zero,952
 400ec14:	0400edcc 	andi	r16,zero,951
 400ec18:	0400ed64 	muli	r16,zero,949
 400ec1c:	0400ed64 	muli	r16,zero,949
 400ec20:	0400ed64 	muli	r16,zero,949
 400ec24:	0400ee40 	call	400ee4 <__alt_mem_dram_controller-0x3bff11c>
 400ec28:	8dd2b03a 	or	r9,r17,r23
 400ec2c:	9cfe0044 	addi	r19,r19,-2047
 400ec30:	48006b1e 	bne	r9,zero,400ede0 <__divdf3+0x2d4>
 400ec34:	84000094 	ori	r16,r16,2
 400ec38:	0023883a 	mov	r17,zero
 400ec3c:	00c00084 	movi	r3,2
 400ec40:	003fe106 	br	400ebc8 <__divdf3+0xbc>
 400ec44:	0007883a 	mov	r3,zero
 400ec48:	000b883a 	mov	r5,zero
 400ec4c:	0025883a 	mov	r18,zero
 400ec50:	a8803fcc 	andi	r2,r21,255
 400ec54:	1806953a 	slli	r3,r3,20
 400ec58:	100497fa 	slli	r2,r2,31
 400ec5c:	1946b03a 	or	r3,r3,r5
 400ec60:	1886b03a 	or	r3,r3,r2
 400ec64:	9005883a 	mov	r2,r18
 400ec68:	dfc00d17 	ldw	ra,52(sp)
 400ec6c:	df000c17 	ldw	fp,48(sp)
 400ec70:	ddc00b17 	ldw	r23,44(sp)
 400ec74:	dd800a17 	ldw	r22,40(sp)
 400ec78:	dd400917 	ldw	r21,36(sp)
 400ec7c:	dd000817 	ldw	r20,32(sp)
 400ec80:	dcc00717 	ldw	r19,28(sp)
 400ec84:	dc800617 	ldw	r18,24(sp)
 400ec88:	dc400517 	ldw	r17,20(sp)
 400ec8c:	dc000417 	ldw	r16,16(sp)
 400ec90:	dec00e04 	addi	sp,sp,56
 400ec94:	f800283a 	ret
 400ec98:	00c1ffc4 	movi	r3,2047
 400ec9c:	000b883a 	mov	r5,zero
 400eca0:	0025883a 	mov	r18,zero
 400eca4:	003fea06 	br	400ec50 <__divdf3+0x144>
 400eca8:	2428b03a 	or	r20,r4,r16
 400ecac:	2023883a 	mov	r17,r4
 400ecb0:	a0005326 	beq	r20,zero,400ee00 <__divdf3+0x2f4>
 400ecb4:	d9c00015 	stw	r7,0(sp)
 400ecb8:	80014126 	beq	r16,zero,400f1c0 <__divdf3+0x6b4>
 400ecbc:	8009883a 	mov	r4,r16
 400ecc0:	40107900 	call	4010790 <__clzsi2>
 400ecc4:	d9c00017 	ldw	r7,0(sp)
 400ecc8:	10fffd44 	addi	r3,r2,-11
 400eccc:	05000744 	movi	r20,29
 400ecd0:	113ffe04 	addi	r4,r2,-8
 400ecd4:	a0e9c83a 	sub	r20,r20,r3
 400ecd8:	810a983a 	sll	r5,r16,r4
 400ecdc:	8d28d83a 	srl	r20,r17,r20
 400ece0:	8924983a 	sll	r18,r17,r4
 400ece4:	a168b03a 	or	r20,r20,r5
 400ece8:	04ff0344 	movi	r19,-1011
 400ecec:	98a7c83a 	sub	r19,r19,r2
 400ecf0:	0021883a 	mov	r16,zero
 400ecf4:	0039883a 	mov	fp,zero
 400ecf8:	003fa206 	br	400eb84 <__divdf3+0x78>
 400ecfc:	2428b03a 	or	r20,r4,r16
 400ed00:	a000441e 	bne	r20,zero,400ee14 <__divdf3+0x308>
 400ed04:	0025883a 	mov	r18,zero
 400ed08:	04000204 	movi	r16,8
 400ed0c:	04c1ffc4 	movi	r19,2047
 400ed10:	07000084 	movi	fp,2
 400ed14:	003f9b06 	br	400eb84 <__divdf3+0x78>
 400ed18:	8dd2b03a 	or	r9,r17,r23
 400ed1c:	48003426 	beq	r9,zero,400edf0 <__divdf3+0x2e4>
 400ed20:	da000015 	stw	r8,0(sp)
 400ed24:	88013126 	beq	r17,zero,400f1ec <__divdf3+0x6e0>
 400ed28:	8809883a 	mov	r4,r17
 400ed2c:	40107900 	call	4010790 <__clzsi2>
 400ed30:	da000017 	ldw	r8,0(sp)
 400ed34:	117ffd44 	addi	r5,r2,-11
 400ed38:	01000744 	movi	r4,29
 400ed3c:	127ffe04 	addi	r9,r2,-8
 400ed40:	2149c83a 	sub	r4,r4,r5
 400ed44:	8a46983a 	sll	r3,r17,r9
 400ed48:	b908d83a 	srl	r4,r23,r4
 400ed4c:	ba52983a 	sll	r9,r23,r9
 400ed50:	20e2b03a 	or	r17,r4,r3
 400ed54:	14c5883a 	add	r2,r2,r19
 400ed58:	14c0fcc4 	addi	r19,r2,1011
 400ed5c:	0007883a 	mov	r3,zero
 400ed60:	003f9906 	br	400ebc8 <__divdf3+0xbc>
 400ed64:	b02b883a 	mov	r21,r22
 400ed68:	e08000a0 	cmpeqi	r2,fp,2
 400ed6c:	103fca1e 	bne	r2,zero,400ec98 <__divdf3+0x18c>
 400ed70:	e08000e0 	cmpeqi	r2,fp,3
 400ed74:	1001741e 	bne	r2,zero,400f348 <__divdf3+0x83c>
 400ed78:	e0800060 	cmpeqi	r2,fp,1
 400ed7c:	103fb11e 	bne	r2,zero,400ec44 <__divdf3+0x138>
 400ed80:	9c40ffc4 	addi	r17,r19,1023
 400ed84:	0440de0e 	bge	zero,r17,400f100 <__divdf3+0x5f4>
 400ed88:	908001cc 	andi	r2,r18,7
 400ed8c:	10014a1e 	bne	r2,zero,400f2b8 <__divdf3+0x7ac>
 400ed90:	900cd0fa 	srli	r6,r18,3
 400ed94:	a080402c 	andhi	r2,r20,256
 400ed98:	10000426 	beq	r2,zero,400edac <__divdf3+0x2a0>
 400ed9c:	00bfc034 	movhi	r2,65280
 400eda0:	10bfffc4 	addi	r2,r2,-1
 400eda4:	a0a8703a 	and	r20,r20,r2
 400eda8:	9c410004 	addi	r17,r19,1024
 400edac:	8881ffc8 	cmpgei	r2,r17,2047
 400edb0:	103fb91e 	bne	r2,zero,400ec98 <__divdf3+0x18c>
 400edb4:	a008977a 	slli	r4,r20,29
 400edb8:	a00a927a 	slli	r5,r20,9
 400edbc:	88c1ffcc 	andi	r3,r17,2047
 400edc0:	21a4b03a 	or	r18,r4,r6
 400edc4:	280ad33a 	srli	r5,r5,12
 400edc8:	003fa106 	br	400ec50 <__divdf3+0x144>
 400edcc:	402b883a 	mov	r21,r8
 400edd0:	8829883a 	mov	r20,r17
 400edd4:	4825883a 	mov	r18,r9
 400edd8:	1839883a 	mov	fp,r3
 400eddc:	003fe206 	br	400ed68 <__divdf3+0x25c>
 400ede0:	840000d4 	ori	r16,r16,3
 400ede4:	b813883a 	mov	r9,r23
 400ede8:	00c000c4 	movi	r3,3
 400edec:	003f7606 	br	400ebc8 <__divdf3+0xbc>
 400edf0:	84000054 	ori	r16,r16,1
 400edf4:	0023883a 	mov	r17,zero
 400edf8:	00c00044 	movi	r3,1
 400edfc:	003f7206 	br	400ebc8 <__divdf3+0xbc>
 400ee00:	0025883a 	mov	r18,zero
 400ee04:	04000104 	movi	r16,4
 400ee08:	0027883a 	mov	r19,zero
 400ee0c:	07000044 	movi	fp,1
 400ee10:	003f5c06 	br	400eb84 <__divdf3+0x78>
 400ee14:	8029883a 	mov	r20,r16
 400ee18:	04c1ffc4 	movi	r19,2047
 400ee1c:	04000304 	movi	r16,12
 400ee20:	070000c4 	movi	fp,3
 400ee24:	003f5706 	br	400eb84 <__divdf3+0x78>
 400ee28:	01400434 	movhi	r5,16
 400ee2c:	002b883a 	mov	r21,zero
 400ee30:	297fffc4 	addi	r5,r5,-1
 400ee34:	04bfffc4 	movi	r18,-1
 400ee38:	00c1ffc4 	movi	r3,2047
 400ee3c:	003f8406 	br	400ec50 <__divdf3+0x144>
 400ee40:	a080022c 	andhi	r2,r20,8
 400ee44:	10000926 	beq	r2,zero,400ee6c <__divdf3+0x360>
 400ee48:	8880022c 	andhi	r2,r17,8
 400ee4c:	1000071e 	bne	r2,zero,400ee6c <__divdf3+0x360>
 400ee50:	00800434 	movhi	r2,16
 400ee54:	89400234 	orhi	r5,r17,8
 400ee58:	10bfffc4 	addi	r2,r2,-1
 400ee5c:	288a703a 	and	r5,r5,r2
 400ee60:	402b883a 	mov	r21,r8
 400ee64:	4825883a 	mov	r18,r9
 400ee68:	003ff306 	br	400ee38 <__divdf3+0x32c>
 400ee6c:	00800434 	movhi	r2,16
 400ee70:	a1400234 	orhi	r5,r20,8
 400ee74:	10bfffc4 	addi	r2,r2,-1
 400ee78:	288a703a 	and	r5,r5,r2
 400ee7c:	b02b883a 	mov	r21,r22
 400ee80:	003fed06 	br	400ee38 <__divdf3+0x32c>
 400ee84:	8d00c836 	bltu	r17,r20,400f1a8 <__divdf3+0x69c>
 400ee88:	8d00c626 	beq	r17,r20,400f1a4 <__divdf3+0x698>
 400ee8c:	9cffffc4 	addi	r19,r19,-1
 400ee90:	0021883a 	mov	r16,zero
 400ee94:	8806923a 	slli	r3,r17,8
 400ee98:	480cd63a 	srli	r6,r9,24
 400ee9c:	4804923a 	slli	r2,r9,8
 400eea0:	1838d43a 	srli	fp,r3,16
 400eea4:	a009883a 	mov	r4,r20
 400eea8:	30ecb03a 	or	r22,r6,r3
 400eeac:	e00b883a 	mov	r5,fp
 400eeb0:	d8800015 	stw	r2,0(sp)
 400eeb4:	400e0d40 	call	400e0d4 <__udivsi3>
 400eeb8:	a009883a 	mov	r4,r20
 400eebc:	e00b883a 	mov	r5,fp
 400eec0:	d8800115 	stw	r2,4(sp)
 400eec4:	400e1380 	call	400e138 <__umodsi3>
 400eec8:	d8c00117 	ldw	r3,4(sp)
 400eecc:	1004943a 	slli	r2,r2,16
 400eed0:	9008d43a 	srli	r4,r18,16
 400eed4:	b5ffffcc 	andi	r23,r22,65535
 400eed8:	b8e3383a 	mul	r17,r23,r3
 400eedc:	2088b03a 	or	r4,r4,r2
 400eee0:	2440042e 	bgeu	r4,r17,400eef4 <__divdf3+0x3e8>
 400eee4:	2589883a 	add	r4,r4,r22
 400eee8:	18bfffc4 	addi	r2,r3,-1
 400eeec:	2580d32e 	bgeu	r4,r22,400f23c <__divdf3+0x730>
 400eef0:	1007883a 	mov	r3,r2
 400eef4:	2463c83a 	sub	r17,r4,r17
 400eef8:	e00b883a 	mov	r5,fp
 400eefc:	8809883a 	mov	r4,r17
 400ef00:	d8c00115 	stw	r3,4(sp)
 400ef04:	400e0d40 	call	400e0d4 <__udivsi3>
 400ef08:	8809883a 	mov	r4,r17
 400ef0c:	e00b883a 	mov	r5,fp
 400ef10:	1029883a 	mov	r20,r2
 400ef14:	400e1380 	call	400e138 <__umodsi3>
 400ef18:	1008943a 	slli	r4,r2,16
 400ef1c:	bd13383a 	mul	r9,r23,r20
 400ef20:	94bfffcc 	andi	r18,r18,65535
 400ef24:	9108b03a 	or	r4,r18,r4
 400ef28:	d8c00117 	ldw	r3,4(sp)
 400ef2c:	2240042e 	bgeu	r4,r9,400ef40 <__divdf3+0x434>
 400ef30:	2589883a 	add	r4,r4,r22
 400ef34:	a0bfffc4 	addi	r2,r20,-1
 400ef38:	2580bc2e 	bgeu	r4,r22,400f22c <__divdf3+0x720>
 400ef3c:	1029883a 	mov	r20,r2
 400ef40:	180a943a 	slli	r5,r3,16
 400ef44:	d8800017 	ldw	r2,0(sp)
 400ef48:	2249c83a 	sub	r4,r4,r9
 400ef4c:	2d28b03a 	or	r20,r5,r20
 400ef50:	100ed43a 	srli	r7,r2,16
 400ef54:	123fffcc 	andi	r8,r2,65535
 400ef58:	a00ad43a 	srli	r5,r20,16
 400ef5c:	a0bfffcc 	andi	r2,r20,65535
 400ef60:	1225383a 	mul	r18,r2,r8
 400ef64:	2a15383a 	mul	r10,r5,r8
 400ef68:	3887383a 	mul	r3,r7,r2
 400ef6c:	9004d43a 	srli	r2,r18,16
 400ef70:	29cb383a 	mul	r5,r5,r7
 400ef74:	1a87883a 	add	r3,r3,r10
 400ef78:	10c5883a 	add	r2,r2,r3
 400ef7c:	1280022e 	bgeu	r2,r10,400ef88 <__divdf3+0x47c>
 400ef80:	00c00074 	movhi	r3,1
 400ef84:	28cb883a 	add	r5,r5,r3
 400ef88:	1006d43a 	srli	r3,r2,16
 400ef8c:	1004943a 	slli	r2,r2,16
 400ef90:	94bfffcc 	andi	r18,r18,65535
 400ef94:	1947883a 	add	r3,r3,r5
 400ef98:	14a5883a 	add	r18,r2,r18
 400ef9c:	20c07636 	bltu	r4,r3,400f178 <__divdf3+0x66c>
 400efa0:	20c07426 	beq	r4,r3,400f174 <__divdf3+0x668>
 400efa4:	84a5c83a 	sub	r18,r16,r18
 400efa8:	20c9c83a 	sub	r4,r4,r3
 400efac:	84a1803a 	cmpltu	r16,r16,r18
 400efb0:	2421c83a 	sub	r16,r4,r16
 400efb4:	9c40ffc4 	addi	r17,r19,1023
 400efb8:	b400ba26 	beq	r22,r16,400f2a4 <__divdf3+0x798>
 400efbc:	8009883a 	mov	r4,r16
 400efc0:	e00b883a 	mov	r5,fp
 400efc4:	da000315 	stw	r8,12(sp)
 400efc8:	d9c00215 	stw	r7,8(sp)
 400efcc:	400e0d40 	call	400e0d4 <__udivsi3>
 400efd0:	8009883a 	mov	r4,r16
 400efd4:	e00b883a 	mov	r5,fp
 400efd8:	d8800115 	stw	r2,4(sp)
 400efdc:	400e1380 	call	400e138 <__umodsi3>
 400efe0:	da400117 	ldw	r9,4(sp)
 400efe4:	1004943a 	slli	r2,r2,16
 400efe8:	9008d43a 	srli	r4,r18,16
 400efec:	ba61383a 	mul	r16,r23,r9
 400eff0:	d9c00217 	ldw	r7,8(sp)
 400eff4:	2088b03a 	or	r4,r4,r2
 400eff8:	da000317 	ldw	r8,12(sp)
 400effc:	2400062e 	bgeu	r4,r16,400f018 <__divdf3+0x50c>
 400f000:	2589883a 	add	r4,r4,r22
 400f004:	48bfffc4 	addi	r2,r9,-1
 400f008:	2580b536 	bltu	r4,r22,400f2e0 <__divdf3+0x7d4>
 400f00c:	2400b42e 	bgeu	r4,r16,400f2e0 <__divdf3+0x7d4>
 400f010:	4a7fff84 	addi	r9,r9,-2
 400f014:	2589883a 	add	r4,r4,r22
 400f018:	2421c83a 	sub	r16,r4,r16
 400f01c:	8009883a 	mov	r4,r16
 400f020:	e00b883a 	mov	r5,fp
 400f024:	da000315 	stw	r8,12(sp)
 400f028:	da400215 	stw	r9,8(sp)
 400f02c:	d9c00115 	stw	r7,4(sp)
 400f030:	400e0d40 	call	400e0d4 <__udivsi3>
 400f034:	8009883a 	mov	r4,r16
 400f038:	e00b883a 	mov	r5,fp
 400f03c:	1021883a 	mov	r16,r2
 400f040:	400e1380 	call	400e138 <__umodsi3>
 400f044:	1004943a 	slli	r2,r2,16
 400f048:	bc2f383a 	mul	r23,r23,r16
 400f04c:	90ffffcc 	andi	r3,r18,65535
 400f050:	1886b03a 	or	r3,r3,r2
 400f054:	d9c00117 	ldw	r7,4(sp)
 400f058:	da400217 	ldw	r9,8(sp)
 400f05c:	da000317 	ldw	r8,12(sp)
 400f060:	1dc0062e 	bgeu	r3,r23,400f07c <__divdf3+0x570>
 400f064:	1d87883a 	add	r3,r3,r22
 400f068:	80bfffc4 	addi	r2,r16,-1
 400f06c:	1d809a36 	bltu	r3,r22,400f2d8 <__divdf3+0x7cc>
 400f070:	1dc0992e 	bgeu	r3,r23,400f2d8 <__divdf3+0x7cc>
 400f074:	843fff84 	addi	r16,r16,-2
 400f078:	1d87883a 	add	r3,r3,r22
 400f07c:	4808943a 	slli	r4,r9,16
 400f080:	1defc83a 	sub	r23,r3,r23
 400f084:	2424b03a 	or	r18,r4,r16
 400f088:	900ad43a 	srli	r5,r18,16
 400f08c:	90bfffcc 	andi	r2,r18,65535
 400f090:	4087383a 	mul	r3,r8,r2
 400f094:	3885383a 	mul	r2,r7,r2
 400f098:	2a11383a 	mul	r8,r5,r8
 400f09c:	1808d43a 	srli	r4,r3,16
 400f0a0:	394f383a 	mul	r7,r7,r5
 400f0a4:	1205883a 	add	r2,r2,r8
 400f0a8:	2089883a 	add	r4,r4,r2
 400f0ac:	2200022e 	bgeu	r4,r8,400f0b8 <__divdf3+0x5ac>
 400f0b0:	00800074 	movhi	r2,1
 400f0b4:	388f883a 	add	r7,r7,r2
 400f0b8:	2004d43a 	srli	r2,r4,16
 400f0bc:	2008943a 	slli	r4,r4,16
 400f0c0:	18ffffcc 	andi	r3,r3,65535
 400f0c4:	11cf883a 	add	r7,r2,r7
 400f0c8:	20c9883a 	add	r4,r4,r3
 400f0cc:	b9c00436 	bltu	r23,r7,400f0e0 <__divdf3+0x5d4>
 400f0d0:	b9c00226 	beq	r23,r7,400f0dc <__divdf3+0x5d0>
 400f0d4:	94800054 	ori	r18,r18,1
 400f0d8:	003f2a06 	br	400ed84 <__divdf3+0x278>
 400f0dc:	203f2926 	beq	r4,zero,400ed84 <__divdf3+0x278>
 400f0e0:	b5ef883a 	add	r23,r22,r23
 400f0e4:	90bfffc4 	addi	r2,r18,-1
 400f0e8:	bd806936 	bltu	r23,r22,400f290 <__divdf3+0x784>
 400f0ec:	b9c08636 	bltu	r23,r7,400f308 <__divdf3+0x7fc>
 400f0f0:	b9c09a26 	beq	r23,r7,400f35c <__divdf3+0x850>
 400f0f4:	1025883a 	mov	r18,r2
 400f0f8:	003ff606 	br	400f0d4 <__divdf3+0x5c8>
 400f0fc:	04bfffc4 	movi	r18,-1
 400f100:	01400044 	movi	r5,1
 400f104:	2c4bc83a 	sub	r5,r5,r17
 400f108:	28800e48 	cmpgei	r2,r5,57
 400f10c:	103ecd1e 	bne	r2,zero,400ec44 <__divdf3+0x138>
 400f110:	28800808 	cmpgei	r2,r5,32
 400f114:	10004d1e 	bne	r2,zero,400f24c <__divdf3+0x740>
 400f118:	98810784 	addi	r2,r19,1054
 400f11c:	a086983a 	sll	r3,r20,r2
 400f120:	9148d83a 	srl	r4,r18,r5
 400f124:	9084983a 	sll	r2,r18,r2
 400f128:	a14ad83a 	srl	r5,r20,r5
 400f12c:	1924b03a 	or	r18,r3,r4
 400f130:	1004c03a 	cmpne	r2,r2,zero
 400f134:	90a4b03a 	or	r18,r18,r2
 400f138:	908001cc 	andi	r2,r18,7
 400f13c:	10000726 	beq	r2,zero,400f15c <__divdf3+0x650>
 400f140:	908003cc 	andi	r2,r18,15
 400f144:	10800120 	cmpeqi	r2,r2,4
 400f148:	1000041e 	bne	r2,zero,400f15c <__divdf3+0x650>
 400f14c:	90800104 	addi	r2,r18,4
 400f150:	14a5803a 	cmpltu	r18,r2,r18
 400f154:	2c8b883a 	add	r5,r5,r18
 400f158:	1025883a 	mov	r18,r2
 400f15c:	2880202c 	andhi	r2,r5,128
 400f160:	10007526 	beq	r2,zero,400f338 <__divdf3+0x82c>
 400f164:	00c00044 	movi	r3,1
 400f168:	000b883a 	mov	r5,zero
 400f16c:	0025883a 	mov	r18,zero
 400f170:	003eb706 	br	400ec50 <__divdf3+0x144>
 400f174:	84bf8b2e 	bgeu	r16,r18,400efa4 <__divdf3+0x498>
 400f178:	d8800017 	ldw	r2,0(sp)
 400f17c:	80a1883a 	add	r16,r16,r2
 400f180:	8085803a 	cmpltu	r2,r16,r2
 400f184:	1585883a 	add	r2,r2,r22
 400f188:	2089883a 	add	r4,r4,r2
 400f18c:	a0bfffc4 	addi	r2,r20,-1
 400f190:	b100222e 	bgeu	r22,r4,400f21c <__divdf3+0x710>
 400f194:	20c05536 	bltu	r4,r3,400f2ec <__divdf3+0x7e0>
 400f198:	19005326 	beq	r3,r4,400f2e8 <__divdf3+0x7dc>
 400f19c:	1029883a 	mov	r20,r2
 400f1a0:	003f8006 	br	400efa4 <__divdf3+0x498>
 400f1a4:	927f3936 	bltu	r18,r9,400ee8c <__divdf3+0x380>
 400f1a8:	a00897fa 	slli	r4,r20,31
 400f1ac:	9004d07a 	srli	r2,r18,1
 400f1b0:	902097fa 	slli	r16,r18,31
 400f1b4:	a028d07a 	srli	r20,r20,1
 400f1b8:	20a4b03a 	or	r18,r4,r2
 400f1bc:	003f3506 	br	400ee94 <__divdf3+0x388>
 400f1c0:	40107900 	call	4010790 <__clzsi2>
 400f1c4:	10c00544 	addi	r3,r2,21
 400f1c8:	19000748 	cmpgei	r4,r3,29
 400f1cc:	100b883a 	mov	r5,r2
 400f1d0:	d9c00017 	ldw	r7,0(sp)
 400f1d4:	10800804 	addi	r2,r2,32
 400f1d8:	203ebc26 	beq	r4,zero,400eccc <__divdf3+0x1c0>
 400f1dc:	297ffe04 	addi	r5,r5,-8
 400f1e0:	9168983a 	sll	r20,r18,r5
 400f1e4:	0025883a 	mov	r18,zero
 400f1e8:	003ebf06 	br	400ece8 <__divdf3+0x1dc>
 400f1ec:	b809883a 	mov	r4,r23
 400f1f0:	40107900 	call	4010790 <__clzsi2>
 400f1f4:	11400544 	addi	r5,r2,21
 400f1f8:	29000748 	cmpgei	r4,r5,29
 400f1fc:	1007883a 	mov	r3,r2
 400f200:	da000017 	ldw	r8,0(sp)
 400f204:	10800804 	addi	r2,r2,32
 400f208:	203ecb26 	beq	r4,zero,400ed38 <__divdf3+0x22c>
 400f20c:	18fffe04 	addi	r3,r3,-8
 400f210:	b8e2983a 	sll	r17,r23,r3
 400f214:	0013883a 	mov	r9,zero
 400f218:	003ece06 	br	400ed54 <__divdf3+0x248>
 400f21c:	b13fdf1e 	bne	r22,r4,400f19c <__divdf3+0x690>
 400f220:	d9400017 	ldw	r5,0(sp)
 400f224:	817fdd36 	bltu	r16,r5,400f19c <__divdf3+0x690>
 400f228:	003fda06 	br	400f194 <__divdf3+0x688>
 400f22c:	227f432e 	bgeu	r4,r9,400ef3c <__divdf3+0x430>
 400f230:	a53fff84 	addi	r20,r20,-2
 400f234:	2589883a 	add	r4,r4,r22
 400f238:	003f4106 	br	400ef40 <__divdf3+0x434>
 400f23c:	247f2c2e 	bgeu	r4,r17,400eef0 <__divdf3+0x3e4>
 400f240:	18ffff84 	addi	r3,r3,-2
 400f244:	2589883a 	add	r4,r4,r22
 400f248:	003f2a06 	br	400eef4 <__divdf3+0x3e8>
 400f24c:	00fff844 	movi	r3,-31
 400f250:	1c47c83a 	sub	r3,r3,r17
 400f254:	29400820 	cmpeqi	r5,r5,32
 400f258:	a0c6d83a 	srl	r3,r20,r3
 400f25c:	2800031e 	bne	r5,zero,400f26c <__divdf3+0x760>
 400f260:	99410f84 	addi	r5,r19,1086
 400f264:	a14a983a 	sll	r5,r20,r5
 400f268:	9164b03a 	or	r18,r18,r5
 400f26c:	9024c03a 	cmpne	r18,r18,zero
 400f270:	90e4b03a 	or	r18,r18,r3
 400f274:	910001cc 	andi	r4,r18,7
 400f278:	20002b1e 	bne	r4,zero,400f328 <__divdf3+0x81c>
 400f27c:	000b883a 	mov	r5,zero
 400f280:	9024d0fa 	srli	r18,r18,3
 400f284:	0007883a 	mov	r3,zero
 400f288:	9124b03a 	or	r18,r18,r4
 400f28c:	003e7006 	br	400ec50 <__divdf3+0x144>
 400f290:	1025883a 	mov	r18,r2
 400f294:	b9ff8f1e 	bne	r23,r7,400f0d4 <__divdf3+0x5c8>
 400f298:	d8800017 	ldw	r2,0(sp)
 400f29c:	20bf8d1e 	bne	r4,r2,400f0d4 <__divdf3+0x5c8>
 400f2a0:	003eb806 	br	400ed84 <__divdf3+0x278>
 400f2a4:	047f950e 	bge	zero,r17,400f0fc <__divdf3+0x5f0>
 400f2a8:	000d883a 	mov	r6,zero
 400f2ac:	01000044 	movi	r4,1
 400f2b0:	a129883a 	add	r20,r20,r4
 400f2b4:	003eb706 	br	400ed94 <__divdf3+0x288>
 400f2b8:	908003cc 	andi	r2,r18,15
 400f2bc:	10800118 	cmpnei	r2,r2,4
 400f2c0:	103eb326 	beq	r2,zero,400ed90 <__divdf3+0x284>
 400f2c4:	91800104 	addi	r6,r18,4
 400f2c8:	013ffec4 	movi	r4,-5
 400f2cc:	300cd0fa 	srli	r6,r6,3
 400f2d0:	2489803a 	cmpltu	r4,r4,r18
 400f2d4:	003ff606 	br	400f2b0 <__divdf3+0x7a4>
 400f2d8:	1021883a 	mov	r16,r2
 400f2dc:	003f6706 	br	400f07c <__divdf3+0x570>
 400f2e0:	1013883a 	mov	r9,r2
 400f2e4:	003f4c06 	br	400f018 <__divdf3+0x50c>
 400f2e8:	84bfac2e 	bgeu	r16,r18,400f19c <__divdf3+0x690>
 400f2ec:	d8800017 	ldw	r2,0(sp)
 400f2f0:	a53fff84 	addi	r20,r20,-2
 400f2f4:	80a1883a 	add	r16,r16,r2
 400f2f8:	8085803a 	cmpltu	r2,r16,r2
 400f2fc:	1585883a 	add	r2,r2,r22
 400f300:	2089883a 	add	r4,r4,r2
 400f304:	003f2706 	br	400efa4 <__divdf3+0x498>
 400f308:	d8c00017 	ldw	r3,0(sp)
 400f30c:	94bfff84 	addi	r18,r18,-2
 400f310:	18c5883a 	add	r2,r3,r3
 400f314:	10c7803a 	cmpltu	r3,r2,r3
 400f318:	1d8d883a 	add	r6,r3,r22
 400f31c:	b9af883a 	add	r23,r23,r6
 400f320:	d8800015 	stw	r2,0(sp)
 400f324:	003fdb06 	br	400f294 <__divdf3+0x788>
 400f328:	908003cc 	andi	r2,r18,15
 400f32c:	10800118 	cmpnei	r2,r2,4
 400f330:	000b883a 	mov	r5,zero
 400f334:	103f851e 	bne	r2,zero,400f14c <__divdf3+0x640>
 400f338:	2804927a 	slli	r2,r5,9
 400f33c:	2808977a 	slli	r4,r5,29
 400f340:	100ad33a 	srli	r5,r2,12
 400f344:	003fce06 	br	400f280 <__divdf3+0x774>
 400f348:	00800434 	movhi	r2,16
 400f34c:	a1400234 	orhi	r5,r20,8
 400f350:	10bfffc4 	addi	r2,r2,-1
 400f354:	288a703a 	and	r5,r5,r2
 400f358:	003eb706 	br	400ee38 <__divdf3+0x32c>
 400f35c:	d8c00017 	ldw	r3,0(sp)
 400f360:	193fe936 	bltu	r3,r4,400f308 <__divdf3+0x7fc>
 400f364:	1025883a 	mov	r18,r2
 400f368:	003fcb06 	br	400f298 <__divdf3+0x78c>

0400f36c <__eqdf2>:
 400f36c:	2810d53a 	srli	r8,r5,20
 400f370:	3806d53a 	srli	r3,r7,20
 400f374:	00800434 	movhi	r2,16
 400f378:	4201ffcc 	andi	r8,r8,2047
 400f37c:	10bfffc4 	addi	r2,r2,-1
 400f380:	4241ffd8 	cmpnei	r9,r8,2047
 400f384:	2814d7fa 	srli	r10,r5,31
 400f388:	3816d7fa 	srli	r11,r7,31
 400f38c:	288a703a 	and	r5,r5,r2
 400f390:	388e703a 	and	r7,r7,r2
 400f394:	1881ffcc 	andi	r2,r3,2047
 400f398:	48000626 	beq	r9,zero,400f3b4 <__eqdf2+0x48>
 400f39c:	10c1ffe0 	cmpeqi	r3,r2,2047
 400f3a0:	1800021e 	bne	r3,zero,400f3ac <__eqdf2+0x40>
 400f3a4:	4080011e 	bne	r8,r2,400f3ac <__eqdf2+0x40>
 400f3a8:	29c00826 	beq	r5,r7,400f3cc <__eqdf2+0x60>
 400f3ac:	00800044 	movi	r2,1
 400f3b0:	f800283a 	ret
 400f3b4:	2906b03a 	or	r3,r5,r4
 400f3b8:	183ffc1e 	bne	r3,zero,400f3ac <__eqdf2+0x40>
 400f3bc:	1081ffd8 	cmpnei	r2,r2,2047
 400f3c0:	103ffa1e 	bne	r2,zero,400f3ac <__eqdf2+0x40>
 400f3c4:	398eb03a 	or	r7,r7,r6
 400f3c8:	383ff81e 	bne	r7,zero,400f3ac <__eqdf2+0x40>
 400f3cc:	21bff71e 	bne	r4,r6,400f3ac <__eqdf2+0x40>
 400f3d0:	52c00426 	beq	r10,r11,400f3e4 <__eqdf2+0x78>
 400f3d4:	403ff51e 	bne	r8,zero,400f3ac <__eqdf2+0x40>
 400f3d8:	290ab03a 	or	r5,r5,r4
 400f3dc:	2804c03a 	cmpne	r2,r5,zero
 400f3e0:	f800283a 	ret
 400f3e4:	0005883a 	mov	r2,zero
 400f3e8:	f800283a 	ret

0400f3ec <__gedf2>:
 400f3ec:	2810d53a 	srli	r8,r5,20
 400f3f0:	3812d53a 	srli	r9,r7,20
 400f3f4:	00c00434 	movhi	r3,16
 400f3f8:	4201ffcc 	andi	r8,r8,2047
 400f3fc:	18ffffc4 	addi	r3,r3,-1
 400f400:	4281ffd8 	cmpnei	r10,r8,2047
 400f404:	2816d7fa 	srli	r11,r5,31
 400f408:	3804d7fa 	srli	r2,r7,31
 400f40c:	28ca703a 	and	r5,r5,r3
 400f410:	38ce703a 	and	r7,r7,r3
 400f414:	48c1ffcc 	andi	r3,r9,2047
 400f418:	50000b26 	beq	r10,zero,400f448 <__gedf2+0x5c>
 400f41c:	1a41ffd8 	cmpnei	r9,r3,2047
 400f420:	48000d26 	beq	r9,zero,400f458 <__gedf2+0x6c>
 400f424:	4000191e 	bne	r8,zero,400f48c <__gedf2+0xa0>
 400f428:	2914b03a 	or	r10,r5,r4
 400f42c:	5013003a 	cmpeq	r9,r10,zero
 400f430:	1800131e 	bne	r3,zero,400f480 <__gedf2+0x94>
 400f434:	3998b03a 	or	r12,r7,r6
 400f438:	6000111e 	bne	r12,zero,400f480 <__gedf2+0x94>
 400f43c:	50000a1e 	bne	r10,zero,400f468 <__gedf2+0x7c>
 400f440:	0005883a 	mov	r2,zero
 400f444:	f800283a 	ret
 400f448:	2912b03a 	or	r9,r5,r4
 400f44c:	48001e1e 	bne	r9,zero,400f4c8 <__gedf2+0xdc>
 400f450:	1a41ffe0 	cmpeqi	r9,r3,2047
 400f454:	48000d26 	beq	r9,zero,400f48c <__gedf2+0xa0>
 400f458:	3992b03a 	or	r9,r7,r6
 400f45c:	48001a1e 	bne	r9,zero,400f4c8 <__gedf2+0xdc>
 400f460:	40000526 	beq	r8,zero,400f478 <__gedf2+0x8c>
 400f464:	58800d26 	beq	r11,r2,400f49c <__gedf2+0xb0>
 400f468:	00800044 	movi	r2,1
 400f46c:	58000626 	beq	r11,zero,400f488 <__gedf2+0x9c>
 400f470:	00bfffc4 	movi	r2,-1
 400f474:	f800283a 	ret
 400f478:	2912b03a 	or	r9,r5,r4
 400f47c:	4813003a 	cmpeq	r9,r9,zero
 400f480:	483ff826 	beq	r9,zero,400f464 <__gedf2+0x78>
 400f484:	103ffa26 	beq	r2,zero,400f470 <__gedf2+0x84>
 400f488:	f800283a 	ret
 400f48c:	183ff51e 	bne	r3,zero,400f464 <__gedf2+0x78>
 400f490:	3992b03a 	or	r9,r7,r6
 400f494:	483ff31e 	bne	r9,zero,400f464 <__gedf2+0x78>
 400f498:	003ff306 	br	400f468 <__gedf2+0x7c>
 400f49c:	1a000716 	blt	r3,r8,400f4bc <__gedf2+0xd0>
 400f4a0:	40fff816 	blt	r8,r3,400f484 <__gedf2+0x98>
 400f4a4:	397ff036 	bltu	r7,r5,400f468 <__gedf2+0x7c>
 400f4a8:	29c00926 	beq	r5,r7,400f4d0 <__gedf2+0xe4>
 400f4ac:	29ffe42e 	bgeu	r5,r7,400f440 <__gedf2+0x54>
 400f4b0:	583fef26 	beq	r11,zero,400f470 <__gedf2+0x84>
 400f4b4:	5805883a 	mov	r2,r11
 400f4b8:	f800283a 	ret
 400f4bc:	103fec1e 	bne	r2,zero,400f470 <__gedf2+0x84>
 400f4c0:	00800044 	movi	r2,1
 400f4c4:	f800283a 	ret
 400f4c8:	00bfff84 	movi	r2,-2
 400f4cc:	f800283a 	ret
 400f4d0:	313fe536 	bltu	r6,r4,400f468 <__gedf2+0x7c>
 400f4d4:	21bfda2e 	bgeu	r4,r6,400f440 <__gedf2+0x54>
 400f4d8:	003ff506 	br	400f4b0 <__gedf2+0xc4>

0400f4dc <__ledf2>:
 400f4dc:	2810d53a 	srli	r8,r5,20
 400f4e0:	3812d53a 	srli	r9,r7,20
 400f4e4:	00c00434 	movhi	r3,16
 400f4e8:	4201ffcc 	andi	r8,r8,2047
 400f4ec:	18ffffc4 	addi	r3,r3,-1
 400f4f0:	4281ffd8 	cmpnei	r10,r8,2047
 400f4f4:	2816d7fa 	srli	r11,r5,31
 400f4f8:	3804d7fa 	srli	r2,r7,31
 400f4fc:	28ca703a 	and	r5,r5,r3
 400f500:	38ce703a 	and	r7,r7,r3
 400f504:	48c1ffcc 	andi	r3,r9,2047
 400f508:	50000b26 	beq	r10,zero,400f538 <__ledf2+0x5c>
 400f50c:	1a41ffd8 	cmpnei	r9,r3,2047
 400f510:	48000d26 	beq	r9,zero,400f548 <__ledf2+0x6c>
 400f514:	40001b1e 	bne	r8,zero,400f584 <__ledf2+0xa8>
 400f518:	2914b03a 	or	r10,r5,r4
 400f51c:	5013003a 	cmpeq	r9,r10,zero
 400f520:	18000e1e 	bne	r3,zero,400f55c <__ledf2+0x80>
 400f524:	3998b03a 	or	r12,r7,r6
 400f528:	60000c1e 	bne	r12,zero,400f55c <__ledf2+0x80>
 400f52c:	50000d1e 	bne	r10,zero,400f564 <__ledf2+0x88>
 400f530:	0005883a 	mov	r2,zero
 400f534:	f800283a 	ret
 400f538:	2912b03a 	or	r9,r5,r4
 400f53c:	48000d1e 	bne	r9,zero,400f574 <__ledf2+0x98>
 400f540:	1a41ffe0 	cmpeqi	r9,r3,2047
 400f544:	48000f26 	beq	r9,zero,400f584 <__ledf2+0xa8>
 400f548:	3992b03a 	or	r9,r7,r6
 400f54c:	4800091e 	bne	r9,zero,400f574 <__ledf2+0x98>
 400f550:	4000031e 	bne	r8,zero,400f560 <__ledf2+0x84>
 400f554:	2912b03a 	or	r9,r5,r4
 400f558:	4813003a 	cmpeq	r9,r9,zero
 400f55c:	4800071e 	bne	r9,zero,400f57c <__ledf2+0xa0>
 400f560:	58800c26 	beq	r11,r2,400f594 <__ledf2+0xb8>
 400f564:	00800044 	movi	r2,1
 400f568:	58000526 	beq	r11,zero,400f580 <__ledf2+0xa4>
 400f56c:	00bfffc4 	movi	r2,-1
 400f570:	f800283a 	ret
 400f574:	00800084 	movi	r2,2
 400f578:	f800283a 	ret
 400f57c:	103ffb26 	beq	r2,zero,400f56c <__ledf2+0x90>
 400f580:	f800283a 	ret
 400f584:	183ff61e 	bne	r3,zero,400f560 <__ledf2+0x84>
 400f588:	3992b03a 	or	r9,r7,r6
 400f58c:	483ff41e 	bne	r9,zero,400f560 <__ledf2+0x84>
 400f590:	003ff406 	br	400f564 <__ledf2+0x88>
 400f594:	1a00030e 	bge	r3,r8,400f5a4 <__ledf2+0xc8>
 400f598:	103ff41e 	bne	r2,zero,400f56c <__ledf2+0x90>
 400f59c:	00800044 	movi	r2,1
 400f5a0:	f800283a 	ret
 400f5a4:	40fff516 	blt	r8,r3,400f57c <__ledf2+0xa0>
 400f5a8:	397fee36 	bltu	r7,r5,400f564 <__ledf2+0x88>
 400f5ac:	29c00426 	beq	r5,r7,400f5c0 <__ledf2+0xe4>
 400f5b0:	29ffdf2e 	bgeu	r5,r7,400f530 <__ledf2+0x54>
 400f5b4:	583fed26 	beq	r11,zero,400f56c <__ledf2+0x90>
 400f5b8:	5805883a 	mov	r2,r11
 400f5bc:	f800283a 	ret
 400f5c0:	313fe836 	bltu	r6,r4,400f564 <__ledf2+0x88>
 400f5c4:	21bfda2e 	bgeu	r4,r6,400f530 <__ledf2+0x54>
 400f5c8:	003ffa06 	br	400f5b4 <__ledf2+0xd8>

0400f5cc <__muldf3>:
 400f5cc:	2804d53a 	srli	r2,r5,20
 400f5d0:	defff504 	addi	sp,sp,-44
 400f5d4:	02000434 	movhi	r8,16
 400f5d8:	df000915 	stw	fp,36(sp)
 400f5dc:	dd000515 	stw	r20,20(sp)
 400f5e0:	dcc00415 	stw	r19,16(sp)
 400f5e4:	dc000115 	stw	r16,4(sp)
 400f5e8:	423fffc4 	addi	r8,r8,-1
 400f5ec:	dfc00a15 	stw	ra,40(sp)
 400f5f0:	ddc00815 	stw	r23,32(sp)
 400f5f4:	dd800715 	stw	r22,28(sp)
 400f5f8:	dd400615 	stw	r21,24(sp)
 400f5fc:	dc800315 	stw	r18,12(sp)
 400f600:	dc400215 	stw	r17,8(sp)
 400f604:	1081ffcc 	andi	r2,r2,2047
 400f608:	2828d7fa 	srli	r20,r5,31
 400f60c:	2027883a 	mov	r19,r4
 400f610:	3039883a 	mov	fp,r6
 400f614:	2a20703a 	and	r16,r5,r8
 400f618:	10005a26 	beq	r2,zero,400f784 <__muldf3+0x1b8>
 400f61c:	10c1ffe0 	cmpeqi	r3,r2,2047
 400f620:	18006c1e 	bne	r3,zero,400f7d4 <__muldf3+0x208>
 400f624:	800a90fa 	slli	r5,r16,3
 400f628:	2020d77a 	srli	r16,r4,29
 400f62c:	202490fa 	slli	r18,r4,3
 400f630:	14ff0044 	addi	r19,r2,-1023
 400f634:	8160b03a 	or	r16,r16,r5
 400f638:	84002034 	orhi	r16,r16,128
 400f63c:	002b883a 	mov	r21,zero
 400f640:	002d883a 	mov	r22,zero
 400f644:	3804d53a 	srli	r2,r7,20
 400f648:	00c00434 	movhi	r3,16
 400f64c:	18ffffc4 	addi	r3,r3,-1
 400f650:	1081ffcc 	andi	r2,r2,2047
 400f654:	382ed7fa 	srli	r23,r7,31
 400f658:	38e2703a 	and	r17,r7,r3
 400f65c:	10006426 	beq	r2,zero,400f7f0 <__muldf3+0x224>
 400f660:	10c1ffe0 	cmpeqi	r3,r2,2047
 400f664:	1800211e 	bne	r3,zero,400f6ec <__muldf3+0x120>
 400f668:	880690fa 	slli	r3,r17,3
 400f66c:	e022d77a 	srli	r17,fp,29
 400f670:	e00a90fa 	slli	r5,fp,3
 400f674:	10bf0044 	addi	r2,r2,-1023
 400f678:	88e2b03a 	or	r17,r17,r3
 400f67c:	8c402034 	orhi	r17,r17,128
 400f680:	98a7883a 	add	r19,r19,r2
 400f684:	0007883a 	mov	r3,zero
 400f688:	a9000428 	cmpgeui	r4,r21,16
 400f68c:	a5ccf03a 	xor	r6,r20,r23
 400f690:	9a000044 	addi	r8,r19,1
 400f694:	20006b1e 	bne	r4,zero,400f844 <__muldf3+0x278>
 400f698:	a80490ba 	slli	r2,r21,2
 400f69c:	01010074 	movhi	r4,1025
 400f6a0:	1109883a 	add	r4,r2,r4
 400f6a4:	20bdab17 	ldw	r2,-2388(r4)
 400f6a8:	1000683a 	jmp	r2
 400f6ac:	0400f844 	movi	r16,993
 400f6b0:	0400f70c 	andi	r16,zero,988
 400f6b4:	0400f70c 	andi	r16,zero,988
 400f6b8:	0400f708 	cmpgei	r16,zero,988
 400f6bc:	0400f718 	cmpnei	r16,zero,988
 400f6c0:	0400f718 	cmpnei	r16,zero,988
 400f6c4:	0400fa94 	movui	r16,1002
 400f6c8:	0400f708 	cmpgei	r16,zero,988
 400f6cc:	0400f718 	cmpnei	r16,zero,988
 400f6d0:	0400fa94 	movui	r16,1002
 400f6d4:	0400f718 	cmpnei	r16,zero,988
 400f6d8:	0400f708 	cmpgei	r16,zero,988
 400f6dc:	0400fa44 	movi	r16,1001
 400f6e0:	0400fa44 	movi	r16,1001
 400f6e4:	0400fa44 	movi	r16,1001
 400f6e8:	0400fb20 	cmpeqi	r16,zero,1004
 400f6ec:	e44ab03a 	or	r5,fp,r17
 400f6f0:	9cc1ffc4 	addi	r19,r19,2047
 400f6f4:	2800d51e 	bne	r5,zero,400fa4c <__muldf3+0x480>
 400f6f8:	ad400094 	ori	r21,r21,2
 400f6fc:	0023883a 	mov	r17,zero
 400f700:	00c00084 	movi	r3,2
 400f704:	003fe006 	br	400f688 <__muldf3+0xbc>
 400f708:	b80d883a 	mov	r6,r23
 400f70c:	8821883a 	mov	r16,r17
 400f710:	2825883a 	mov	r18,r5
 400f714:	182d883a 	mov	r22,r3
 400f718:	b08000a0 	cmpeqi	r2,r22,2
 400f71c:	1000451e 	bne	r2,zero,400f834 <__muldf3+0x268>
 400f720:	b08000e0 	cmpeqi	r2,r22,3
 400f724:	1001401e 	bne	r2,zero,400fc28 <__muldf3+0x65c>
 400f728:	b0800060 	cmpeqi	r2,r22,1
 400f72c:	1000ab26 	beq	r2,zero,400f9dc <__muldf3+0x410>
 400f730:	0007883a 	mov	r3,zero
 400f734:	0021883a 	mov	r16,zero
 400f738:	0025883a 	mov	r18,zero
 400f73c:	30803fcc 	andi	r2,r6,255
 400f740:	1806953a 	slli	r3,r3,20
 400f744:	100497fa 	slli	r2,r2,31
 400f748:	1c06b03a 	or	r3,r3,r16
 400f74c:	1886b03a 	or	r3,r3,r2
 400f750:	9005883a 	mov	r2,r18
 400f754:	dfc00a17 	ldw	ra,40(sp)
 400f758:	df000917 	ldw	fp,36(sp)
 400f75c:	ddc00817 	ldw	r23,32(sp)
 400f760:	dd800717 	ldw	r22,28(sp)
 400f764:	dd400617 	ldw	r21,24(sp)
 400f768:	dd000517 	ldw	r20,20(sp)
 400f76c:	dcc00417 	ldw	r19,16(sp)
 400f770:	dc800317 	ldw	r18,12(sp)
 400f774:	dc400217 	ldw	r17,8(sp)
 400f778:	dc000117 	ldw	r16,4(sp)
 400f77c:	dec00b04 	addi	sp,sp,44
 400f780:	f800283a 	ret
 400f784:	8124b03a 	or	r18,r16,r4
 400f788:	9000bd26 	beq	r18,zero,400fa80 <__muldf3+0x4b4>
 400f78c:	d9c00015 	stw	r7,0(sp)
 400f790:	8000ff26 	beq	r16,zero,400fb90 <__muldf3+0x5c4>
 400f794:	8009883a 	mov	r4,r16
 400f798:	40107900 	call	4010790 <__clzsi2>
 400f79c:	d9c00017 	ldw	r7,0(sp)
 400f7a0:	113ffd44 	addi	r4,r2,-11
 400f7a4:	00c00744 	movi	r3,29
 400f7a8:	14bffe04 	addi	r18,r2,-8
 400f7ac:	1907c83a 	sub	r3,r3,r4
 400f7b0:	84a0983a 	sll	r16,r16,r18
 400f7b4:	98c6d83a 	srl	r3,r19,r3
 400f7b8:	9ca4983a 	sll	r18,r19,r18
 400f7bc:	1c20b03a 	or	r16,r3,r16
 400f7c0:	04ff0344 	movi	r19,-1011
 400f7c4:	98a7c83a 	sub	r19,r19,r2
 400f7c8:	002b883a 	mov	r21,zero
 400f7cc:	002d883a 	mov	r22,zero
 400f7d0:	003f9c06 	br	400f644 <__muldf3+0x78>
 400f7d4:	8124b03a 	or	r18,r16,r4
 400f7d8:	9000a41e 	bne	r18,zero,400fa6c <__muldf3+0x4a0>
 400f7dc:	0021883a 	mov	r16,zero
 400f7e0:	05400204 	movi	r21,8
 400f7e4:	04c1ffc4 	movi	r19,2047
 400f7e8:	05800084 	movi	r22,2
 400f7ec:	003f9506 	br	400f644 <__muldf3+0x78>
 400f7f0:	e44ab03a 	or	r5,fp,r17
 400f7f4:	28009926 	beq	r5,zero,400fa5c <__muldf3+0x490>
 400f7f8:	8800da26 	beq	r17,zero,400fb64 <__muldf3+0x598>
 400f7fc:	8809883a 	mov	r4,r17
 400f800:	40107900 	call	4010790 <__clzsi2>
 400f804:	11bffd44 	addi	r6,r2,-11
 400f808:	01000744 	movi	r4,29
 400f80c:	117ffe04 	addi	r5,r2,-8
 400f810:	2189c83a 	sub	r4,r4,r6
 400f814:	8962983a 	sll	r17,r17,r5
 400f818:	e108d83a 	srl	r4,fp,r4
 400f81c:	e14a983a 	sll	r5,fp,r5
 400f820:	2462b03a 	or	r17,r4,r17
 400f824:	9885c83a 	sub	r2,r19,r2
 400f828:	14ff0344 	addi	r19,r2,-1011
 400f82c:	0007883a 	mov	r3,zero
 400f830:	003f9506 	br	400f688 <__muldf3+0xbc>
 400f834:	00c1ffc4 	movi	r3,2047
 400f838:	0021883a 	mov	r16,zero
 400f83c:	0025883a 	mov	r18,zero
 400f840:	003fbe06 	br	400f73c <__muldf3+0x170>
 400f844:	9008d43a 	srli	r4,r18,16
 400f848:	281ed43a 	srli	r15,r5,16
 400f84c:	94bfffcc 	andi	r18,r18,65535
 400f850:	297fffcc 	andi	r5,r5,65535
 400f854:	2c85383a 	mul	r2,r5,r18
 400f858:	214f383a 	mul	r7,r4,r5
 400f85c:	7c87383a 	mul	r3,r15,r18
 400f860:	1012d43a 	srli	r9,r2,16
 400f864:	23dd383a 	mul	r14,r4,r15
 400f868:	19c7883a 	add	r3,r3,r7
 400f86c:	48d3883a 	add	r9,r9,r3
 400f870:	49c0022e 	bgeu	r9,r7,400f87c <__muldf3+0x2b0>
 400f874:	00c00074 	movhi	r3,1
 400f878:	70dd883a 	add	r14,r14,r3
 400f87c:	881ad43a 	srli	r13,r17,16
 400f880:	8c7fffcc 	andi	r17,r17,65535
 400f884:	8c87383a 	mul	r3,r17,r18
 400f888:	244f383a 	mul	r7,r4,r17
 400f88c:	6ca5383a 	mul	r18,r13,r18
 400f890:	1816d43a 	srli	r11,r3,16
 400f894:	4814943a 	slli	r10,r9,16
 400f898:	91e5883a 	add	r18,r18,r7
 400f89c:	10bfffcc 	andi	r2,r2,65535
 400f8a0:	5c97883a 	add	r11,r11,r18
 400f8a4:	4818d43a 	srli	r12,r9,16
 400f8a8:	2349383a 	mul	r4,r4,r13
 400f8ac:	5095883a 	add	r10,r10,r2
 400f8b0:	59c0022e 	bgeu	r11,r7,400f8bc <__muldf3+0x2f0>
 400f8b4:	00800074 	movhi	r2,1
 400f8b8:	2089883a 	add	r4,r4,r2
 400f8bc:	8028d43a 	srli	r20,r16,16
 400f8c0:	827fffcc 	andi	r9,r16,65535
 400f8c4:	2a6b383a 	mul	r21,r5,r9
 400f8c8:	7a45383a 	mul	r2,r15,r9
 400f8cc:	a14b383a 	mul	r5,r20,r5
 400f8d0:	580e943a 	slli	r7,r11,16
 400f8d4:	a82cd43a 	srli	r22,r21,16
 400f8d8:	5824d43a 	srli	r18,r11,16
 400f8dc:	18ffffcc 	andi	r3,r3,65535
 400f8e0:	1145883a 	add	r2,r2,r5
 400f8e4:	38cf883a 	add	r7,r7,r3
 400f8e8:	b085883a 	add	r2,r22,r2
 400f8ec:	7d1f383a 	mul	r15,r15,r20
 400f8f0:	9117883a 	add	r11,r18,r4
 400f8f4:	61c7883a 	add	r3,r12,r7
 400f8f8:	1140022e 	bgeu	r2,r5,400f904 <__muldf3+0x338>
 400f8fc:	01000074 	movhi	r4,1
 400f900:	791f883a 	add	r15,r15,r4
 400f904:	8a65383a 	mul	r18,r17,r9
 400f908:	6a53383a 	mul	r9,r13,r9
 400f90c:	a463383a 	mul	r17,r20,r17
 400f910:	9020d43a 	srli	r16,r18,16
 400f914:	100ad43a 	srli	r5,r2,16
 400f918:	1004943a 	slli	r2,r2,16
 400f91c:	4c53883a 	add	r9,r9,r17
 400f920:	ab3fffcc 	andi	r12,r21,65535
 400f924:	8253883a 	add	r9,r16,r9
 400f928:	6d1b383a 	mul	r13,r13,r20
 400f92c:	2bdf883a 	add	r15,r5,r15
 400f930:	1305883a 	add	r2,r2,r12
 400f934:	4c40022e 	bgeu	r9,r17,400f940 <__muldf3+0x374>
 400f938:	01000074 	movhi	r4,1
 400f93c:	691b883a 	add	r13,r13,r4
 400f940:	4808943a 	slli	r4,r9,16
 400f944:	917fffcc 	andi	r5,r18,65535
 400f948:	1b87883a 	add	r3,r3,r14
 400f94c:	2149883a 	add	r4,r4,r5
 400f950:	19cf803a 	cmpltu	r7,r3,r7
 400f954:	22c9883a 	add	r4,r4,r11
 400f958:	1887883a 	add	r3,r3,r2
 400f95c:	21dd883a 	add	r14,r4,r7
 400f960:	1885803a 	cmpltu	r2,r3,r2
 400f964:	73cb883a 	add	r5,r14,r15
 400f968:	4812d43a 	srli	r9,r9,16
 400f96c:	2899883a 	add	r12,r5,r2
 400f970:	22c9803a 	cmpltu	r4,r4,r11
 400f974:	71e1803a 	cmpltu	r16,r14,r7
 400f978:	2bcb803a 	cmpltu	r5,r5,r15
 400f97c:	2420b03a 	or	r16,r4,r16
 400f980:	6085803a 	cmpltu	r2,r12,r2
 400f984:	2884b03a 	or	r2,r5,r2
 400f988:	8261883a 	add	r16,r16,r9
 400f98c:	1824927a 	slli	r18,r3,9
 400f990:	80a1883a 	add	r16,r16,r2
 400f994:	8361883a 	add	r16,r16,r13
 400f998:	8020927a 	slli	r16,r16,9
 400f99c:	1806d5fa 	srli	r3,r3,23
 400f9a0:	600ad5fa 	srli	r5,r12,23
 400f9a4:	6004927a 	slli	r2,r12,9
 400f9a8:	92a4b03a 	or	r18,r18,r10
 400f9ac:	9024c03a 	cmpne	r18,r18,zero
 400f9b0:	90e4b03a 	or	r18,r18,r3
 400f9b4:	80c0402c 	andhi	r3,r16,256
 400f9b8:	90a4b03a 	or	r18,r18,r2
 400f9bc:	8160b03a 	or	r16,r16,r5
 400f9c0:	18007e26 	beq	r3,zero,400fbbc <__muldf3+0x5f0>
 400f9c4:	9006d07a 	srli	r3,r18,1
 400f9c8:	800497fa 	slli	r2,r16,31
 400f9cc:	9480004c 	andi	r18,r18,1
 400f9d0:	8020d07a 	srli	r16,r16,1
 400f9d4:	1c86b03a 	or	r3,r3,r18
 400f9d8:	18a4b03a 	or	r18,r3,r2
 400f9dc:	4100ffc4 	addi	r4,r8,1023
 400f9e0:	0100320e 	bge	zero,r4,400faac <__muldf3+0x4e0>
 400f9e4:	908001cc 	andi	r2,r18,7
 400f9e8:	10000726 	beq	r2,zero,400fa08 <__muldf3+0x43c>
 400f9ec:	908003cc 	andi	r2,r18,15
 400f9f0:	10800120 	cmpeqi	r2,r2,4
 400f9f4:	1000041e 	bne	r2,zero,400fa08 <__muldf3+0x43c>
 400f9f8:	90800104 	addi	r2,r18,4
 400f9fc:	14a5803a 	cmpltu	r18,r2,r18
 400fa00:	84a1883a 	add	r16,r16,r18
 400fa04:	1025883a 	mov	r18,r2
 400fa08:	8080402c 	andhi	r2,r16,256
 400fa0c:	10000426 	beq	r2,zero,400fa20 <__muldf3+0x454>
 400fa10:	00bfc034 	movhi	r2,65280
 400fa14:	10bfffc4 	addi	r2,r2,-1
 400fa18:	80a0703a 	and	r16,r16,r2
 400fa1c:	41010004 	addi	r4,r8,1024
 400fa20:	2081ffc8 	cmpgei	r2,r4,2047
 400fa24:	103f831e 	bne	r2,zero,400f834 <__muldf3+0x268>
 400fa28:	8004977a 	slli	r2,r16,29
 400fa2c:	9024d0fa 	srli	r18,r18,3
 400fa30:	8020927a 	slli	r16,r16,9
 400fa34:	20c1ffcc 	andi	r3,r4,2047
 400fa38:	14a4b03a 	or	r18,r2,r18
 400fa3c:	8020d33a 	srli	r16,r16,12
 400fa40:	003f3e06 	br	400f73c <__muldf3+0x170>
 400fa44:	a00d883a 	mov	r6,r20
 400fa48:	003f3306 	br	400f718 <__muldf3+0x14c>
 400fa4c:	ad4000d4 	ori	r21,r21,3
 400fa50:	e00b883a 	mov	r5,fp
 400fa54:	00c000c4 	movi	r3,3
 400fa58:	003f0b06 	br	400f688 <__muldf3+0xbc>
 400fa5c:	ad400054 	ori	r21,r21,1
 400fa60:	0023883a 	mov	r17,zero
 400fa64:	00c00044 	movi	r3,1
 400fa68:	003f0706 	br	400f688 <__muldf3+0xbc>
 400fa6c:	2025883a 	mov	r18,r4
 400fa70:	05400304 	movi	r21,12
 400fa74:	04c1ffc4 	movi	r19,2047
 400fa78:	058000c4 	movi	r22,3
 400fa7c:	003ef106 	br	400f644 <__muldf3+0x78>
 400fa80:	0021883a 	mov	r16,zero
 400fa84:	05400104 	movi	r21,4
 400fa88:	0027883a 	mov	r19,zero
 400fa8c:	05800044 	movi	r22,1
 400fa90:	003eec06 	br	400f644 <__muldf3+0x78>
 400fa94:	04000434 	movhi	r16,16
 400fa98:	000d883a 	mov	r6,zero
 400fa9c:	843fffc4 	addi	r16,r16,-1
 400faa0:	04bfffc4 	movi	r18,-1
 400faa4:	00c1ffc4 	movi	r3,2047
 400faa8:	003f2406 	br	400f73c <__muldf3+0x170>
 400faac:	00800044 	movi	r2,1
 400fab0:	1105c83a 	sub	r2,r2,r4
 400fab4:	10c00e48 	cmpgei	r3,r2,57
 400fab8:	183f1d1e 	bne	r3,zero,400f730 <__muldf3+0x164>
 400fabc:	10c00808 	cmpgei	r3,r2,32
 400fac0:	1800401e 	bne	r3,zero,400fbc4 <__muldf3+0x5f8>
 400fac4:	42010784 	addi	r8,r8,1054
 400fac8:	8206983a 	sll	r3,r16,r8
 400facc:	9088d83a 	srl	r4,r18,r2
 400fad0:	9210983a 	sll	r8,r18,r8
 400fad4:	80a0d83a 	srl	r16,r16,r2
 400fad8:	1904b03a 	or	r2,r3,r4
 400fadc:	4024c03a 	cmpne	r18,r8,zero
 400fae0:	1484b03a 	or	r2,r2,r18
 400fae4:	10c001cc 	andi	r3,r2,7
 400fae8:	18000726 	beq	r3,zero,400fb08 <__muldf3+0x53c>
 400faec:	10c003cc 	andi	r3,r2,15
 400faf0:	18c00120 	cmpeqi	r3,r3,4
 400faf4:	1800041e 	bne	r3,zero,400fb08 <__muldf3+0x53c>
 400faf8:	10c00104 	addi	r3,r2,4
 400fafc:	1885803a 	cmpltu	r2,r3,r2
 400fb00:	80a1883a 	add	r16,r16,r2
 400fb04:	1805883a 	mov	r2,r3
 400fb08:	80c0202c 	andhi	r3,r16,128
 400fb0c:	18004226 	beq	r3,zero,400fc18 <__muldf3+0x64c>
 400fb10:	00c00044 	movi	r3,1
 400fb14:	0021883a 	mov	r16,zero
 400fb18:	0025883a 	mov	r18,zero
 400fb1c:	003f0706 	br	400f73c <__muldf3+0x170>
 400fb20:	8080022c 	andhi	r2,r16,8
 400fb24:	10000926 	beq	r2,zero,400fb4c <__muldf3+0x580>
 400fb28:	8880022c 	andhi	r2,r17,8
 400fb2c:	1000071e 	bne	r2,zero,400fb4c <__muldf3+0x580>
 400fb30:	00800434 	movhi	r2,16
 400fb34:	8c000234 	orhi	r16,r17,8
 400fb38:	10bfffc4 	addi	r2,r2,-1
 400fb3c:	80a0703a 	and	r16,r16,r2
 400fb40:	b80d883a 	mov	r6,r23
 400fb44:	2825883a 	mov	r18,r5
 400fb48:	003fd606 	br	400faa4 <__muldf3+0x4d8>
 400fb4c:	00800434 	movhi	r2,16
 400fb50:	84000234 	orhi	r16,r16,8
 400fb54:	10bfffc4 	addi	r2,r2,-1
 400fb58:	80a0703a 	and	r16,r16,r2
 400fb5c:	a00d883a 	mov	r6,r20
 400fb60:	003fd006 	br	400faa4 <__muldf3+0x4d8>
 400fb64:	e009883a 	mov	r4,fp
 400fb68:	40107900 	call	4010790 <__clzsi2>
 400fb6c:	11800544 	addi	r6,r2,21
 400fb70:	31000748 	cmpgei	r4,r6,29
 400fb74:	1007883a 	mov	r3,r2
 400fb78:	10800804 	addi	r2,r2,32
 400fb7c:	203f2226 	beq	r4,zero,400f808 <__muldf3+0x23c>
 400fb80:	1c7ffe04 	addi	r17,r3,-8
 400fb84:	e462983a 	sll	r17,fp,r17
 400fb88:	000b883a 	mov	r5,zero
 400fb8c:	003f2506 	br	400f824 <__muldf3+0x258>
 400fb90:	40107900 	call	4010790 <__clzsi2>
 400fb94:	11000544 	addi	r4,r2,21
 400fb98:	21400748 	cmpgei	r5,r4,29
 400fb9c:	1007883a 	mov	r3,r2
 400fba0:	d9c00017 	ldw	r7,0(sp)
 400fba4:	10800804 	addi	r2,r2,32
 400fba8:	283efe26 	beq	r5,zero,400f7a4 <__muldf3+0x1d8>
 400fbac:	1c3ffe04 	addi	r16,r3,-8
 400fbb0:	9c20983a 	sll	r16,r19,r16
 400fbb4:	0025883a 	mov	r18,zero
 400fbb8:	003f0106 	br	400f7c0 <__muldf3+0x1f4>
 400fbbc:	9811883a 	mov	r8,r19
 400fbc0:	003f8606 	br	400f9dc <__muldf3+0x410>
 400fbc4:	00fff844 	movi	r3,-31
 400fbc8:	1907c83a 	sub	r3,r3,r4
 400fbcc:	10800820 	cmpeqi	r2,r2,32
 400fbd0:	80c6d83a 	srl	r3,r16,r3
 400fbd4:	1000031e 	bne	r2,zero,400fbe4 <__muldf3+0x618>
 400fbd8:	42010f84 	addi	r8,r8,1086
 400fbdc:	8220983a 	sll	r16,r16,r8
 400fbe0:	9424b03a 	or	r18,r18,r16
 400fbe4:	9024c03a 	cmpne	r18,r18,zero
 400fbe8:	90c4b03a 	or	r2,r18,r3
 400fbec:	148001cc 	andi	r18,r2,7
 400fbf0:	9000051e 	bne	r18,zero,400fc08 <__muldf3+0x63c>
 400fbf4:	0021883a 	mov	r16,zero
 400fbf8:	1004d0fa 	srli	r2,r2,3
 400fbfc:	0007883a 	mov	r3,zero
 400fc00:	14a4b03a 	or	r18,r2,r18
 400fc04:	003ecd06 	br	400f73c <__muldf3+0x170>
 400fc08:	10c003cc 	andi	r3,r2,15
 400fc0c:	18c00118 	cmpnei	r3,r3,4
 400fc10:	0021883a 	mov	r16,zero
 400fc14:	183fb81e 	bne	r3,zero,400faf8 <__muldf3+0x52c>
 400fc18:	8006927a 	slli	r3,r16,9
 400fc1c:	8024977a 	slli	r18,r16,29
 400fc20:	1820d33a 	srli	r16,r3,12
 400fc24:	003ff406 	br	400fbf8 <__muldf3+0x62c>
 400fc28:	00800434 	movhi	r2,16
 400fc2c:	84000234 	orhi	r16,r16,8
 400fc30:	10bfffc4 	addi	r2,r2,-1
 400fc34:	80a0703a 	and	r16,r16,r2
 400fc38:	003f9a06 	br	400faa4 <__muldf3+0x4d8>

0400fc3c <__subdf3>:
 400fc3c:	00c00434 	movhi	r3,16
 400fc40:	3812d53a 	srli	r9,r7,20
 400fc44:	18ffffc4 	addi	r3,r3,-1
 400fc48:	defffb04 	addi	sp,sp,-20
 400fc4c:	28d0703a 	and	r8,r5,r3
 400fc50:	38c6703a 	and	r3,r7,r3
 400fc54:	2804d7fa 	srli	r2,r5,31
 400fc58:	401090fa 	slli	r8,r8,3
 400fc5c:	280ad53a 	srli	r5,r5,20
 400fc60:	180690fa 	slli	r3,r3,3
 400fc64:	dcc00315 	stw	r19,12(sp)
 400fc68:	dc400115 	stw	r17,4(sp)
 400fc6c:	2026d77a 	srli	r19,r4,29
 400fc70:	3022d77a 	srli	r17,r6,29
 400fc74:	4b41ffcc 	andi	r13,r9,2047
 400fc78:	dc800215 	stw	r18,8(sp)
 400fc7c:	dc000015 	stw	r16,0(sp)
 400fc80:	dfc00415 	stw	ra,16(sp)
 400fc84:	6a41ffe0 	cmpeqi	r9,r13,2047
 400fc88:	1025883a 	mov	r18,r2
 400fc8c:	201690fa 	slli	r11,r4,3
 400fc90:	380ed7fa 	srli	r7,r7,31
 400fc94:	301490fa 	slli	r10,r6,3
 400fc98:	2c01ffcc 	andi	r16,r5,2047
 400fc9c:	10803fcc 	andi	r2,r2,255
 400fca0:	9a10b03a 	or	r8,r19,r8
 400fca4:	88c6b03a 	or	r3,r17,r3
 400fca8:	48006e1e 	bne	r9,zero,400fe64 <__subdf3+0x228>
 400fcac:	3a40005c 	xori	r9,r7,1
 400fcb0:	834bc83a 	sub	r5,r16,r13
 400fcb4:	12405726 	beq	r2,r9,400fe14 <__subdf3+0x1d8>
 400fcb8:	01406f0e 	bge	zero,r5,400fe78 <__subdf3+0x23c>
 400fcbc:	68007a26 	beq	r13,zero,400fea8 <__subdf3+0x26c>
 400fcc0:	8081ffd8 	cmpnei	r2,r16,2047
 400fcc4:	10019f26 	beq	r2,zero,4010344 <__subdf3+0x708>
 400fcc8:	18c02034 	orhi	r3,r3,128
 400fccc:	28800e48 	cmpgei	r2,r5,57
 400fcd0:	1000f91e 	bne	r2,zero,40100b8 <__subdf3+0x47c>
 400fcd4:	28800808 	cmpgei	r2,r5,32
 400fcd8:	1001451e 	bne	r2,zero,40101f0 <__subdf3+0x5b4>
 400fcdc:	00800804 	movi	r2,32
 400fce0:	1145c83a 	sub	r2,r2,r5
 400fce4:	18a2983a 	sll	r17,r3,r2
 400fce8:	5148d83a 	srl	r4,r10,r5
 400fcec:	5084983a 	sll	r2,r10,r2
 400fcf0:	1946d83a 	srl	r3,r3,r5
 400fcf4:	8922b03a 	or	r17,r17,r4
 400fcf8:	1004c03a 	cmpne	r2,r2,zero
 400fcfc:	88a2b03a 	or	r17,r17,r2
 400fd00:	40d1c83a 	sub	r8,r8,r3
 400fd04:	5c63c83a 	sub	r17,r11,r17
 400fd08:	5c49803a 	cmpltu	r4,r11,r17
 400fd0c:	4109c83a 	sub	r4,r8,r4
 400fd10:	2080202c 	andhi	r2,r4,128
 400fd14:	1000a526 	beq	r2,zero,400ffac <__subdf3+0x370>
 400fd18:	04c02034 	movhi	r19,128
 400fd1c:	9cffffc4 	addi	r19,r19,-1
 400fd20:	24e6703a 	and	r19,r4,r19
 400fd24:	9800db26 	beq	r19,zero,4010094 <__subdf3+0x458>
 400fd28:	9809883a 	mov	r4,r19
 400fd2c:	40107900 	call	4010790 <__clzsi2>
 400fd30:	117ffe04 	addi	r5,r2,-8
 400fd34:	01000804 	movi	r4,32
 400fd38:	2149c83a 	sub	r4,r4,r5
 400fd3c:	8906d83a 	srl	r3,r17,r4
 400fd40:	9948983a 	sll	r4,r19,r5
 400fd44:	8962983a 	sll	r17,r17,r5
 400fd48:	1908b03a 	or	r4,r3,r4
 400fd4c:	2c00cc16 	blt	r5,r16,4010080 <__subdf3+0x444>
 400fd50:	2c0bc83a 	sub	r5,r5,r16
 400fd54:	28c00044 	addi	r3,r5,1
 400fd58:	18800808 	cmpgei	r2,r3,32
 400fd5c:	1001171e 	bne	r2,zero,40101bc <__subdf3+0x580>
 400fd60:	00800804 	movi	r2,32
 400fd64:	10c5c83a 	sub	r2,r2,r3
 400fd68:	88cad83a 	srl	r5,r17,r3
 400fd6c:	88a2983a 	sll	r17,r17,r2
 400fd70:	2084983a 	sll	r2,r4,r2
 400fd74:	20c8d83a 	srl	r4,r4,r3
 400fd78:	8822c03a 	cmpne	r17,r17,zero
 400fd7c:	1144b03a 	or	r2,r2,r5
 400fd80:	1462b03a 	or	r17,r2,r17
 400fd84:	0021883a 	mov	r16,zero
 400fd88:	888001cc 	andi	r2,r17,7
 400fd8c:	10000726 	beq	r2,zero,400fdac <__subdf3+0x170>
 400fd90:	888003cc 	andi	r2,r17,15
 400fd94:	10800120 	cmpeqi	r2,r2,4
 400fd98:	1000041e 	bne	r2,zero,400fdac <__subdf3+0x170>
 400fd9c:	88c00104 	addi	r3,r17,4
 400fda0:	1c63803a 	cmpltu	r17,r3,r17
 400fda4:	2449883a 	add	r4,r4,r17
 400fda8:	1823883a 	mov	r17,r3
 400fdac:	2080202c 	andhi	r2,r4,128
 400fdb0:	10008026 	beq	r2,zero,400ffb4 <__subdf3+0x378>
 400fdb4:	81400044 	addi	r5,r16,1
 400fdb8:	2881ffe0 	cmpeqi	r2,r5,2047
 400fdbc:	2941ffcc 	andi	r5,r5,2047
 400fdc0:	1000921e 	bne	r2,zero,401000c <__subdf3+0x3d0>
 400fdc4:	00bfe034 	movhi	r2,65408
 400fdc8:	10bfffc4 	addi	r2,r2,-1
 400fdcc:	2088703a 	and	r4,r4,r2
 400fdd0:	2006927a 	slli	r3,r4,9
 400fdd4:	8822d0fa 	srli	r17,r17,3
 400fdd8:	2004977a 	slli	r2,r4,29
 400fddc:	1806d33a 	srli	r3,r3,12
 400fde0:	1444b03a 	or	r2,r2,r17
 400fde4:	280a953a 	slli	r5,r5,20
 400fde8:	94803fcc 	andi	r18,r18,255
 400fdec:	902497fa 	slli	r18,r18,31
 400fdf0:	28c6b03a 	or	r3,r5,r3
 400fdf4:	1c86b03a 	or	r3,r3,r18
 400fdf8:	dfc00417 	ldw	ra,16(sp)
 400fdfc:	dcc00317 	ldw	r19,12(sp)
 400fe00:	dc800217 	ldw	r18,8(sp)
 400fe04:	dc400117 	ldw	r17,4(sp)
 400fe08:	dc000017 	ldw	r16,0(sp)
 400fe0c:	dec00504 	addi	sp,sp,20
 400fe10:	f800283a 	ret
 400fe14:	01402e0e 	bge	zero,r5,400fed0 <__subdf3+0x294>
 400fe18:	68005526 	beq	r13,zero,400ff70 <__subdf3+0x334>
 400fe1c:	8081ffd8 	cmpnei	r2,r16,2047
 400fe20:	10013b26 	beq	r2,zero,4010310 <__subdf3+0x6d4>
 400fe24:	18c02034 	orhi	r3,r3,128
 400fe28:	28800e48 	cmpgei	r2,r5,57
 400fe2c:	10006d1e 	bne	r2,zero,400ffe4 <__subdf3+0x3a8>
 400fe30:	28800808 	cmpgei	r2,r5,32
 400fe34:	10010826 	beq	r2,zero,4010258 <__subdf3+0x61c>
 400fe38:	2c7ff804 	addi	r17,r5,-32
 400fe3c:	29000820 	cmpeqi	r4,r5,32
 400fe40:	1c44d83a 	srl	r2,r3,r17
 400fe44:	2000041e 	bne	r4,zero,400fe58 <__subdf3+0x21c>
 400fe48:	01001004 	movi	r4,64
 400fe4c:	214bc83a 	sub	r5,r4,r5
 400fe50:	1946983a 	sll	r3,r3,r5
 400fe54:	50d4b03a 	or	r10,r10,r3
 400fe58:	5022c03a 	cmpne	r17,r10,zero
 400fe5c:	88a2b03a 	or	r17,r17,r2
 400fe60:	00006206 	br	400ffec <__subdf3+0x3b0>
 400fe64:	1a98b03a 	or	r12,r3,r10
 400fe68:	817e0044 	addi	r5,r16,-2047
 400fe6c:	6000161e 	bne	r12,zero,400fec8 <__subdf3+0x28c>
 400fe70:	3a40005c 	xori	r9,r7,1
 400fe74:	12401626 	beq	r2,r9,400fed0 <__subdf3+0x294>
 400fe78:	28002e26 	beq	r5,zero,400ff34 <__subdf3+0x2f8>
 400fe7c:	6c0bc83a 	sub	r5,r13,r16
 400fe80:	4825883a 	mov	r18,r9
 400fe84:	80009e1e 	bne	r16,zero,4010100 <__subdf3+0x4c4>
 400fe88:	42c4b03a 	or	r2,r8,r11
 400fe8c:	10010926 	beq	r2,zero,40102b4 <__subdf3+0x678>
 400fe90:	28bfffc4 	addi	r2,r5,-1
 400fe94:	10016826 	beq	r2,zero,4010438 <__subdf3+0x7fc>
 400fe98:	2941ffd8 	cmpnei	r5,r5,2047
 400fe9c:	28015f26 	beq	r5,zero,401041c <__subdf3+0x7e0>
 400fea0:	100b883a 	mov	r5,r2
 400fea4:	00009906 	br	401010c <__subdf3+0x4d0>
 400fea8:	1a84b03a 	or	r2,r3,r10
 400feac:	1000b126 	beq	r2,zero,4010174 <__subdf3+0x538>
 400feb0:	28bfffc4 	addi	r2,r5,-1
 400feb4:	10011d26 	beq	r2,zero,401032c <__subdf3+0x6f0>
 400feb8:	2941ffd8 	cmpnei	r5,r5,2047
 400febc:	28011426 	beq	r5,zero,4010310 <__subdf3+0x6d4>
 400fec0:	100b883a 	mov	r5,r2
 400fec4:	003f8106 	br	400fccc <__subdf3+0x90>
 400fec8:	3a403fcc 	andi	r9,r7,255
 400fecc:	11ffea1e 	bne	r2,r7,400fe78 <__subdf3+0x23c>
 400fed0:	28007c26 	beq	r5,zero,40100c4 <__subdf3+0x488>
 400fed4:	6c0bc83a 	sub	r5,r13,r16
 400fed8:	8000d726 	beq	r16,zero,4010238 <__subdf3+0x5fc>
 400fedc:	6881ffd8 	cmpnei	r2,r13,2047
 400fee0:	10012626 	beq	r2,zero,401037c <__subdf3+0x740>
 400fee4:	42002034 	orhi	r8,r8,128
 400fee8:	28800e48 	cmpgei	r2,r5,57
 400feec:	10012a1e 	bne	r2,zero,4010398 <__subdf3+0x75c>
 400fef0:	28800808 	cmpgei	r2,r5,32
 400fef4:	1001821e 	bne	r2,zero,4010500 <__subdf3+0x8c4>
 400fef8:	00800804 	movi	r2,32
 400fefc:	1145c83a 	sub	r2,r2,r5
 400ff00:	40a2983a 	sll	r17,r8,r2
 400ff04:	5948d83a 	srl	r4,r11,r5
 400ff08:	5884983a 	sll	r2,r11,r2
 400ff0c:	4150d83a 	srl	r8,r8,r5
 400ff10:	8922b03a 	or	r17,r17,r4
 400ff14:	1004c03a 	cmpne	r2,r2,zero
 400ff18:	88a2b03a 	or	r17,r17,r2
 400ff1c:	1a07883a 	add	r3,r3,r8
 400ff20:	8aa3883a 	add	r17,r17,r10
 400ff24:	8a89803a 	cmpltu	r4,r17,r10
 400ff28:	20c9883a 	add	r4,r4,r3
 400ff2c:	6821883a 	mov	r16,r13
 400ff30:	00003106 	br	400fff8 <__subdf3+0x3bc>
 400ff34:	80800044 	addi	r2,r16,1
 400ff38:	1081ff8c 	andi	r2,r2,2046
 400ff3c:	1000821e 	bne	r2,zero,4010148 <__subdf3+0x50c>
 400ff40:	42ceb03a 	or	r7,r8,r11
 400ff44:	1a84b03a 	or	r2,r3,r10
 400ff48:	8000e11e 	bne	r16,zero,40102d0 <__subdf3+0x694>
 400ff4c:	38012a26 	beq	r7,zero,40103f8 <__subdf3+0x7bc>
 400ff50:	1001461e 	bne	r2,zero,401046c <__subdf3+0x830>
 400ff54:	4004977a 	slli	r2,r8,29
 400ff58:	00c80034 	movhi	r3,8192
 400ff5c:	18ffffc4 	addi	r3,r3,-1
 400ff60:	20c8703a 	and	r4,r4,r3
 400ff64:	4010d0fa 	srli	r8,r8,3
 400ff68:	1104b03a 	or	r2,r2,r4
 400ff6c:	00001806 	br	400ffd0 <__subdf3+0x394>
 400ff70:	1a84b03a 	or	r2,r3,r10
 400ff74:	1000fa26 	beq	r2,zero,4010360 <__subdf3+0x724>
 400ff78:	28bfffc4 	addi	r2,r5,-1
 400ff7c:	10000426 	beq	r2,zero,400ff90 <__subdf3+0x354>
 400ff80:	2941ffd8 	cmpnei	r5,r5,2047
 400ff84:	28013226 	beq	r5,zero,4010450 <__subdf3+0x814>
 400ff88:	100b883a 	mov	r5,r2
 400ff8c:	003fa606 	br	400fe28 <__subdf3+0x1ec>
 400ff90:	5aa3883a 	add	r17,r11,r10
 400ff94:	40c9883a 	add	r4,r8,r3
 400ff98:	8ad7803a 	cmpltu	r11,r17,r11
 400ff9c:	22c9883a 	add	r4,r4,r11
 400ffa0:	2080202c 	andhi	r2,r4,128
 400ffa4:	10007a1e 	bne	r2,zero,4010190 <__subdf3+0x554>
 400ffa8:	04000044 	movi	r16,1
 400ffac:	888001cc 	andi	r2,r17,7
 400ffb0:	103f771e 	bne	r2,zero,400fd90 <__subdf3+0x154>
 400ffb4:	8822d0fa 	srli	r17,r17,3
 400ffb8:	2004977a 	slli	r2,r4,29
 400ffbc:	2010d0fa 	srli	r8,r4,3
 400ffc0:	800b883a 	mov	r5,r16
 400ffc4:	8884b03a 	or	r2,r17,r2
 400ffc8:	28c1ffe0 	cmpeqi	r3,r5,2047
 400ffcc:	1800241e 	bne	r3,zero,4010060 <__subdf3+0x424>
 400ffd0:	00c00434 	movhi	r3,16
 400ffd4:	18ffffc4 	addi	r3,r3,-1
 400ffd8:	40c6703a 	and	r3,r8,r3
 400ffdc:	2941ffcc 	andi	r5,r5,2047
 400ffe0:	003f8006 	br	400fde4 <__subdf3+0x1a8>
 400ffe4:	1aa2b03a 	or	r17,r3,r10
 400ffe8:	8822c03a 	cmpne	r17,r17,zero
 400ffec:	8ae3883a 	add	r17,r17,r11
 400fff0:	8ac9803a 	cmpltu	r4,r17,r11
 400fff4:	2209883a 	add	r4,r4,r8
 400fff8:	2080202c 	andhi	r2,r4,128
 400fffc:	103feb26 	beq	r2,zero,400ffac <__subdf3+0x370>
 4010000:	84000044 	addi	r16,r16,1
 4010004:	8081ffe0 	cmpeqi	r2,r16,2047
 4010008:	10006226 	beq	r2,zero,4010194 <__subdf3+0x558>
 401000c:	0141ffc4 	movi	r5,2047
 4010010:	0007883a 	mov	r3,zero
 4010014:	0005883a 	mov	r2,zero
 4010018:	003f7206 	br	400fde4 <__subdf3+0x1a8>
 401001c:	400e977a 	slli	r7,r8,29
 4010020:	4010d0fa 	srli	r8,r8,3
 4010024:	1000ef26 	beq	r2,zero,40103e4 <__subdf3+0x7a8>
 4010028:	01480034 	movhi	r5,8192
 401002c:	297fffc4 	addi	r5,r5,-1
 4010030:	2144703a 	and	r2,r4,r5
 4010034:	4100022c 	andhi	r4,r8,8
 4010038:	11c4b03a 	or	r2,r2,r7
 401003c:	20000826 	beq	r4,zero,4010060 <__subdf3+0x424>
 4010040:	1808d0fa 	srli	r4,r3,3
 4010044:	21c0022c 	andhi	r7,r4,8
 4010048:	3800051e 	bne	r7,zero,4010060 <__subdf3+0x424>
 401004c:	1804977a 	slli	r2,r3,29
 4010050:	314c703a 	and	r6,r6,r5
 4010054:	4825883a 	mov	r18,r9
 4010058:	3084b03a 	or	r2,r6,r2
 401005c:	2011883a 	mov	r8,r4
 4010060:	1206b03a 	or	r3,r2,r8
 4010064:	18013e26 	beq	r3,zero,4010560 <__subdf3+0x924>
 4010068:	01000434 	movhi	r4,16
 401006c:	40c00234 	orhi	r3,r8,8
 4010070:	213fffc4 	addi	r4,r4,-1
 4010074:	1906703a 	and	r3,r3,r4
 4010078:	0141ffc4 	movi	r5,2047
 401007c:	003f5906 	br	400fde4 <__subdf3+0x1a8>
 4010080:	00ffe034 	movhi	r3,65408
 4010084:	18ffffc4 	addi	r3,r3,-1
 4010088:	8161c83a 	sub	r16,r16,r5
 401008c:	20c8703a 	and	r4,r4,r3
 4010090:	003f3d06 	br	400fd88 <__subdf3+0x14c>
 4010094:	8809883a 	mov	r4,r17
 4010098:	40107900 	call	4010790 <__clzsi2>
 401009c:	11400604 	addi	r5,r2,24
 40100a0:	28c00808 	cmpgei	r3,r5,32
 40100a4:	183f2326 	beq	r3,zero,400fd34 <__subdf3+0xf8>
 40100a8:	113ffe04 	addi	r4,r2,-8
 40100ac:	8908983a 	sll	r4,r17,r4
 40100b0:	0023883a 	mov	r17,zero
 40100b4:	003f2506 	br	400fd4c <__subdf3+0x110>
 40100b8:	1aa2b03a 	or	r17,r3,r10
 40100bc:	8822c03a 	cmpne	r17,r17,zero
 40100c0:	003f1006 	br	400fd04 <__subdf3+0xc8>
 40100c4:	80800044 	addi	r2,r16,1
 40100c8:	11c1ff8c 	andi	r7,r2,2046
 40100cc:	38006d1e 	bne	r7,zero,4010284 <__subdf3+0x648>
 40100d0:	42c4b03a 	or	r2,r8,r11
 40100d4:	8000be1e 	bne	r16,zero,40103d0 <__subdf3+0x794>
 40100d8:	1000f726 	beq	r2,zero,40104b8 <__subdf3+0x87c>
 40100dc:	1a84b03a 	or	r2,r3,r10
 40100e0:	1000fc1e 	bne	r2,zero,40104d4 <__subdf3+0x898>
 40100e4:	4006977a 	slli	r3,r8,29
 40100e8:	00880034 	movhi	r2,8192
 40100ec:	10bfffc4 	addi	r2,r2,-1
 40100f0:	2084703a 	and	r2,r4,r2
 40100f4:	4010d0fa 	srli	r8,r8,3
 40100f8:	10c4b03a 	or	r2,r2,r3
 40100fc:	003fb406 	br	400ffd0 <__subdf3+0x394>
 4010100:	6881ffd8 	cmpnei	r2,r13,2047
 4010104:	10009d26 	beq	r2,zero,401037c <__subdf3+0x740>
 4010108:	42002034 	orhi	r8,r8,128
 401010c:	28800e48 	cmpgei	r2,r5,57
 4010110:	1000421e 	bne	r2,zero,401021c <__subdf3+0x5e0>
 4010114:	28800808 	cmpgei	r2,r5,32
 4010118:	1000a21e 	bne	r2,zero,40103a4 <__subdf3+0x768>
 401011c:	00800804 	movi	r2,32
 4010120:	1145c83a 	sub	r2,r2,r5
 4010124:	40a2983a 	sll	r17,r8,r2
 4010128:	5948d83a 	srl	r4,r11,r5
 401012c:	5896983a 	sll	r11,r11,r2
 4010130:	4150d83a 	srl	r8,r8,r5
 4010134:	8922b03a 	or	r17,r17,r4
 4010138:	5816c03a 	cmpne	r11,r11,zero
 401013c:	8ae2b03a 	or	r17,r17,r11
 4010140:	1a07c83a 	sub	r3,r3,r8
 4010144:	00003706 	br	4010224 <__subdf3+0x5e8>
 4010148:	5aa3c83a 	sub	r17,r11,r10
 401014c:	40e7c83a 	sub	r19,r8,r3
 4010150:	5c49803a 	cmpltu	r4,r11,r17
 4010154:	9927c83a 	sub	r19,r19,r4
 4010158:	9880202c 	andhi	r2,r19,128
 401015c:	1000661e 	bne	r2,zero,40102f8 <__subdf3+0x6bc>
 4010160:	8cc4b03a 	or	r2,r17,r19
 4010164:	103eef1e 	bne	r2,zero,400fd24 <__subdf3+0xe8>
 4010168:	0011883a 	mov	r8,zero
 401016c:	0025883a 	mov	r18,zero
 4010170:	003f9706 	br	400ffd0 <__subdf3+0x394>
 4010174:	4022977a 	slli	r17,r8,29
 4010178:	00880034 	movhi	r2,8192
 401017c:	10bfffc4 	addi	r2,r2,-1
 4010180:	2088703a 	and	r4,r4,r2
 4010184:	4010d0fa 	srli	r8,r8,3
 4010188:	2444b03a 	or	r2,r4,r17
 401018c:	003f8e06 	br	400ffc8 <__subdf3+0x38c>
 4010190:	04000084 	movi	r16,2
 4010194:	00bfe034 	movhi	r2,65408
 4010198:	10bfffc4 	addi	r2,r2,-1
 401019c:	8806d07a 	srli	r3,r17,1
 40101a0:	2088703a 	and	r4,r4,r2
 40101a4:	200497fa 	slli	r2,r4,31
 40101a8:	8c40004c 	andi	r17,r17,1
 40101ac:	1c62b03a 	or	r17,r3,r17
 40101b0:	2008d07a 	srli	r4,r4,1
 40101b4:	1462b03a 	or	r17,r2,r17
 40101b8:	003ef306 	br	400fd88 <__subdf3+0x14c>
 40101bc:	297ff844 	addi	r5,r5,-31
 40101c0:	18800820 	cmpeqi	r2,r3,32
 40101c4:	214ad83a 	srl	r5,r4,r5
 40101c8:	1000041e 	bne	r2,zero,40101dc <__subdf3+0x5a0>
 40101cc:	00801004 	movi	r2,64
 40101d0:	10c7c83a 	sub	r3,r2,r3
 40101d4:	20c8983a 	sll	r4,r4,r3
 40101d8:	8922b03a 	or	r17,r17,r4
 40101dc:	8822c03a 	cmpne	r17,r17,zero
 40101e0:	8962b03a 	or	r17,r17,r5
 40101e4:	0009883a 	mov	r4,zero
 40101e8:	0021883a 	mov	r16,zero
 40101ec:	003f6f06 	br	400ffac <__subdf3+0x370>
 40101f0:	2c7ff804 	addi	r17,r5,-32
 40101f4:	29000820 	cmpeqi	r4,r5,32
 40101f8:	1c44d83a 	srl	r2,r3,r17
 40101fc:	2000041e 	bne	r4,zero,4010210 <__subdf3+0x5d4>
 4010200:	01001004 	movi	r4,64
 4010204:	214bc83a 	sub	r5,r4,r5
 4010208:	1946983a 	sll	r3,r3,r5
 401020c:	50d4b03a 	or	r10,r10,r3
 4010210:	5022c03a 	cmpne	r17,r10,zero
 4010214:	88a2b03a 	or	r17,r17,r2
 4010218:	003eba06 	br	400fd04 <__subdf3+0xc8>
 401021c:	42d0b03a 	or	r8,r8,r11
 4010220:	4022c03a 	cmpne	r17,r8,zero
 4010224:	5463c83a 	sub	r17,r10,r17
 4010228:	5449803a 	cmpltu	r4,r10,r17
 401022c:	1909c83a 	sub	r4,r3,r4
 4010230:	6821883a 	mov	r16,r13
 4010234:	003eb606 	br	400fd10 <__subdf3+0xd4>
 4010238:	42c4b03a 	or	r2,r8,r11
 401023c:	10009726 	beq	r2,zero,401049c <__subdf3+0x860>
 4010240:	28bfffc4 	addi	r2,r5,-1
 4010244:	1000b926 	beq	r2,zero,401052c <__subdf3+0x8f0>
 4010248:	2941ffd8 	cmpnei	r5,r5,2047
 401024c:	28007326 	beq	r5,zero,401041c <__subdf3+0x7e0>
 4010250:	100b883a 	mov	r5,r2
 4010254:	003f2406 	br	400fee8 <__subdf3+0x2ac>
 4010258:	00800804 	movi	r2,32
 401025c:	1145c83a 	sub	r2,r2,r5
 4010260:	18a2983a 	sll	r17,r3,r2
 4010264:	5148d83a 	srl	r4,r10,r5
 4010268:	5084983a 	sll	r2,r10,r2
 401026c:	1946d83a 	srl	r3,r3,r5
 4010270:	8922b03a 	or	r17,r17,r4
 4010274:	1004c03a 	cmpne	r2,r2,zero
 4010278:	88a2b03a 	or	r17,r17,r2
 401027c:	40d1883a 	add	r8,r8,r3
 4010280:	003f5a06 	br	400ffec <__subdf3+0x3b0>
 4010284:	1101ffe0 	cmpeqi	r4,r2,2047
 4010288:	203f601e 	bne	r4,zero,401000c <__subdf3+0x3d0>
 401028c:	5a95883a 	add	r10,r11,r10
 4010290:	52d7803a 	cmpltu	r11,r10,r11
 4010294:	40c9883a 	add	r4,r8,r3
 4010298:	22c9883a 	add	r4,r4,r11
 401029c:	202297fa 	slli	r17,r4,31
 40102a0:	5014d07a 	srli	r10,r10,1
 40102a4:	2008d07a 	srli	r4,r4,1
 40102a8:	1021883a 	mov	r16,r2
 40102ac:	8aa2b03a 	or	r17,r17,r10
 40102b0:	003f3e06 	br	400ffac <__subdf3+0x370>
 40102b4:	1808977a 	slli	r4,r3,29
 40102b8:	00880034 	movhi	r2,8192
 40102bc:	10bfffc4 	addi	r2,r2,-1
 40102c0:	308c703a 	and	r6,r6,r2
 40102c4:	1810d0fa 	srli	r8,r3,3
 40102c8:	3104b03a 	or	r2,r6,r4
 40102cc:	003f3e06 	br	400ffc8 <__subdf3+0x38c>
 40102d0:	383f521e 	bne	r7,zero,401001c <__subdf3+0x3e0>
 40102d4:	10009d26 	beq	r2,zero,401054c <__subdf3+0x910>
 40102d8:	1808977a 	slli	r4,r3,29
 40102dc:	00880034 	movhi	r2,8192
 40102e0:	10bfffc4 	addi	r2,r2,-1
 40102e4:	3084703a 	and	r2,r6,r2
 40102e8:	1810d0fa 	srli	r8,r3,3
 40102ec:	1104b03a 	or	r2,r2,r4
 40102f0:	4825883a 	mov	r18,r9
 40102f4:	003f5a06 	br	4010060 <__subdf3+0x424>
 40102f8:	52e3c83a 	sub	r17,r10,r11
 40102fc:	1a09c83a 	sub	r4,r3,r8
 4010300:	5467803a 	cmpltu	r19,r10,r17
 4010304:	24e7c83a 	sub	r19,r4,r19
 4010308:	4825883a 	mov	r18,r9
 401030c:	003e8506 	br	400fd24 <__subdf3+0xe8>
 4010310:	4022977a 	slli	r17,r8,29
 4010314:	00880034 	movhi	r2,8192
 4010318:	10bfffc4 	addi	r2,r2,-1
 401031c:	2088703a 	and	r4,r4,r2
 4010320:	4010d0fa 	srli	r8,r8,3
 4010324:	2444b03a 	or	r2,r4,r17
 4010328:	003f4d06 	br	4010060 <__subdf3+0x424>
 401032c:	5aa3c83a 	sub	r17,r11,r10
 4010330:	40c9c83a 	sub	r4,r8,r3
 4010334:	5c57803a 	cmpltu	r11,r11,r17
 4010338:	22c9c83a 	sub	r4,r4,r11
 401033c:	04000044 	movi	r16,1
 4010340:	003e7306 	br	400fd10 <__subdf3+0xd4>
 4010344:	4004977a 	slli	r2,r8,29
 4010348:	00c80034 	movhi	r3,8192
 401034c:	18ffffc4 	addi	r3,r3,-1
 4010350:	20c8703a 	and	r4,r4,r3
 4010354:	4010d0fa 	srli	r8,r8,3
 4010358:	1104b03a 	or	r2,r2,r4
 401035c:	003f4006 	br	4010060 <__subdf3+0x424>
 4010360:	4004977a 	slli	r2,r8,29
 4010364:	00c80034 	movhi	r3,8192
 4010368:	18ffffc4 	addi	r3,r3,-1
 401036c:	20c8703a 	and	r4,r4,r3
 4010370:	4010d0fa 	srli	r8,r8,3
 4010374:	1104b03a 	or	r2,r2,r4
 4010378:	003f1306 	br	400ffc8 <__subdf3+0x38c>
 401037c:	1804977a 	slli	r2,r3,29
 4010380:	01080034 	movhi	r4,8192
 4010384:	213fffc4 	addi	r4,r4,-1
 4010388:	310c703a 	and	r6,r6,r4
 401038c:	1810d0fa 	srli	r8,r3,3
 4010390:	1184b03a 	or	r2,r2,r6
 4010394:	003f3206 	br	4010060 <__subdf3+0x424>
 4010398:	42d0b03a 	or	r8,r8,r11
 401039c:	4022c03a 	cmpne	r17,r8,zero
 40103a0:	003edf06 	br	400ff20 <__subdf3+0x2e4>
 40103a4:	2c7ff804 	addi	r17,r5,-32
 40103a8:	29000820 	cmpeqi	r4,r5,32
 40103ac:	4444d83a 	srl	r2,r8,r17
 40103b0:	2000041e 	bne	r4,zero,40103c4 <__subdf3+0x788>
 40103b4:	01001004 	movi	r4,64
 40103b8:	214bc83a 	sub	r5,r4,r5
 40103bc:	4150983a 	sll	r8,r8,r5
 40103c0:	5a16b03a 	or	r11,r11,r8
 40103c4:	5822c03a 	cmpne	r17,r11,zero
 40103c8:	88a2b03a 	or	r17,r17,r2
 40103cc:	003f9506 	br	4010224 <__subdf3+0x5e8>
 40103d0:	103fea26 	beq	r2,zero,401037c <__subdf3+0x740>
 40103d4:	1a94b03a 	or	r10,r3,r10
 40103d8:	400e977a 	slli	r7,r8,29
 40103dc:	4010d0fa 	srli	r8,r8,3
 40103e0:	503f111e 	bne	r10,zero,4010028 <__subdf3+0x3ec>
 40103e4:	00880034 	movhi	r2,8192
 40103e8:	10bfffc4 	addi	r2,r2,-1
 40103ec:	2084703a 	and	r2,r4,r2
 40103f0:	11c4b03a 	or	r2,r2,r7
 40103f4:	003f1a06 	br	4010060 <__subdf3+0x424>
 40103f8:	103f5b26 	beq	r2,zero,4010168 <__subdf3+0x52c>
 40103fc:	1804977a 	slli	r2,r3,29
 4010400:	01080034 	movhi	r4,8192
 4010404:	213fffc4 	addi	r4,r4,-1
 4010408:	310c703a 	and	r6,r6,r4
 401040c:	1810d0fa 	srli	r8,r3,3
 4010410:	1184b03a 	or	r2,r2,r6
 4010414:	4825883a 	mov	r18,r9
 4010418:	003eed06 	br	400ffd0 <__subdf3+0x394>
 401041c:	1808977a 	slli	r4,r3,29
 4010420:	00880034 	movhi	r2,8192
 4010424:	10bfffc4 	addi	r2,r2,-1
 4010428:	3084703a 	and	r2,r6,r2
 401042c:	1810d0fa 	srli	r8,r3,3
 4010430:	1104b03a 	or	r2,r2,r4
 4010434:	003f0a06 	br	4010060 <__subdf3+0x424>
 4010438:	52e3c83a 	sub	r17,r10,r11
 401043c:	1a09c83a 	sub	r4,r3,r8
 4010440:	5455803a 	cmpltu	r10,r10,r17
 4010444:	2289c83a 	sub	r4,r4,r10
 4010448:	04000044 	movi	r16,1
 401044c:	003e3006 	br	400fd10 <__subdf3+0xd4>
 4010450:	4006977a 	slli	r3,r8,29
 4010454:	00880034 	movhi	r2,8192
 4010458:	10bfffc4 	addi	r2,r2,-1
 401045c:	2084703a 	and	r2,r4,r2
 4010460:	4010d0fa 	srli	r8,r8,3
 4010464:	10c4b03a 	or	r2,r2,r3
 4010468:	003efd06 	br	4010060 <__subdf3+0x424>
 401046c:	5aa3c83a 	sub	r17,r11,r10
 4010470:	5c45803a 	cmpltu	r2,r11,r17
 4010474:	40c9c83a 	sub	r4,r8,r3
 4010478:	2089c83a 	sub	r4,r4,r2
 401047c:	2080202c 	andhi	r2,r4,128
 4010480:	10002f26 	beq	r2,zero,4010540 <__subdf3+0x904>
 4010484:	52e3c83a 	sub	r17,r10,r11
 4010488:	1a09c83a 	sub	r4,r3,r8
 401048c:	5455803a 	cmpltu	r10,r10,r17
 4010490:	2289c83a 	sub	r4,r4,r10
 4010494:	4825883a 	mov	r18,r9
 4010498:	003e3b06 	br	400fd88 <__subdf3+0x14c>
 401049c:	1808977a 	slli	r4,r3,29
 40104a0:	00880034 	movhi	r2,8192
 40104a4:	10bfffc4 	addi	r2,r2,-1
 40104a8:	3084703a 	and	r2,r6,r2
 40104ac:	1810d0fa 	srli	r8,r3,3
 40104b0:	1104b03a 	or	r2,r2,r4
 40104b4:	003ec406 	br	400ffc8 <__subdf3+0x38c>
 40104b8:	1808977a 	slli	r4,r3,29
 40104bc:	00880034 	movhi	r2,8192
 40104c0:	10bfffc4 	addi	r2,r2,-1
 40104c4:	3084703a 	and	r2,r6,r2
 40104c8:	1810d0fa 	srli	r8,r3,3
 40104cc:	1104b03a 	or	r2,r2,r4
 40104d0:	003ebf06 	br	400ffd0 <__subdf3+0x394>
 40104d4:	5aa3883a 	add	r17,r11,r10
 40104d8:	40c9883a 	add	r4,r8,r3
 40104dc:	8ad7803a 	cmpltu	r11,r17,r11
 40104e0:	22c9883a 	add	r4,r4,r11
 40104e4:	2080202c 	andhi	r2,r4,128
 40104e8:	103eb026 	beq	r2,zero,400ffac <__subdf3+0x370>
 40104ec:	00bfe034 	movhi	r2,65408
 40104f0:	10bfffc4 	addi	r2,r2,-1
 40104f4:	2088703a 	and	r4,r4,r2
 40104f8:	04000044 	movi	r16,1
 40104fc:	003eab06 	br	400ffac <__subdf3+0x370>
 4010500:	28bff804 	addi	r2,r5,-32
 4010504:	29000820 	cmpeqi	r4,r5,32
 4010508:	4084d83a 	srl	r2,r8,r2
 401050c:	2000041e 	bne	r4,zero,4010520 <__subdf3+0x8e4>
 4010510:	01001004 	movi	r4,64
 4010514:	214bc83a 	sub	r5,r4,r5
 4010518:	4150983a 	sll	r8,r8,r5
 401051c:	5a16b03a 	or	r11,r11,r8
 4010520:	5822c03a 	cmpne	r17,r11,zero
 4010524:	88a2b03a 	or	r17,r17,r2
 4010528:	003e7d06 	br	400ff20 <__subdf3+0x2e4>
 401052c:	5aa3883a 	add	r17,r11,r10
 4010530:	40c9883a 	add	r4,r8,r3
 4010534:	8a95803a 	cmpltu	r10,r17,r10
 4010538:	2289883a 	add	r4,r4,r10
 401053c:	003e9806 	br	400ffa0 <__subdf3+0x364>
 4010540:	8904b03a 	or	r2,r17,r4
 4010544:	103f0826 	beq	r2,zero,4010168 <__subdf3+0x52c>
 4010548:	003e9806 	br	400ffac <__subdf3+0x370>
 401054c:	02000434 	movhi	r8,16
 4010550:	423fffc4 	addi	r8,r8,-1
 4010554:	0025883a 	mov	r18,zero
 4010558:	00bfffc4 	movi	r2,-1
 401055c:	003ec206 	br	4010068 <__subdf3+0x42c>
 4010560:	0005883a 	mov	r2,zero
 4010564:	0141ffc4 	movi	r5,2047
 4010568:	0007883a 	mov	r3,zero
 401056c:	003e1d06 	br	400fde4 <__subdf3+0x1a8>

04010570 <__unorddf2>:
 4010570:	2806d53a 	srli	r3,r5,20
 4010574:	3810d53a 	srli	r8,r7,20
 4010578:	02400434 	movhi	r9,16
 401057c:	18c1ffcc 	andi	r3,r3,2047
 4010580:	4a7fffc4 	addi	r9,r9,-1
 4010584:	18c1ffd8 	cmpnei	r3,r3,2047
 4010588:	2a4a703a 	and	r5,r5,r9
 401058c:	3a4e703a 	and	r7,r7,r9
 4010590:	4201ffcc 	andi	r8,r8,2047
 4010594:	18000426 	beq	r3,zero,40105a8 <__unorddf2+0x38>
 4010598:	4201ffd8 	cmpnei	r8,r8,2047
 401059c:	40000626 	beq	r8,zero,40105b8 <__unorddf2+0x48>
 40105a0:	0005883a 	mov	r2,zero
 40105a4:	f800283a 	ret
 40105a8:	214ab03a 	or	r5,r4,r5
 40105ac:	283ffa26 	beq	r5,zero,4010598 <__unorddf2+0x28>
 40105b0:	00800044 	movi	r2,1
 40105b4:	f800283a 	ret
 40105b8:	398eb03a 	or	r7,r7,r6
 40105bc:	3804c03a 	cmpne	r2,r7,zero
 40105c0:	f800283a 	ret

040105c4 <__fixdfsi>:
 40105c4:	2806d53a 	srli	r3,r5,20
 40105c8:	01800434 	movhi	r6,16
 40105cc:	31bfffc4 	addi	r6,r6,-1
 40105d0:	18c1ffcc 	andi	r3,r3,2047
 40105d4:	19c0ffd0 	cmplti	r7,r3,1023
 40105d8:	2810d7fa 	srli	r8,r5,31
 40105dc:	298a703a 	and	r5,r5,r6
 40105e0:	3800061e 	bne	r7,zero,40105fc <__fixdfsi+0x38>
 40105e4:	18810790 	cmplti	r2,r3,1054
 40105e8:	1000061e 	bne	r2,zero,4010604 <__fixdfsi+0x40>
 40105ec:	00a00034 	movhi	r2,32768
 40105f0:	10bfffc4 	addi	r2,r2,-1
 40105f4:	4085883a 	add	r2,r8,r2
 40105f8:	f800283a 	ret
 40105fc:	0005883a 	mov	r2,zero
 4010600:	f800283a 	ret
 4010604:	01810cc4 	movi	r6,1075
 4010608:	30cdc83a 	sub	r6,r6,r3
 401060c:	30800808 	cmpgei	r2,r6,32
 4010610:	29400434 	orhi	r5,r5,16
 4010614:	1000071e 	bne	r2,zero,4010634 <__fixdfsi+0x70>
 4010618:	18befb44 	addi	r2,r3,-1043
 401061c:	2884983a 	sll	r2,r5,r2
 4010620:	2188d83a 	srl	r4,r4,r6
 4010624:	1104b03a 	or	r2,r2,r4
 4010628:	403ff526 	beq	r8,zero,4010600 <__fixdfsi+0x3c>
 401062c:	0085c83a 	sub	r2,zero,r2
 4010630:	f800283a 	ret
 4010634:	008104c4 	movi	r2,1043
 4010638:	10c5c83a 	sub	r2,r2,r3
 401063c:	2884d83a 	srl	r2,r5,r2
 4010640:	003ff906 	br	4010628 <__fixdfsi+0x64>

04010644 <__floatsidf>:
 4010644:	defffd04 	addi	sp,sp,-12
 4010648:	dfc00215 	stw	ra,8(sp)
 401064c:	dc400115 	stw	r17,4(sp)
 4010650:	dc000015 	stw	r16,0(sp)
 4010654:	20001326 	beq	r4,zero,40106a4 <__floatsidf+0x60>
 4010658:	2022d7fa 	srli	r17,r4,31
 401065c:	2021883a 	mov	r16,r4
 4010660:	20002516 	blt	r4,zero,40106f8 <__floatsidf+0xb4>
 4010664:	8009883a 	mov	r4,r16
 4010668:	40107900 	call	4010790 <__clzsi2>
 401066c:	01410784 	movi	r5,1054
 4010670:	288bc83a 	sub	r5,r5,r2
 4010674:	10c002c8 	cmpgei	r3,r2,11
 4010678:	2941ffcc 	andi	r5,r5,2047
 401067c:	1800171e 	bne	r3,zero,40106dc <__floatsidf+0x98>
 4010680:	00c002c4 	movi	r3,11
 4010684:	1887c83a 	sub	r3,r3,r2
 4010688:	80c6d83a 	srl	r3,r16,r3
 401068c:	01000434 	movhi	r4,16
 4010690:	10800544 	addi	r2,r2,21
 4010694:	213fffc4 	addi	r4,r4,-1
 4010698:	8084983a 	sll	r2,r16,r2
 401069c:	1906703a 	and	r3,r3,r4
 40106a0:	00000406 	br	40106b4 <__floatsidf+0x70>
 40106a4:	0023883a 	mov	r17,zero
 40106a8:	000b883a 	mov	r5,zero
 40106ac:	0007883a 	mov	r3,zero
 40106b0:	0005883a 	mov	r2,zero
 40106b4:	280a953a 	slli	r5,r5,20
 40106b8:	8c403fcc 	andi	r17,r17,255
 40106bc:	882297fa 	slli	r17,r17,31
 40106c0:	28c6b03a 	or	r3,r5,r3
 40106c4:	1c46b03a 	or	r3,r3,r17
 40106c8:	dfc00217 	ldw	ra,8(sp)
 40106cc:	dc400117 	ldw	r17,4(sp)
 40106d0:	dc000017 	ldw	r16,0(sp)
 40106d4:	dec00304 	addi	sp,sp,12
 40106d8:	f800283a 	ret
 40106dc:	10bffd44 	addi	r2,r2,-11
 40106e0:	8086983a 	sll	r3,r16,r2
 40106e4:	00800434 	movhi	r2,16
 40106e8:	10bfffc4 	addi	r2,r2,-1
 40106ec:	1886703a 	and	r3,r3,r2
 40106f0:	0005883a 	mov	r2,zero
 40106f4:	003fef06 	br	40106b4 <__floatsidf+0x70>
 40106f8:	0121c83a 	sub	r16,zero,r4
 40106fc:	003fd906 	br	4010664 <__floatsidf+0x20>

04010700 <__floatunsidf>:
 4010700:	defffe04 	addi	sp,sp,-8
 4010704:	dc000015 	stw	r16,0(sp)
 4010708:	dfc00115 	stw	ra,4(sp)
 401070c:	2021883a 	mov	r16,r4
 4010710:	20000f26 	beq	r4,zero,4010750 <__floatunsidf+0x50>
 4010714:	40107900 	call	4010790 <__clzsi2>
 4010718:	00c10784 	movi	r3,1054
 401071c:	1887c83a 	sub	r3,r3,r2
 4010720:	110002c8 	cmpgei	r4,r2,11
 4010724:	18c1ffcc 	andi	r3,r3,2047
 4010728:	2000121e 	bne	r4,zero,4010774 <__floatunsidf+0x74>
 401072c:	014002c4 	movi	r5,11
 4010730:	288bc83a 	sub	r5,r5,r2
 4010734:	814ad83a 	srl	r5,r16,r5
 4010738:	01000434 	movhi	r4,16
 401073c:	10800544 	addi	r2,r2,21
 4010740:	213fffc4 	addi	r4,r4,-1
 4010744:	80a0983a 	sll	r16,r16,r2
 4010748:	290a703a 	and	r5,r5,r4
 401074c:	00000206 	br	4010758 <__floatunsidf+0x58>
 4010750:	0007883a 	mov	r3,zero
 4010754:	000b883a 	mov	r5,zero
 4010758:	1806953a 	slli	r3,r3,20
 401075c:	8005883a 	mov	r2,r16
 4010760:	1946b03a 	or	r3,r3,r5
 4010764:	dfc00117 	ldw	ra,4(sp)
 4010768:	dc000017 	ldw	r16,0(sp)
 401076c:	dec00204 	addi	sp,sp,8
 4010770:	f800283a 	ret
 4010774:	10bffd44 	addi	r2,r2,-11
 4010778:	808a983a 	sll	r5,r16,r2
 401077c:	00800434 	movhi	r2,16
 4010780:	10bfffc4 	addi	r2,r2,-1
 4010784:	288a703a 	and	r5,r5,r2
 4010788:	0021883a 	mov	r16,zero
 401078c:	003ff206 	br	4010758 <__floatunsidf+0x58>

04010790 <__clzsi2>:
 4010790:	00bfffd4 	movui	r2,65535
 4010794:	11000436 	bltu	r2,r4,40107a8 <__clzsi2+0x18>
 4010798:	20804030 	cmpltui	r2,r4,256
 401079c:	10000e26 	beq	r2,zero,40107d8 <__clzsi2+0x48>
 40107a0:	01400804 	movi	r5,32
 40107a4:	00000406 	br	40107b8 <__clzsi2+0x28>
 40107a8:	00804034 	movhi	r2,256
 40107ac:	20800736 	bltu	r4,r2,40107cc <__clzsi2+0x3c>
 40107b0:	2008d63a 	srli	r4,r4,24
 40107b4:	01400204 	movi	r5,8
 40107b8:	00c10074 	movhi	r3,1025
 40107bc:	20c7883a 	add	r3,r4,r3
 40107c0:	188f1d03 	ldbu	r2,15476(r3)
 40107c4:	2885c83a 	sub	r2,r5,r2
 40107c8:	f800283a 	ret
 40107cc:	2008d43a 	srli	r4,r4,16
 40107d0:	01400404 	movi	r5,16
 40107d4:	003ff806 	br	40107b8 <__clzsi2+0x28>
 40107d8:	2008d23a 	srli	r4,r4,8
 40107dc:	01400604 	movi	r5,24
 40107e0:	003ff506 	br	40107b8 <__clzsi2+0x28>

040107e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 40107e4:	defffe04 	addi	sp,sp,-8
 40107e8:	dfc00115 	stw	ra,4(sp)
 40107ec:	df000015 	stw	fp,0(sp)
 40107f0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 40107f4:	d0a00917 	ldw	r2,-32732(gp)
 40107f8:	10000326 	beq	r2,zero,4010808 <alt_get_errno+0x24>
 40107fc:	d0a00917 	ldw	r2,-32732(gp)
 4010800:	103ee83a 	callr	r2
 4010804:	00000106 	br	401080c <alt_get_errno+0x28>
 4010808:	d0a71504 	addi	r2,gp,-25516
}
 401080c:	e037883a 	mov	sp,fp
 4010810:	dfc00117 	ldw	ra,4(sp)
 4010814:	df000017 	ldw	fp,0(sp)
 4010818:	dec00204 	addi	sp,sp,8
 401081c:	f800283a 	ret

04010820 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 4010820:	defffb04 	addi	sp,sp,-20
 4010824:	dfc00415 	stw	ra,16(sp)
 4010828:	df000315 	stw	fp,12(sp)
 401082c:	df000304 	addi	fp,sp,12
 4010830:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 4010834:	e0bffd17 	ldw	r2,-12(fp)
 4010838:	10000616 	blt	r2,zero,4010854 <close+0x34>
 401083c:	e0bffd17 	ldw	r2,-12(fp)
 4010840:	10c00324 	muli	r3,r2,12
 4010844:	00810074 	movhi	r2,1025
 4010848:	1091db04 	addi	r2,r2,18284
 401084c:	1885883a 	add	r2,r3,r2
 4010850:	00000106 	br	4010858 <close+0x38>
 4010854:	0005883a 	mov	r2,zero
 4010858:	e0bfff15 	stw	r2,-4(fp)

  if (fd)
 401085c:	e0bfff17 	ldw	r2,-4(fp)
 4010860:	10001926 	beq	r2,zero,40108c8 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 4010864:	e0bfff17 	ldw	r2,-4(fp)
 4010868:	10800017 	ldw	r2,0(r2)
 401086c:	10800417 	ldw	r2,16(r2)
 4010870:	10000626 	beq	r2,zero,401088c <close+0x6c>
 4010874:	e0bfff17 	ldw	r2,-4(fp)
 4010878:	10800017 	ldw	r2,0(r2)
 401087c:	10800417 	ldw	r2,16(r2)
 4010880:	e13fff17 	ldw	r4,-4(fp)
 4010884:	103ee83a 	callr	r2
 4010888:	00000106 	br	4010890 <close+0x70>
 401088c:	0005883a 	mov	r2,zero
 4010890:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 4010894:	e13ffd17 	ldw	r4,-12(fp)
 4010898:	40110a00 	call	40110a0 <alt_release_fd>
    if (rval < 0)
 401089c:	e0bffe17 	ldw	r2,-8(fp)
 40108a0:	1000070e 	bge	r2,zero,40108c0 <close+0xa0>
    {
      ALT_ERRNO = -rval;
 40108a4:	40107e40 	call	40107e4 <alt_get_errno>
 40108a8:	1007883a 	mov	r3,r2
 40108ac:	e0bffe17 	ldw	r2,-8(fp)
 40108b0:	0085c83a 	sub	r2,zero,r2
 40108b4:	18800015 	stw	r2,0(r3)
      return -1;
 40108b8:	00bfffc4 	movi	r2,-1
 40108bc:	00000706 	br	40108dc <close+0xbc>
    }
    return 0;
 40108c0:	0005883a 	mov	r2,zero
 40108c4:	00000506 	br	40108dc <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 40108c8:	40107e40 	call	40107e4 <alt_get_errno>
 40108cc:	1007883a 	mov	r3,r2
 40108d0:	00801444 	movi	r2,81
 40108d4:	18800015 	stw	r2,0(r3)
    return -1;
 40108d8:	00bfffc4 	movi	r2,-1
  }
}
 40108dc:	e037883a 	mov	sp,fp
 40108e0:	dfc00117 	ldw	ra,4(sp)
 40108e4:	df000017 	ldw	fp,0(sp)
 40108e8:	dec00204 	addi	sp,sp,8
 40108ec:	f800283a 	ret

040108f0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 40108f0:	defffc04 	addi	sp,sp,-16
 40108f4:	df000315 	stw	fp,12(sp)
 40108f8:	df000304 	addi	fp,sp,12
 40108fc:	e13fff15 	stw	r4,-4(fp)
 4010900:	e17ffe15 	stw	r5,-8(fp)
 4010904:	e1bffd15 	stw	r6,-12(fp)
  return len;
 4010908:	e0bffd17 	ldw	r2,-12(fp)
}
 401090c:	e037883a 	mov	sp,fp
 4010910:	df000017 	ldw	fp,0(sp)
 4010914:	dec00104 	addi	sp,sp,4
 4010918:	f800283a 	ret

0401091c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 401091c:	defffd04 	addi	sp,sp,-12
 4010920:	df000215 	stw	fp,8(sp)
 4010924:	df000204 	addi	fp,sp,8
 4010928:	e13ffe15 	stw	r4,-8(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 401092c:	0001883a 	nop
 4010930:	e0bffe17 	ldw	r2,-8(fp)
 4010934:	e0bfff15 	stw	r2,-4(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 4010938:	e0bfff17 	ldw	r2,-4(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 401093c:	10000226 	beq	r2,zero,4010948 <_exit+0x2c>
    ALT_SIM_FAIL();
 4010940:	002af070 	cmpltui	zero,zero,43969
  } else {
    ALT_SIM_PASS();
  }
#endif /* DEBUG_STUB */
}
 4010944:	00000106 	br	401094c <_exit+0x30>
    ALT_SIM_PASS();
 4010948:	002af0b0 	cmpltui	zero,zero,43970
}
 401094c:	0001883a 	nop
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 4010950:	003fff06 	br	4010950 <_exit+0x34>

04010954 <alt_get_errno>:
{
 4010954:	defffe04 	addi	sp,sp,-8
 4010958:	dfc00115 	stw	ra,4(sp)
 401095c:	df000015 	stw	fp,0(sp)
 4010960:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4010964:	d0a00917 	ldw	r2,-32732(gp)
 4010968:	10000326 	beq	r2,zero,4010978 <alt_get_errno+0x24>
 401096c:	d0a00917 	ldw	r2,-32732(gp)
 4010970:	103ee83a 	callr	r2
 4010974:	00000106 	br	401097c <alt_get_errno+0x28>
 4010978:	d0a71504 	addi	r2,gp,-25516
}
 401097c:	e037883a 	mov	sp,fp
 4010980:	dfc00117 	ldw	ra,4(sp)
 4010984:	df000017 	ldw	fp,0(sp)
 4010988:	dec00204 	addi	sp,sp,8
 401098c:	f800283a 	ret

04010990 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 4010990:	defffb04 	addi	sp,sp,-20
 4010994:	dfc00415 	stw	ra,16(sp)
 4010998:	df000315 	stw	fp,12(sp)
 401099c:	df000304 	addi	fp,sp,12
 40109a0:	e13ffe15 	stw	r4,-8(fp)
 40109a4:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 40109a8:	e0bffe17 	ldw	r2,-8(fp)
 40109ac:	10000616 	blt	r2,zero,40109c8 <fstat+0x38>
 40109b0:	e0bffe17 	ldw	r2,-8(fp)
 40109b4:	10c00324 	muli	r3,r2,12
 40109b8:	00810074 	movhi	r2,1025
 40109bc:	1091db04 	addi	r2,r2,18284
 40109c0:	1885883a 	add	r2,r3,r2
 40109c4:	00000106 	br	40109cc <fstat+0x3c>
 40109c8:	0005883a 	mov	r2,zero
 40109cc:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
 40109d0:	e0bfff17 	ldw	r2,-4(fp)
 40109d4:	10001026 	beq	r2,zero,4010a18 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 40109d8:	e0bfff17 	ldw	r2,-4(fp)
 40109dc:	10800017 	ldw	r2,0(r2)
 40109e0:	10800817 	ldw	r2,32(r2)
 40109e4:	10000726 	beq	r2,zero,4010a04 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 40109e8:	e0bfff17 	ldw	r2,-4(fp)
 40109ec:	10800017 	ldw	r2,0(r2)
 40109f0:	10800817 	ldw	r2,32(r2)
 40109f4:	e17ffd17 	ldw	r5,-12(fp)
 40109f8:	e13fff17 	ldw	r4,-4(fp)
 40109fc:	103ee83a 	callr	r2
 4010a00:	00000a06 	br	4010a2c <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 4010a04:	e0bffd17 	ldw	r2,-12(fp)
 4010a08:	00c80004 	movi	r3,8192
 4010a0c:	10c00115 	stw	r3,4(r2)
      return 0;
 4010a10:	0005883a 	mov	r2,zero
 4010a14:	00000506 	br	4010a2c <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4010a18:	40109540 	call	4010954 <alt_get_errno>
 4010a1c:	1007883a 	mov	r3,r2
 4010a20:	00801444 	movi	r2,81
 4010a24:	18800015 	stw	r2,0(r3)
    return -1;
 4010a28:	00bfffc4 	movi	r2,-1
  }
}
 4010a2c:	e037883a 	mov	sp,fp
 4010a30:	dfc00117 	ldw	ra,4(sp)
 4010a34:	df000017 	ldw	fp,0(sp)
 4010a38:	dec00204 	addi	sp,sp,8
 4010a3c:	f800283a 	ret

04010a40 <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
 4010a40:	deffff04 	addi	sp,sp,-4
 4010a44:	df000015 	stw	fp,0(sp)
 4010a48:	d839883a 	mov	fp,sp
  return 0;
 4010a4c:	0005883a 	mov	r2,zero
}
 4010a50:	e037883a 	mov	sp,fp
 4010a54:	df000017 	ldw	fp,0(sp)
 4010a58:	dec00104 	addi	sp,sp,4
 4010a5c:	f800283a 	ret

04010a60 <alt_get_errno>:
{
 4010a60:	defffe04 	addi	sp,sp,-8
 4010a64:	dfc00115 	stw	ra,4(sp)
 4010a68:	df000015 	stw	fp,0(sp)
 4010a6c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4010a70:	d0a00917 	ldw	r2,-32732(gp)
 4010a74:	10000326 	beq	r2,zero,4010a84 <alt_get_errno+0x24>
 4010a78:	d0a00917 	ldw	r2,-32732(gp)
 4010a7c:	103ee83a 	callr	r2
 4010a80:	00000106 	br	4010a88 <alt_get_errno+0x28>
 4010a84:	d0a71504 	addi	r2,gp,-25516
}
 4010a88:	e037883a 	mov	sp,fp
 4010a8c:	dfc00117 	ldw	ra,4(sp)
 4010a90:	df000017 	ldw	fp,0(sp)
 4010a94:	dec00204 	addi	sp,sp,8
 4010a98:	f800283a 	ret

04010a9c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 4010a9c:	deffea04 	addi	sp,sp,-88
 4010aa0:	dfc01515 	stw	ra,84(sp)
 4010aa4:	df001415 	stw	fp,80(sp)
 4010aa8:	df001404 	addi	fp,sp,80
 4010aac:	e13fec15 	stw	r4,-80(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4010ab0:	e0bfec17 	ldw	r2,-80(fp)
 4010ab4:	10000616 	blt	r2,zero,4010ad0 <isatty+0x34>
 4010ab8:	e0bfec17 	ldw	r2,-80(fp)
 4010abc:	10c00324 	muli	r3,r2,12
 4010ac0:	00810074 	movhi	r2,1025
 4010ac4:	1091db04 	addi	r2,r2,18284
 4010ac8:	1885883a 	add	r2,r3,r2
 4010acc:	00000106 	br	4010ad4 <isatty+0x38>
 4010ad0:	0005883a 	mov	r2,zero
 4010ad4:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
 4010ad8:	e0bfff17 	ldw	r2,-4(fp)
 4010adc:	10000e26 	beq	r2,zero,4010b18 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 4010ae0:	e0bfff17 	ldw	r2,-4(fp)
 4010ae4:	10800017 	ldw	r2,0(r2)
 4010ae8:	10800817 	ldw	r2,32(r2)
 4010aec:	1000021e 	bne	r2,zero,4010af8 <isatty+0x5c>
    {
      return 1;
 4010af0:	00800044 	movi	r2,1
 4010af4:	00000d06 	br	4010b2c <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 4010af8:	e0bfed04 	addi	r2,fp,-76
 4010afc:	100b883a 	mov	r5,r2
 4010b00:	e13fec17 	ldw	r4,-80(fp)
 4010b04:	40109900 	call	4010990 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 4010b08:	e0bfee17 	ldw	r2,-72(fp)
 4010b0c:	10880020 	cmpeqi	r2,r2,8192
 4010b10:	10803fcc 	andi	r2,r2,255
 4010b14:	00000506 	br	4010b2c <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4010b18:	4010a600 	call	4010a60 <alt_get_errno>
 4010b1c:	1007883a 	mov	r3,r2
 4010b20:	00801444 	movi	r2,81
 4010b24:	18800015 	stw	r2,0(r3)
    return 0;
 4010b28:	0005883a 	mov	r2,zero
  }
}
 4010b2c:	e037883a 	mov	sp,fp
 4010b30:	dfc00117 	ldw	ra,4(sp)
 4010b34:	df000017 	ldw	fp,0(sp)
 4010b38:	dec00204 	addi	sp,sp,8
 4010b3c:	f800283a 	ret

04010b40 <alt_get_errno>:
{
 4010b40:	defffe04 	addi	sp,sp,-8
 4010b44:	dfc00115 	stw	ra,4(sp)
 4010b48:	df000015 	stw	fp,0(sp)
 4010b4c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4010b50:	d0a00917 	ldw	r2,-32732(gp)
 4010b54:	10000326 	beq	r2,zero,4010b64 <alt_get_errno+0x24>
 4010b58:	d0a00917 	ldw	r2,-32732(gp)
 4010b5c:	103ee83a 	callr	r2
 4010b60:	00000106 	br	4010b68 <alt_get_errno+0x28>
 4010b64:	d0a71504 	addi	r2,gp,-25516
}
 4010b68:	e037883a 	mov	sp,fp
 4010b6c:	dfc00117 	ldw	ra,4(sp)
 4010b70:	df000017 	ldw	fp,0(sp)
 4010b74:	dec00204 	addi	sp,sp,8
 4010b78:	f800283a 	ret

04010b7c <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
 4010b7c:	defffb04 	addi	sp,sp,-20
 4010b80:	dfc00415 	stw	ra,16(sp)
 4010b84:	df000315 	stw	fp,12(sp)
 4010b88:	df000304 	addi	fp,sp,12
 4010b8c:	e13ffe15 	stw	r4,-8(fp)
 4010b90:	e17ffd15 	stw	r5,-12(fp)
  int status = 0;
 4010b94:	e03fff15 	stw	zero,-4(fp)

  if (pid <= 0)
 4010b98:	e0bffe17 	ldw	r2,-8(fp)
 4010b9c:	00802e16 	blt	zero,r2,4010c58 <kill+0xdc>
 4010ba0:	e0bffd17 	ldw	r2,-12(fp)
 4010ba4:	10800828 	cmpgeui	r2,r2,32
 4010ba8:	1000281e 	bne	r2,zero,4010c4c <kill+0xd0>
 4010bac:	e0bffd17 	ldw	r2,-12(fp)
 4010bb0:	100690ba 	slli	r3,r2,2
 4010bb4:	00810074 	movhi	r2,1025
 4010bb8:	1885883a 	add	r2,r3,r2
 4010bbc:	1082f117 	ldw	r2,3012(r2)
 4010bc0:	1000683a 	jmp	r2
 4010bc4:	04010c6c 	andhi	r16,zero,1073
 4010bc8:	04010c4c 	andi	r16,zero,1073
 4010bcc:	04010c4c 	andi	r16,zero,1073
 4010bd0:	04010c44 	movi	r16,1073
 4010bd4:	04010c44 	movi	r16,1073
 4010bd8:	04010c44 	movi	r16,1073
 4010bdc:	04010c44 	movi	r16,1073
 4010be0:	04010c4c 	andi	r16,zero,1073
 4010be4:	04010c44 	movi	r16,1073
 4010be8:	04010c44 	movi	r16,1073
 4010bec:	04010c44 	movi	r16,1073
 4010bf0:	04010c44 	movi	r16,1073
 4010bf4:	04010c44 	movi	r16,1073
 4010bf8:	04010c44 	movi	r16,1073
 4010bfc:	04010c44 	movi	r16,1073
 4010c00:	04010c44 	movi	r16,1073
 4010c04:	04010c6c 	andhi	r16,zero,1073
 4010c08:	04010c4c 	andi	r16,zero,1073
 4010c0c:	04010c4c 	andi	r16,zero,1073
 4010c10:	04010c4c 	andi	r16,zero,1073
 4010c14:	04010c6c 	andhi	r16,zero,1073
 4010c18:	04010c4c 	andi	r16,zero,1073
 4010c1c:	04010c4c 	andi	r16,zero,1073
 4010c20:	04010c44 	movi	r16,1073
 4010c24:	04010c44 	movi	r16,1073
 4010c28:	04010c44 	movi	r16,1073
 4010c2c:	04010c44 	movi	r16,1073
 4010c30:	04010c44 	movi	r16,1073
 4010c34:	04010c4c 	andi	r16,zero,1073
 4010c38:	04010c4c 	andi	r16,zero,1073
 4010c3c:	04010c44 	movi	r16,1073
 4010c40:	04010c44 	movi	r16,1073
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
 4010c44:	0009883a 	mov	r4,zero
 4010c48:	401091c0 	call	401091c <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
 4010c4c:	00800584 	movi	r2,22
 4010c50:	e0bfff15 	stw	r2,-4(fp)
 4010c54:	00000606 	br	4010c70 <kill+0xf4>
    }
  }

  else if (pid > 0)
 4010c58:	e0bffe17 	ldw	r2,-8(fp)
 4010c5c:	0080040e 	bge	zero,r2,4010c70 <kill+0xf4>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
 4010c60:	008000c4 	movi	r2,3
 4010c64:	e0bfff15 	stw	r2,-4(fp)
 4010c68:	00000106 	br	4010c70 <kill+0xf4>
      break;
 4010c6c:	0001883a 	nop
  }

  if (status)
 4010c70:	e0bfff17 	ldw	r2,-4(fp)
 4010c74:	10000626 	beq	r2,zero,4010c90 <kill+0x114>
  {
    ALT_ERRNO = status;
 4010c78:	4010b400 	call	4010b40 <alt_get_errno>
 4010c7c:	1007883a 	mov	r3,r2
 4010c80:	e0bfff17 	ldw	r2,-4(fp)
 4010c84:	18800015 	stw	r2,0(r3)
    return -1;
 4010c88:	00bfffc4 	movi	r2,-1
 4010c8c:	00000106 	br	4010c94 <kill+0x118>
  }

  return 0;
 4010c90:	0005883a 	mov	r2,zero
}
 4010c94:	e037883a 	mov	sp,fp
 4010c98:	dfc00117 	ldw	ra,4(sp)
 4010c9c:	df000017 	ldw	fp,0(sp)
 4010ca0:	dec00204 	addi	sp,sp,8
 4010ca4:	f800283a 	ret

04010ca8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 4010ca8:	defffc04 	addi	sp,sp,-16
 4010cac:	df000315 	stw	fp,12(sp)
 4010cb0:	df000304 	addi	fp,sp,12
 4010cb4:	e13fff15 	stw	r4,-4(fp)
 4010cb8:	e17ffe15 	stw	r5,-8(fp)
 4010cbc:	e1bffd15 	stw	r6,-12(fp)
  if (to != from)
 4010cc0:	e0fffe17 	ldw	r3,-8(fp)
 4010cc4:	e0bfff17 	ldw	r2,-4(fp)
 4010cc8:	18800c26 	beq	r3,r2,4010cfc <alt_load_section+0x54>
  {
    while( to != end )
 4010ccc:	00000806 	br	4010cf0 <alt_load_section+0x48>
    {
      *to++ = *from++;
 4010cd0:	e0ffff17 	ldw	r3,-4(fp)
 4010cd4:	18800104 	addi	r2,r3,4
 4010cd8:	e0bfff15 	stw	r2,-4(fp)
 4010cdc:	e0bffe17 	ldw	r2,-8(fp)
 4010ce0:	11000104 	addi	r4,r2,4
 4010ce4:	e13ffe15 	stw	r4,-8(fp)
 4010ce8:	18c00017 	ldw	r3,0(r3)
 4010cec:	10c00015 	stw	r3,0(r2)
    while( to != end )
 4010cf0:	e0fffe17 	ldw	r3,-8(fp)
 4010cf4:	e0bffd17 	ldw	r2,-12(fp)
 4010cf8:	18bff51e 	bne	r3,r2,4010cd0 <alt_load_section+0x28>
    }
  }
}
 4010cfc:	0001883a 	nop
 4010d00:	e037883a 	mov	sp,fp
 4010d04:	df000017 	ldw	fp,0(sp)
 4010d08:	dec00104 	addi	sp,sp,4
 4010d0c:	f800283a 	ret

04010d10 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 4010d10:	defffe04 	addi	sp,sp,-8
 4010d14:	dfc00115 	stw	ra,4(sp)
 4010d18:	df000015 	stw	fp,0(sp)
 4010d1c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 4010d20:	01810074 	movhi	r6,1025
 4010d24:	31966c04 	addi	r6,r6,22960
 4010d28:	01410074 	movhi	r5,1025
 4010d2c:	294f6b04 	addi	r5,r5,15788
 4010d30:	01010074 	movhi	r4,1025
 4010d34:	21166c04 	addi	r4,r4,22960
 4010d38:	4010ca80 	call	4010ca8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 4010d3c:	01810034 	movhi	r6,1024
 4010d40:	31808f04 	addi	r6,r6,572
 4010d44:	01410034 	movhi	r5,1024
 4010d48:	29400804 	addi	r5,r5,32
 4010d4c:	01010034 	movhi	r4,1024
 4010d50:	21000804 	addi	r4,r4,32
 4010d54:	4010ca80 	call	4010ca8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 4010d58:	01810074 	movhi	r6,1025
 4010d5c:	318f6b04 	addi	r6,r6,15788
 4010d60:	01410074 	movhi	r5,1025
 4010d64:	294d9804 	addi	r5,r5,13920
 4010d68:	01010074 	movhi	r4,1025
 4010d6c:	210d9804 	addi	r4,r4,13920
 4010d70:	4010ca80 	call	4010ca8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 4010d74:	40125b40 	call	40125b4 <alt_dcache_flush_all>
  alt_icache_flush_all();
 4010d78:	401283c0 	call	401283c <alt_icache_flush_all>
}
 4010d7c:	0001883a 	nop
 4010d80:	e037883a 	mov	sp,fp
 4010d84:	dfc00117 	ldw	ra,4(sp)
 4010d88:	df000017 	ldw	fp,0(sp)
 4010d8c:	dec00204 	addi	sp,sp,8
 4010d90:	f800283a 	ret

04010d94 <alt_get_errno>:
{
 4010d94:	defffe04 	addi	sp,sp,-8
 4010d98:	dfc00115 	stw	ra,4(sp)
 4010d9c:	df000015 	stw	fp,0(sp)
 4010da0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4010da4:	d0a00917 	ldw	r2,-32732(gp)
 4010da8:	10000326 	beq	r2,zero,4010db8 <alt_get_errno+0x24>
 4010dac:	d0a00917 	ldw	r2,-32732(gp)
 4010db0:	103ee83a 	callr	r2
 4010db4:	00000106 	br	4010dbc <alt_get_errno+0x28>
 4010db8:	d0a71504 	addi	r2,gp,-25516
}
 4010dbc:	e037883a 	mov	sp,fp
 4010dc0:	dfc00117 	ldw	ra,4(sp)
 4010dc4:	df000017 	ldw	fp,0(sp)
 4010dc8:	dec00204 	addi	sp,sp,8
 4010dcc:	f800283a 	ret

04010dd0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 4010dd0:	defff904 	addi	sp,sp,-28
 4010dd4:	dfc00615 	stw	ra,24(sp)
 4010dd8:	df000515 	stw	fp,20(sp)
 4010ddc:	df000504 	addi	fp,sp,20
 4010de0:	e13ffd15 	stw	r4,-12(fp)
 4010de4:	e17ffc15 	stw	r5,-16(fp)
 4010de8:	e1bffb15 	stw	r6,-20(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 4010dec:	e03fff15 	stw	zero,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4010df0:	e0bffd17 	ldw	r2,-12(fp)
 4010df4:	10000616 	blt	r2,zero,4010e10 <lseek+0x40>
 4010df8:	e0bffd17 	ldw	r2,-12(fp)
 4010dfc:	10c00324 	muli	r3,r2,12
 4010e00:	00810074 	movhi	r2,1025
 4010e04:	1091db04 	addi	r2,r2,18284
 4010e08:	1885883a 	add	r2,r3,r2
 4010e0c:	00000106 	br	4010e14 <lseek+0x44>
 4010e10:	0005883a 	mov	r2,zero
 4010e14:	e0bffe15 	stw	r2,-8(fp)
  
  if (fd) 
 4010e18:	e0bffe17 	ldw	r2,-8(fp)
 4010e1c:	10001026 	beq	r2,zero,4010e60 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 4010e20:	e0bffe17 	ldw	r2,-8(fp)
 4010e24:	10800017 	ldw	r2,0(r2)
 4010e28:	10800717 	ldw	r2,28(r2)
 4010e2c:	10000926 	beq	r2,zero,4010e54 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 4010e30:	e0bffe17 	ldw	r2,-8(fp)
 4010e34:	10800017 	ldw	r2,0(r2)
 4010e38:	10800717 	ldw	r2,28(r2)
 4010e3c:	e1bffb17 	ldw	r6,-20(fp)
 4010e40:	e17ffc17 	ldw	r5,-16(fp)
 4010e44:	e13ffe17 	ldw	r4,-8(fp)
 4010e48:	103ee83a 	callr	r2
 4010e4c:	e0bfff15 	stw	r2,-4(fp)
 4010e50:	00000506 	br	4010e68 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 4010e54:	00bfde84 	movi	r2,-134
 4010e58:	e0bfff15 	stw	r2,-4(fp)
 4010e5c:	00000206 	br	4010e68 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 4010e60:	00bfebc4 	movi	r2,-81
 4010e64:	e0bfff15 	stw	r2,-4(fp)
  }

  if (rc < 0)
 4010e68:	e0bfff17 	ldw	r2,-4(fp)
 4010e6c:	1000070e 	bge	r2,zero,4010e8c <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 4010e70:	4010d940 	call	4010d94 <alt_get_errno>
 4010e74:	1007883a 	mov	r3,r2
 4010e78:	e0bfff17 	ldw	r2,-4(fp)
 4010e7c:	0085c83a 	sub	r2,zero,r2
 4010e80:	18800015 	stw	r2,0(r3)
    rc = -1;
 4010e84:	00bfffc4 	movi	r2,-1
 4010e88:	e0bfff15 	stw	r2,-4(fp)
  }

  return rc;
 4010e8c:	e0bfff17 	ldw	r2,-4(fp)
}
 4010e90:	e037883a 	mov	sp,fp
 4010e94:	dfc00117 	ldw	ra,4(sp)
 4010e98:	df000017 	ldw	fp,0(sp)
 4010e9c:	dec00204 	addi	sp,sp,8
 4010ea0:	f800283a 	ret

04010ea4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 4010ea4:	defffd04 	addi	sp,sp,-12
 4010ea8:	dfc00215 	stw	ra,8(sp)
 4010eac:	df000115 	stw	fp,4(sp)
 4010eb0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 4010eb4:	0009883a 	mov	r4,zero
 4010eb8:	40113480 	call	4011348 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 4010ebc:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 4010ec0:	40113840 	call	4011384 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 4010ec4:	01810074 	movhi	r6,1025
 4010ec8:	318f6004 	addi	r6,r6,15744
 4010ecc:	01410074 	movhi	r5,1025
 4010ed0:	294f6004 	addi	r5,r5,15744
 4010ed4:	01010074 	movhi	r4,1025
 4010ed8:	210f6004 	addi	r4,r4,15744
 4010edc:	40129200 	call	4012920 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 4010ee0:	40126e40 	call	40126e4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 4010ee4:	01010074 	movhi	r4,1025
 4010ee8:	2109d204 	addi	r4,r4,10056
 4010eec:	40132040 	call	4013204 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 4010ef0:	d0a71617 	ldw	r2,-25512(gp)
 4010ef4:	d0e71717 	ldw	r3,-25508(gp)
 4010ef8:	d1271817 	ldw	r4,-25504(gp)
 4010efc:	200d883a 	mov	r6,r4
 4010f00:	180b883a 	mov	r5,r3
 4010f04:	1009883a 	mov	r4,r2
 4010f08:	40002c40 	call	40002c4 <main>
 4010f0c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 4010f10:	01000044 	movi	r4,1
 4010f14:	40108200 	call	4010820 <close>
  exit (result);
 4010f18:	e13fff17 	ldw	r4,-4(fp)
 4010f1c:	40132400 	call	4013240 <exit>

04010f20 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 4010f20:	defffe04 	addi	sp,sp,-8
 4010f24:	df000115 	stw	fp,4(sp)
 4010f28:	df000104 	addi	fp,sp,4
 4010f2c:	e13fff15 	stw	r4,-4(fp)
}
 4010f30:	0001883a 	nop
 4010f34:	e037883a 	mov	sp,fp
 4010f38:	df000017 	ldw	fp,0(sp)
 4010f3c:	dec00104 	addi	sp,sp,4
 4010f40:	f800283a 	ret

04010f44 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 4010f44:	defffe04 	addi	sp,sp,-8
 4010f48:	df000115 	stw	fp,4(sp)
 4010f4c:	df000104 	addi	fp,sp,4
 4010f50:	e13fff15 	stw	r4,-4(fp)
}
 4010f54:	0001883a 	nop
 4010f58:	e037883a 	mov	sp,fp
 4010f5c:	df000017 	ldw	fp,0(sp)
 4010f60:	dec00104 	addi	sp,sp,4
 4010f64:	f800283a 	ret

04010f68 <alt_get_errno>:
{
 4010f68:	defffe04 	addi	sp,sp,-8
 4010f6c:	dfc00115 	stw	ra,4(sp)
 4010f70:	df000015 	stw	fp,0(sp)
 4010f74:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4010f78:	d0a00917 	ldw	r2,-32732(gp)
 4010f7c:	10000326 	beq	r2,zero,4010f8c <alt_get_errno+0x24>
 4010f80:	d0a00917 	ldw	r2,-32732(gp)
 4010f84:	103ee83a 	callr	r2
 4010f88:	00000106 	br	4010f90 <alt_get_errno+0x28>
 4010f8c:	d0a71504 	addi	r2,gp,-25516
}
 4010f90:	e037883a 	mov	sp,fp
 4010f94:	dfc00117 	ldw	ra,4(sp)
 4010f98:	df000017 	ldw	fp,0(sp)
 4010f9c:	dec00204 	addi	sp,sp,8
 4010fa0:	f800283a 	ret

04010fa4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 4010fa4:	defff904 	addi	sp,sp,-28
 4010fa8:	dfc00615 	stw	ra,24(sp)
 4010fac:	df000515 	stw	fp,20(sp)
 4010fb0:	df000504 	addi	fp,sp,20
 4010fb4:	e13ffd15 	stw	r4,-12(fp)
 4010fb8:	e17ffc15 	stw	r5,-16(fp)
 4010fbc:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4010fc0:	e0bffd17 	ldw	r2,-12(fp)
 4010fc4:	10000616 	blt	r2,zero,4010fe0 <read+0x3c>
 4010fc8:	e0bffd17 	ldw	r2,-12(fp)
 4010fcc:	10c00324 	muli	r3,r2,12
 4010fd0:	00810074 	movhi	r2,1025
 4010fd4:	1091db04 	addi	r2,r2,18284
 4010fd8:	1885883a 	add	r2,r3,r2
 4010fdc:	00000106 	br	4010fe4 <read+0x40>
 4010fe0:	0005883a 	mov	r2,zero
 4010fe4:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
 4010fe8:	e0bfff17 	ldw	r2,-4(fp)
 4010fec:	10002226 	beq	r2,zero,4011078 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 4010ff0:	e0bfff17 	ldw	r2,-4(fp)
 4010ff4:	10800217 	ldw	r2,8(r2)
 4010ff8:	108000cc 	andi	r2,r2,3
 4010ffc:	10800060 	cmpeqi	r2,r2,1
 4011000:	1000181e 	bne	r2,zero,4011064 <read+0xc0>
        (fd->dev->read))
 4011004:	e0bfff17 	ldw	r2,-4(fp)
 4011008:	10800017 	ldw	r2,0(r2)
 401100c:	10800517 	ldw	r2,20(r2)
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 4011010:	10001426 	beq	r2,zero,4011064 <read+0xc0>
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 4011014:	e0bfff17 	ldw	r2,-4(fp)
 4011018:	10800017 	ldw	r2,0(r2)
 401101c:	10800517 	ldw	r2,20(r2)
 4011020:	e0fffb17 	ldw	r3,-20(fp)
 4011024:	180d883a 	mov	r6,r3
 4011028:	e17ffc17 	ldw	r5,-16(fp)
 401102c:	e13fff17 	ldw	r4,-4(fp)
 4011030:	103ee83a 	callr	r2
 4011034:	e0bffe15 	stw	r2,-8(fp)
 4011038:	e0bffe17 	ldw	r2,-8(fp)
 401103c:	1000070e 	bge	r2,zero,401105c <read+0xb8>
        {
          ALT_ERRNO = -rval;
 4011040:	4010f680 	call	4010f68 <alt_get_errno>
 4011044:	1007883a 	mov	r3,r2
 4011048:	e0bffe17 	ldw	r2,-8(fp)
 401104c:	0085c83a 	sub	r2,zero,r2
 4011050:	18800015 	stw	r2,0(r3)
          return -1;
 4011054:	00bfffc4 	movi	r2,-1
 4011058:	00000c06 	br	401108c <read+0xe8>
        }
        return rval;
 401105c:	e0bffe17 	ldw	r2,-8(fp)
 4011060:	00000a06 	br	401108c <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 4011064:	4010f680 	call	4010f68 <alt_get_errno>
 4011068:	1007883a 	mov	r3,r2
 401106c:	00800344 	movi	r2,13
 4011070:	18800015 	stw	r2,0(r3)
 4011074:	00000406 	br	4011088 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 4011078:	4010f680 	call	4010f68 <alt_get_errno>
 401107c:	1007883a 	mov	r3,r2
 4011080:	00801444 	movi	r2,81
 4011084:	18800015 	stw	r2,0(r3)
  }
  return -1;
 4011088:	00bfffc4 	movi	r2,-1
}
 401108c:	e037883a 	mov	sp,fp
 4011090:	dfc00117 	ldw	ra,4(sp)
 4011094:	df000017 	ldw	fp,0(sp)
 4011098:	dec00204 	addi	sp,sp,8
 401109c:	f800283a 	ret

040110a0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 40110a0:	defffe04 	addi	sp,sp,-8
 40110a4:	df000115 	stw	fp,4(sp)
 40110a8:	df000104 	addi	fp,sp,4
 40110ac:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 40110b0:	e0bfff17 	ldw	r2,-4(fp)
 40110b4:	108000d0 	cmplti	r2,r2,3
 40110b8:	10000a1e 	bne	r2,zero,40110e4 <alt_release_fd+0x44>
  {
    alt_fd_list[fd].fd_flags = 0;
 40110bc:	e0bfff17 	ldw	r2,-4(fp)
 40110c0:	10c00324 	muli	r3,r2,12
 40110c4:	00810074 	movhi	r2,1025
 40110c8:	1885883a 	add	r2,r3,r2
 40110cc:	1011dd15 	stw	zero,18292(r2)
    alt_fd_list[fd].dev      = 0;
 40110d0:	e0bfff17 	ldw	r2,-4(fp)
 40110d4:	10c00324 	muli	r3,r2,12
 40110d8:	00810074 	movhi	r2,1025
 40110dc:	1885883a 	add	r2,r3,r2
 40110e0:	1011db15 	stw	zero,18284(r2)
  }
}
 40110e4:	0001883a 	nop
 40110e8:	e037883a 	mov	sp,fp
 40110ec:	df000017 	ldw	fp,0(sp)
 40110f0:	dec00104 	addi	sp,sp,4
 40110f4:	f800283a 	ret

040110f8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 40110f8:	defff904 	addi	sp,sp,-28
 40110fc:	df000615 	stw	fp,24(sp)
 4011100:	df000604 	addi	fp,sp,24
 4011104:	e13ffa15 	stw	r4,-24(fp)
  NIOS2_READ_STATUS (context);
 4011108:	0005303a 	rdctl	r2,status
 401110c:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4011110:	e0fffd17 	ldw	r3,-12(fp)
 4011114:	00bfff84 	movi	r2,-2
 4011118:	1884703a 	and	r2,r3,r2
 401111c:	1001703a 	wrctl	status,r2
  return context;
 4011120:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 4011124:	e0bfff15 	stw	r2,-4(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 4011128:	d0a00a17 	ldw	r2,-32728(gp)
 401112c:	10c000c4 	addi	r3,r2,3
 4011130:	00bfff04 	movi	r2,-4
 4011134:	1884703a 	and	r2,r3,r2
 4011138:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 401113c:	d0e00a17 	ldw	r3,-32728(gp)
 4011140:	e0bffa17 	ldw	r2,-24(fp)
 4011144:	1887883a 	add	r3,r3,r2
 4011148:	00820034 	movhi	r2,2048
 401114c:	10800004 	addi	r2,r2,0
 4011150:	10c0072e 	bgeu	r2,r3,4011170 <sbrk+0x78>
 4011154:	e0bfff17 	ldw	r2,-4(fp)
 4011158:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 401115c:	e0bffc17 	ldw	r2,-16(fp)
 4011160:	1001703a 	wrctl	status,r2
}
 4011164:	0001883a 	nop
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 4011168:	00bfffc4 	movi	r2,-1
 401116c:	00000c06 	br	40111a0 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
 4011170:	d0a00a17 	ldw	r2,-32728(gp)
 4011174:	e0bffe15 	stw	r2,-8(fp)
  heap_end += incr; 
 4011178:	d0e00a17 	ldw	r3,-32728(gp)
 401117c:	e0bffa17 	ldw	r2,-24(fp)
 4011180:	1885883a 	add	r2,r3,r2
 4011184:	d0a00a15 	stw	r2,-32728(gp)
 4011188:	e0bfff17 	ldw	r2,-4(fp)
 401118c:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
 4011190:	e0bffb17 	ldw	r2,-20(fp)
 4011194:	1001703a 	wrctl	status,r2
}
 4011198:	0001883a 	nop

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 401119c:	e0bffe17 	ldw	r2,-8(fp)
} 
 40111a0:	e037883a 	mov	sp,fp
 40111a4:	df000017 	ldw	fp,0(sp)
 40111a8:	dec00104 	addi	sp,sp,4
 40111ac:	f800283a 	ret

040111b0 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 40111b0:	defffd04 	addi	sp,sp,-12
 40111b4:	dfc00215 	stw	ra,8(sp)
 40111b8:	df000115 	stw	fp,4(sp)
 40111bc:	df000104 	addi	fp,sp,4
 40111c0:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 40111c4:	e13fff17 	ldw	r4,-4(fp)
 40111c8:	401245c0 	call	401245c <alt_busy_sleep>
}
 40111cc:	e037883a 	mov	sp,fp
 40111d0:	dfc00117 	ldw	ra,4(sp)
 40111d4:	df000017 	ldw	fp,0(sp)
 40111d8:	dec00204 	addi	sp,sp,8
 40111dc:	f800283a 	ret

040111e0 <alt_get_errno>:
{
 40111e0:	defffe04 	addi	sp,sp,-8
 40111e4:	dfc00115 	stw	ra,4(sp)
 40111e8:	df000015 	stw	fp,0(sp)
 40111ec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 40111f0:	d0a00917 	ldw	r2,-32732(gp)
 40111f4:	10000326 	beq	r2,zero,4011204 <alt_get_errno+0x24>
 40111f8:	d0a00917 	ldw	r2,-32732(gp)
 40111fc:	103ee83a 	callr	r2
 4011200:	00000106 	br	4011208 <alt_get_errno+0x28>
 4011204:	d0a71504 	addi	r2,gp,-25516
}
 4011208:	e037883a 	mov	sp,fp
 401120c:	dfc00117 	ldw	ra,4(sp)
 4011210:	df000017 	ldw	fp,0(sp)
 4011214:	dec00204 	addi	sp,sp,8
 4011218:	f800283a 	ret

0401121c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 401121c:	defff904 	addi	sp,sp,-28
 4011220:	dfc00615 	stw	ra,24(sp)
 4011224:	df000515 	stw	fp,20(sp)
 4011228:	df000504 	addi	fp,sp,20
 401122c:	e13ffd15 	stw	r4,-12(fp)
 4011230:	e17ffc15 	stw	r5,-16(fp)
 4011234:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4011238:	e0bffd17 	ldw	r2,-12(fp)
 401123c:	10000616 	blt	r2,zero,4011258 <write+0x3c>
 4011240:	e0bffd17 	ldw	r2,-12(fp)
 4011244:	10c00324 	muli	r3,r2,12
 4011248:	00810074 	movhi	r2,1025
 401124c:	1091db04 	addi	r2,r2,18284
 4011250:	1885883a 	add	r2,r3,r2
 4011254:	00000106 	br	401125c <write+0x40>
 4011258:	0005883a 	mov	r2,zero
 401125c:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
 4011260:	e0bfff17 	ldw	r2,-4(fp)
 4011264:	10002126 	beq	r2,zero,40112ec <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 4011268:	e0bfff17 	ldw	r2,-4(fp)
 401126c:	10800217 	ldw	r2,8(r2)
 4011270:	108000cc 	andi	r2,r2,3
 4011274:	10001826 	beq	r2,zero,40112d8 <write+0xbc>
 4011278:	e0bfff17 	ldw	r2,-4(fp)
 401127c:	10800017 	ldw	r2,0(r2)
 4011280:	10800617 	ldw	r2,24(r2)
 4011284:	10001426 	beq	r2,zero,40112d8 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 4011288:	e0bfff17 	ldw	r2,-4(fp)
 401128c:	10800017 	ldw	r2,0(r2)
 4011290:	10800617 	ldw	r2,24(r2)
 4011294:	e0fffb17 	ldw	r3,-20(fp)
 4011298:	180d883a 	mov	r6,r3
 401129c:	e17ffc17 	ldw	r5,-16(fp)
 40112a0:	e13fff17 	ldw	r4,-4(fp)
 40112a4:	103ee83a 	callr	r2
 40112a8:	e0bffe15 	stw	r2,-8(fp)
 40112ac:	e0bffe17 	ldw	r2,-8(fp)
 40112b0:	1000070e 	bge	r2,zero,40112d0 <write+0xb4>
      {
        ALT_ERRNO = -rval;
 40112b4:	40111e00 	call	40111e0 <alt_get_errno>
 40112b8:	1007883a 	mov	r3,r2
 40112bc:	e0bffe17 	ldw	r2,-8(fp)
 40112c0:	0085c83a 	sub	r2,zero,r2
 40112c4:	18800015 	stw	r2,0(r3)
        return -1;
 40112c8:	00bfffc4 	movi	r2,-1
 40112cc:	00000c06 	br	4011300 <write+0xe4>
      }
      return rval;
 40112d0:	e0bffe17 	ldw	r2,-8(fp)
 40112d4:	00000a06 	br	4011300 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 40112d8:	40111e00 	call	40111e0 <alt_get_errno>
 40112dc:	1007883a 	mov	r3,r2
 40112e0:	00800344 	movi	r2,13
 40112e4:	18800015 	stw	r2,0(r3)
 40112e8:	00000406 	br	40112fc <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 40112ec:	40111e00 	call	40111e0 <alt_get_errno>
 40112f0:	1007883a 	mov	r3,r2
 40112f4:	00801444 	movi	r2,81
 40112f8:	18800015 	stw	r2,0(r3)
  }
  return -1;
 40112fc:	00bfffc4 	movi	r2,-1
}
 4011300:	e037883a 	mov	sp,fp
 4011304:	dfc00117 	ldw	ra,4(sp)
 4011308:	df000017 	ldw	fp,0(sp)
 401130c:	dec00204 	addi	sp,sp,8
 4011310:	f800283a 	ret

04011314 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 4011314:	defffd04 	addi	sp,sp,-12
 4011318:	dfc00215 	stw	ra,8(sp)
 401131c:	df000115 	stw	fp,4(sp)
 4011320:	df000104 	addi	fp,sp,4
 4011324:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 4011328:	d1600604 	addi	r5,gp,-32744
 401132c:	e13fff17 	ldw	r4,-4(fp)
 4011330:	401263c0 	call	401263c <alt_dev_llist_insert>
}
 4011334:	e037883a 	mov	sp,fp
 4011338:	dfc00117 	ldw	ra,4(sp)
 401133c:	df000017 	ldw	fp,0(sp)
 4011340:	dec00204 	addi	sp,sp,8
 4011344:	f800283a 	ret

04011348 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 4011348:	defffd04 	addi	sp,sp,-12
 401134c:	dfc00215 	stw	ra,8(sp)
 4011350:	df000115 	stw	fp,4(sp)
 4011354:	df000104 	addi	fp,sp,4
 4011358:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_CPU, nios2_cpu);
 401135c:	4012f100 	call	4012f10 <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 4011360:	00800044 	movi	r2,1
 4011364:	1001703a 	wrctl	status,r2
}
 4011368:	0001883a 	nop
    alt_irq_cpu_enable_interrupts();
}
 401136c:	0001883a 	nop
 4011370:	e037883a 	mov	sp,fp
 4011374:	dfc00117 	ldw	ra,4(sp)
 4011378:	df000017 	ldw	fp,0(sp)
 401137c:	dec00204 	addi	sp,sp,8
 4011380:	f800283a 	ret

04011384 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 4011384:	defffe04 	addi	sp,sp,-8
 4011388:	dfc00115 	stw	ra,4(sp)
 401138c:	df000015 	stw	fp,0(sp)
 4011390:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK, sys_clk);
 4011394:	01c0fa04 	movi	r7,1000
 4011398:	01800084 	movi	r6,2
 401139c:	000b883a 	mov	r5,zero
 40113a0:	01020034 	movhi	r4,2048
 40113a4:	21041804 	addi	r4,r4,4192
 40113a8:	4011ee00 	call	4011ee0 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_TIMER_INIT ( TIMER_2, timer_2);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG, jtag);
 40113ac:	000d883a 	mov	r6,zero
 40113b0:	000b883a 	mov	r5,zero
 40113b4:	01010074 	movhi	r4,1025
 40113b8:	21124504 	addi	r4,r4,18708
 40113bc:	40115580 	call	4011558 <altera_avalon_jtag_uart_init>
 40113c0:	01010074 	movhi	r4,1025
 40113c4:	21123b04 	addi	r4,r4,18668
 40113c8:	40113140 	call	4011314 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( ESP32_SPI, esp32_spi);
 40113cc:	0001883a 	nop
    ALTERA_UP_AVALON_ACCELEROMETER_SPI_INIT ( ACCELEROMETER, accelerometer);
 40113d0:	01010074 	movhi	r4,1025
 40113d4:	21165304 	addi	r4,r4,22860
 40113d8:	40113140 	call	4011314 <alt_dev_reg>
}
 40113dc:	0001883a 	nop
 40113e0:	e037883a 	mov	sp,fp
 40113e4:	dfc00117 	ldw	ra,4(sp)
 40113e8:	df000017 	ldw	fp,0(sp)
 40113ec:	dec00204 	addi	sp,sp,8
 40113f0:	f800283a 	ret

040113f4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 40113f4:	defffa04 	addi	sp,sp,-24
 40113f8:	dfc00515 	stw	ra,20(sp)
 40113fc:	df000415 	stw	fp,16(sp)
 4011400:	df000404 	addi	fp,sp,16
 4011404:	e13ffe15 	stw	r4,-8(fp)
 4011408:	e17ffd15 	stw	r5,-12(fp)
 401140c:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4011410:	e0bffe17 	ldw	r2,-8(fp)
 4011414:	10800017 	ldw	r2,0(r2)
 4011418:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 401141c:	e0bfff17 	ldw	r2,-4(fp)
 4011420:	10c00a04 	addi	r3,r2,40
 4011424:	e0bffe17 	ldw	r2,-8(fp)
 4011428:	10800217 	ldw	r2,8(r2)
 401142c:	100f883a 	mov	r7,r2
 4011430:	e1bffc17 	ldw	r6,-16(fp)
 4011434:	e17ffd17 	ldw	r5,-12(fp)
 4011438:	1809883a 	mov	r4,r3
 401143c:	4011a180 	call	4011a18 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 4011440:	e037883a 	mov	sp,fp
 4011444:	dfc00117 	ldw	ra,4(sp)
 4011448:	df000017 	ldw	fp,0(sp)
 401144c:	dec00204 	addi	sp,sp,8
 4011450:	f800283a 	ret

04011454 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 4011454:	defffa04 	addi	sp,sp,-24
 4011458:	dfc00515 	stw	ra,20(sp)
 401145c:	df000415 	stw	fp,16(sp)
 4011460:	df000404 	addi	fp,sp,16
 4011464:	e13ffe15 	stw	r4,-8(fp)
 4011468:	e17ffd15 	stw	r5,-12(fp)
 401146c:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4011470:	e0bffe17 	ldw	r2,-8(fp)
 4011474:	10800017 	ldw	r2,0(r2)
 4011478:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 401147c:	e0bfff17 	ldw	r2,-4(fp)
 4011480:	10c00a04 	addi	r3,r2,40
 4011484:	e0bffe17 	ldw	r2,-8(fp)
 4011488:	10800217 	ldw	r2,8(r2)
 401148c:	100f883a 	mov	r7,r2
 4011490:	e1bffc17 	ldw	r6,-16(fp)
 4011494:	e17ffd17 	ldw	r5,-12(fp)
 4011498:	1809883a 	mov	r4,r3
 401149c:	4011c380 	call	4011c38 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 40114a0:	e037883a 	mov	sp,fp
 40114a4:	dfc00117 	ldw	ra,4(sp)
 40114a8:	df000017 	ldw	fp,0(sp)
 40114ac:	dec00204 	addi	sp,sp,8
 40114b0:	f800283a 	ret

040114b4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 40114b4:	defffc04 	addi	sp,sp,-16
 40114b8:	dfc00315 	stw	ra,12(sp)
 40114bc:	df000215 	stw	fp,8(sp)
 40114c0:	df000204 	addi	fp,sp,8
 40114c4:	e13ffe15 	stw	r4,-8(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 40114c8:	e0bffe17 	ldw	r2,-8(fp)
 40114cc:	10800017 	ldw	r2,0(r2)
 40114d0:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 40114d4:	e0bfff17 	ldw	r2,-4(fp)
 40114d8:	10c00a04 	addi	r3,r2,40
 40114dc:	e0bffe17 	ldw	r2,-8(fp)
 40114e0:	10800217 	ldw	r2,8(r2)
 40114e4:	100b883a 	mov	r5,r2
 40114e8:	1809883a 	mov	r4,r3
 40114ec:	40118bc0 	call	40118bc <altera_avalon_jtag_uart_close>
}
 40114f0:	e037883a 	mov	sp,fp
 40114f4:	dfc00117 	ldw	ra,4(sp)
 40114f8:	df000017 	ldw	fp,0(sp)
 40114fc:	dec00204 	addi	sp,sp,8
 4011500:	f800283a 	ret

04011504 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 4011504:	defffa04 	addi	sp,sp,-24
 4011508:	dfc00515 	stw	ra,20(sp)
 401150c:	df000415 	stw	fp,16(sp)
 4011510:	df000404 	addi	fp,sp,16
 4011514:	e13ffe15 	stw	r4,-8(fp)
 4011518:	e17ffd15 	stw	r5,-12(fp)
 401151c:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 4011520:	e0bffe17 	ldw	r2,-8(fp)
 4011524:	10800017 	ldw	r2,0(r2)
 4011528:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 401152c:	e0bfff17 	ldw	r2,-4(fp)
 4011530:	10800a04 	addi	r2,r2,40
 4011534:	e1bffc17 	ldw	r6,-16(fp)
 4011538:	e17ffd17 	ldw	r5,-12(fp)
 401153c:	1009883a 	mov	r4,r2
 4011540:	40119240 	call	4011924 <altera_avalon_jtag_uart_ioctl>
}
 4011544:	e037883a 	mov	sp,fp
 4011548:	dfc00117 	ldw	ra,4(sp)
 401154c:	df000017 	ldw	fp,0(sp)
 4011550:	dec00204 	addi	sp,sp,8
 4011554:	f800283a 	ret

04011558 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 4011558:	defffb04 	addi	sp,sp,-20
 401155c:	dfc00415 	stw	ra,16(sp)
 4011560:	df000315 	stw	fp,12(sp)
 4011564:	df000304 	addi	fp,sp,12
 4011568:	e13fff15 	stw	r4,-4(fp)
 401156c:	e17ffe15 	stw	r5,-8(fp)
 4011570:	e1bffd15 	stw	r6,-12(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4011574:	e0bfff17 	ldw	r2,-4(fp)
 4011578:	00c00044 	movi	r3,1
 401157c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 4011580:	e0bfff17 	ldw	r2,-4(fp)
 4011584:	10800017 	ldw	r2,0(r2)
 4011588:	10800104 	addi	r2,r2,4
 401158c:	1007883a 	mov	r3,r2
 4011590:	e0bfff17 	ldw	r2,-4(fp)
 4011594:	10800817 	ldw	r2,32(r2)
 4011598:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
 401159c:	e0bffd17 	ldw	r2,-12(fp)
 40115a0:	01810074 	movhi	r6,1025
 40115a4:	31858304 	addi	r6,r6,5644
 40115a8:	e17fff17 	ldw	r5,-4(fp)
 40115ac:	1009883a 	mov	r4,r2
 40115b0:	401299c0 	call	401299c <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 40115b4:	e0bfff17 	ldw	r2,-4(fp)
 40115b8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 40115bc:	e0bfff17 	ldw	r2,-4(fp)
 40115c0:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 40115c4:	d0e71a17 	ldw	r3,-25496(gp)
 40115c8:	e1ffff17 	ldw	r7,-4(fp)
 40115cc:	01810074 	movhi	r6,1025
 40115d0:	31860704 	addi	r6,r6,6172
 40115d4:	180b883a 	mov	r5,r3
 40115d8:	1009883a 	mov	r4,r2
 40115dc:	40123280 	call	4012328 <alt_alarm_start>
 40115e0:	1000040e 	bge	r2,zero,40115f4 <altera_avalon_jtag_uart_init+0x9c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 40115e4:	e0ffff17 	ldw	r3,-4(fp)
 40115e8:	00a00034 	movhi	r2,32768
 40115ec:	10bfffc4 	addi	r2,r2,-1
 40115f0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 40115f4:	0001883a 	nop
 40115f8:	e037883a 	mov	sp,fp
 40115fc:	dfc00117 	ldw	ra,4(sp)
 4011600:	df000017 	ldw	fp,0(sp)
 4011604:	dec00204 	addi	sp,sp,8
 4011608:	f800283a 	ret

0401160c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 401160c:	defff704 	addi	sp,sp,-36
 4011610:	df000815 	stw	fp,32(sp)
 4011614:	df000804 	addi	fp,sp,32
 4011618:	e13ff915 	stw	r4,-28(fp)
 401161c:	e17ff815 	stw	r5,-32(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 4011620:	e0bff917 	ldw	r2,-28(fp)
 4011624:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
 4011628:	e0bffd17 	ldw	r2,-12(fp)
 401162c:	10800017 	ldw	r2,0(r2)
 4011630:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4011634:	e0bffc17 	ldw	r2,-16(fp)
 4011638:	10800104 	addi	r2,r2,4
 401163c:	10800037 	ldwio	r2,0(r2)
 4011640:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 4011644:	e0bffb17 	ldw	r2,-20(fp)
 4011648:	1080c00c 	andi	r2,r2,768
 401164c:	10006d26 	beq	r2,zero,4011804 <altera_avalon_jtag_uart_irq+0x1f8>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 4011650:	e0bffb17 	ldw	r2,-20(fp)
 4011654:	1080400c 	andi	r2,r2,256
 4011658:	10003526 	beq	r2,zero,4011730 <altera_avalon_jtag_uart_irq+0x124>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 401165c:	00800074 	movhi	r2,1
 4011660:	e0bfff15 	stw	r2,-4(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4011664:	e0bffd17 	ldw	r2,-12(fp)
 4011668:	10800a17 	ldw	r2,40(r2)
 401166c:	10800044 	addi	r2,r2,1
 4011670:	1081ffcc 	andi	r2,r2,2047
 4011674:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
 4011678:	e0bffd17 	ldw	r2,-12(fp)
 401167c:	10800b17 	ldw	r2,44(r2)
 4011680:	e0fffa17 	ldw	r3,-24(fp)
 4011684:	18801526 	beq	r3,r2,40116dc <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 4011688:	e0bffc17 	ldw	r2,-16(fp)
 401168c:	10800037 	ldwio	r2,0(r2)
 4011690:	e0bfff15 	stw	r2,-4(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 4011694:	e0bfff17 	ldw	r2,-4(fp)
 4011698:	10a0000c 	andi	r2,r2,32768
 401169c:	10001126 	beq	r2,zero,40116e4 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 40116a0:	e0bffd17 	ldw	r2,-12(fp)
 40116a4:	10800a17 	ldw	r2,40(r2)
 40116a8:	e0ffff17 	ldw	r3,-4(fp)
 40116ac:	1809883a 	mov	r4,r3
 40116b0:	e0fffd17 	ldw	r3,-12(fp)
 40116b4:	1885883a 	add	r2,r3,r2
 40116b8:	11000e05 	stb	r4,56(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 40116bc:	e0bffd17 	ldw	r2,-12(fp)
 40116c0:	10800a17 	ldw	r2,40(r2)
 40116c4:	10800044 	addi	r2,r2,1
 40116c8:	10c1ffcc 	andi	r3,r2,2047
 40116cc:	e0bffd17 	ldw	r2,-12(fp)
 40116d0:	10c00a15 	stw	r3,40(r2)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
 40116d4:	0001883a 	nop
      {
 40116d8:	003fe206 	br	4011664 <altera_avalon_jtag_uart_irq+0x58>
          break;
 40116dc:	0001883a 	nop
 40116e0:	00000106 	br	40116e8 <altera_avalon_jtag_uart_irq+0xdc>
          break;
 40116e4:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 40116e8:	e0bfff17 	ldw	r2,-4(fp)
 40116ec:	10bfffec 	andhi	r2,r2,65535
 40116f0:	10000f26 	beq	r2,zero,4011730 <altera_avalon_jtag_uart_irq+0x124>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 40116f4:	e0bffd17 	ldw	r2,-12(fp)
 40116f8:	10c00817 	ldw	r3,32(r2)
 40116fc:	00bfff84 	movi	r2,-2
 4011700:	1886703a 	and	r3,r3,r2
 4011704:	e0bffd17 	ldw	r2,-12(fp)
 4011708:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 401170c:	e0bffc17 	ldw	r2,-16(fp)
 4011710:	10800104 	addi	r2,r2,4
 4011714:	1007883a 	mov	r3,r2
 4011718:	e0bffd17 	ldw	r2,-12(fp)
 401171c:	10800817 	ldw	r2,32(r2)
 4011720:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4011724:	e0bffc17 	ldw	r2,-16(fp)
 4011728:	10800104 	addi	r2,r2,4
 401172c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 4011730:	e0bffb17 	ldw	r2,-20(fp)
 4011734:	1080800c 	andi	r2,r2,512
 4011738:	103fbe26 	beq	r2,zero,4011634 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 401173c:	e0bffb17 	ldw	r2,-20(fp)
 4011740:	1004d43a 	srli	r2,r2,16
 4011744:	e0bffe15 	stw	r2,-8(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 4011748:	00001406 	br	401179c <altera_avalon_jtag_uart_irq+0x190>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 401174c:	e0bffc17 	ldw	r2,-16(fp)
 4011750:	e0fffd17 	ldw	r3,-12(fp)
 4011754:	18c00d17 	ldw	r3,52(r3)
 4011758:	e13ffd17 	ldw	r4,-12(fp)
 401175c:	20c7883a 	add	r3,r4,r3
 4011760:	18c20e03 	ldbu	r3,2104(r3)
 4011764:	18c03fcc 	andi	r3,r3,255
 4011768:	18c0201c 	xori	r3,r3,128
 401176c:	18ffe004 	addi	r3,r3,-128
 4011770:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4011774:	e0bffd17 	ldw	r2,-12(fp)
 4011778:	10800d17 	ldw	r2,52(r2)
 401177c:	10800044 	addi	r2,r2,1
 4011780:	10c1ffcc 	andi	r3,r2,2047
 4011784:	e0bffd17 	ldw	r2,-12(fp)
 4011788:	10c00d15 	stw	r3,52(r2)
 401178c:	0001883a 	nop

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 4011790:	e0bffe17 	ldw	r2,-8(fp)
 4011794:	10bfffc4 	addi	r2,r2,-1
 4011798:	e0bffe15 	stw	r2,-8(fp)
      while (space > 0 && sp->tx_out != sp->tx_in)
 401179c:	e0bffe17 	ldw	r2,-8(fp)
 40117a0:	10000526 	beq	r2,zero,40117b8 <altera_avalon_jtag_uart_irq+0x1ac>
 40117a4:	e0bffd17 	ldw	r2,-12(fp)
 40117a8:	10c00d17 	ldw	r3,52(r2)
 40117ac:	e0bffd17 	ldw	r2,-12(fp)
 40117b0:	10800c17 	ldw	r2,48(r2)
 40117b4:	18bfe51e 	bne	r3,r2,401174c <altera_avalon_jtag_uart_irq+0x140>
      }

      if (space > 0)
 40117b8:	e0bffe17 	ldw	r2,-8(fp)
 40117bc:	103f9d26 	beq	r2,zero,4011634 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 40117c0:	e0bffd17 	ldw	r2,-12(fp)
 40117c4:	10c00817 	ldw	r3,32(r2)
 40117c8:	00bfff44 	movi	r2,-3
 40117cc:	1886703a 	and	r3,r3,r2
 40117d0:	e0bffd17 	ldw	r2,-12(fp)
 40117d4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 40117d8:	e0bffd17 	ldw	r2,-12(fp)
 40117dc:	10800017 	ldw	r2,0(r2)
 40117e0:	10800104 	addi	r2,r2,4
 40117e4:	1007883a 	mov	r3,r2
 40117e8:	e0bffd17 	ldw	r2,-12(fp)
 40117ec:	10800817 	ldw	r2,32(r2)
 40117f0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 40117f4:	e0bffc17 	ldw	r2,-16(fp)
 40117f8:	10800104 	addi	r2,r2,4
 40117fc:	10800037 	ldwio	r2,0(r2)
  {
 4011800:	003f8c06 	br	4011634 <altera_avalon_jtag_uart_irq+0x28>
      break;
 4011804:	0001883a 	nop
      }
    }
  }
}
 4011808:	0001883a 	nop
 401180c:	e037883a 	mov	sp,fp
 4011810:	df000017 	ldw	fp,0(sp)
 4011814:	dec00104 	addi	sp,sp,4
 4011818:	f800283a 	ret

0401181c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 401181c:	defffc04 	addi	sp,sp,-16
 4011820:	df000315 	stw	fp,12(sp)
 4011824:	df000304 	addi	fp,sp,12
 4011828:	e13ffd15 	stw	r4,-12(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 401182c:	e0bffd17 	ldw	r2,-12(fp)
 4011830:	e0bfff15 	stw	r2,-4(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 4011834:	e0bfff17 	ldw	r2,-4(fp)
 4011838:	10800017 	ldw	r2,0(r2)
 401183c:	10800104 	addi	r2,r2,4
 4011840:	10800037 	ldwio	r2,0(r2)
 4011844:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 4011848:	e0bffe17 	ldw	r2,-8(fp)
 401184c:	1081000c 	andi	r2,r2,1024
 4011850:	10000b26 	beq	r2,zero,4011880 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 4011854:	e0bfff17 	ldw	r2,-4(fp)
 4011858:	10800017 	ldw	r2,0(r2)
 401185c:	10800104 	addi	r2,r2,4
 4011860:	1007883a 	mov	r3,r2
 4011864:	e0bfff17 	ldw	r2,-4(fp)
 4011868:	10800817 	ldw	r2,32(r2)
 401186c:	10810014 	ori	r2,r2,1024
 4011870:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 4011874:	e0bfff17 	ldw	r2,-4(fp)
 4011878:	10000915 	stw	zero,36(r2)
 401187c:	00000a06 	br	40118a8 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 4011880:	e0bfff17 	ldw	r2,-4(fp)
 4011884:	10c00917 	ldw	r3,36(r2)
 4011888:	00a00034 	movhi	r2,32768
 401188c:	10bfff04 	addi	r2,r2,-4
 4011890:	10c00536 	bltu	r2,r3,40118a8 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 4011894:	e0bfff17 	ldw	r2,-4(fp)
 4011898:	10800917 	ldw	r2,36(r2)
 401189c:	10c00044 	addi	r3,r2,1
 40118a0:	e0bfff17 	ldw	r2,-4(fp)
 40118a4:	10c00915 	stw	r3,36(r2)
 40118a8:	d0a71a17 	ldw	r2,-25496(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 40118ac:	e037883a 	mov	sp,fp
 40118b0:	df000017 	ldw	fp,0(sp)
 40118b4:	dec00104 	addi	sp,sp,4
 40118b8:	f800283a 	ret

040118bc <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 40118bc:	defffd04 	addi	sp,sp,-12
 40118c0:	df000215 	stw	fp,8(sp)
 40118c4:	df000204 	addi	fp,sp,8
 40118c8:	e13fff15 	stw	r4,-4(fp)
 40118cc:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 40118d0:	00000506 	br	40118e8 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 40118d4:	e0bffe17 	ldw	r2,-8(fp)
 40118d8:	1090000c 	andi	r2,r2,16384
 40118dc:	10000226 	beq	r2,zero,40118e8 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 40118e0:	00bffd44 	movi	r2,-11
 40118e4:	00000b06 	br	4011914 <altera_avalon_jtag_uart_close+0x58>
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 40118e8:	e0bfff17 	ldw	r2,-4(fp)
 40118ec:	10c00d17 	ldw	r3,52(r2)
 40118f0:	e0bfff17 	ldw	r2,-4(fp)
 40118f4:	10800c17 	ldw	r2,48(r2)
 40118f8:	18800526 	beq	r3,r2,4011910 <altera_avalon_jtag_uart_close+0x54>
 40118fc:	e0bfff17 	ldw	r2,-4(fp)
 4011900:	10c00917 	ldw	r3,36(r2)
 4011904:	e0bfff17 	ldw	r2,-4(fp)
 4011908:	10800117 	ldw	r2,4(r2)
 401190c:	18bff136 	bltu	r3,r2,40118d4 <altera_avalon_jtag_uart_close+0x18>
    }
  }

  return 0;
 4011910:	0005883a 	mov	r2,zero
}
 4011914:	e037883a 	mov	sp,fp
 4011918:	df000017 	ldw	fp,0(sp)
 401191c:	dec00104 	addi	sp,sp,4
 4011920:	f800283a 	ret

04011924 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 4011924:	defffa04 	addi	sp,sp,-24
 4011928:	df000515 	stw	fp,20(sp)
 401192c:	df000504 	addi	fp,sp,20
 4011930:	e13ffd15 	stw	r4,-12(fp)
 4011934:	e17ffc15 	stw	r5,-16(fp)
 4011938:	e1bffb15 	stw	r6,-20(fp)
  int rc = -ENOTTY;
 401193c:	00bff9c4 	movi	r2,-25
 4011940:	e0bfff15 	stw	r2,-4(fp)

  switch (req)
 4011944:	e0bffc17 	ldw	r2,-16(fp)
 4011948:	109a8060 	cmpeqi	r2,r2,27137
 401194c:	1000041e 	bne	r2,zero,4011960 <altera_avalon_jtag_uart_ioctl+0x3c>
 4011950:	e0bffc17 	ldw	r2,-16(fp)
 4011954:	109a80a0 	cmpeqi	r2,r2,27138
 4011958:	1000181e 	bne	r2,zero,40119bc <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
 401195c:	00002906 	br	4011a04 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
 4011960:	e0bffd17 	ldw	r2,-12(fp)
 4011964:	10c00117 	ldw	r3,4(r2)
 4011968:	00a00034 	movhi	r2,32768
 401196c:	10bfffc4 	addi	r2,r2,-1
 4011970:	18802126 	beq	r3,r2,40119f8 <altera_avalon_jtag_uart_ioctl+0xd4>
      int timeout = *((int *)arg);
 4011974:	e0bffb17 	ldw	r2,-20(fp)
 4011978:	10800017 	ldw	r2,0(r2)
 401197c:	e0bffe15 	stw	r2,-8(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 4011980:	e0bffe17 	ldw	r2,-8(fp)
 4011984:	10800090 	cmplti	r2,r2,2
 4011988:	1000061e 	bne	r2,zero,40119a4 <altera_avalon_jtag_uart_ioctl+0x80>
 401198c:	e0fffe17 	ldw	r3,-8(fp)
 4011990:	00a00034 	movhi	r2,32768
 4011994:	10bfffc4 	addi	r2,r2,-1
 4011998:	18800226 	beq	r3,r2,40119a4 <altera_avalon_jtag_uart_ioctl+0x80>
 401199c:	e0bffe17 	ldw	r2,-8(fp)
 40119a0:	00000206 	br	40119ac <altera_avalon_jtag_uart_ioctl+0x88>
 40119a4:	00a00034 	movhi	r2,32768
 40119a8:	10bfff84 	addi	r2,r2,-2
 40119ac:	e0fffd17 	ldw	r3,-12(fp)
 40119b0:	18800115 	stw	r2,4(r3)
      rc = 0;
 40119b4:	e03fff15 	stw	zero,-4(fp)
    break;
 40119b8:	00000f06 	br	40119f8 <altera_avalon_jtag_uart_ioctl+0xd4>
    if (sp->timeout != INT_MAX)
 40119bc:	e0bffd17 	ldw	r2,-12(fp)
 40119c0:	10c00117 	ldw	r3,4(r2)
 40119c4:	00a00034 	movhi	r2,32768
 40119c8:	10bfffc4 	addi	r2,r2,-1
 40119cc:	18800c26 	beq	r3,r2,4011a00 <altera_avalon_jtag_uart_ioctl+0xdc>
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 40119d0:	e0bffd17 	ldw	r2,-12(fp)
 40119d4:	10c00917 	ldw	r3,36(r2)
 40119d8:	e0bffd17 	ldw	r2,-12(fp)
 40119dc:	10800117 	ldw	r2,4(r2)
 40119e0:	1885803a 	cmpltu	r2,r3,r2
 40119e4:	10c03fcc 	andi	r3,r2,255
 40119e8:	e0bffb17 	ldw	r2,-20(fp)
 40119ec:	10c00015 	stw	r3,0(r2)
      rc = 0;
 40119f0:	e03fff15 	stw	zero,-4(fp)
    break;
 40119f4:	00000206 	br	4011a00 <altera_avalon_jtag_uart_ioctl+0xdc>
    break;
 40119f8:	0001883a 	nop
 40119fc:	00000106 	br	4011a04 <altera_avalon_jtag_uart_ioctl+0xe0>
    break;
 4011a00:	0001883a 	nop
  }

  return rc;
 4011a04:	e0bfff17 	ldw	r2,-4(fp)
}
 4011a08:	e037883a 	mov	sp,fp
 4011a0c:	df000017 	ldw	fp,0(sp)
 4011a10:	dec00104 	addi	sp,sp,4
 4011a14:	f800283a 	ret

04011a18 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 4011a18:	defff304 	addi	sp,sp,-52
 4011a1c:	dfc00c15 	stw	ra,48(sp)
 4011a20:	df000b15 	stw	fp,44(sp)
 4011a24:	df000b04 	addi	fp,sp,44
 4011a28:	e13ff815 	stw	r4,-32(fp)
 4011a2c:	e17ff715 	stw	r5,-36(fp)
 4011a30:	e1bff615 	stw	r6,-40(fp)
 4011a34:	e1fff515 	stw	r7,-44(fp)
  char * ptr = buffer;
 4011a38:	e0bff717 	ldw	r2,-36(fp)
 4011a3c:	e0bfff15 	stw	r2,-4(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 4011a40:	00004706 	br	4011b60 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 4011a44:	e0bff817 	ldw	r2,-32(fp)
 4011a48:	10800a17 	ldw	r2,40(r2)
 4011a4c:	e0bffd15 	stw	r2,-12(fp)
      out = sp->rx_out;
 4011a50:	e0bff817 	ldw	r2,-32(fp)
 4011a54:	10800b17 	ldw	r2,44(r2)
 4011a58:	e0bffc15 	stw	r2,-16(fp)

      if (in >= out)
 4011a5c:	e0fffd17 	ldw	r3,-12(fp)
 4011a60:	e0bffc17 	ldw	r2,-16(fp)
 4011a64:	18800536 	bltu	r3,r2,4011a7c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 4011a68:	e0fffd17 	ldw	r3,-12(fp)
 4011a6c:	e0bffc17 	ldw	r2,-16(fp)
 4011a70:	1885c83a 	sub	r2,r3,r2
 4011a74:	e0bffe15 	stw	r2,-8(fp)
 4011a78:	00000406 	br	4011a8c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 4011a7c:	00c20004 	movi	r3,2048
 4011a80:	e0bffc17 	ldw	r2,-16(fp)
 4011a84:	1885c83a 	sub	r2,r3,r2
 4011a88:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
 4011a8c:	e0bffe17 	ldw	r2,-8(fp)
 4011a90:	10001e26 	beq	r2,zero,4011b0c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 4011a94:	e0fff617 	ldw	r3,-40(fp)
 4011a98:	e0bffe17 	ldw	r2,-8(fp)
 4011a9c:	1880022e 	bgeu	r3,r2,4011aa8 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 4011aa0:	e0bff617 	ldw	r2,-40(fp)
 4011aa4:	e0bffe15 	stw	r2,-8(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 4011aa8:	e0bff817 	ldw	r2,-32(fp)
 4011aac:	10c00e04 	addi	r3,r2,56
 4011ab0:	e0bffc17 	ldw	r2,-16(fp)
 4011ab4:	1885883a 	add	r2,r3,r2
 4011ab8:	e1bffe17 	ldw	r6,-8(fp)
 4011abc:	100b883a 	mov	r5,r2
 4011ac0:	e13fff17 	ldw	r4,-4(fp)
 4011ac4:	40075940 	call	4007594 <memcpy>
      ptr   += n;
 4011ac8:	e0ffff17 	ldw	r3,-4(fp)
 4011acc:	e0bffe17 	ldw	r2,-8(fp)
 4011ad0:	1885883a 	add	r2,r3,r2
 4011ad4:	e0bfff15 	stw	r2,-4(fp)
      space -= n;
 4011ad8:	e0fff617 	ldw	r3,-40(fp)
 4011adc:	e0bffe17 	ldw	r2,-8(fp)
 4011ae0:	1885c83a 	sub	r2,r3,r2
 4011ae4:	e0bff615 	stw	r2,-40(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4011ae8:	e0fffc17 	ldw	r3,-16(fp)
 4011aec:	e0bffe17 	ldw	r2,-8(fp)
 4011af0:	1885883a 	add	r2,r3,r2
 4011af4:	10c1ffcc 	andi	r3,r2,2047
 4011af8:	e0bff817 	ldw	r2,-32(fp)
 4011afc:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 4011b00:	e0bff617 	ldw	r2,-40(fp)
 4011b04:	00bfcf16 	blt	zero,r2,4011a44 <altera_avalon_jtag_uart_read+0x2c>
 4011b08:	00000106 	br	4011b10 <altera_avalon_jtag_uart_read+0xf8>
        break; /* No more data available */
 4011b0c:	0001883a 	nop

    /* If we read any data then return it */
    if (ptr != buffer)
 4011b10:	e0ffff17 	ldw	r3,-4(fp)
 4011b14:	e0bff717 	ldw	r2,-36(fp)
 4011b18:	1880141e 	bne	r3,r2,4011b6c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 4011b1c:	e0bff517 	ldw	r2,-44(fp)
 4011b20:	1090000c 	andi	r2,r2,16384
 4011b24:	1000131e 	bne	r2,zero,4011b74 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 4011b28:	0001883a 	nop
 4011b2c:	e0bff817 	ldw	r2,-32(fp)
 4011b30:	10800a17 	ldw	r2,40(r2)
 4011b34:	e0fffd17 	ldw	r3,-12(fp)
 4011b38:	1880051e 	bne	r3,r2,4011b50 <altera_avalon_jtag_uart_read+0x138>
 4011b3c:	e0bff817 	ldw	r2,-32(fp)
 4011b40:	10c00917 	ldw	r3,36(r2)
 4011b44:	e0bff817 	ldw	r2,-32(fp)
 4011b48:	10800117 	ldw	r2,4(r2)
 4011b4c:	18bff736 	bltu	r3,r2,4011b2c <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 4011b50:	e0bff817 	ldw	r2,-32(fp)
 4011b54:	10800a17 	ldw	r2,40(r2)
 4011b58:	e0fffd17 	ldw	r3,-12(fp)
 4011b5c:	18800726 	beq	r3,r2,4011b7c <altera_avalon_jtag_uart_read+0x164>
  while (space > 0)
 4011b60:	e0bff617 	ldw	r2,-40(fp)
 4011b64:	00bfb716 	blt	zero,r2,4011a44 <altera_avalon_jtag_uart_read+0x2c>
 4011b68:	00000506 	br	4011b80 <altera_avalon_jtag_uart_read+0x168>
      break;
 4011b6c:	0001883a 	nop
 4011b70:	00000306 	br	4011b80 <altera_avalon_jtag_uart_read+0x168>
      break;
 4011b74:	0001883a 	nop
 4011b78:	00000106 	br	4011b80 <altera_avalon_jtag_uart_read+0x168>
      break;
 4011b7c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 4011b80:	e0ffff17 	ldw	r3,-4(fp)
 4011b84:	e0bff717 	ldw	r2,-36(fp)
 4011b88:	18801926 	beq	r3,r2,4011bf0 <altera_avalon_jtag_uart_read+0x1d8>
  NIOS2_READ_STATUS (context);
 4011b8c:	0005303a 	rdctl	r2,status
 4011b90:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4011b94:	e0fff917 	ldw	r3,-28(fp)
 4011b98:	00bfff84 	movi	r2,-2
 4011b9c:	1884703a 	and	r2,r3,r2
 4011ba0:	1001703a 	wrctl	status,r2
  return context;
 4011ba4:	e0bff917 	ldw	r2,-28(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 4011ba8:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4011bac:	e0bff817 	ldw	r2,-32(fp)
 4011bb0:	10800817 	ldw	r2,32(r2)
 4011bb4:	10c00054 	ori	r3,r2,1
 4011bb8:	e0bff817 	ldw	r2,-32(fp)
 4011bbc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4011bc0:	e0bff817 	ldw	r2,-32(fp)
 4011bc4:	10800017 	ldw	r2,0(r2)
 4011bc8:	10800104 	addi	r2,r2,4
 4011bcc:	1007883a 	mov	r3,r2
 4011bd0:	e0bff817 	ldw	r2,-32(fp)
 4011bd4:	10800817 	ldw	r2,32(r2)
 4011bd8:	18800035 	stwio	r2,0(r3)
 4011bdc:	e0bffb17 	ldw	r2,-20(fp)
 4011be0:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
 4011be4:	e0bffa17 	ldw	r2,-24(fp)
 4011be8:	1001703a 	wrctl	status,r2
}
 4011bec:	0001883a 	nop
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 4011bf0:	e0ffff17 	ldw	r3,-4(fp)
 4011bf4:	e0bff717 	ldw	r2,-36(fp)
 4011bf8:	18800426 	beq	r3,r2,4011c0c <altera_avalon_jtag_uart_read+0x1f4>
    return ptr - buffer;
 4011bfc:	e0ffff17 	ldw	r3,-4(fp)
 4011c00:	e0bff717 	ldw	r2,-36(fp)
 4011c04:	1885c83a 	sub	r2,r3,r2
 4011c08:	00000606 	br	4011c24 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
 4011c0c:	e0bff517 	ldw	r2,-44(fp)
 4011c10:	1090000c 	andi	r2,r2,16384
 4011c14:	10000226 	beq	r2,zero,4011c20 <altera_avalon_jtag_uart_read+0x208>
    return -EWOULDBLOCK;
 4011c18:	00bffd44 	movi	r2,-11
 4011c1c:	00000106 	br	4011c24 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
 4011c20:	00bffec4 	movi	r2,-5
}
 4011c24:	e037883a 	mov	sp,fp
 4011c28:	dfc00117 	ldw	ra,4(sp)
 4011c2c:	df000017 	ldw	fp,0(sp)
 4011c30:	dec00204 	addi	sp,sp,8
 4011c34:	f800283a 	ret

04011c38 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 4011c38:	defff304 	addi	sp,sp,-52
 4011c3c:	dfc00c15 	stw	ra,48(sp)
 4011c40:	df000b15 	stw	fp,44(sp)
 4011c44:	df000b04 	addi	fp,sp,44
 4011c48:	e13ff815 	stw	r4,-32(fp)
 4011c4c:	e17ff715 	stw	r5,-36(fp)
 4011c50:	e1bff615 	stw	r6,-40(fp)
 4011c54:	e1fff515 	stw	r7,-44(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 4011c58:	e03fff15 	stw	zero,-4(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 4011c5c:	e0bff717 	ldw	r2,-36(fp)
 4011c60:	e0bffd15 	stw	r2,-12(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 4011c64:	00003706 	br	4011d44 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 4011c68:	e0bff817 	ldw	r2,-32(fp)
 4011c6c:	10800c17 	ldw	r2,48(r2)
 4011c70:	e0bffc15 	stw	r2,-16(fp)
      out = sp->tx_out;
 4011c74:	e0bff817 	ldw	r2,-32(fp)
 4011c78:	10800d17 	ldw	r2,52(r2)
 4011c7c:	e0bfff15 	stw	r2,-4(fp)

      if (in < out)
 4011c80:	e0fffc17 	ldw	r3,-16(fp)
 4011c84:	e0bfff17 	ldw	r2,-4(fp)
 4011c88:	1880062e 	bgeu	r3,r2,4011ca4 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 4011c8c:	e0ffff17 	ldw	r3,-4(fp)
 4011c90:	e0bffc17 	ldw	r2,-16(fp)
 4011c94:	1885c83a 	sub	r2,r3,r2
 4011c98:	10bfffc4 	addi	r2,r2,-1
 4011c9c:	e0bffe15 	stw	r2,-8(fp)
 4011ca0:	00000b06 	br	4011cd0 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 4011ca4:	e0bfff17 	ldw	r2,-4(fp)
 4011ca8:	10000526 	beq	r2,zero,4011cc0 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 4011cac:	00c20004 	movi	r3,2048
 4011cb0:	e0bffc17 	ldw	r2,-16(fp)
 4011cb4:	1885c83a 	sub	r2,r3,r2
 4011cb8:	e0bffe15 	stw	r2,-8(fp)
 4011cbc:	00000406 	br	4011cd0 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 4011cc0:	00c1ffc4 	movi	r3,2047
 4011cc4:	e0bffc17 	ldw	r2,-16(fp)
 4011cc8:	1885c83a 	sub	r2,r3,r2
 4011ccc:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
 4011cd0:	e0bffe17 	ldw	r2,-8(fp)
 4011cd4:	10001e26 	beq	r2,zero,4011d50 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 4011cd8:	e0fff617 	ldw	r3,-40(fp)
 4011cdc:	e0bffe17 	ldw	r2,-8(fp)
 4011ce0:	1880022e 	bgeu	r3,r2,4011cec <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 4011ce4:	e0bff617 	ldw	r2,-40(fp)
 4011ce8:	e0bffe15 	stw	r2,-8(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 4011cec:	e0bff817 	ldw	r2,-32(fp)
 4011cf0:	10c20e04 	addi	r3,r2,2104
 4011cf4:	e0bffc17 	ldw	r2,-16(fp)
 4011cf8:	1885883a 	add	r2,r3,r2
 4011cfc:	e1bffe17 	ldw	r6,-8(fp)
 4011d00:	e17ff717 	ldw	r5,-36(fp)
 4011d04:	1009883a 	mov	r4,r2
 4011d08:	40075940 	call	4007594 <memcpy>
      ptr   += n;
 4011d0c:	e0fff717 	ldw	r3,-36(fp)
 4011d10:	e0bffe17 	ldw	r2,-8(fp)
 4011d14:	1885883a 	add	r2,r3,r2
 4011d18:	e0bff715 	stw	r2,-36(fp)
      count -= n;
 4011d1c:	e0fff617 	ldw	r3,-40(fp)
 4011d20:	e0bffe17 	ldw	r2,-8(fp)
 4011d24:	1885c83a 	sub	r2,r3,r2
 4011d28:	e0bff615 	stw	r2,-40(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4011d2c:	e0fffc17 	ldw	r3,-16(fp)
 4011d30:	e0bffe17 	ldw	r2,-8(fp)
 4011d34:	1885883a 	add	r2,r3,r2
 4011d38:	10c1ffcc 	andi	r3,r2,2047
 4011d3c:	e0bff817 	ldw	r2,-32(fp)
 4011d40:	10c00c15 	stw	r3,48(r2)
    while (count > 0)
 4011d44:	e0bff617 	ldw	r2,-40(fp)
 4011d48:	00bfc716 	blt	zero,r2,4011c68 <altera_avalon_jtag_uart_write+0x30>
 4011d4c:	00000106 	br	4011d54 <altera_avalon_jtag_uart_write+0x11c>
        break;
 4011d50:	0001883a 	nop
  NIOS2_READ_STATUS (context);
 4011d54:	0005303a 	rdctl	r2,status
 4011d58:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4011d5c:	e0fff917 	ldw	r3,-28(fp)
 4011d60:	00bfff84 	movi	r2,-2
 4011d64:	1884703a 	and	r2,r3,r2
 4011d68:	1001703a 	wrctl	status,r2
  return context;
 4011d6c:	e0bff917 	ldw	r2,-28(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 4011d70:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 4011d74:	e0bff817 	ldw	r2,-32(fp)
 4011d78:	10800817 	ldw	r2,32(r2)
 4011d7c:	10c00094 	ori	r3,r2,2
 4011d80:	e0bff817 	ldw	r2,-32(fp)
 4011d84:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4011d88:	e0bff817 	ldw	r2,-32(fp)
 4011d8c:	10800017 	ldw	r2,0(r2)
 4011d90:	10800104 	addi	r2,r2,4
 4011d94:	1007883a 	mov	r3,r2
 4011d98:	e0bff817 	ldw	r2,-32(fp)
 4011d9c:	10800817 	ldw	r2,32(r2)
 4011da0:	18800035 	stwio	r2,0(r3)
 4011da4:	e0bffb17 	ldw	r2,-20(fp)
 4011da8:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
 4011dac:	e0bffa17 	ldw	r2,-24(fp)
 4011db0:	1001703a 	wrctl	status,r2
}
 4011db4:	0001883a 	nop
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 4011db8:	e0bff617 	ldw	r2,-40(fp)
 4011dbc:	0080100e 	bge	zero,r2,4011e00 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
 4011dc0:	e0bff517 	ldw	r2,-44(fp)
 4011dc4:	1090000c 	andi	r2,r2,16384
 4011dc8:	1000101e 	bne	r2,zero,4011e0c <altera_avalon_jtag_uart_write+0x1d4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 4011dcc:	0001883a 	nop
 4011dd0:	e0bff817 	ldw	r2,-32(fp)
 4011dd4:	10800d17 	ldw	r2,52(r2)
 4011dd8:	e0ffff17 	ldw	r3,-4(fp)
 4011ddc:	1880051e 	bne	r3,r2,4011df4 <altera_avalon_jtag_uart_write+0x1bc>
 4011de0:	e0bff817 	ldw	r2,-32(fp)
 4011de4:	10c00917 	ldw	r3,36(r2)
 4011de8:	e0bff817 	ldw	r2,-32(fp)
 4011dec:	10800117 	ldw	r2,4(r2)
 4011df0:	18bff736 	bltu	r3,r2,4011dd0 <altera_avalon_jtag_uart_write+0x198>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 4011df4:	e0bff817 	ldw	r2,-32(fp)
 4011df8:	10800917 	ldw	r2,36(r2)
 4011dfc:	1000051e 	bne	r2,zero,4011e14 <altera_avalon_jtag_uart_write+0x1dc>
         break;
    }
  }
  while (count > 0);
 4011e00:	e0bff617 	ldw	r2,-40(fp)
 4011e04:	00bfcf16 	blt	zero,r2,4011d44 <altera_avalon_jtag_uart_write+0x10c>
 4011e08:	00000306 	br	4011e18 <altera_avalon_jtag_uart_write+0x1e0>
        break;
 4011e0c:	0001883a 	nop
 4011e10:	00000106 	br	4011e18 <altera_avalon_jtag_uart_write+0x1e0>
         break;
 4011e14:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 4011e18:	e0fff717 	ldw	r3,-36(fp)
 4011e1c:	e0bffd17 	ldw	r2,-12(fp)
 4011e20:	18800426 	beq	r3,r2,4011e34 <altera_avalon_jtag_uart_write+0x1fc>
    return ptr - start;
 4011e24:	e0fff717 	ldw	r3,-36(fp)
 4011e28:	e0bffd17 	ldw	r2,-12(fp)
 4011e2c:	1885c83a 	sub	r2,r3,r2
 4011e30:	00000606 	br	4011e4c <altera_avalon_jtag_uart_write+0x214>
  else if (flags & O_NONBLOCK)
 4011e34:	e0bff517 	ldw	r2,-44(fp)
 4011e38:	1090000c 	andi	r2,r2,16384
 4011e3c:	10000226 	beq	r2,zero,4011e48 <altera_avalon_jtag_uart_write+0x210>
    return -EWOULDBLOCK;
 4011e40:	00bffd44 	movi	r2,-11
 4011e44:	00000106 	br	4011e4c <altera_avalon_jtag_uart_write+0x214>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 4011e48:	00bffec4 	movi	r2,-5
}
 4011e4c:	e037883a 	mov	sp,fp
 4011e50:	dfc00117 	ldw	ra,4(sp)
 4011e54:	df000017 	ldw	fp,0(sp)
 4011e58:	dec00204 	addi	sp,sp,8
 4011e5c:	f800283a 	ret

04011e60 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 4011e60:	defff904 	addi	sp,sp,-28
 4011e64:	dfc00615 	stw	ra,24(sp)
 4011e68:	df000515 	stw	fp,20(sp)
 4011e6c:	df000504 	addi	fp,sp,20
 4011e70:	e13ffc15 	stw	r4,-16(fp)
 4011e74:	e17ffb15 	stw	r5,-20(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 4011e78:	0007883a 	mov	r3,zero
 4011e7c:	e0bffc17 	ldw	r2,-16(fp)
 4011e80:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 4011e84:	e0bffc17 	ldw	r2,-16(fp)
 4011e88:	10800104 	addi	r2,r2,4
 4011e8c:	10800037 	ldwio	r2,0(r2)
  NIOS2_READ_STATUS (context);
 4011e90:	0005303a 	rdctl	r2,status
 4011e94:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4011e98:	e0fffd17 	ldw	r3,-12(fp)
 4011e9c:	00bfff84 	movi	r2,-2
 4011ea0:	1884703a 	and	r2,r3,r2
 4011ea4:	1001703a 	wrctl	status,r2
  return context;
 4011ea8:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 4011eac:	e0bfff15 	stw	r2,-4(fp)
  alt_tick ();
 4011eb0:	4012e080 	call	4012e08 <alt_tick>
 4011eb4:	e0bfff17 	ldw	r2,-4(fp)
 4011eb8:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
 4011ebc:	e0bffe17 	ldw	r2,-8(fp)
 4011ec0:	1001703a 	wrctl	status,r2
}
 4011ec4:	0001883a 	nop
  alt_irq_enable_all(cpu_sr);
}
 4011ec8:	0001883a 	nop
 4011ecc:	e037883a 	mov	sp,fp
 4011ed0:	dfc00117 	ldw	ra,4(sp)
 4011ed4:	df000017 	ldw	fp,0(sp)
 4011ed8:	dec00204 	addi	sp,sp,8
 4011edc:	f800283a 	ret

04011ee0 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 4011ee0:	defff904 	addi	sp,sp,-28
 4011ee4:	dfc00615 	stw	ra,24(sp)
 4011ee8:	df000515 	stw	fp,20(sp)
 4011eec:	df000504 	addi	fp,sp,20
 4011ef0:	e13ffe15 	stw	r4,-8(fp)
 4011ef4:	e17ffd15 	stw	r5,-12(fp)
 4011ef8:	e1bffc15 	stw	r6,-16(fp)
 4011efc:	e1fffb15 	stw	r7,-20(fp)
 4011f00:	e0bffb17 	ldw	r2,-20(fp)
 4011f04:	e0bfff15 	stw	r2,-4(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 4011f08:	d0a71a17 	ldw	r2,-25496(gp)
 4011f0c:	1000031e 	bne	r2,zero,4011f1c <alt_avalon_timer_sc_init+0x3c>
  {
    _alt_tick_rate = nticks;
 4011f10:	e0bfff17 	ldw	r2,-4(fp)
 4011f14:	d0a71a15 	stw	r2,-25496(gp)
    return 0;
 4011f18:	00000106 	br	4011f20 <alt_avalon_timer_sc_init+0x40>
  }
  else
  {
    return -1;
 4011f1c:	0001883a 	nop
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 4011f20:	e0bffe17 	ldw	r2,-8(fp)
 4011f24:	10800104 	addi	r2,r2,4
 4011f28:	00c001c4 	movi	r3,7
 4011f2c:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
 4011f30:	01810074 	movhi	r6,1025
 4011f34:	31879804 	addi	r6,r6,7776
 4011f38:	e17ffe17 	ldw	r5,-8(fp)
 4011f3c:	e13ffc17 	ldw	r4,-16(fp)
 4011f40:	401299c0 	call	401299c <alt_irq_register>
#endif  
}
 4011f44:	0001883a 	nop
 4011f48:	e037883a 	mov	sp,fp
 4011f4c:	dfc00117 	ldw	ra,4(sp)
 4011f50:	df000017 	ldw	fp,0(sp)
 4011f54:	dec00204 	addi	sp,sp,8
 4011f58:	f800283a 	ret

04011f5c <alt_up_accelerometer_spi_open_dev>:

#include "altera_up_avalon_accelerometer_spi.h"
#include "altera_up_avalon_accelerometer_spi_regs.h"

alt_up_accelerometer_spi_dev* alt_up_accelerometer_spi_open_dev(const char* name)
{
 4011f5c:	defffc04 	addi	sp,sp,-16
 4011f60:	dfc00315 	stw	ra,12(sp)
 4011f64:	df000215 	stw	fp,8(sp)
 4011f68:	df000204 	addi	fp,sp,8
 4011f6c:	e13ffe15 	stw	r4,-8(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_accelerometer_spi_dev *dev = (alt_up_accelerometer_spi_dev*)alt_find_dev(name, &alt_dev_list);
 4011f70:	d1600604 	addi	r5,gp,-32744
 4011f74:	e13ffe17 	ldw	r4,-8(fp)
 4011f78:	40127ac0 	call	40127ac <alt_find_dev>
 4011f7c:	e0bfff15 	stw	r2,-4(fp)

  return dev;
 4011f80:	e0bfff17 	ldw	r2,-4(fp)
}
 4011f84:	e037883a 	mov	sp,fp
 4011f88:	dfc00117 	ldw	ra,4(sp)
 4011f8c:	df000017 	ldw	fp,0(sp)
 4011f90:	dec00204 	addi	sp,sp,8
 4011f94:	f800283a 	ret

04011f98 <alt_up_accelerometer_spi_read_address_register>:
 * @param addr -- a pointer to the location where the read address should be stored
 *
 * @return 0 for success 
 **/
int alt_up_accelerometer_spi_read_address_register(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 *addr)
{
 4011f98:	defffd04 	addi	sp,sp,-12
 4011f9c:	df000215 	stw	fp,8(sp)
 4011fa0:	df000204 	addi	fp,sp,8
 4011fa4:	e13fff15 	stw	r4,-4(fp)
 4011fa8:	e17ffe15 	stw	r5,-8(fp)
	// reads data from the device Address register
	*(addr) = IORD_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base); 
 4011fac:	e0bfff17 	ldw	r2,-4(fp)
 4011fb0:	10800a17 	ldw	r2,40(r2)
 4011fb4:	10800023 	ldbuio	r2,0(r2)
 4011fb8:	10803fcc 	andi	r2,r2,255
 4011fbc:	1007883a 	mov	r3,r2
 4011fc0:	e0bffe17 	ldw	r2,-8(fp)
 4011fc4:	10c00005 	stb	r3,0(r2)

	return 0;
 4011fc8:	0005883a 	mov	r2,zero
}
 4011fcc:	e037883a 	mov	sp,fp
 4011fd0:	df000017 	ldw	fp,0(sp)
 4011fd4:	dec00104 	addi	sp,sp,4
 4011fd8:	f800283a 	ret

04011fdc <alt_up_accelerometer_spi_read>:
 * @param data -- a pointer to the location where the read data should be stored
 *
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_read(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 *data)
{
 4011fdc:	defffc04 	addi	sp,sp,-16
 4011fe0:	df000315 	stw	fp,12(sp)
 4011fe4:	df000304 	addi	fp,sp,12
 4011fe8:	e13fff15 	stw	r4,-4(fp)
 4011fec:	2805883a 	mov	r2,r5
 4011ff0:	e1bffd15 	stw	r6,-12(fp)
 4011ff4:	e0bffe05 	stb	r2,-8(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
 4011ff8:	e0bfff17 	ldw	r2,-4(fp)
 4011ffc:	10800a17 	ldw	r2,40(r2)
 4012000:	1007883a 	mov	r3,r2
 4012004:	e0bffe03 	ldbu	r2,-8(fp)
 4012008:	10800fcc 	andi	r2,r2,63
 401200c:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(data) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
 4012010:	e0bfff17 	ldw	r2,-4(fp)
 4012014:	10800a17 	ldw	r2,40(r2)
 4012018:	10800044 	addi	r2,r2,1
 401201c:	10800023 	ldbuio	r2,0(r2)
 4012020:	10803fcc 	andi	r2,r2,255
 4012024:	1007883a 	mov	r3,r2
 4012028:	e0bffd17 	ldw	r2,-12(fp)
 401202c:	10c00005 	stb	r3,0(r2)

	return 0;
 4012030:	0005883a 	mov	r2,zero
}
 4012034:	e037883a 	mov	sp,fp
 4012038:	df000017 	ldw	fp,0(sp)
 401203c:	dec00104 	addi	sp,sp,4
 4012040:	f800283a 	ret

04012044 <alt_up_accelerometer_spi_write>:
 * @param data -- the data to be written
 *
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_write(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 data)
{
 4012044:	defffc04 	addi	sp,sp,-16
 4012048:	df000315 	stw	fp,12(sp)
 401204c:	df000304 	addi	fp,sp,12
 4012050:	e13fff15 	stw	r4,-4(fp)
 4012054:	2805883a 	mov	r2,r5
 4012058:	3007883a 	mov	r3,r6
 401205c:	e0bffe05 	stb	r2,-8(fp)
 4012060:	1805883a 	mov	r2,r3
 4012064:	e0bffd05 	stb	r2,-12(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
 4012068:	e0bfff17 	ldw	r2,-4(fp)
 401206c:	10800a17 	ldw	r2,40(r2)
 4012070:	1007883a 	mov	r3,r2
 4012074:	e0bffe03 	ldbu	r2,-8(fp)
 4012078:	10800fcc 	andi	r2,r2,63
 401207c:	18800025 	stbio	r2,0(r3)

	// write data to the device Data register
	IOWR_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base, data & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK); 
 4012080:	e0bfff17 	ldw	r2,-4(fp)
 4012084:	10800a17 	ldw	r2,40(r2)
 4012088:	10800044 	addi	r2,r2,1
 401208c:	1007883a 	mov	r3,r2
 4012090:	e0bffd03 	ldbu	r2,-12(fp)
 4012094:	18800025 	stbio	r2,0(r3)

	return 0;
 4012098:	0005883a 	mov	r2,zero
}
 401209c:	e037883a 	mov	sp,fp
 40120a0:	df000017 	ldw	fp,0(sp)
 40120a4:	dec00104 	addi	sp,sp,4
 40120a8:	f800283a 	ret

040120ac <alt_up_accelerometer_spi_read_x_axis>:
 * @param x_axis -- a pointer to the location where the x axis data should be stored
 *
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_x_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *x_axis)
{
 40120ac:	defffd04 	addi	sp,sp,-12
 40120b0:	df000215 	stw	fp,8(sp)
 40120b4:	df000204 	addi	fp,sp,8
 40120b8:	e13fff15 	stw	r4,-4(fp)
 40120bc:	e17ffe15 	stw	r5,-8(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
 40120c0:	e0bfff17 	ldw	r2,-4(fp)
 40120c4:	10800a17 	ldw	r2,40(r2)
 40120c8:	1007883a 	mov	r3,r2
 40120cc:	00800c84 	movi	r2,50
 40120d0:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(x_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
 40120d4:	e0bfff17 	ldw	r2,-4(fp)
 40120d8:	10800a17 	ldw	r2,40(r2)
 40120dc:	10800044 	addi	r2,r2,1
 40120e0:	10800023 	ldbuio	r2,0(r2)
 40120e4:	10803fcc 	andi	r2,r2,255
 40120e8:	10ffffcc 	andi	r3,r2,65535
 40120ec:	e0bffe17 	ldw	r2,-8(fp)
 40120f0:	10c00015 	stw	r3,0(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
 40120f4:	e0bfff17 	ldw	r2,-4(fp)
 40120f8:	10800a17 	ldw	r2,40(r2)
 40120fc:	1007883a 	mov	r3,r2
 4012100:	00800cc4 	movi	r2,51
 4012104:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(x_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
 4012108:	e0bfff17 	ldw	r2,-4(fp)
 401210c:	10800a17 	ldw	r2,40(r2)
 4012110:	10800044 	addi	r2,r2,1
 4012114:	10800023 	ldbuio	r2,0(r2)
 4012118:	10803fcc 	andi	r2,r2,255
 401211c:	1006923a 	slli	r3,r2,8
 4012120:	00804034 	movhi	r2,256
 4012124:	10bfc004 	addi	r2,r2,-256
 4012128:	1884703a 	and	r2,r3,r2
 401212c:	e0fffe17 	ldw	r3,-8(fp)
 4012130:	18c00017 	ldw	r3,0(r3)
 4012134:	10c5883a 	add	r2,r2,r3
 4012138:	1007883a 	mov	r3,r2
 401213c:	e0bffe17 	ldw	r2,-8(fp)
 4012140:	10c00015 	stw	r3,0(r2)

	if (*(x_axis) & 0x00008000)
 4012144:	e0bffe17 	ldw	r2,-8(fp)
 4012148:	10800017 	ldw	r2,0(r2)
 401214c:	10a0000c 	andi	r2,r2,32768
 4012150:	10000626 	beq	r2,zero,401216c <alt_up_accelerometer_spi_read_x_axis+0xc0>
	{
		*(x_axis) |= 0xFFFF0000;
 4012154:	e0bffe17 	ldw	r2,-8(fp)
 4012158:	10800017 	ldw	r2,0(r2)
 401215c:	10bffff4 	orhi	r2,r2,65535
 4012160:	1007883a 	mov	r3,r2
 4012164:	e0bffe17 	ldw	r2,-8(fp)
 4012168:	10c00015 	stw	r3,0(r2)
	}

	return 0;
 401216c:	0005883a 	mov	r2,zero
}
 4012170:	e037883a 	mov	sp,fp
 4012174:	df000017 	ldw	fp,0(sp)
 4012178:	dec00104 	addi	sp,sp,4
 401217c:	f800283a 	ret

04012180 <alt_up_accelerometer_spi_read_y_axis>:
 * @param y_axis -- a pointer to the location where the y axis data should be stored
 *
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_y_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *y_axis)
{
 4012180:	defffd04 	addi	sp,sp,-12
 4012184:	df000215 	stw	fp,8(sp)
 4012188:	df000204 	addi	fp,sp,8
 401218c:	e13fff15 	stw	r4,-4(fp)
 4012190:	e17ffe15 	stw	r5,-8(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
 4012194:	e0bfff17 	ldw	r2,-4(fp)
 4012198:	10800a17 	ldw	r2,40(r2)
 401219c:	1007883a 	mov	r3,r2
 40121a0:	00800d04 	movi	r2,52
 40121a4:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(y_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
 40121a8:	e0bfff17 	ldw	r2,-4(fp)
 40121ac:	10800a17 	ldw	r2,40(r2)
 40121b0:	10800044 	addi	r2,r2,1
 40121b4:	10800023 	ldbuio	r2,0(r2)
 40121b8:	10803fcc 	andi	r2,r2,255
 40121bc:	10ffffcc 	andi	r3,r2,65535
 40121c0:	e0bffe17 	ldw	r2,-8(fp)
 40121c4:	10c00015 	stw	r3,0(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
 40121c8:	e0bfff17 	ldw	r2,-4(fp)
 40121cc:	10800a17 	ldw	r2,40(r2)
 40121d0:	1007883a 	mov	r3,r2
 40121d4:	00800d44 	movi	r2,53
 40121d8:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(y_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
 40121dc:	e0bfff17 	ldw	r2,-4(fp)
 40121e0:	10800a17 	ldw	r2,40(r2)
 40121e4:	10800044 	addi	r2,r2,1
 40121e8:	10800023 	ldbuio	r2,0(r2)
 40121ec:	10803fcc 	andi	r2,r2,255
 40121f0:	1006923a 	slli	r3,r2,8
 40121f4:	00804034 	movhi	r2,256
 40121f8:	10bfc004 	addi	r2,r2,-256
 40121fc:	1884703a 	and	r2,r3,r2
 4012200:	e0fffe17 	ldw	r3,-8(fp)
 4012204:	18c00017 	ldw	r3,0(r3)
 4012208:	10c5883a 	add	r2,r2,r3
 401220c:	1007883a 	mov	r3,r2
 4012210:	e0bffe17 	ldw	r2,-8(fp)
 4012214:	10c00015 	stw	r3,0(r2)

	if (*(y_axis) & 0x00008000)
 4012218:	e0bffe17 	ldw	r2,-8(fp)
 401221c:	10800017 	ldw	r2,0(r2)
 4012220:	10a0000c 	andi	r2,r2,32768
 4012224:	10000626 	beq	r2,zero,4012240 <alt_up_accelerometer_spi_read_y_axis+0xc0>
	{
		*(y_axis) |= 0xFFFF0000;
 4012228:	e0bffe17 	ldw	r2,-8(fp)
 401222c:	10800017 	ldw	r2,0(r2)
 4012230:	10bffff4 	orhi	r2,r2,65535
 4012234:	1007883a 	mov	r3,r2
 4012238:	e0bffe17 	ldw	r2,-8(fp)
 401223c:	10c00015 	stw	r3,0(r2)
	}

	return 0;
 4012240:	0005883a 	mov	r2,zero
}
 4012244:	e037883a 	mov	sp,fp
 4012248:	df000017 	ldw	fp,0(sp)
 401224c:	dec00104 	addi	sp,sp,4
 4012250:	f800283a 	ret

04012254 <alt_up_accelerometer_spi_read_z_axis>:
 * @param z_axis -- a pointer to the location where the z axis data should be stored
 *
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_z_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *z_axis)
{
 4012254:	defffd04 	addi	sp,sp,-12
 4012258:	df000215 	stw	fp,8(sp)
 401225c:	df000204 	addi	fp,sp,8
 4012260:	e13fff15 	stw	r4,-4(fp)
 4012264:	e17ffe15 	stw	r5,-8(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
 4012268:	e0bfff17 	ldw	r2,-4(fp)
 401226c:	10800a17 	ldw	r2,40(r2)
 4012270:	1007883a 	mov	r3,r2
 4012274:	00800d84 	movi	r2,54
 4012278:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(z_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
 401227c:	e0bfff17 	ldw	r2,-4(fp)
 4012280:	10800a17 	ldw	r2,40(r2)
 4012284:	10800044 	addi	r2,r2,1
 4012288:	10800023 	ldbuio	r2,0(r2)
 401228c:	10803fcc 	andi	r2,r2,255
 4012290:	10ffffcc 	andi	r3,r2,65535
 4012294:	e0bffe17 	ldw	r2,-8(fp)
 4012298:	10c00015 	stw	r3,0(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
 401229c:	e0bfff17 	ldw	r2,-4(fp)
 40122a0:	10800a17 	ldw	r2,40(r2)
 40122a4:	1007883a 	mov	r3,r2
 40122a8:	00800dc4 	movi	r2,55
 40122ac:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(z_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
 40122b0:	e0bfff17 	ldw	r2,-4(fp)
 40122b4:	10800a17 	ldw	r2,40(r2)
 40122b8:	10800044 	addi	r2,r2,1
 40122bc:	10800023 	ldbuio	r2,0(r2)
 40122c0:	10803fcc 	andi	r2,r2,255
 40122c4:	1006923a 	slli	r3,r2,8
 40122c8:	00804034 	movhi	r2,256
 40122cc:	10bfc004 	addi	r2,r2,-256
 40122d0:	1884703a 	and	r2,r3,r2
 40122d4:	e0fffe17 	ldw	r3,-8(fp)
 40122d8:	18c00017 	ldw	r3,0(r3)
 40122dc:	10c5883a 	add	r2,r2,r3
 40122e0:	1007883a 	mov	r3,r2
 40122e4:	e0bffe17 	ldw	r2,-8(fp)
 40122e8:	10c00015 	stw	r3,0(r2)

	if (*(z_axis) & 0x00008000)
 40122ec:	e0bffe17 	ldw	r2,-8(fp)
 40122f0:	10800017 	ldw	r2,0(r2)
 40122f4:	10a0000c 	andi	r2,r2,32768
 40122f8:	10000626 	beq	r2,zero,4012314 <alt_up_accelerometer_spi_read_z_axis+0xc0>
	{
		*(z_axis) |= 0xFFFF0000;
 40122fc:	e0bffe17 	ldw	r2,-8(fp)
 4012300:	10800017 	ldw	r2,0(r2)
 4012304:	10bffff4 	orhi	r2,r2,65535
 4012308:	1007883a 	mov	r3,r2
 401230c:	e0bffe17 	ldw	r2,-8(fp)
 4012310:	10c00015 	stw	r3,0(r2)
	}

	return 0;
 4012314:	0005883a 	mov	r2,zero
}
 4012318:	e037883a 	mov	sp,fp
 401231c:	df000017 	ldw	fp,0(sp)
 4012320:	dec00104 	addi	sp,sp,4
 4012324:	f800283a 	ret

04012328 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 4012328:	defff504 	addi	sp,sp,-44
 401232c:	df000a15 	stw	fp,40(sp)
 4012330:	df000a04 	addi	fp,sp,40
 4012334:	e13ff915 	stw	r4,-28(fp)
 4012338:	e17ff815 	stw	r5,-32(fp)
 401233c:	e1bff715 	stw	r6,-36(fp)
 4012340:	e1fff615 	stw	r7,-40(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 4012344:	e03fff15 	stw	zero,-4(fp)
  return _alt_tick_rate;
 4012348:	d0a71a17 	ldw	r2,-25496(gp)
  
  if (alt_ticks_per_second ())
 401234c:	10003e26 	beq	r2,zero,4012448 <alt_alarm_start+0x120>
  {
    if (alarm)
 4012350:	e0bff917 	ldw	r2,-28(fp)
 4012354:	10003a26 	beq	r2,zero,4012440 <alt_alarm_start+0x118>
    {
      alarm->callback = callback;
 4012358:	e0bff917 	ldw	r2,-28(fp)
 401235c:	e0fff717 	ldw	r3,-36(fp)
 4012360:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 4012364:	e0bff917 	ldw	r2,-28(fp)
 4012368:	e0fff617 	ldw	r3,-40(fp)
 401236c:	10c00515 	stw	r3,20(r2)
  NIOS2_READ_STATUS (context);
 4012370:	0005303a 	rdctl	r2,status
 4012374:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4012378:	e0fffd17 	ldw	r3,-12(fp)
 401237c:	00bfff84 	movi	r2,-2
 4012380:	1884703a 	and	r2,r3,r2
 4012384:	1001703a 	wrctl	status,r2
  return context;
 4012388:	e0bffd17 	ldw	r2,-12(fp)
 
      irq_context = alt_irq_disable_all ();
 401238c:	e0bffe15 	stw	r2,-8(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 4012390:	d0a71b17 	ldw	r2,-25492(gp)
      
      current_nticks = alt_nticks();
 4012394:	e0bfff15 	stw	r2,-4(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 4012398:	e0fff817 	ldw	r3,-32(fp)
 401239c:	e0bfff17 	ldw	r2,-4(fp)
 40123a0:	1885883a 	add	r2,r3,r2
 40123a4:	10c00044 	addi	r3,r2,1
 40123a8:	e0bff917 	ldw	r2,-28(fp)
 40123ac:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 40123b0:	e0bff917 	ldw	r2,-28(fp)
 40123b4:	10c00217 	ldw	r3,8(r2)
 40123b8:	e0bfff17 	ldw	r2,-4(fp)
 40123bc:	1880042e 	bgeu	r3,r2,40123d0 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 40123c0:	e0bff917 	ldw	r2,-28(fp)
 40123c4:	00c00044 	movi	r3,1
 40123c8:	10c00405 	stb	r3,16(r2)
 40123cc:	00000206 	br	40123d8 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 40123d0:	e0bff917 	ldw	r2,-28(fp)
 40123d4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 40123d8:	e0bff917 	ldw	r2,-28(fp)
 40123dc:	d0e00c04 	addi	r3,gp,-32720
 40123e0:	e0fffb15 	stw	r3,-20(fp)
 40123e4:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 40123e8:	e0bffa17 	ldw	r2,-24(fp)
 40123ec:	e0fffb17 	ldw	r3,-20(fp)
 40123f0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 40123f4:	e0bffb17 	ldw	r2,-20(fp)
 40123f8:	10c00017 	ldw	r3,0(r2)
 40123fc:	e0bffa17 	ldw	r2,-24(fp)
 4012400:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 4012404:	e0bffb17 	ldw	r2,-20(fp)
 4012408:	10800017 	ldw	r2,0(r2)
 401240c:	e0fffa17 	ldw	r3,-24(fp)
 4012410:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 4012414:	e0bffb17 	ldw	r2,-20(fp)
 4012418:	e0fffa17 	ldw	r3,-24(fp)
 401241c:	10c00015 	stw	r3,0(r2)
}
 4012420:	0001883a 	nop
 4012424:	e0bffe17 	ldw	r2,-8(fp)
 4012428:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 401242c:	e0bffc17 	ldw	r2,-16(fp)
 4012430:	1001703a 	wrctl	status,r2
}
 4012434:	0001883a 	nop
      alt_irq_enable_all (irq_context);

      return 0;
 4012438:	0005883a 	mov	r2,zero
 401243c:	00000306 	br	401244c <alt_alarm_start+0x124>
    }
    else
    {
      return -EINVAL;
 4012440:	00bffa84 	movi	r2,-22
 4012444:	00000106 	br	401244c <alt_alarm_start+0x124>
    }
  }
  else
  {
    return -ENOTSUP;
 4012448:	00bfde84 	movi	r2,-134
  }
}
 401244c:	e037883a 	mov	sp,fp
 4012450:	df000017 	ldw	fp,0(sp)
 4012454:	dec00104 	addi	sp,sp,4
 4012458:	f800283a 	ret

0401245c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 401245c:	defffa04 	addi	sp,sp,-24
 4012460:	dfc00515 	stw	ra,20(sp)
 4012464:	df000415 	stw	fp,16(sp)
 4012468:	df000404 	addi	fp,sp,16
 401246c:	e13ffc15 	stw	r4,-16(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
 4012470:	008000c4 	movi	r2,3
 4012474:	e0bffe15 	stw	r2,-8(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 4012478:	e0fffe17 	ldw	r3,-8(fp)
 401247c:	008003f4 	movhi	r2,15
 4012480:	10909004 	addi	r2,r2,16960
 4012484:	1885383a 	mul	r2,r3,r2
 4012488:	100b883a 	mov	r5,r2
 401248c:	01017db4 	movhi	r4,1526
 4012490:	21384004 	addi	r4,r4,-7936
 4012494:	400e0d40 	call	400e0d4 <__udivsi3>
  big_loops = us / (INT_MAX/
 4012498:	100b883a 	mov	r5,r2
 401249c:	01200034 	movhi	r4,32768
 40124a0:	213fffc4 	addi	r4,r4,-1
 40124a4:	400e0d40 	call	400e0d4 <__udivsi3>
 40124a8:	100b883a 	mov	r5,r2
 40124ac:	e13ffc17 	ldw	r4,-16(fp)
 40124b0:	400e0d40 	call	400e0d4 <__udivsi3>
 40124b4:	e0bffd15 	stw	r2,-12(fp)

  if (big_loops)
 40124b8:	e0bffd17 	ldw	r2,-12(fp)
 40124bc:	10002a26 	beq	r2,zero,4012568 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 40124c0:	e03fff15 	stw	zero,-4(fp)
 40124c4:	00001706 	br	4012524 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 40124c8:	00a00034 	movhi	r2,32768
 40124cc:	10bfffc4 	addi	r2,r2,-1
 40124d0:	10bfffc4 	addi	r2,r2,-1
 40124d4:	103ffe1e 	bne	r2,zero,40124d0 <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 40124d8:	e0fffe17 	ldw	r3,-8(fp)
 40124dc:	008003f4 	movhi	r2,15
 40124e0:	10909004 	addi	r2,r2,16960
 40124e4:	1885383a 	mul	r2,r3,r2
      us -= (INT_MAX/(ALT_CPU_FREQ/
 40124e8:	100b883a 	mov	r5,r2
 40124ec:	01017db4 	movhi	r4,1526
 40124f0:	21384004 	addi	r4,r4,-7936
 40124f4:	400e0d40 	call	400e0d4 <__udivsi3>
 40124f8:	100b883a 	mov	r5,r2
 40124fc:	01200034 	movhi	r4,32768
 4012500:	213fffc4 	addi	r4,r4,-1
 4012504:	400e0d40 	call	400e0d4 <__udivsi3>
 4012508:	1007883a 	mov	r3,r2
 401250c:	e0bffc17 	ldw	r2,-16(fp)
 4012510:	10c5c83a 	sub	r2,r2,r3
 4012514:	e0bffc15 	stw	r2,-16(fp)
    for(i=0;i<big_loops;i++)
 4012518:	e0bfff17 	ldw	r2,-4(fp)
 401251c:	10800044 	addi	r2,r2,1
 4012520:	e0bfff15 	stw	r2,-4(fp)
 4012524:	e0ffff17 	ldw	r3,-4(fp)
 4012528:	e0bffd17 	ldw	r2,-12(fp)
 401252c:	18bfe616 	blt	r3,r2,40124c8 <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 4012530:	e0fffe17 	ldw	r3,-8(fp)
 4012534:	008003f4 	movhi	r2,15
 4012538:	10909004 	addi	r2,r2,16960
 401253c:	1885383a 	mul	r2,r3,r2
 4012540:	100b883a 	mov	r5,r2
 4012544:	01017db4 	movhi	r4,1526
 4012548:	21384004 	addi	r4,r4,-7936
 401254c:	400e0d40 	call	400e0d4 <__udivsi3>
 4012550:	1007883a 	mov	r3,r2
 4012554:	e0bffc17 	ldw	r2,-16(fp)
 4012558:	1885383a 	mul	r2,r3,r2
    __asm__ volatile (
 401255c:	10bfffc4 	addi	r2,r2,-1
 4012560:	103ffe1e 	bne	r2,zero,401255c <alt_busy_sleep+0x100>
 4012564:	00000d06 	br	401259c <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 4012568:	e0fffe17 	ldw	r3,-8(fp)
 401256c:	008003f4 	movhi	r2,15
 4012570:	10909004 	addi	r2,r2,16960
 4012574:	1885383a 	mul	r2,r3,r2
 4012578:	100b883a 	mov	r5,r2
 401257c:	01017db4 	movhi	r4,1526
 4012580:	21384004 	addi	r4,r4,-7936
 4012584:	400e0d40 	call	400e0d4 <__udivsi3>
 4012588:	1007883a 	mov	r3,r2
 401258c:	e0bffc17 	ldw	r2,-16(fp)
 4012590:	1885383a 	mul	r2,r3,r2
    __asm__ volatile (
 4012594:	10bfffc4 	addi	r2,r2,-1
 4012598:	00bffe16 	blt	zero,r2,4012594 <alt_busy_sleep+0x138>
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 401259c:	0005883a 	mov	r2,zero
}
 40125a0:	e037883a 	mov	sp,fp
 40125a4:	dfc00117 	ldw	ra,4(sp)
 40125a8:	df000017 	ldw	fp,0(sp)
 40125ac:	dec00204 	addi	sp,sp,8
 40125b0:	f800283a 	ret

040125b4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 40125b4:	defffe04 	addi	sp,sp,-8
 40125b8:	df000115 	stw	fp,4(sp)
 40125bc:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 40125c0:	e03fff15 	stw	zero,-4(fp)
 40125c4:	00000506 	br	40125dc <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 40125c8:	e0bfff17 	ldw	r2,-4(fp)
 40125cc:	1000003b 	flushd	0(r2)
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 40125d0:	e0bfff17 	ldw	r2,-4(fp)
 40125d4:	10800804 	addi	r2,r2,32
 40125d8:	e0bfff15 	stw	r2,-4(fp)
 40125dc:	e0bfff17 	ldw	r2,-4(fp)
 40125e0:	10820030 	cmpltui	r2,r2,2048
 40125e4:	103ff81e 	bne	r2,zero,40125c8 <alt_dcache_flush_all+0x14>
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 40125e8:	0001883a 	nop
 40125ec:	0001883a 	nop
 40125f0:	e037883a 	mov	sp,fp
 40125f4:	df000017 	ldw	fp,0(sp)
 40125f8:	dec00104 	addi	sp,sp,4
 40125fc:	f800283a 	ret

04012600 <alt_get_errno>:
{
 4012600:	defffe04 	addi	sp,sp,-8
 4012604:	dfc00115 	stw	ra,4(sp)
 4012608:	df000015 	stw	fp,0(sp)
 401260c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4012610:	d0a00917 	ldw	r2,-32732(gp)
 4012614:	10000326 	beq	r2,zero,4012624 <alt_get_errno+0x24>
 4012618:	d0a00917 	ldw	r2,-32732(gp)
 401261c:	103ee83a 	callr	r2
 4012620:	00000106 	br	4012628 <alt_get_errno+0x28>
 4012624:	d0a71504 	addi	r2,gp,-25516
}
 4012628:	e037883a 	mov	sp,fp
 401262c:	dfc00117 	ldw	ra,4(sp)
 4012630:	df000017 	ldw	fp,0(sp)
 4012634:	dec00204 	addi	sp,sp,8
 4012638:	f800283a 	ret

0401263c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 401263c:	defffa04 	addi	sp,sp,-24
 4012640:	dfc00515 	stw	ra,20(sp)
 4012644:	df000415 	stw	fp,16(sp)
 4012648:	df000404 	addi	fp,sp,16
 401264c:	e13ffd15 	stw	r4,-12(fp)
 4012650:	e17ffc15 	stw	r5,-16(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 4012654:	e0bffd17 	ldw	r2,-12(fp)
 4012658:	10000326 	beq	r2,zero,4012668 <alt_dev_llist_insert+0x2c>
 401265c:	e0bffd17 	ldw	r2,-12(fp)
 4012660:	10800217 	ldw	r2,8(r2)
 4012664:	1000061e 	bne	r2,zero,4012680 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 4012668:	40126000 	call	4012600 <alt_get_errno>
 401266c:	1007883a 	mov	r3,r2
 4012670:	00800584 	movi	r2,22
 4012674:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 4012678:	00bffa84 	movi	r2,-22
 401267c:	00001406 	br	40126d0 <alt_dev_llist_insert+0x94>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 4012680:	e0bffd17 	ldw	r2,-12(fp)
 4012684:	e0fffc17 	ldw	r3,-16(fp)
 4012688:	e0ffff15 	stw	r3,-4(fp)
 401268c:	e0bffe15 	stw	r2,-8(fp)
  entry->previous = list;
 4012690:	e0bffe17 	ldw	r2,-8(fp)
 4012694:	e0ffff17 	ldw	r3,-4(fp)
 4012698:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 401269c:	e0bfff17 	ldw	r2,-4(fp)
 40126a0:	10c00017 	ldw	r3,0(r2)
 40126a4:	e0bffe17 	ldw	r2,-8(fp)
 40126a8:	10c00015 	stw	r3,0(r2)
  list->next->previous = entry;
 40126ac:	e0bfff17 	ldw	r2,-4(fp)
 40126b0:	10800017 	ldw	r2,0(r2)
 40126b4:	e0fffe17 	ldw	r3,-8(fp)
 40126b8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 40126bc:	e0bfff17 	ldw	r2,-4(fp)
 40126c0:	e0fffe17 	ldw	r3,-8(fp)
 40126c4:	10c00015 	stw	r3,0(r2)
}
 40126c8:	0001883a 	nop

  return 0;  
 40126cc:	0005883a 	mov	r2,zero
}
 40126d0:	e037883a 	mov	sp,fp
 40126d4:	dfc00117 	ldw	ra,4(sp)
 40126d8:	df000017 	ldw	fp,0(sp)
 40126dc:	dec00204 	addi	sp,sp,8
 40126e0:	f800283a 	ret

040126e4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 40126e4:	defffd04 	addi	sp,sp,-12
 40126e8:	dfc00215 	stw	ra,8(sp)
 40126ec:	df000115 	stw	fp,4(sp)
 40126f0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 40126f4:	00810074 	movhi	r2,1025
 40126f8:	108d9704 	addi	r2,r2,13916
 40126fc:	e0bfff15 	stw	r2,-4(fp)
 4012700:	00000606 	br	401271c <_do_ctors+0x38>
        (*ctor) (); 
 4012704:	e0bfff17 	ldw	r2,-4(fp)
 4012708:	10800017 	ldw	r2,0(r2)
 401270c:	103ee83a 	callr	r2
  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 4012710:	e0bfff17 	ldw	r2,-4(fp)
 4012714:	10bfff04 	addi	r2,r2,-4
 4012718:	e0bfff15 	stw	r2,-4(fp)
 401271c:	e0ffff17 	ldw	r3,-4(fp)
 4012720:	00810074 	movhi	r2,1025
 4012724:	108d9804 	addi	r2,r2,13920
 4012728:	18bff62e 	bgeu	r3,r2,4012704 <_do_ctors+0x20>
}
 401272c:	0001883a 	nop
 4012730:	0001883a 	nop
 4012734:	e037883a 	mov	sp,fp
 4012738:	dfc00117 	ldw	ra,4(sp)
 401273c:	df000017 	ldw	fp,0(sp)
 4012740:	dec00204 	addi	sp,sp,8
 4012744:	f800283a 	ret

04012748 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 4012748:	defffd04 	addi	sp,sp,-12
 401274c:	dfc00215 	stw	ra,8(sp)
 4012750:	df000115 	stw	fp,4(sp)
 4012754:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 4012758:	00810074 	movhi	r2,1025
 401275c:	108d9704 	addi	r2,r2,13916
 4012760:	e0bfff15 	stw	r2,-4(fp)
 4012764:	00000606 	br	4012780 <_do_dtors+0x38>
        (*dtor) (); 
 4012768:	e0bfff17 	ldw	r2,-4(fp)
 401276c:	10800017 	ldw	r2,0(r2)
 4012770:	103ee83a 	callr	r2
  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 4012774:	e0bfff17 	ldw	r2,-4(fp)
 4012778:	10bfff04 	addi	r2,r2,-4
 401277c:	e0bfff15 	stw	r2,-4(fp)
 4012780:	e0ffff17 	ldw	r3,-4(fp)
 4012784:	00810074 	movhi	r2,1025
 4012788:	108d9804 	addi	r2,r2,13920
 401278c:	18bff62e 	bgeu	r3,r2,4012768 <_do_dtors+0x20>
}
 4012790:	0001883a 	nop
 4012794:	0001883a 	nop
 4012798:	e037883a 	mov	sp,fp
 401279c:	dfc00117 	ldw	ra,4(sp)
 40127a0:	df000017 	ldw	fp,0(sp)
 40127a4:	dec00204 	addi	sp,sp,8
 40127a8:	f800283a 	ret

040127ac <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 40127ac:	defffa04 	addi	sp,sp,-24
 40127b0:	dfc00515 	stw	ra,20(sp)
 40127b4:	df000415 	stw	fp,16(sp)
 40127b8:	df000404 	addi	fp,sp,16
 40127bc:	e13ffd15 	stw	r4,-12(fp)
 40127c0:	e17ffc15 	stw	r5,-16(fp)
  alt_dev* next = (alt_dev*) llist->next;
 40127c4:	e0bffc17 	ldw	r2,-16(fp)
 40127c8:	10800017 	ldw	r2,0(r2)
 40127cc:	e0bfff15 	stw	r2,-4(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 40127d0:	e13ffd17 	ldw	r4,-12(fp)
 40127d4:	40098340 	call	4009834 <strlen>
 40127d8:	10800044 	addi	r2,r2,1
 40127dc:	e0bffe15 	stw	r2,-8(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 40127e0:	00000d06 	br	4012818 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 40127e4:	e0bfff17 	ldw	r2,-4(fp)
 40127e8:	10800217 	ldw	r2,8(r2)
 40127ec:	e0fffe17 	ldw	r3,-8(fp)
 40127f0:	180d883a 	mov	r6,r3
 40127f4:	e17ffd17 	ldw	r5,-12(fp)
 40127f8:	1009883a 	mov	r4,r2
 40127fc:	40132880 	call	4013288 <memcmp>
 4012800:	1000021e 	bne	r2,zero,401280c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 4012804:	e0bfff17 	ldw	r2,-4(fp)
 4012808:	00000706 	br	4012828 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 401280c:	e0bfff17 	ldw	r2,-4(fp)
 4012810:	10800017 	ldw	r2,0(r2)
 4012814:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) llist)
 4012818:	e0ffff17 	ldw	r3,-4(fp)
 401281c:	e0bffc17 	ldw	r2,-16(fp)
 4012820:	18bff01e 	bne	r3,r2,40127e4 <alt_find_dev+0x38>
  }
  
  /* No match found */
  
  return NULL;
 4012824:	0005883a 	mov	r2,zero
}
 4012828:	e037883a 	mov	sp,fp
 401282c:	dfc00117 	ldw	ra,4(sp)
 4012830:	df000017 	ldw	fp,0(sp)
 4012834:	dec00204 	addi	sp,sp,8
 4012838:	f800283a 	ret

0401283c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 401283c:	defffe04 	addi	sp,sp,-8
 4012840:	dfc00115 	stw	ra,4(sp)
 4012844:	df000015 	stw	fp,0(sp)
 4012848:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 401284c:	01420004 	movi	r5,2048
 4012850:	0009883a 	mov	r4,zero
 4012854:	40130dc0 	call	40130dc <alt_icache_flush>
#endif
}
 4012858:	0001883a 	nop
 401285c:	e037883a 	mov	sp,fp
 4012860:	dfc00117 	ldw	ra,4(sp)
 4012864:	df000017 	ldw	fp,0(sp)
 4012868:	dec00204 	addi	sp,sp,8
 401286c:	f800283a 	ret

04012870 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 4012870:	defff904 	addi	sp,sp,-28
 4012874:	dfc00615 	stw	ra,24(sp)
 4012878:	df000515 	stw	fp,20(sp)
 401287c:	df000504 	addi	fp,sp,20
 4012880:	e13ffe15 	stw	r4,-8(fp)
 4012884:	e17ffd15 	stw	r5,-12(fp)
 4012888:	e1bffc15 	stw	r6,-16(fp)
 401288c:	e1fffb15 	stw	r7,-20(fp)
  int old;

  old = open (name, flags, mode);
 4012890:	e1bffb17 	ldw	r6,-20(fp)
 4012894:	e17ffc17 	ldw	r5,-16(fp)
 4012898:	e13ffd17 	ldw	r4,-12(fp)
 401289c:	4012c100 	call	4012c10 <open>
 40128a0:	e0bfff15 	stw	r2,-4(fp)

  if (old >= 0)
 40128a4:	e0bfff17 	ldw	r2,-4(fp)
 40128a8:	10001716 	blt	r2,zero,4012908 <alt_open_fd+0x98>
  {
    fd->dev      = alt_fd_list[old].dev;
 40128ac:	e0bfff17 	ldw	r2,-4(fp)
 40128b0:	10c00324 	muli	r3,r2,12
 40128b4:	00810074 	movhi	r2,1025
 40128b8:	1885883a 	add	r2,r3,r2
 40128bc:	10d1db17 	ldw	r3,18284(r2)
 40128c0:	e0bffe17 	ldw	r2,-8(fp)
 40128c4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 40128c8:	e0bfff17 	ldw	r2,-4(fp)
 40128cc:	10c00324 	muli	r3,r2,12
 40128d0:	00810074 	movhi	r2,1025
 40128d4:	1885883a 	add	r2,r3,r2
 40128d8:	10d1dc17 	ldw	r3,18288(r2)
 40128dc:	e0bffe17 	ldw	r2,-8(fp)
 40128e0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 40128e4:	e0bfff17 	ldw	r2,-4(fp)
 40128e8:	10c00324 	muli	r3,r2,12
 40128ec:	00810074 	movhi	r2,1025
 40128f0:	1885883a 	add	r2,r3,r2
 40128f4:	10d1dd17 	ldw	r3,18292(r2)
 40128f8:	e0bffe17 	ldw	r2,-8(fp)
 40128fc:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 4012900:	e13fff17 	ldw	r4,-4(fp)
 4012904:	40110a00 	call	40110a0 <alt_release_fd>
  }
} 
 4012908:	0001883a 	nop
 401290c:	e037883a 	mov	sp,fp
 4012910:	dfc00117 	ldw	ra,4(sp)
 4012914:	df000017 	ldw	fp,0(sp)
 4012918:	dec00204 	addi	sp,sp,8
 401291c:	f800283a 	ret

04012920 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 4012920:	defffb04 	addi	sp,sp,-20
 4012924:	dfc00415 	stw	ra,16(sp)
 4012928:	df000315 	stw	fp,12(sp)
 401292c:	df000304 	addi	fp,sp,12
 4012930:	e13fff15 	stw	r4,-4(fp)
 4012934:	e17ffe15 	stw	r5,-8(fp)
 4012938:	e1bffd15 	stw	r6,-12(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 401293c:	01c07fc4 	movi	r7,511
 4012940:	01800044 	movi	r6,1
 4012944:	e17fff17 	ldw	r5,-4(fp)
 4012948:	01010074 	movhi	r4,1025
 401294c:	2111de04 	addi	r4,r4,18296
 4012950:	40128700 	call	4012870 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 4012954:	01c07fc4 	movi	r7,511
 4012958:	000d883a 	mov	r6,zero
 401295c:	e17ffe17 	ldw	r5,-8(fp)
 4012960:	01010074 	movhi	r4,1025
 4012964:	2111db04 	addi	r4,r4,18284
 4012968:	40128700 	call	4012870 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 401296c:	01c07fc4 	movi	r7,511
 4012970:	01800044 	movi	r6,1
 4012974:	e17ffd17 	ldw	r5,-12(fp)
 4012978:	01010074 	movhi	r4,1025
 401297c:	2111e104 	addi	r4,r4,18308
 4012980:	40128700 	call	4012870 <alt_open_fd>
}  
 4012984:	0001883a 	nop
 4012988:	e037883a 	mov	sp,fp
 401298c:	dfc00117 	ldw	ra,4(sp)
 4012990:	df000017 	ldw	fp,0(sp)
 4012994:	dec00204 	addi	sp,sp,8
 4012998:	f800283a 	ret

0401299c <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
 401299c:	defff004 	addi	sp,sp,-64
 40129a0:	df000f15 	stw	fp,60(sp)
 40129a4:	df000f04 	addi	fp,sp,60
 40129a8:	e13ff315 	stw	r4,-52(fp)
 40129ac:	e17ff215 	stw	r5,-56(fp)
 40129b0:	e1bff115 	stw	r6,-60(fp)
  int rc = -EINVAL;  
 40129b4:	00bffa84 	movi	r2,-22
 40129b8:	e0bfff15 	stw	r2,-4(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 40129bc:	e0bff317 	ldw	r2,-52(fp)
 40129c0:	10800828 	cmpgeui	r2,r2,32
 40129c4:	1000501e 	bne	r2,zero,4012b08 <alt_irq_register+0x16c>
  NIOS2_READ_STATUS (context);
 40129c8:	0005303a 	rdctl	r2,status
 40129cc:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40129d0:	e0fffd17 	ldw	r3,-12(fp)
 40129d4:	00bfff84 	movi	r2,-2
 40129d8:	1884703a 	and	r2,r3,r2
 40129dc:	1001703a 	wrctl	status,r2
  return context;
 40129e0:	e0bffd17 	ldw	r2,-12(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
 40129e4:	e0bffe15 	stw	r2,-8(fp)

    alt_irq[id].handler = handler;
 40129e8:	e0bff317 	ldw	r2,-52(fp)
 40129ec:	100890fa 	slli	r4,r2,3
 40129f0:	e0fff117 	ldw	r3,-60(fp)
 40129f4:	00810074 	movhi	r2,1025
 40129f8:	2085883a 	add	r2,r4,r2
 40129fc:	10dd8615 	stw	r3,30232(r2)
    alt_irq[id].context = context;
 4012a00:	e0bff317 	ldw	r2,-52(fp)
 4012a04:	100890fa 	slli	r4,r2,3
 4012a08:	e0fff217 	ldw	r3,-56(fp)
 4012a0c:	00810074 	movhi	r2,1025
 4012a10:	2085883a 	add	r2,r4,r2
 4012a14:	10dd8715 	stw	r3,30236(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
 4012a18:	e0bff117 	ldw	r2,-60(fp)
 4012a1c:	10001a26 	beq	r2,zero,4012a88 <alt_irq_register+0xec>
 4012a20:	e0bff317 	ldw	r2,-52(fp)
 4012a24:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_READ_STATUS (context);
 4012a28:	0005303a 	rdctl	r2,status
 4012a2c:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4012a30:	e0fffb17 	ldw	r3,-20(fp)
 4012a34:	00bfff84 	movi	r2,-2
 4012a38:	1884703a 	and	r2,r3,r2
 4012a3c:	1001703a 	wrctl	status,r2
  return context;
 4012a40:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 4012a44:	e0bffa15 	stw	r2,-24(fp)

  alt_irq_active |= (1 << id);
 4012a48:	00c00044 	movi	r3,1
 4012a4c:	e0bffc17 	ldw	r2,-16(fp)
 4012a50:	1884983a 	sll	r2,r3,r2
 4012a54:	1007883a 	mov	r3,r2
 4012a58:	d0a71917 	ldw	r2,-25500(gp)
 4012a5c:	1884b03a 	or	r2,r3,r2
 4012a60:	d0a71915 	stw	r2,-25500(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 4012a64:	d0a71917 	ldw	r2,-25500(gp)
 4012a68:	100170fa 	wrctl	ienable,r2
 4012a6c:	e0bffa17 	ldw	r2,-24(fp)
 4012a70:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context);
 4012a74:	e0bff917 	ldw	r2,-28(fp)
 4012a78:	1001703a 	wrctl	status,r2
}
 4012a7c:	0001883a 	nop

  alt_irq_enable_all(status);

  return 0;
 4012a80:	0005883a 	mov	r2,zero
 4012a84:	00001a06 	br	4012af0 <alt_irq_register+0x154>
 4012a88:	e0bff317 	ldw	r2,-52(fp)
 4012a8c:	e0bff815 	stw	r2,-32(fp)
  NIOS2_READ_STATUS (context);
 4012a90:	0005303a 	rdctl	r2,status
 4012a94:	e0bff715 	stw	r2,-36(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4012a98:	e0fff717 	ldw	r3,-36(fp)
 4012a9c:	00bfff84 	movi	r2,-2
 4012aa0:	1884703a 	and	r2,r3,r2
 4012aa4:	1001703a 	wrctl	status,r2
  return context;
 4012aa8:	e0bff717 	ldw	r2,-36(fp)
  status = alt_irq_disable_all ();
 4012aac:	e0bff615 	stw	r2,-40(fp)
  alt_irq_active &= ~(1 << id);
 4012ab0:	00c00044 	movi	r3,1
 4012ab4:	e0bff817 	ldw	r2,-32(fp)
 4012ab8:	1884983a 	sll	r2,r3,r2
 4012abc:	0084303a 	nor	r2,zero,r2
 4012ac0:	1007883a 	mov	r3,r2
 4012ac4:	d0a71917 	ldw	r2,-25500(gp)
 4012ac8:	1884703a 	and	r2,r3,r2
 4012acc:	d0a71915 	stw	r2,-25500(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 4012ad0:	d0a71917 	ldw	r2,-25500(gp)
 4012ad4:	100170fa 	wrctl	ienable,r2
 4012ad8:	e0bff617 	ldw	r2,-40(fp)
 4012adc:	e0bff515 	stw	r2,-44(fp)
  NIOS2_WRITE_STATUS (context);
 4012ae0:	e0bff517 	ldw	r2,-44(fp)
 4012ae4:	1001703a 	wrctl	status,r2
}
 4012ae8:	0001883a 	nop
  return 0;
 4012aec:	0005883a 	mov	r2,zero
 4012af0:	e0bfff15 	stw	r2,-4(fp)
 4012af4:	e0bffe17 	ldw	r2,-8(fp)
 4012af8:	e0bff415 	stw	r2,-48(fp)
  NIOS2_WRITE_STATUS (context);
 4012afc:	e0bff417 	ldw	r2,-48(fp)
 4012b00:	1001703a 	wrctl	status,r2
}
 4012b04:	0001883a 	nop

    alt_irq_enable_all(status);
  }
  return rc; 
 4012b08:	e0bfff17 	ldw	r2,-4(fp)
}
 4012b0c:	e037883a 	mov	sp,fp
 4012b10:	df000017 	ldw	fp,0(sp)
 4012b14:	dec00104 	addi	sp,sp,4
 4012b18:	f800283a 	ret

04012b1c <alt_get_errno>:
{
 4012b1c:	defffe04 	addi	sp,sp,-8
 4012b20:	dfc00115 	stw	ra,4(sp)
 4012b24:	df000015 	stw	fp,0(sp)
 4012b28:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4012b2c:	d0a00917 	ldw	r2,-32732(gp)
 4012b30:	10000326 	beq	r2,zero,4012b40 <alt_get_errno+0x24>
 4012b34:	d0a00917 	ldw	r2,-32732(gp)
 4012b38:	103ee83a 	callr	r2
 4012b3c:	00000106 	br	4012b44 <alt_get_errno+0x28>
 4012b40:	d0a71504 	addi	r2,gp,-25516
}
 4012b44:	e037883a 	mov	sp,fp
 4012b48:	dfc00117 	ldw	ra,4(sp)
 4012b4c:	df000017 	ldw	fp,0(sp)
 4012b50:	dec00204 	addi	sp,sp,8
 4012b54:	f800283a 	ret

04012b58 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 4012b58:	defffd04 	addi	sp,sp,-12
 4012b5c:	df000215 	stw	fp,8(sp)
 4012b60:	df000204 	addi	fp,sp,8
 4012b64:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 4012b68:	e0bffe17 	ldw	r2,-8(fp)
 4012b6c:	10800217 	ldw	r2,8(r2)
 4012b70:	10d00034 	orhi	r3,r2,16384
 4012b74:	e0bffe17 	ldw	r2,-8(fp)
 4012b78:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 4012b7c:	e03fff15 	stw	zero,-4(fp)
 4012b80:	00001a06 	br	4012bec <alt_file_locked+0x94>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 4012b84:	e0bfff17 	ldw	r2,-4(fp)
 4012b88:	10c00324 	muli	r3,r2,12
 4012b8c:	00810074 	movhi	r2,1025
 4012b90:	1885883a 	add	r2,r3,r2
 4012b94:	10d1db17 	ldw	r3,18284(r2)
 4012b98:	e0bffe17 	ldw	r2,-8(fp)
 4012b9c:	10800017 	ldw	r2,0(r2)
 4012ba0:	18800f1e 	bne	r3,r2,4012be0 <alt_file_locked+0x88>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 4012ba4:	e0bfff17 	ldw	r2,-4(fp)
 4012ba8:	10c00324 	muli	r3,r2,12
 4012bac:	00810074 	movhi	r2,1025
 4012bb0:	1885883a 	add	r2,r3,r2
 4012bb4:	1091dd17 	ldw	r2,18292(r2)
    if ((alt_fd_list[i].dev == fd->dev) &&
 4012bb8:	1000090e 	bge	r2,zero,4012be0 <alt_file_locked+0x88>
        (&alt_fd_list[i] != fd))
 4012bbc:	e0bfff17 	ldw	r2,-4(fp)
 4012bc0:	10c00324 	muli	r3,r2,12
 4012bc4:	00810074 	movhi	r2,1025
 4012bc8:	1091db04 	addi	r2,r2,18284
 4012bcc:	1885883a 	add	r2,r3,r2
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 4012bd0:	e0fffe17 	ldw	r3,-8(fp)
 4012bd4:	18800226 	beq	r3,r2,4012be0 <alt_file_locked+0x88>
    {
      return -EACCES;
 4012bd8:	00bffcc4 	movi	r2,-13
 4012bdc:	00000806 	br	4012c00 <alt_file_locked+0xa8>
  for (i = 0; i <= alt_max_fd; i++)
 4012be0:	e0bfff17 	ldw	r2,-4(fp)
 4012be4:	10800044 	addi	r2,r2,1
 4012be8:	e0bfff15 	stw	r2,-4(fp)
 4012bec:	d0a00817 	ldw	r2,-32736(gp)
 4012bf0:	1007883a 	mov	r3,r2
 4012bf4:	e0bfff17 	ldw	r2,-4(fp)
 4012bf8:	18bfe22e 	bgeu	r3,r2,4012b84 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 4012bfc:	0005883a 	mov	r2,zero
}
 4012c00:	e037883a 	mov	sp,fp
 4012c04:	df000017 	ldw	fp,0(sp)
 4012c08:	dec00104 	addi	sp,sp,4
 4012c0c:	f800283a 	ret

04012c10 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 4012c10:	defff604 	addi	sp,sp,-40
 4012c14:	dfc00915 	stw	ra,36(sp)
 4012c18:	df000815 	stw	fp,32(sp)
 4012c1c:	df000804 	addi	fp,sp,32
 4012c20:	e13ffa15 	stw	r4,-24(fp)
 4012c24:	e17ff915 	stw	r5,-28(fp)
 4012c28:	e1bff815 	stw	r6,-32(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 4012c2c:	00bfffc4 	movi	r2,-1
 4012c30:	e0bffe15 	stw	r2,-8(fp)
  int status = -ENODEV;
 4012c34:	00bffb44 	movi	r2,-19
 4012c38:	e0bffd15 	stw	r2,-12(fp)
  int isafs = 0;
 4012c3c:	e03ffc15 	stw	zero,-16(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 4012c40:	d1600604 	addi	r5,gp,-32744
 4012c44:	e13ffa17 	ldw	r4,-24(fp)
 4012c48:	40127ac0 	call	40127ac <alt_find_dev>
 4012c4c:	e0bfff15 	stw	r2,-4(fp)
 4012c50:	e0bfff17 	ldw	r2,-4(fp)
 4012c54:	1000051e 	bne	r2,zero,4012c6c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 4012c58:	e13ffa17 	ldw	r4,-24(fp)
 4012c5c:	4012f340 	call	4012f34 <alt_find_file>
 4012c60:	e0bfff15 	stw	r2,-4(fp)
    isafs = 1;
 4012c64:	00800044 	movi	r2,1
 4012c68:	e0bffc15 	stw	r2,-16(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 4012c6c:	e0bfff17 	ldw	r2,-4(fp)
 4012c70:	10002926 	beq	r2,zero,4012d18 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
 4012c74:	e13fff17 	ldw	r4,-4(fp)
 4012c78:	401303c0 	call	401303c <alt_get_fd>
 4012c7c:	e0bffe15 	stw	r2,-8(fp)
 4012c80:	e0bffe17 	ldw	r2,-8(fp)
 4012c84:	1000030e 	bge	r2,zero,4012c94 <open+0x84>
    {
      status = index;
 4012c88:	e0bffe17 	ldw	r2,-8(fp)
 4012c8c:	e0bffd15 	stw	r2,-12(fp)
 4012c90:	00002306 	br	4012d20 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
 4012c94:	e0bffe17 	ldw	r2,-8(fp)
 4012c98:	10c00324 	muli	r3,r2,12
 4012c9c:	00810074 	movhi	r2,1025
 4012ca0:	1091db04 	addi	r2,r2,18284
 4012ca4:	1885883a 	add	r2,r3,r2
 4012ca8:	e0bffb15 	stw	r2,-20(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 4012cac:	e0fff917 	ldw	r3,-28(fp)
 4012cb0:	00900034 	movhi	r2,16384
 4012cb4:	10bfffc4 	addi	r2,r2,-1
 4012cb8:	1886703a 	and	r3,r3,r2
 4012cbc:	e0bffb17 	ldw	r2,-20(fp)
 4012cc0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 4012cc4:	e0bffc17 	ldw	r2,-16(fp)
 4012cc8:	1000051e 	bne	r2,zero,4012ce0 <open+0xd0>
 4012ccc:	e13ffb17 	ldw	r4,-20(fp)
 4012cd0:	4012b580 	call	4012b58 <alt_file_locked>
 4012cd4:	e0bffd15 	stw	r2,-12(fp)
 4012cd8:	e0bffd17 	ldw	r2,-12(fp)
 4012cdc:	10001016 	blt	r2,zero,4012d20 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 4012ce0:	e0bfff17 	ldw	r2,-4(fp)
 4012ce4:	10800317 	ldw	r2,12(r2)
 4012ce8:	10000826 	beq	r2,zero,4012d0c <open+0xfc>
 4012cec:	e0bfff17 	ldw	r2,-4(fp)
 4012cf0:	10800317 	ldw	r2,12(r2)
 4012cf4:	e1fff817 	ldw	r7,-32(fp)
 4012cf8:	e1bff917 	ldw	r6,-28(fp)
 4012cfc:	e17ffa17 	ldw	r5,-24(fp)
 4012d00:	e13ffb17 	ldw	r4,-20(fp)
 4012d04:	103ee83a 	callr	r2
 4012d08:	00000106 	br	4012d10 <open+0x100>
 4012d0c:	0005883a 	mov	r2,zero
 4012d10:	e0bffd15 	stw	r2,-12(fp)
 4012d14:	00000206 	br	4012d20 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
 4012d18:	00bffb44 	movi	r2,-19
 4012d1c:	e0bffd15 	stw	r2,-12(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 4012d20:	e0bffd17 	ldw	r2,-12(fp)
 4012d24:	1000090e 	bge	r2,zero,4012d4c <open+0x13c>
  {
    alt_release_fd (index);  
 4012d28:	e13ffe17 	ldw	r4,-8(fp)
 4012d2c:	40110a00 	call	40110a0 <alt_release_fd>
    ALT_ERRNO = -status;
 4012d30:	4012b1c0 	call	4012b1c <alt_get_errno>
 4012d34:	1007883a 	mov	r3,r2
 4012d38:	e0bffd17 	ldw	r2,-12(fp)
 4012d3c:	0085c83a 	sub	r2,zero,r2
 4012d40:	18800015 	stw	r2,0(r3)
    return -1;
 4012d44:	00bfffc4 	movi	r2,-1
 4012d48:	00000106 	br	4012d50 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
 4012d4c:	e0bffe17 	ldw	r2,-8(fp)
}
 4012d50:	e037883a 	mov	sp,fp
 4012d54:	dfc00117 	ldw	ra,4(sp)
 4012d58:	df000017 	ldw	fp,0(sp)
 4012d5c:	dec00204 	addi	sp,sp,8
 4012d60:	f800283a 	ret

04012d64 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 4012d64:	defffa04 	addi	sp,sp,-24
 4012d68:	df000515 	stw	fp,20(sp)
 4012d6c:	df000504 	addi	fp,sp,20
 4012d70:	e13ffb15 	stw	r4,-20(fp)
  NIOS2_READ_STATUS (context);
 4012d74:	0005303a 	rdctl	r2,status
 4012d78:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4012d7c:	e0fffc17 	ldw	r3,-16(fp)
 4012d80:	00bfff84 	movi	r2,-2
 4012d84:	1884703a 	and	r2,r3,r2
 4012d88:	1001703a 	wrctl	status,r2
  return context;
 4012d8c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 4012d90:	e0bfff15 	stw	r2,-4(fp)
  alt_llist_remove (&alarm->llist);
 4012d94:	e0bffb17 	ldw	r2,-20(fp)
 4012d98:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 4012d9c:	e0bffd17 	ldw	r2,-12(fp)
 4012da0:	10800017 	ldw	r2,0(r2)
 4012da4:	e0fffd17 	ldw	r3,-12(fp)
 4012da8:	18c00117 	ldw	r3,4(r3)
 4012dac:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 4012db0:	e0bffd17 	ldw	r2,-12(fp)
 4012db4:	10800117 	ldw	r2,4(r2)
 4012db8:	e0fffd17 	ldw	r3,-12(fp)
 4012dbc:	18c00017 	ldw	r3,0(r3)
 4012dc0:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 4012dc4:	e0bffd17 	ldw	r2,-12(fp)
 4012dc8:	e0fffd17 	ldw	r3,-12(fp)
 4012dcc:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 4012dd0:	e0bffd17 	ldw	r2,-12(fp)
 4012dd4:	e0fffd17 	ldw	r3,-12(fp)
 4012dd8:	10c00015 	stw	r3,0(r2)
} 
 4012ddc:	0001883a 	nop
 4012de0:	e0bfff17 	ldw	r2,-4(fp)
 4012de4:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
 4012de8:	e0bffe17 	ldw	r2,-8(fp)
 4012dec:	1001703a 	wrctl	status,r2
}
 4012df0:	0001883a 	nop
  alt_irq_enable_all (irq_context);
}
 4012df4:	0001883a 	nop
 4012df8:	e037883a 	mov	sp,fp
 4012dfc:	df000017 	ldw	fp,0(sp)
 4012e00:	dec00104 	addi	sp,sp,4
 4012e04:	f800283a 	ret

04012e08 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 4012e08:	defffb04 	addi	sp,sp,-20
 4012e0c:	dfc00415 	stw	ra,16(sp)
 4012e10:	df000315 	stw	fp,12(sp)
 4012e14:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 4012e18:	d0a00c17 	ldw	r2,-32720(gp)
 4012e1c:	e0bfff15 	stw	r2,-4(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 4012e20:	d0a71b17 	ldw	r2,-25492(gp)
 4012e24:	10800044 	addi	r2,r2,1
 4012e28:	d0a71b15 	stw	r2,-25492(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 4012e2c:	00002e06 	br	4012ee8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 4012e30:	e0bfff17 	ldw	r2,-4(fp)
 4012e34:	10800017 	ldw	r2,0(r2)
 4012e38:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 4012e3c:	e0bfff17 	ldw	r2,-4(fp)
 4012e40:	10800403 	ldbu	r2,16(r2)
 4012e44:	10803fcc 	andi	r2,r2,255
 4012e48:	10000426 	beq	r2,zero,4012e5c <alt_tick+0x54>
 4012e4c:	d0a71b17 	ldw	r2,-25492(gp)
 4012e50:	1000021e 	bne	r2,zero,4012e5c <alt_tick+0x54>
    {
      alarm->rollover = 0;
 4012e54:	e0bfff17 	ldw	r2,-4(fp)
 4012e58:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 4012e5c:	e0bfff17 	ldw	r2,-4(fp)
 4012e60:	10800217 	ldw	r2,8(r2)
 4012e64:	d0e71b17 	ldw	r3,-25492(gp)
 4012e68:	18801d36 	bltu	r3,r2,4012ee0 <alt_tick+0xd8>
 4012e6c:	e0bfff17 	ldw	r2,-4(fp)
 4012e70:	10800403 	ldbu	r2,16(r2)
 4012e74:	10803fcc 	andi	r2,r2,255
 4012e78:	1000191e 	bne	r2,zero,4012ee0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 4012e7c:	e0bfff17 	ldw	r2,-4(fp)
 4012e80:	10800317 	ldw	r2,12(r2)
 4012e84:	e0ffff17 	ldw	r3,-4(fp)
 4012e88:	18c00517 	ldw	r3,20(r3)
 4012e8c:	1809883a 	mov	r4,r3
 4012e90:	103ee83a 	callr	r2
 4012e94:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 4012e98:	e0bffd17 	ldw	r2,-12(fp)
 4012e9c:	1000031e 	bne	r2,zero,4012eac <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 4012ea0:	e13fff17 	ldw	r4,-4(fp)
 4012ea4:	4012d640 	call	4012d64 <alt_alarm_stop>
 4012ea8:	00000d06 	br	4012ee0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 4012eac:	e0bfff17 	ldw	r2,-4(fp)
 4012eb0:	10c00217 	ldw	r3,8(r2)
 4012eb4:	e0bffd17 	ldw	r2,-12(fp)
 4012eb8:	1887883a 	add	r3,r3,r2
 4012ebc:	e0bfff17 	ldw	r2,-4(fp)
 4012ec0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 4012ec4:	e0bfff17 	ldw	r2,-4(fp)
 4012ec8:	10c00217 	ldw	r3,8(r2)
 4012ecc:	d0a71b17 	ldw	r2,-25492(gp)
 4012ed0:	1880032e 	bgeu	r3,r2,4012ee0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 4012ed4:	e0bfff17 	ldw	r2,-4(fp)
 4012ed8:	00c00044 	movi	r3,1
 4012edc:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 4012ee0:	e0bffe17 	ldw	r2,-8(fp)
 4012ee4:	e0bfff15 	stw	r2,-4(fp)
  while (alarm != (alt_alarm*) &alt_alarm_list)
 4012ee8:	e0ffff17 	ldw	r3,-4(fp)
 4012eec:	d0a00c04 	addi	r2,gp,-32720
 4012ef0:	18bfcf1e 	bne	r3,r2,4012e30 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 4012ef4:	0001883a 	nop
}
 4012ef8:	0001883a 	nop
 4012efc:	e037883a 	mov	sp,fp
 4012f00:	dfc00117 	ldw	ra,4(sp)
 4012f04:	df000017 	ldw	fp,0(sp)
 4012f08:	dec00204 	addi	sp,sp,8
 4012f0c:	f800283a 	ret

04012f10 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 4012f10:	deffff04 	addi	sp,sp,-4
 4012f14:	df000015 	stw	fp,0(sp)
 4012f18:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 4012f1c:	000170fa 	wrctl	ienable,zero
}
 4012f20:	0001883a 	nop
 4012f24:	e037883a 	mov	sp,fp
 4012f28:	df000017 	ldw	fp,0(sp)
 4012f2c:	dec00104 	addi	sp,sp,4
 4012f30:	f800283a 	ret

04012f34 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 4012f34:	defffb04 	addi	sp,sp,-20
 4012f38:	dfc00415 	stw	ra,16(sp)
 4012f3c:	df000315 	stw	fp,12(sp)
 4012f40:	df000304 	addi	fp,sp,12
 4012f44:	e13ffd15 	stw	r4,-12(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 4012f48:	d0a00417 	ldw	r2,-32752(gp)
 4012f4c:	e0bfff15 	stw	r2,-4(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 4012f50:	00003106 	br	4013018 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 4012f54:	e0bfff17 	ldw	r2,-4(fp)
 4012f58:	10800217 	ldw	r2,8(r2)
 4012f5c:	1009883a 	mov	r4,r2
 4012f60:	40098340 	call	4009834 <strlen>
 4012f64:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 4012f68:	e0bfff17 	ldw	r2,-4(fp)
 4012f6c:	10c00217 	ldw	r3,8(r2)
 4012f70:	e0bffe17 	ldw	r2,-8(fp)
 4012f74:	10bfffc4 	addi	r2,r2,-1
 4012f78:	1885883a 	add	r2,r3,r2
 4012f7c:	10800003 	ldbu	r2,0(r2)
 4012f80:	10803fcc 	andi	r2,r2,255
 4012f84:	1080201c 	xori	r2,r2,128
 4012f88:	10bfe004 	addi	r2,r2,-128
 4012f8c:	10800bd8 	cmpnei	r2,r2,47
 4012f90:	1000031e 	bne	r2,zero,4012fa0 <alt_find_file+0x6c>
    {
      len -= 1;
 4012f94:	e0bffe17 	ldw	r2,-8(fp)
 4012f98:	10bfffc4 	addi	r2,r2,-1
 4012f9c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 4012fa0:	e0bffe17 	ldw	r2,-8(fp)
 4012fa4:	e0fffd17 	ldw	r3,-12(fp)
 4012fa8:	1885883a 	add	r2,r3,r2
 4012fac:	10800003 	ldbu	r2,0(r2)
 4012fb0:	10803fcc 	andi	r2,r2,255
 4012fb4:	1080201c 	xori	r2,r2,128
 4012fb8:	10bfe004 	addi	r2,r2,-128
 4012fbc:	10800be0 	cmpeqi	r2,r2,47
 4012fc0:	1000081e 	bne	r2,zero,4012fe4 <alt_find_file+0xb0>
 4012fc4:	e0bffe17 	ldw	r2,-8(fp)
 4012fc8:	e0fffd17 	ldw	r3,-12(fp)
 4012fcc:	1885883a 	add	r2,r3,r2
 4012fd0:	10800003 	ldbu	r2,0(r2)
 4012fd4:	10803fcc 	andi	r2,r2,255
 4012fd8:	1080201c 	xori	r2,r2,128
 4012fdc:	10bfe004 	addi	r2,r2,-128
 4012fe0:	10000a1e 	bne	r2,zero,401300c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 4012fe4:	e0bfff17 	ldw	r2,-4(fp)
 4012fe8:	10800217 	ldw	r2,8(r2)
 4012fec:	e0fffe17 	ldw	r3,-8(fp)
 4012ff0:	180d883a 	mov	r6,r3
 4012ff4:	e17ffd17 	ldw	r5,-12(fp)
 4012ff8:	1009883a 	mov	r4,r2
 4012ffc:	40132880 	call	4013288 <memcmp>
    if (((name[len] == '/') || (name[len] == '\0')) && 
 4013000:	1000021e 	bne	r2,zero,401300c <alt_find_file+0xd8>
    {
      /* match found */

      return next;
 4013004:	e0bfff17 	ldw	r2,-4(fp)
 4013008:	00000706 	br	4013028 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 401300c:	e0bfff17 	ldw	r2,-4(fp)
 4013010:	10800017 	ldw	r2,0(r2)
 4013014:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) &alt_fs_list)
 4013018:	e0ffff17 	ldw	r3,-4(fp)
 401301c:	d0a00404 	addi	r2,gp,-32752
 4013020:	18bfcc1e 	bne	r3,r2,4012f54 <alt_find_file+0x20>
  }
  
  /* No match found */
  
  return NULL;     
 4013024:	0005883a 	mov	r2,zero
}
 4013028:	e037883a 	mov	sp,fp
 401302c:	dfc00117 	ldw	ra,4(sp)
 4013030:	df000017 	ldw	fp,0(sp)
 4013034:	dec00204 	addi	sp,sp,8
 4013038:	f800283a 	ret

0401303c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 401303c:	defffc04 	addi	sp,sp,-16
 4013040:	df000315 	stw	fp,12(sp)
 4013044:	df000304 	addi	fp,sp,12
 4013048:	e13ffd15 	stw	r4,-12(fp)
  alt_32 i;
  int rc = -EMFILE;
 401304c:	00bffa04 	movi	r2,-24
 4013050:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 4013054:	e03fff15 	stw	zero,-4(fp)
 4013058:	00001706 	br	40130b8 <alt_get_fd+0x7c>
  {
    if (!alt_fd_list[i].dev)
 401305c:	e0bfff17 	ldw	r2,-4(fp)
 4013060:	10c00324 	muli	r3,r2,12
 4013064:	00810074 	movhi	r2,1025
 4013068:	1885883a 	add	r2,r3,r2
 401306c:	1091db17 	ldw	r2,18284(r2)
 4013070:	10000e1e 	bne	r2,zero,40130ac <alt_get_fd+0x70>
    {
      alt_fd_list[i].dev = dev;
 4013074:	e0bfff17 	ldw	r2,-4(fp)
 4013078:	11000324 	muli	r4,r2,12
 401307c:	e0fffd17 	ldw	r3,-12(fp)
 4013080:	00810074 	movhi	r2,1025
 4013084:	2085883a 	add	r2,r4,r2
 4013088:	10d1db15 	stw	r3,18284(r2)
      if (i > alt_max_fd)
 401308c:	d0e00817 	ldw	r3,-32736(gp)
 4013090:	e0bfff17 	ldw	r2,-4(fp)
 4013094:	1880020e 	bge	r3,r2,40130a0 <alt_get_fd+0x64>
      {
        alt_max_fd = i;
 4013098:	e0bfff17 	ldw	r2,-4(fp)
 401309c:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
 40130a0:	e0bfff17 	ldw	r2,-4(fp)
 40130a4:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 40130a8:	00000706 	br	40130c8 <alt_get_fd+0x8c>
  for (i = 0; i < ALT_MAX_FD; i++)
 40130ac:	e0bfff17 	ldw	r2,-4(fp)
 40130b0:	10800044 	addi	r2,r2,1
 40130b4:	e0bfff15 	stw	r2,-4(fp)
 40130b8:	e0bfff17 	ldw	r2,-4(fp)
 40130bc:	10800810 	cmplti	r2,r2,32
 40130c0:	103fe61e 	bne	r2,zero,401305c <alt_get_fd+0x20>
    }
  }

 alt_get_fd_exit:
 40130c4:	0001883a 	nop
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 40130c8:	e0bffe17 	ldw	r2,-8(fp)
}
 40130cc:	e037883a 	mov	sp,fp
 40130d0:	df000017 	ldw	fp,0(sp)
 40130d4:	dec00104 	addi	sp,sp,4
 40130d8:	f800283a 	ret

040130dc <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 40130dc:	defffb04 	addi	sp,sp,-20
 40130e0:	df000415 	stw	fp,16(sp)
 40130e4:	df000404 	addi	fp,sp,16
 40130e8:	e13ffd15 	stw	r4,-12(fp)
 40130ec:	e17ffc15 	stw	r5,-16(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 40130f0:	e0bffc17 	ldw	r2,-16(fp)
 40130f4:	10820070 	cmpltui	r2,r2,2049
 40130f8:	1000021e 	bne	r2,zero,4013104 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 40130fc:	00820004 	movi	r2,2048
 4013100:	e0bffc15 	stw	r2,-16(fp)
  }

  end = ((char*) start) + len;
 4013104:	e0fffd17 	ldw	r3,-12(fp)
 4013108:	e0bffc17 	ldw	r2,-16(fp)
 401310c:	1885883a 	add	r2,r3,r2
 4013110:	e0bffe15 	stw	r2,-8(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 4013114:	e0bffd17 	ldw	r2,-12(fp)
 4013118:	e0bfff15 	stw	r2,-4(fp)
 401311c:	00000506 	br	4013134 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 4013120:	e0bfff17 	ldw	r2,-4(fp)
 4013124:	1000603a 	flushi	r2
  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 4013128:	e0bfff17 	ldw	r2,-4(fp)
 401312c:	10800804 	addi	r2,r2,32
 4013130:	e0bfff15 	stw	r2,-4(fp)
 4013134:	e0ffff17 	ldw	r3,-4(fp)
 4013138:	e0bffe17 	ldw	r2,-8(fp)
 401313c:	18bff836 	bltu	r3,r2,4013120 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 4013140:	e0bffd17 	ldw	r2,-12(fp)
 4013144:	108007cc 	andi	r2,r2,31
 4013148:	10000226 	beq	r2,zero,4013154 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 401314c:	e0bfff17 	ldw	r2,-4(fp)
 4013150:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 4013154:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 4013158:	0001883a 	nop
 401315c:	e037883a 	mov	sp,fp
 4013160:	df000017 	ldw	fp,0(sp)
 4013164:	dec00104 	addi	sp,sp,4
 4013168:	f800283a 	ret

0401316c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 401316c:	defffe04 	addi	sp,sp,-8
 4013170:	df000115 	stw	fp,4(sp)
 4013174:	df000104 	addi	fp,sp,4
 4013178:	e13fff15 	stw	r4,-4(fp)
 401317c:	e0bfff17 	ldw	r2,-4(fp)
 4013180:	10bffe84 	addi	r2,r2,-6
 4013184:	10c00428 	cmpgeui	r3,r2,16
 4013188:	1800191e 	bne	r3,zero,40131f0 <alt_exception_cause_generated_bad_addr+0x84>
 401318c:	100690ba 	slli	r3,r2,2
 4013190:	00810074 	movhi	r2,1025
 4013194:	1885883a 	add	r2,r3,r2
 4013198:	108c6817 	ldw	r2,12704(r2)
 401319c:	1000683a 	jmp	r2
 40131a0:	040131e0 	cmpeqi	r16,zero,1223
 40131a4:	040131e0 	cmpeqi	r16,zero,1223
 40131a8:	040131f0 	cmpltui	r16,zero,1223
 40131ac:	040131f0 	cmpltui	r16,zero,1223
 40131b0:	040131f0 	cmpltui	r16,zero,1223
 40131b4:	040131e0 	cmpeqi	r16,zero,1223
 40131b8:	040131e8 	cmpgeui	r16,zero,1223
 40131bc:	040131f0 	cmpltui	r16,zero,1223
 40131c0:	040131e0 	cmpeqi	r16,zero,1223
 40131c4:	040131e0 	cmpeqi	r16,zero,1223
 40131c8:	040131f0 	cmpltui	r16,zero,1223
 40131cc:	040131e0 	cmpeqi	r16,zero,1223
 40131d0:	040131e8 	cmpgeui	r16,zero,1223
 40131d4:	040131f0 	cmpltui	r16,zero,1223
 40131d8:	040131f0 	cmpltui	r16,zero,1223
 40131dc:	040131e0 	cmpeqi	r16,zero,1223
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 40131e0:	00800044 	movi	r2,1
 40131e4:	00000306 	br	40131f4 <alt_exception_cause_generated_bad_addr+0x88>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 40131e8:	0005883a 	mov	r2,zero
 40131ec:	00000106 	br	40131f4 <alt_exception_cause_generated_bad_addr+0x88>

  default:
    return 0;
 40131f0:	0005883a 	mov	r2,zero
  }
}
 40131f4:	e037883a 	mov	sp,fp
 40131f8:	df000017 	ldw	fp,0(sp)
 40131fc:	dec00104 	addi	sp,sp,4
 4013200:	f800283a 	ret

04013204 <atexit>:
 * Register a function to be performed at exit.
 */

int
atexit (void (*fn) (void))
{
 4013204:	defffd04 	addi	sp,sp,-12
 4013208:	dfc00215 	stw	ra,8(sp)
 401320c:	df000115 	stw	fp,4(sp)
 4013210:	df000104 	addi	fp,sp,4
 4013214:	e13fff15 	stw	r4,-4(fp)
  return __register_exitproc (__et_atexit, fn, NULL, NULL);
 4013218:	000f883a 	mov	r7,zero
 401321c:	000d883a 	mov	r6,zero
 4013220:	e17fff17 	ldw	r5,-4(fp)
 4013224:	0009883a 	mov	r4,zero
 4013228:	40133bc0 	call	40133bc <__register_exitproc>
}
 401322c:	e037883a 	mov	sp,fp
 4013230:	dfc00117 	ldw	ra,4(sp)
 4013234:	df000017 	ldw	fp,0(sp)
 4013238:	dec00204 	addi	sp,sp,8
 401323c:	f800283a 	ret

04013240 <exit>:
 * Exit, flushing stdio buffers if necessary.
 */

void
exit (int code)
{
 4013240:	defffd04 	addi	sp,sp,-12
 4013244:	dfc00215 	stw	ra,8(sp)
 4013248:	df000115 	stw	fp,4(sp)
 401324c:	df000104 	addi	fp,sp,4
 4013250:	e13fff15 	stw	r4,-4(fp)
#ifdef _LITE_EXIT
  /* Refer to comments in __atexit.c for more details of lite exit.  */
  void __call_exitprocs (int, void *) __attribute__((weak));
  if (__call_exitprocs)
#endif
    __call_exitprocs (code, NULL);
 4013254:	000b883a 	mov	r5,zero
 4013258:	e13fff17 	ldw	r4,-4(fp)
 401325c:	40134d40 	call	40134d4 <__call_exitprocs>
#ifndef WANT_SMALL_STDIO        /* IntelSpecific */
  if (_GLOBAL_REENT->__cleanup)
 4013260:	d0a00117 	ldw	r2,-32764(gp)
 4013264:	10800f17 	ldw	r2,60(r2)
 4013268:	10000526 	beq	r2,zero,4013280 <exit+0x40>
    (*_GLOBAL_REENT->__cleanup) (_GLOBAL_REENT);
 401326c:	d0a00117 	ldw	r2,-32764(gp)
 4013270:	10800f17 	ldw	r2,60(r2)
 4013274:	d0e00117 	ldw	r3,-32764(gp)
 4013278:	1809883a 	mov	r4,r3
 401327c:	103ee83a 	callr	r2
#endif                          /* IntelSpecific */
  _exit (code);
 4013280:	e13fff17 	ldw	r4,-4(fp)
 4013284:	401091c0 	call	401091c <_exit>

04013288 <memcmp>:

int
memcmp (const void *m1,
	const void *m2,
	size_t n)
{
 4013288:	defff804 	addi	sp,sp,-32
 401328c:	df000715 	stw	fp,28(sp)
 4013290:	df000704 	addi	fp,sp,28
 4013294:	e13ffb15 	stw	r4,-20(fp)
 4013298:	e17ffa15 	stw	r5,-24(fp)
 401329c:	e1bff915 	stw	r6,-28(fp)
      s1++;
      s2++;
    }
  return 0;
#else  
  unsigned char *s1 = (unsigned char *) m1;
 40132a0:	e0bffb17 	ldw	r2,-20(fp)
 40132a4:	e0bfff15 	stw	r2,-4(fp)
  unsigned char *s2 = (unsigned char *) m2;
 40132a8:	e0bffa17 	ldw	r2,-24(fp)
 40132ac:	e0bffe15 	stw	r2,-8(fp)
  unsigned long *a2;

  /* If the size is too small, or either pointer is unaligned,
     then we punt to the byte compare loop.  Hopefully this will
     not turn up in inner loops.  */
  if (!TOO_SMALL(n) && !UNALIGNED(s1,s2))
 40132b0:	e0bff917 	ldw	r2,-28(fp)
 40132b4:	10800130 	cmpltui	r2,r2,4
 40132b8:	1000371e 	bne	r2,zero,4013398 <memcmp+0x110>
 40132bc:	e0ffff17 	ldw	r3,-4(fp)
 40132c0:	e0bffe17 	ldw	r2,-8(fp)
 40132c4:	1884b03a 	or	r2,r3,r2
 40132c8:	108000cc 	andi	r2,r2,3
 40132cc:	1000321e 	bne	r2,zero,4013398 <memcmp+0x110>
    {
      /* Otherwise, load and compare the blocks of memory one 
         word at a time.  */
      a1 = (unsigned long*) s1;
 40132d0:	e0bfff17 	ldw	r2,-4(fp)
 40132d4:	e0bffd15 	stw	r2,-12(fp)
      a2 = (unsigned long*) s2;
 40132d8:	e0bffe17 	ldw	r2,-8(fp)
 40132dc:	e0bffc15 	stw	r2,-16(fp)
      while (n >= LBLOCKSIZE)
 40132e0:	00000e06 	br	401331c <memcmp+0x94>
        {
          if (*a1 != *a2) 
 40132e4:	e0bffd17 	ldw	r2,-12(fp)
 40132e8:	10c00017 	ldw	r3,0(r2)
 40132ec:	e0bffc17 	ldw	r2,-16(fp)
 40132f0:	10800017 	ldw	r2,0(r2)
 40132f4:	18800d1e 	bne	r3,r2,401332c <memcmp+0xa4>
   	    break;
          a1++;
 40132f8:	e0bffd17 	ldw	r2,-12(fp)
 40132fc:	10800104 	addi	r2,r2,4
 4013300:	e0bffd15 	stw	r2,-12(fp)
          a2++;
 4013304:	e0bffc17 	ldw	r2,-16(fp)
 4013308:	10800104 	addi	r2,r2,4
 401330c:	e0bffc15 	stw	r2,-16(fp)
          n -= LBLOCKSIZE;
 4013310:	e0bff917 	ldw	r2,-28(fp)
 4013314:	10bfff04 	addi	r2,r2,-4
 4013318:	e0bff915 	stw	r2,-28(fp)
      while (n >= LBLOCKSIZE)
 401331c:	e0bff917 	ldw	r2,-28(fp)
 4013320:	10800128 	cmpgeui	r2,r2,4
 4013324:	103fef1e 	bne	r2,zero,40132e4 <memcmp+0x5c>
 4013328:	00000106 	br	4013330 <memcmp+0xa8>
   	    break;
 401332c:	0001883a 	nop
        }

      /* check m mod LBLOCKSIZE remaining characters */

      s1 = (unsigned char*)a1;
 4013330:	e0bffd17 	ldw	r2,-12(fp)
 4013334:	e0bfff15 	stw	r2,-4(fp)
      s2 = (unsigned char*)a2;
 4013338:	e0bffc17 	ldw	r2,-16(fp)
 401333c:	e0bffe15 	stw	r2,-8(fp)
    }

  while (n--)
 4013340:	00001506 	br	4013398 <memcmp+0x110>
    {
      if (*s1 != *s2)
 4013344:	e0bfff17 	ldw	r2,-4(fp)
 4013348:	10c00003 	ldbu	r3,0(r2)
 401334c:	e0bffe17 	ldw	r2,-8(fp)
 4013350:	10800003 	ldbu	r2,0(r2)
 4013354:	18c03fcc 	andi	r3,r3,255
 4013358:	10803fcc 	andi	r2,r2,255
 401335c:	18800826 	beq	r3,r2,4013380 <memcmp+0xf8>
	return *s1 - *s2;
 4013360:	e0bfff17 	ldw	r2,-4(fp)
 4013364:	10800003 	ldbu	r2,0(r2)
 4013368:	10c03fcc 	andi	r3,r2,255
 401336c:	e0bffe17 	ldw	r2,-8(fp)
 4013370:	10800003 	ldbu	r2,0(r2)
 4013374:	10803fcc 	andi	r2,r2,255
 4013378:	1885c83a 	sub	r2,r3,r2
 401337c:	00000b06 	br	40133ac <memcmp+0x124>
      s1++;
 4013380:	e0bfff17 	ldw	r2,-4(fp)
 4013384:	10800044 	addi	r2,r2,1
 4013388:	e0bfff15 	stw	r2,-4(fp)
      s2++;
 401338c:	e0bffe17 	ldw	r2,-8(fp)
 4013390:	10800044 	addi	r2,r2,1
 4013394:	e0bffe15 	stw	r2,-8(fp)
  while (n--)
 4013398:	e0bff917 	ldw	r2,-28(fp)
 401339c:	10ffffc4 	addi	r3,r2,-1
 40133a0:	e0fff915 	stw	r3,-28(fp)
 40133a4:	103fe71e 	bne	r2,zero,4013344 <memcmp+0xbc>
    }

  return 0;
 40133a8:	0005883a 	mov	r2,zero
#endif /* not PREFER_SIZE_OVER_SPEED */
}
 40133ac:	e037883a 	mov	sp,fp
 40133b0:	df000017 	ldw	fp,0(sp)
 40133b4:	dec00104 	addi	sp,sp,4
 40133b8:	f800283a 	ret

040133bc <__register_exitproc>:
int
__register_exitproc (int type,
	void (*fn) (void),
	void *arg,
	void *d)
{
 40133bc:	defff904 	addi	sp,sp,-28
 40133c0:	df000615 	stw	fp,24(sp)
 40133c4:	dc000515 	stw	r16,20(sp)
 40133c8:	df000604 	addi	fp,sp,24
 40133cc:	e13ffd15 	stw	r4,-12(fp)
 40133d0:	e17ffc15 	stw	r5,-16(fp)
 40133d4:	e1bffb15 	stw	r6,-20(fp)
 40133d8:	e1fffa15 	stw	r7,-24(fp)

#ifndef __SINGLE_THREAD__
  __lock_acquire_recursive(__atexit_recursive_mutex);
#endif

  p = _GLOBAL_ATEXIT;
 40133dc:	d0a00117 	ldw	r2,-32764(gp)
 40133e0:	14005217 	ldw	r16,328(r2)
  if (p == NULL)
 40133e4:	8000041e 	bne	r16,zero,40133f8 <__register_exitproc+0x3c>
    {
      _GLOBAL_ATEXIT = p = _GLOBAL_ATEXIT0;
 40133e8:	d0a00117 	ldw	r2,-32764(gp)
 40133ec:	14005304 	addi	r16,r2,332
 40133f0:	d0a00117 	ldw	r2,-32764(gp)
 40133f4:	14005215 	stw	r16,328(r2)
      extern struct _on_exit_args * const __on_exit_args _ATTRIBUTE ((weak));
      if (&__on_exit_args != NULL)
	p->_on_exit_args_ptr = __on_exit_args;
#endif	/* def _REENT_SMALL */
    }
  if (p->_ind >= _ATEXIT_SIZE)
 40133f8:	80800117 	ldw	r2,4(r16)
 40133fc:	10800810 	cmplti	r2,r2,32
 4013400:	1000021e 	bne	r2,zero,401340c <__register_exitproc+0x50>
    {
#if !defined (_ATEXIT_DYNAMIC_ALLOC) || !defined (MALLOC_PROVIDED)
#ifndef __SINGLE_THREAD__
      __lock_release_recursive(__atexit_recursive_mutex);
#endif
      return -1;
 4013404:	00bfffc4 	movi	r2,-1
 4013408:	00002d06 	br	40134c0 <__register_exitproc+0x104>
      p->_on_exit_args_ptr = NULL;
#endif
#endif
    }

  if (type != __et_atexit)
 401340c:	e0bffd17 	ldw	r2,-12(fp)
 4013410:	10002226 	beq	r2,zero,401349c <__register_exitproc+0xe0>
	  args->_is_cxa = 0;
	  p->_on_exit_args_ptr = args;
#endif
	}
#else
      args = &p->_on_exit_args;
 4013414:	80802204 	addi	r2,r16,136
 4013418:	e0bffe15 	stw	r2,-8(fp)
#endif
      args->_fnargs[p->_ind] = arg;
 401341c:	80800117 	ldw	r2,4(r16)
 4013420:	e0fffe17 	ldw	r3,-8(fp)
 4013424:	100490ba 	slli	r2,r2,2
 4013428:	1885883a 	add	r2,r3,r2
 401342c:	e0fffb17 	ldw	r3,-20(fp)
 4013430:	10c00015 	stw	r3,0(r2)
      args->_fntypes |= (1 << p->_ind);
 4013434:	e0bffe17 	ldw	r2,-8(fp)
 4013438:	10804017 	ldw	r2,256(r2)
 401343c:	80c00117 	ldw	r3,4(r16)
 4013440:	01000044 	movi	r4,1
 4013444:	20c6983a 	sll	r3,r4,r3
 4013448:	10c6b03a 	or	r3,r2,r3
 401344c:	e0bffe17 	ldw	r2,-8(fp)
 4013450:	10c04015 	stw	r3,256(r2)
      args->_dso_handle[p->_ind] = d;
 4013454:	80800117 	ldw	r2,4(r16)
 4013458:	e0fffe17 	ldw	r3,-8(fp)
 401345c:	10800804 	addi	r2,r2,32
 4013460:	100490ba 	slli	r2,r2,2
 4013464:	1885883a 	add	r2,r3,r2
 4013468:	e0fffa17 	ldw	r3,-24(fp)
 401346c:	10c00015 	stw	r3,0(r2)
      if (type == __et_cxa)
 4013470:	e0bffd17 	ldw	r2,-12(fp)
 4013474:	10800098 	cmpnei	r2,r2,2
 4013478:	1000081e 	bne	r2,zero,401349c <__register_exitproc+0xe0>
	args->_is_cxa |= (1 << p->_ind);
 401347c:	e0bffe17 	ldw	r2,-8(fp)
 4013480:	10804117 	ldw	r2,260(r2)
 4013484:	80c00117 	ldw	r3,4(r16)
 4013488:	01000044 	movi	r4,1
 401348c:	20c6983a 	sll	r3,r4,r3
 4013490:	10c6b03a 	or	r3,r2,r3
 4013494:	e0bffe17 	ldw	r2,-8(fp)
 4013498:	10c04115 	stw	r3,260(r2)
    }
  p->_fns[p->_ind++] = fn;
 401349c:	80800117 	ldw	r2,4(r16)
 40134a0:	10c00044 	addi	r3,r2,1
 40134a4:	80c00115 	stw	r3,4(r16)
 40134a8:	10800084 	addi	r2,r2,2
 40134ac:	100490ba 	slli	r2,r2,2
 40134b0:	8085883a 	add	r2,r16,r2
 40134b4:	e0fffc17 	ldw	r3,-16(fp)
 40134b8:	10c00015 	stw	r3,0(r2)
#ifndef __SINGLE_THREAD__
  __lock_release_recursive(__atexit_recursive_mutex);
#endif
  return 0;
 40134bc:	0005883a 	mov	r2,zero
}
 40134c0:	e6ffff04 	addi	sp,fp,-4
 40134c4:	df000117 	ldw	fp,4(sp)
 40134c8:	dc000017 	ldw	r16,0(sp)
 40134cc:	dec00204 	addi	sp,sp,8
 40134d0:	f800283a 	ret

040134d4 <__call_exitprocs>:
 * otherwise only the handlers from that DSO are called.
 */

void 
__call_exitprocs (int code, void *d)
{
 40134d4:	defff504 	addi	sp,sp,-44
 40134d8:	dfc00a15 	stw	ra,40(sp)
 40134dc:	df000915 	stw	fp,36(sp)
 40134e0:	dc800815 	stw	r18,32(sp)
 40134e4:	dc400715 	stw	r17,28(sp)
 40134e8:	dc000615 	stw	r16,24(sp)
 40134ec:	df000904 	addi	fp,sp,36
 40134f0:	e13ff815 	stw	r4,-32(fp)
 40134f4:	e17ff715 	stw	r5,-36(fp)
  __lock_acquire_recursive(__atexit_recursive_mutex);
#endif

 restart:

  p = _GLOBAL_ATEXIT;
 40134f8:	d0a00117 	ldw	r2,-32764(gp)
 40134fc:	14005217 	ldw	r16,328(r2)
  lastp = &_GLOBAL_ATEXIT;
 4013500:	d0a00117 	ldw	r2,-32764(gp)
 4013504:	10805204 	addi	r2,r2,328
 4013508:	e0bffc15 	stw	r2,-16(fp)
  while (p)
 401350c:	80004b26 	beq	r16,zero,401363c <__call_exitprocs+0x168>
    {
#ifdef _REENT_SMALL
      args = p->_on_exit_args_ptr;
#else
      args = &p->_on_exit_args;
 4013510:	84802204 	addi	r18,r16,136
#endif
      for (n = p->_ind - 1; n >= 0; n--)
 4013514:	80800117 	ldw	r2,4(r16)
 4013518:	147fffc4 	addi	r17,r2,-1
 401351c:	00004506 	br	4013634 <__call_exitprocs+0x160>
	{
	  int ind;

	  i = 1 << n;
 4013520:	00800044 	movi	r2,1
 4013524:	1444983a 	sll	r2,r2,r17
 4013528:	e0bffb15 	stw	r2,-20(fp)

	  /* Skip functions not from this dso.  */
	  if (d && (!args || args->_dso_handle[n] != d))
 401352c:	e0bff717 	ldw	r2,-36(fp)
 4013530:	10000726 	beq	r2,zero,4013550 <__call_exitprocs+0x7c>
 4013534:	90003b26 	beq	r18,zero,4013624 <__call_exitprocs+0x150>
 4013538:	88800804 	addi	r2,r17,32
 401353c:	100490ba 	slli	r2,r2,2
 4013540:	9085883a 	add	r2,r18,r2
 4013544:	10800017 	ldw	r2,0(r2)
 4013548:	e0fff717 	ldw	r3,-36(fp)
 401354c:	1880351e 	bne	r3,r2,4013624 <__call_exitprocs+0x150>
	    continue;

	  /* Remove the function now to protect against the
	     function calling exit recursively.  */
	  fn = p->_fns[n];
 4013550:	88800084 	addi	r2,r17,2
 4013554:	100490ba 	slli	r2,r2,2
 4013558:	8085883a 	add	r2,r16,r2
 401355c:	10800017 	ldw	r2,0(r2)
 4013560:	e0bffa15 	stw	r2,-24(fp)
	  if (n == p->_ind - 1)
 4013564:	80800117 	ldw	r2,4(r16)
 4013568:	10bfffc4 	addi	r2,r2,-1
 401356c:	8880041e 	bne	r17,r2,4013580 <__call_exitprocs+0xac>
	    p->_ind--;
 4013570:	80800117 	ldw	r2,4(r16)
 4013574:	10bfffc4 	addi	r2,r2,-1
 4013578:	80800115 	stw	r2,4(r16)
 401357c:	00000406 	br	4013590 <__call_exitprocs+0xbc>
	  else
	    p->_fns[n] = NULL;
 4013580:	88800084 	addi	r2,r17,2
 4013584:	100490ba 	slli	r2,r2,2
 4013588:	8085883a 	add	r2,r16,r2
 401358c:	10000015 	stw	zero,0(r2)

	  /* Skip functions that have already been called.  */
	  if (!fn)
 4013590:	e0bffa17 	ldw	r2,-24(fp)
 4013594:	10002526 	beq	r2,zero,401362c <__call_exitprocs+0x158>
	    continue;

	  ind = p->_ind;
 4013598:	80800117 	ldw	r2,4(r16)
 401359c:	e0bff915 	stw	r2,-28(fp)

	  /* Call the function.  */
	  if (!args || (args->_fntypes & i) == 0)
 40135a0:	90000426 	beq	r18,zero,40135b4 <__call_exitprocs+0xe0>
 40135a4:	90c04017 	ldw	r3,256(r18)
 40135a8:	e0bffb17 	ldw	r2,-20(fp)
 40135ac:	1884703a 	and	r2,r3,r2
 40135b0:	1000031e 	bne	r2,zero,40135c0 <__call_exitprocs+0xec>
	    fn ();
 40135b4:	e0bffa17 	ldw	r2,-24(fp)
 40135b8:	103ee83a 	callr	r2
 40135bc:	00001206 	br	4013608 <__call_exitprocs+0x134>
	  else if ((args->_is_cxa & i) == 0)
 40135c0:	90c04117 	ldw	r3,260(r18)
 40135c4:	e0bffb17 	ldw	r2,-20(fp)
 40135c8:	1884703a 	and	r2,r3,r2
 40135cc:	1000081e 	bne	r2,zero,40135f0 <__call_exitprocs+0x11c>
	    (*((void (*)(int, void *)) fn))(code, args->_fnargs[n]);
 40135d0:	880490ba 	slli	r2,r17,2
 40135d4:	9085883a 	add	r2,r18,r2
 40135d8:	10c00017 	ldw	r3,0(r2)
 40135dc:	e0bffa17 	ldw	r2,-24(fp)
 40135e0:	180b883a 	mov	r5,r3
 40135e4:	e13ff817 	ldw	r4,-32(fp)
 40135e8:	103ee83a 	callr	r2
 40135ec:	00000606 	br	4013608 <__call_exitprocs+0x134>
	  else
	    (*((void (*)(void *)) fn))(args->_fnargs[n]);
 40135f0:	880490ba 	slli	r2,r17,2
 40135f4:	9085883a 	add	r2,r18,r2
 40135f8:	10c00017 	ldw	r3,0(r2)
 40135fc:	e0bffa17 	ldw	r2,-24(fp)
 4013600:	1809883a 	mov	r4,r3
 4013604:	103ee83a 	callr	r2

	  /* The function we called call atexit and registered another
	     function (or functions).  Call these new functions before
	     continuing with the already registered functions.  */
	  if (ind != p->_ind || *lastp != p)
 4013608:	80800117 	ldw	r2,4(r16)
 401360c:	e0fff917 	ldw	r3,-28(fp)
 4013610:	18bfb91e 	bne	r3,r2,40134f8 <__call_exitprocs+0x24>
 4013614:	e0bffc17 	ldw	r2,-16(fp)
 4013618:	10800017 	ldw	r2,0(r2)
 401361c:	80800426 	beq	r16,r2,4013630 <__call_exitprocs+0x15c>
	    goto restart;
 4013620:	003fb506 	br	40134f8 <__call_exitprocs+0x24>
	    continue;
 4013624:	0001883a 	nop
 4013628:	00000106 	br	4013630 <__call_exitprocs+0x15c>
	    continue;
 401362c:	0001883a 	nop
      for (n = p->_ind - 1; n >= 0; n--)
 4013630:	8c7fffc4 	addi	r17,r17,-1
 4013634:	883fba0e 	bge	r17,zero,4013520 <__call_exitprocs+0x4c>
	}

#if !defined (_ATEXIT_DYNAMIC_ALLOC) || !defined (MALLOC_PROVIDED)
      break;
 4013638:	0001883a 	nop
    }
#ifndef __SINGLE_THREAD__
  __lock_release_recursive(__atexit_recursive_mutex);
#endif

}
 401363c:	0001883a 	nop
 4013640:	e6fffd04 	addi	sp,fp,-12
 4013644:	dfc00417 	ldw	ra,16(sp)
 4013648:	df000317 	ldw	fp,12(sp)
 401364c:	dc800217 	ldw	r18,8(sp)
 4013650:	dc400117 	ldw	r17,4(sp)
 4013654:	dc000017 	ldw	r16,0(sp)
 4013658:	dec00504 	addi	sp,sp,20
 401365c:	f800283a 	ret
